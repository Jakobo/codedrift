

import { TypedDocumentNode } from '@graphql-typed-document-node/core'
import { gql } from 'graphql-tag'

/* tslint:disable */
/* eslint-disable */

const VariableName = ' $1fcbcbff-3e78-462f-b45c-668a3e09bfd8'

class Variable<T, Name extends string> {
  private [VariableName]: Name
  private _type?: T

  constructor(name: Name, private readonly isRequired?: boolean) {
    this[VariableName] = name
  }
}

type ArrayInput<I> = [I] extends [$Atomic | null | undefined]
  ? never
  : ReadonlyArray<VariabledInput<I>>

// the array wrapper prevents distributive conditional types
// https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types
type VariabledInput<T> = [T] extends [$Atomic | null | undefined]
  ? Variable<T, any> | T
  : T extends ReadonlyArray<infer I>
  ? Variable<T, any> | T | ArrayInput<I>
  : T extends Record<string, any>
  ? Variable<T, any> | { [K in keyof T]: VariabledInput<T[K]> } | T
  : never

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void
  ? I
  : never

/**
 * Creates a new query variable
 *
 * @param name The variable name
 */
export const $ = <Type, Name extends string>(name: Name): Variable<Type, Name> => {
  return new Variable(name)
}

/**
 * Creates a new query variable. A value will be required even if the input is optional
 *
 * @param name The variable name
 */
export const $$ = <Type, Name extends string>(name: Name): Variable<NonNullable<Type>, Name> => {
  return new Variable(name, true)
}

type SelectOptions = {
  argTypes?: { [key: string]: string }
  args?: { [key: string]: any }
  selection?: Selection<any>
}

class $Field<Name extends string, Type, Vars = {}> {
  public kind: 'field' = 'field'
  public type!: Type

  public vars!: Vars
  public alias: string | null = null

  constructor(public name: Name, public options: SelectOptions) {}

  as<Rename extends string>(alias: Rename): $Field<Rename, Type, Vars> {
    const f = new $Field(this.name, this.options)
    f.alias = alias
    return f as any
  }
}

class $Base<Name extends string> {
  constructor(private $$name: Name) {}

  protected $_select<Key extends string>(
    name: Key,
    options: SelectOptions = {}
  ): $Field<Key, any, any> {
    return new $Field(name, options)
  }
}

class $Union<T, Name extends String> {
  private type!: T
  private name!: Name

  constructor(private selectorClasses: { [K in keyof T]: { new (): T[K] } }) {}
  $on<Type extends keyof T, Sel extends Selection<T[Type]>>(
    alternative: Type,
    selectorFn: (selector: T[Type]) => [...Sel]
  ): $UnionSelection<GetOutput<Sel>, GetVariables<Sel>> {
    const selection = selectorFn(new this.selectorClasses[alternative]())

    return new $UnionSelection(alternative as string, selection)
  }
}

class $Interface<T, Name extends string> extends $Base<Name> {
  private type!: T
  private name!: Name

  constructor(private selectorClasses: { [K in keyof T]: { new (): T[K] } }, $$name: Name) {
    super($$name)
  }
  $on<Type extends keyof T, Sel extends Selection<T[Type]>>(
    alternative: Type,
    selectorFn: (selector: T[Type]) => [...Sel]
  ): $UnionSelection<GetOutput<Sel>, GetVariables<Sel>> {
    const selection = selectorFn(new this.selectorClasses[alternative]())

    return new $UnionSelection(alternative as string, selection)
  }
}

class $UnionSelection<T, Vars> {
  public kind: 'union' = 'union'
  private vars!: Vars
  constructor(public alternativeName: string, public alternativeSelection: Selection<T>) {}
}

type Selection<_any> = ReadonlyArray<$Field<any, any, any> | $UnionSelection<any, any>>

type NeverNever<T> = [T] extends [never] ? {} : T

export type GetOutput<X extends Selection<any>> = UnionToIntersection<
  {
    [I in keyof X]: X[I] extends $Field<infer Name, infer Type, any> ? { [K in Name]: Type } : never
  }[keyof X & number]
> &
  NeverNever<
    {
      [I in keyof X]: X[I] extends $UnionSelection<infer Type, any> ? Type : never
    }[keyof X & number]
  >

type PossiblyOptionalVar<VName extends string, VType> = undefined extends VType
  ? { [key in VName]?: VType }
  : { [key in VName]: VType }

type ExtractInputVariables<Inputs> = Inputs extends Variable<infer VType, infer VName>
  ? PossiblyOptionalVar<VName, VType>
  : Inputs extends $Atomic
  ? {}
  : Inputs extends any[] | readonly any[]
  ? UnionToIntersection<
      { [K in keyof Inputs]: ExtractInputVariables<Inputs[K]> }[keyof Inputs & number]
    >
  : UnionToIntersection<{ [K in keyof Inputs]: ExtractInputVariables<Inputs[K]> }[keyof Inputs]>

export type GetVariables<Sel extends Selection<any>, ExtraVars = {}> = UnionToIntersection<
  {
    [I in keyof Sel]: Sel[I] extends $Field<any, any, infer Vars>
      ? Vars
      : Sel[I] extends $UnionSelection<any, infer Vars>
      ? Vars
      : never
  }[keyof Sel & number]
> &
  ExtractInputVariables<ExtraVars>

type ArgVarType = {
  type: string
  isRequired: boolean
  array: {
    isRequired: boolean
  } | null
}

const arrRegex = /\[(.*?)\]/

/**
 * Converts graphql string type to `ArgVarType`
 * @param input
 * @returns
 */
function getArgVarType(input: string): ArgVarType {
  const array = input.includes('[')
    ? {
        isRequired: input.endsWith('!'),
      }
    : null

  const type = array ? arrRegex.exec(input)![1] : input
  const isRequired = type.endsWith('!')

  return {
    array,
    isRequired: isRequired,
    type: type.replace('!', ''),
  }
}

function fieldToQuery(prefix: string, field: $Field<any, any, any>) {
  const variables = new Map<string, { variable: Variable<any, any>; type: ArgVarType }>()

  function stringifyArgs(
    args: any,
    argTypes: { [key: string]: string },
    argVarType?: ArgVarType
  ): string {
    switch (typeof args) {
      case 'string':
        const cleanType = argVarType!.type
        if ($Enums.has(cleanType!)) return args
        else return JSON.stringify(args)
      case 'number':
      case 'boolean':
        return JSON.stringify(args)
      default:
        if (args == null) return 'null'
        if (VariableName in (args as any)) {
          if (!argVarType) throw new Error('Cannot use variabe as sole unnamed field argument')
          const variable = args as Variable<any, any>
          const argVarName = variable[VariableName]
          variables.set(argVarName, { type: argVarType, variable: variable })
          return '$' + argVarName
        }
        if (Array.isArray(args))
          return '[' + args.map(arg => stringifyArgs(arg, argTypes, argVarType)).join(',') + ']'
        const wrapped = (content: string) => (argVarType ? '{' + content + '}' : content)
        return wrapped(
          Array.from(Object.entries(args))
            .map(([key, val]) => {
              if (!argTypes[key]) {
                throw new Error(`Argument type for ${key} not found`)
              }
              const cleanType = argTypes[key].replace('[', '').replace(']', '').replace('!', '')
              return (
                key + ':' + stringifyArgs(val, $InputTypes[cleanType], getArgVarType(argTypes[key]))
              )
            })
            .join(',')
        )
    }
  }

  function extractTextAndVars(field: $Field<any, any, any> | $UnionSelection<any, any>) {
    if (field.kind === 'field') {
      let retVal = field.name
      if (field.alias) retVal = field.alias + ':' + retVal
      const args = field.options.args,
        argTypes = field.options.argTypes
      if (args && Object.keys(args).length > 0) {
        retVal += '(' + stringifyArgs(args, argTypes!) + ')'
      }
      let sel = field.options.selection
      if (sel) {
        retVal += '{'
        for (let subField of sel) {
          retVal += extractTextAndVars(subField)
        }
        retVal += '}'
      }
      return retVal + ' '
    } else if (field.kind === 'union') {
      let retVal = '... on ' + field.alternativeName + ' {'
      for (let subField of field.alternativeSelection) {
        retVal += extractTextAndVars(subField)
      }
      retVal += '}'

      return retVal + ' '
    } else {
      throw new Error('Uknown field kind')
    }
  }

  const queryRaw = extractTextAndVars(field)!

  const queryBody = queryRaw.substring(queryRaw.indexOf('{'))

  const varList = Array.from(variables.entries())
  let ret = prefix
  if (varList.length) {
    ret +=
      '(' +
      varList
        .map(([name, { type: kind, variable }]) => {
          let type = kind.array ? '[' : ''
          type += kind.type
          if (kind.isRequired) type += '!'
          if (kind.array) type += kind.array.isRequired ? ']!' : ']'

          if (!type.endsWith('!') && (variable as any).isRequired === true) {
            type += '!'
          }

          return '$' + name + ':' + type
        })
        .join(',') +
      ')'
  }
  ret += queryBody

  return ret
}

export type OutputTypeOf<T> = T extends $Base<any>
  ? { [K in keyof T]?: OutputTypeOf<T[K]> }
  : [T] extends [$Field<any, infer FieldType, any>]
  ? FieldType
  : [T] extends [(selFn: (arg: infer Inner) => any) => any]
  ? OutputTypeOf<Inner>
  : [T] extends [(args: any, selFn: (arg: infer Inner) => any) => any]
  ? OutputTypeOf<Inner>
  : never

export function fragment<T, Sel extends Selection<T>>(
  GQLType: { new (): T },
  selectFn: (selector: T) => [...Sel]
) {
  return selectFn(new GQLType())
}

type $Atomic = string | ActorType | AuditLogOrderField | CheckAnnotationLevel | CheckConclusionState | CheckRunState | CheckRunType | CheckStatusState | CollaboratorAffiliation | CommentAuthorAssociation | CommentCannotUpdateReason | CommitContributionOrderField | ComparisonStatus | ContributionLevel | DefaultRepositoryPermissionField | DependencyGraphEcosystem | DeploymentOrderField | DeploymentProtectionRuleType | DeploymentReviewState | DeploymentState | DeploymentStatusState | DiffSide | DiscussionOrderField | DiscussionPollOptionOrderField | DismissReason | EnterpriseAdministratorInvitationOrderField | EnterpriseAdministratorRole | EnterpriseAllowPrivateRepositoryForkingPolicyValue | EnterpriseDefaultRepositoryPermissionSettingValue | EnterpriseEnabledDisabledSettingValue | EnterpriseEnabledSettingValue | EnterpriseMemberOrderField | EnterpriseMembersCanCreateRepositoriesSettingValue | EnterpriseMembersCanMakePurchasesSettingValue | EnterpriseServerInstallationOrderField | EnterpriseServerUserAccountEmailOrderField | EnterpriseServerUserAccountOrderField | EnterpriseServerUserAccountsUploadOrderField | EnterpriseServerUserAccountsUploadSyncState | EnterpriseUserAccountMembershipRole | EnterpriseUserDeployment | FileViewedState | FundingPlatform | GistOrderField | GistPrivacy | GitSignatureState | IdentityProviderConfigurationState | IpAllowListEnabledSettingValue | IpAllowListEntryOrderField | IpAllowListForInstalledAppsEnabledSettingValue | IssueClosedStateReason | IssueCommentOrderField | IssueOrderField | IssueState | IssueStateReason | IssueTimelineItemsItemType | LabelOrderField | LanguageOrderField | LockReason | MergeCommitMessage | MergeCommitTitle | MergeableState | MigrationSourceType | MigrationState | MilestoneOrderField | MilestoneState | NotificationRestrictionSettingValue | OIDCProviderType | OauthApplicationCreateAuditEntryState | OperationType | OrderDirection | OrgAddMemberAuditEntryPermission | OrgCreateAuditEntryBillingPlan | OrgEnterpriseOwnerOrderField | OrgRemoveBillingManagerAuditEntryReason | OrgRemoveMemberAuditEntryMembershipType | OrgRemoveMemberAuditEntryReason | OrgRemoveOutsideCollaboratorAuditEntryMembershipType | OrgRemoveOutsideCollaboratorAuditEntryReason | OrgUpdateDefaultRepositoryPermissionAuditEntryPermission | OrgUpdateMemberAuditEntryPermission | OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility | OrganizationInvitationRole | OrganizationInvitationType | OrganizationMemberRole | OrganizationMembersCanCreateRepositoriesSettingValue | OrganizationOrderField | PackageFileOrderField | PackageOrderField | PackageType | PackageVersionOrderField | PatchStatus | PinnableItemType | PinnedDiscussionGradient | PinnedDiscussionPattern | ProjectCardArchivedState | ProjectCardState | ProjectColumnPurpose | ProjectItemType | ProjectNextFieldType | ProjectNextOrderField | ProjectOrderField | ProjectState | ProjectTemplate | ProjectV2FieldOrderField | ProjectV2FieldType | ProjectV2ItemFieldValueOrderField | ProjectV2ItemOrderField | ProjectV2ItemType | ProjectV2OrderField | ProjectV2ViewLayout | ProjectV2ViewOrderField | ProjectViewLayout | PullRequestMergeMethod | PullRequestOrderField | PullRequestReviewCommentState | PullRequestReviewDecision | PullRequestReviewEvent | PullRequestReviewState | PullRequestState | PullRequestTimelineItemsItemType | PullRequestUpdateState | ReactionContent | ReactionOrderField | RefOrderField | ReleaseOrderField | RepoAccessAuditEntryVisibility | RepoAddMemberAuditEntryVisibility | RepoArchivedAuditEntryVisibility | RepoChangeMergeSettingAuditEntryMergeType | RepoCreateAuditEntryVisibility | RepoDestroyAuditEntryVisibility | RepoRemoveMemberAuditEntryVisibility | ReportedContentClassifiers | RepositoryAffiliation | RepositoryContributionType | RepositoryInteractionLimit | RepositoryInteractionLimitExpiry | RepositoryInteractionLimitOrigin | RepositoryInvitationOrderField | RepositoryLockReason | RepositoryMigrationOrderDirection | RepositoryMigrationOrderField | RepositoryOrderField | RepositoryPermission | RepositoryPrivacy | RepositoryVisibility | RepositoryVulnerabilityAlertDependencyScope | RepositoryVulnerabilityAlertState | RequestableCheckStatusState | RoleInOrganization | SamlDigestAlgorithm | SamlSignatureAlgorithm | SavedReplyOrderField | SearchType | SecurityAdvisoryClassification | SecurityAdvisoryEcosystem | SecurityAdvisoryIdentifierType | SecurityAdvisoryOrderField | SecurityAdvisorySeverity | SecurityVulnerabilityOrderField | SponsorOrderField | SponsorableOrderField | SponsorsActivityAction | SponsorsActivityOrderField | SponsorsActivityPeriod | SponsorsGoalKind | SponsorsTierOrderField | SponsorshipNewsletterOrderField | SponsorshipOrderField | SponsorshipPrivacy | SquashMergeCommitMessage | SquashMergeCommitTitle | StarOrderField | StatusState | SubscriptionState | TeamDiscussionCommentOrderField | TeamDiscussionOrderField | TeamMemberOrderField | TeamMemberRole | TeamMembershipType | TeamOrderField | TeamPrivacy | TeamRepositoryOrderField | TeamRole | TopicSuggestionDeclineReason | TrackedIssueStates | UserBlockDuration | UserStatusOrderField | VerifiableDomainOrderField | WorkflowRunOrderField | number | boolean

let $Enums = new Set<string>(["ActorType","AuditLogOrderField","CheckAnnotationLevel","CheckConclusionState","CheckRunState","CheckRunType","CheckStatusState","CollaboratorAffiliation","CommentAuthorAssociation","CommentCannotUpdateReason","CommitContributionOrderField","ComparisonStatus","ContributionLevel","DefaultRepositoryPermissionField","DependencyGraphEcosystem","DeploymentOrderField","DeploymentProtectionRuleType","DeploymentReviewState","DeploymentState","DeploymentStatusState","DiffSide","DiscussionOrderField","DiscussionPollOptionOrderField","DismissReason","EnterpriseAdministratorInvitationOrderField","EnterpriseAdministratorRole","EnterpriseAllowPrivateRepositoryForkingPolicyValue","EnterpriseDefaultRepositoryPermissionSettingValue","EnterpriseEnabledDisabledSettingValue","EnterpriseEnabledSettingValue","EnterpriseMemberOrderField","EnterpriseMembersCanCreateRepositoriesSettingValue","EnterpriseMembersCanMakePurchasesSettingValue","EnterpriseServerInstallationOrderField","EnterpriseServerUserAccountEmailOrderField","EnterpriseServerUserAccountOrderField","EnterpriseServerUserAccountsUploadOrderField","EnterpriseServerUserAccountsUploadSyncState","EnterpriseUserAccountMembershipRole","EnterpriseUserDeployment","FileViewedState","FundingPlatform","GistOrderField","GistPrivacy","GitSignatureState","IdentityProviderConfigurationState","IpAllowListEnabledSettingValue","IpAllowListEntryOrderField","IpAllowListForInstalledAppsEnabledSettingValue","IssueClosedStateReason","IssueCommentOrderField","IssueOrderField","IssueState","IssueStateReason","IssueTimelineItemsItemType","LabelOrderField","LanguageOrderField","LockReason","MergeCommitMessage","MergeCommitTitle","MergeableState","MigrationSourceType","MigrationState","MilestoneOrderField","MilestoneState","NotificationRestrictionSettingValue","OIDCProviderType","OauthApplicationCreateAuditEntryState","OperationType","OrderDirection","OrgAddMemberAuditEntryPermission","OrgCreateAuditEntryBillingPlan","OrgEnterpriseOwnerOrderField","OrgRemoveBillingManagerAuditEntryReason","OrgRemoveMemberAuditEntryMembershipType","OrgRemoveMemberAuditEntryReason","OrgRemoveOutsideCollaboratorAuditEntryMembershipType","OrgRemoveOutsideCollaboratorAuditEntryReason","OrgUpdateDefaultRepositoryPermissionAuditEntryPermission","OrgUpdateMemberAuditEntryPermission","OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility","OrganizationInvitationRole","OrganizationInvitationType","OrganizationMemberRole","OrganizationMembersCanCreateRepositoriesSettingValue","OrganizationOrderField","PackageFileOrderField","PackageOrderField","PackageType","PackageVersionOrderField","PatchStatus","PinnableItemType","PinnedDiscussionGradient","PinnedDiscussionPattern","ProjectCardArchivedState","ProjectCardState","ProjectColumnPurpose","ProjectItemType","ProjectNextFieldType","ProjectNextOrderField","ProjectOrderField","ProjectState","ProjectTemplate","ProjectV2FieldOrderField","ProjectV2FieldType","ProjectV2ItemFieldValueOrderField","ProjectV2ItemOrderField","ProjectV2ItemType","ProjectV2OrderField","ProjectV2ViewLayout","ProjectV2ViewOrderField","ProjectViewLayout","PullRequestMergeMethod","PullRequestOrderField","PullRequestReviewCommentState","PullRequestReviewDecision","PullRequestReviewEvent","PullRequestReviewState","PullRequestState","PullRequestTimelineItemsItemType","PullRequestUpdateState","ReactionContent","ReactionOrderField","RefOrderField","ReleaseOrderField","RepoAccessAuditEntryVisibility","RepoAddMemberAuditEntryVisibility","RepoArchivedAuditEntryVisibility","RepoChangeMergeSettingAuditEntryMergeType","RepoCreateAuditEntryVisibility","RepoDestroyAuditEntryVisibility","RepoRemoveMemberAuditEntryVisibility","ReportedContentClassifiers","RepositoryAffiliation","RepositoryContributionType","RepositoryInteractionLimit","RepositoryInteractionLimitExpiry","RepositoryInteractionLimitOrigin","RepositoryInvitationOrderField","RepositoryLockReason","RepositoryMigrationOrderDirection","RepositoryMigrationOrderField","RepositoryOrderField","RepositoryPermission","RepositoryPrivacy","RepositoryVisibility","RepositoryVulnerabilityAlertDependencyScope","RepositoryVulnerabilityAlertState","RequestableCheckStatusState","RoleInOrganization","SamlDigestAlgorithm","SamlSignatureAlgorithm","SavedReplyOrderField","SearchType","SecurityAdvisoryClassification","SecurityAdvisoryEcosystem","SecurityAdvisoryIdentifierType","SecurityAdvisoryOrderField","SecurityAdvisorySeverity","SecurityVulnerabilityOrderField","SponsorOrderField","SponsorableOrderField","SponsorsActivityAction","SponsorsActivityOrderField","SponsorsActivityPeriod","SponsorsGoalKind","SponsorsTierOrderField","SponsorshipNewsletterOrderField","SponsorshipOrderField","SponsorshipPrivacy","SquashMergeCommitMessage","SquashMergeCommitTitle","StarOrderField","StatusState","SubscriptionState","TeamDiscussionCommentOrderField","TeamDiscussionOrderField","TeamMemberOrderField","TeamMemberRole","TeamMembershipType","TeamOrderField","TeamPrivacy","TeamRepositoryOrderField","TeamRole","TopicSuggestionDeclineReason","TrackedIssueStates","UserBlockDuration","UserStatusOrderField","VerifiableDomainOrderField","WorkflowRunOrderField"])



/**
 * Autogenerated input type of AbortQueuedMigrations
 */
export type AbortQueuedMigrationsInput = {
  clientMutationId?: string | null | undefined,
ownerId: string
}
    


/**
 * Autogenerated return type of AbortQueuedMigrations
 */
export class AbortQueuedMigrationsPayload extends $Base<"AbortQueuedMigrationsPayload"> {
  constructor() {
    super("AbortQueuedMigrationsPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * Did the operation succeed?
 */
      get success(): $Field<"success", boolean | null | undefined>  {
       return this.$_select("success") as any
      }
}


/**
 * Autogenerated input type of AcceptEnterpriseAdministratorInvitation
 */
export type AcceptEnterpriseAdministratorInvitationInput = {
  clientMutationId?: string | null | undefined,
invitationId: string
}
    


/**
 * Autogenerated return type of AcceptEnterpriseAdministratorInvitation
 */
export class AcceptEnterpriseAdministratorInvitationPayload extends $Base<"AcceptEnterpriseAdministratorInvitationPayload"> {
  constructor() {
    super("AcceptEnterpriseAdministratorInvitationPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The invitation that was accepted.
 */
      invitation<Sel extends Selection<EnterpriseAdministratorInvitation>>(selectorFn: (s: EnterpriseAdministratorInvitation) => [...Sel]):$Field<"invitation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseAdministratorInvitation)
      };
      return this.$_select("invitation", options) as any
    }
  

      
/**
 * A message confirming the result of accepting an administrator invitation.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of AcceptTopicSuggestion
 */
export type AcceptTopicSuggestionInput = {
  clientMutationId?: string | null | undefined,
name: string,
repositoryId: string
}
    


/**
 * Autogenerated return type of AcceptTopicSuggestion
 */
export class AcceptTopicSuggestionPayload extends $Base<"AcceptTopicSuggestionPayload"> {
  constructor() {
    super("AcceptTopicSuggestionPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The accepted topic.
 */
      topic<Sel extends Selection<Topic>>(selectorFn: (s: Topic) => [...Sel]):$Field<"topic", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Topic)
      };
      return this.$_select("topic", options) as any
    }
  
}


/**
 * Represents an object which can take actions on GitHub. Typically a User or Bot.
 */
export class Actor extends $Interface<{Bot: Bot,EnterpriseUserAccount: EnterpriseUserAccount,Mannequin: Mannequin,Organization: Organization,User: User}, "Actor"> {
  constructor() {
    super({Bot: Bot,EnterpriseUserAccount: EnterpriseUserAccount,Mannequin: Mannequin,Organization: Organization,User: User}, "Actor")
  }
}


/**
 * Location information for an actor
 */
export class ActorLocation extends $Base<"ActorLocation"> {
  constructor() {
    super("ActorLocation")
  }

  
      
/**
 * City
 */
      get city(): $Field<"city", string | null | undefined>  {
       return this.$_select("city") as any
      }

      
/**
 * Country name
 */
      get country(): $Field<"country", string | null | undefined>  {
       return this.$_select("country") as any
      }

      
/**
 * Country code
 */
      get countryCode(): $Field<"countryCode", string | null | undefined>  {
       return this.$_select("countryCode") as any
      }

      
/**
 * Region name
 */
      get region(): $Field<"region", string | null | undefined>  {
       return this.$_select("region") as any
      }

      
/**
 * Region or state code
 */
      get regionCode(): $Field<"regionCode", string | null | undefined>  {
       return this.$_select("regionCode") as any
      }
}

  
/**
 * The actor's type.
 */
export enum ActorType {
  
/**
 * Indicates a user actor.
 */
  USER = "USER",

/**
 * Indicates a team actor.
 */
  TEAM = "TEAM"
}
  


/**
 * Autogenerated input type of AddAssigneesToAssignable
 */
export type AddAssigneesToAssignableInput = {
  assignableId: string,
assigneeIds: Readonly<Array<string>>,
clientMutationId?: string | null | undefined
}
    


/**
 * Autogenerated return type of AddAssigneesToAssignable
 */
export class AddAssigneesToAssignablePayload extends $Base<"AddAssigneesToAssignablePayload"> {
  constructor() {
    super("AddAssigneesToAssignablePayload")
  }

  
      
/**
 * The item that was assigned.
 */
      assignable<Sel extends Selection<Assignable>>(selectorFn: (s: Assignable) => [...Sel]):$Field<"assignable", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Assignable)
      };
      return this.$_select("assignable", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of AddComment
 */
export type AddCommentInput = {
  body: string,
clientMutationId?: string | null | undefined,
subjectId: string
}
    


/**
 * Autogenerated return type of AddComment
 */
export class AddCommentPayload extends $Base<"AddCommentPayload"> {
  constructor() {
    super("AddCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The edge from the subject's comment connection.
 */
      commentEdge<Sel extends Selection<IssueCommentEdge>>(selectorFn: (s: IssueCommentEdge) => [...Sel]):$Field<"commentEdge", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueCommentEdge)
      };
      return this.$_select("commentEdge", options) as any
    }
  

      
/**
 * The subject
 */
      subject<Sel extends Selection<Node>>(selectorFn: (s: Node) => [...Sel]):$Field<"subject", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Node)
      };
      return this.$_select("subject", options) as any
    }
  

      
/**
 * The edge from the subject's timeline connection.
 */
      timelineEdge<Sel extends Selection<IssueTimelineItemEdge>>(selectorFn: (s: IssueTimelineItemEdge) => [...Sel]):$Field<"timelineEdge", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueTimelineItemEdge)
      };
      return this.$_select("timelineEdge", options) as any
    }
  
}


/**
 * Autogenerated input type of AddDiscussionComment
 */
export type AddDiscussionCommentInput = {
  body: string,
clientMutationId?: string | null | undefined,
discussionId: string,
replyToId?: string | null | undefined
}
    


/**
 * Autogenerated return type of AddDiscussionComment
 */
export class AddDiscussionCommentPayload extends $Base<"AddDiscussionCommentPayload"> {
  constructor() {
    super("AddDiscussionCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The newly created discussion comment.
 */
      comment<Sel extends Selection<DiscussionComment>>(selectorFn: (s: DiscussionComment) => [...Sel]):$Field<"comment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionComment)
      };
      return this.$_select("comment", options) as any
    }
  
}


/**
 * Autogenerated input type of AddDiscussionPollVote
 */
export type AddDiscussionPollVoteInput = {
  clientMutationId?: string | null | undefined,
pollOptionId: string
}
    


/**
 * Autogenerated return type of AddDiscussionPollVote
 */
export class AddDiscussionPollVotePayload extends $Base<"AddDiscussionPollVotePayload"> {
  constructor() {
    super("AddDiscussionPollVotePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The poll option that a vote was added to.
 */
      pollOption<Sel extends Selection<DiscussionPollOption>>(selectorFn: (s: DiscussionPollOption) => [...Sel]):$Field<"pollOption", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionPollOption)
      };
      return this.$_select("pollOption", options) as any
    }
  
}


/**
 * Autogenerated input type of AddEnterpriseSupportEntitlement
 */
export type AddEnterpriseSupportEntitlementInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
login: string
}
    


/**
 * Autogenerated return type of AddEnterpriseSupportEntitlement
 */
export class AddEnterpriseSupportEntitlementPayload extends $Base<"AddEnterpriseSupportEntitlementPayload"> {
  constructor() {
    super("AddEnterpriseSupportEntitlementPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * A message confirming the result of adding the support entitlement.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of AddLabelsToLabelable
 */
export type AddLabelsToLabelableInput = {
  clientMutationId?: string | null | undefined,
labelIds: Readonly<Array<string>>,
labelableId: string
}
    


/**
 * Autogenerated return type of AddLabelsToLabelable
 */
export class AddLabelsToLabelablePayload extends $Base<"AddLabelsToLabelablePayload"> {
  constructor() {
    super("AddLabelsToLabelablePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The item that was labeled.
 */
      labelable<Sel extends Selection<Labelable>>(selectorFn: (s: Labelable) => [...Sel]):$Field<"labelable", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Labelable)
      };
      return this.$_select("labelable", options) as any
    }
  
}


/**
 * Autogenerated input type of AddProjectCard
 */
export type AddProjectCardInput = {
  clientMutationId?: string | null | undefined,
contentId?: string | null | undefined,
note?: string | null | undefined,
projectColumnId: string
}
    


/**
 * Autogenerated return type of AddProjectCard
 */
export class AddProjectCardPayload extends $Base<"AddProjectCardPayload"> {
  constructor() {
    super("AddProjectCardPayload")
  }

  
      
/**
 * The edge from the ProjectColumn's card connection.
 */
      cardEdge<Sel extends Selection<ProjectCardEdge>>(selectorFn: (s: ProjectCardEdge) => [...Sel]):$Field<"cardEdge", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectCardEdge)
      };
      return this.$_select("cardEdge", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The ProjectColumn
 */
      projectColumn<Sel extends Selection<ProjectColumn>>(selectorFn: (s: ProjectColumn) => [...Sel]):$Field<"projectColumn", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectColumn)
      };
      return this.$_select("projectColumn", options) as any
    }
  
}


/**
 * Autogenerated input type of AddProjectColumn
 */
export type AddProjectColumnInput = {
  clientMutationId?: string | null | undefined,
name: string,
projectId: string
}
    


/**
 * Autogenerated return type of AddProjectColumn
 */
export class AddProjectColumnPayload extends $Base<"AddProjectColumnPayload"> {
  constructor() {
    super("AddProjectColumnPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The edge from the project's column connection.
 */
      columnEdge<Sel extends Selection<ProjectColumnEdge>>(selectorFn: (s: ProjectColumnEdge) => [...Sel]):$Field<"columnEdge", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectColumnEdge)
      };
      return this.$_select("columnEdge", options) as any
    }
  

      
/**
 * The project
 */
      project<Sel extends Selection<Project>>(selectorFn: (s: Project) => [...Sel]):$Field<"project", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Project)
      };
      return this.$_select("project", options) as any
    }
  
}


/**
 * Autogenerated input type of AddProjectDraftIssue
 */
export type AddProjectDraftIssueInput = {
  assigneeIds?: Readonly<Array<string>> | null | undefined,
body?: string | null | undefined,
clientMutationId?: string | null | undefined,
projectId?: string | null | undefined,
title?: string | null | undefined
}
    


/**
 * Autogenerated return type of AddProjectDraftIssue
 */
export class AddProjectDraftIssuePayload extends $Base<"AddProjectDraftIssuePayload"> {
  constructor() {
    super("AddProjectDraftIssuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The draft issue added to the project.
 */
      projectNextItem<Sel extends Selection<ProjectNextItem>>(selectorFn: (s: ProjectNextItem) => [...Sel]):$Field<"projectNextItem", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextItem)
      };
      return this.$_select("projectNextItem", options) as any
    }
  
}


/**
 * Autogenerated input type of AddProjectNextItem
 */
export type AddProjectNextItemInput = {
  clientMutationId?: string | null | undefined,
contentId?: string | null | undefined,
projectId?: string | null | undefined
}
    


/**
 * Autogenerated return type of AddProjectNextItem
 */
export class AddProjectNextItemPayload extends $Base<"AddProjectNextItemPayload"> {
  constructor() {
    super("AddProjectNextItemPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The item added to the project.
 */
      projectNextItem<Sel extends Selection<ProjectNextItem>>(selectorFn: (s: ProjectNextItem) => [...Sel]):$Field<"projectNextItem", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextItem)
      };
      return this.$_select("projectNextItem", options) as any
    }
  
}


/**
 * Autogenerated input type of AddProjectV2DraftIssue
 */
export type AddProjectV2DraftIssueInput = {
  assigneeIds?: Readonly<Array<string>> | null | undefined,
body?: string | null | undefined,
clientMutationId?: string | null | undefined,
projectId: string,
title: string
}
    


/**
 * Autogenerated return type of AddProjectV2DraftIssue
 */
export class AddProjectV2DraftIssuePayload extends $Base<"AddProjectV2DraftIssuePayload"> {
  constructor() {
    super("AddProjectV2DraftIssuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The draft issue added to the project.
 */
      projectItem<Sel extends Selection<ProjectV2Item>>(selectorFn: (s: ProjectV2Item) => [...Sel]):$Field<"projectItem", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Item)
      };
      return this.$_select("projectItem", options) as any
    }
  
}


/**
 * Autogenerated input type of AddProjectV2ItemById
 */
export type AddProjectV2ItemByIdInput = {
  clientMutationId?: string | null | undefined,
contentId: string,
projectId: string
}
    


/**
 * Autogenerated return type of AddProjectV2ItemById
 */
export class AddProjectV2ItemByIdPayload extends $Base<"AddProjectV2ItemByIdPayload"> {
  constructor() {
    super("AddProjectV2ItemByIdPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The item added to the project.
 */
      item<Sel extends Selection<ProjectV2Item>>(selectorFn: (s: ProjectV2Item) => [...Sel]):$Field<"item", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Item)
      };
      return this.$_select("item", options) as any
    }
  
}


/**
 * Autogenerated input type of AddPullRequestReviewComment
 */
export type AddPullRequestReviewCommentInput = {
  body: string,
clientMutationId?: string | null | undefined,
commitOID?: string | null | undefined,
inReplyTo?: string | null | undefined,
path?: string | null | undefined,
position?: number | null | undefined,
pullRequestId?: string | null | undefined,
pullRequestReviewId?: string | null | undefined
}
    


/**
 * Autogenerated return type of AddPullRequestReviewComment
 */
export class AddPullRequestReviewCommentPayload extends $Base<"AddPullRequestReviewCommentPayload"> {
  constructor() {
    super("AddPullRequestReviewCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The newly created comment.
 */
      comment<Sel extends Selection<PullRequestReviewComment>>(selectorFn: (s: PullRequestReviewComment) => [...Sel]):$Field<"comment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewComment)
      };
      return this.$_select("comment", options) as any
    }
  

      
/**
 * The edge from the review's comment connection.
 */
      commentEdge<Sel extends Selection<PullRequestReviewCommentEdge>>(selectorFn: (s: PullRequestReviewCommentEdge) => [...Sel]):$Field<"commentEdge", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewCommentEdge)
      };
      return this.$_select("commentEdge", options) as any
    }
  
}


/**
 * Autogenerated input type of AddPullRequestReview
 */
export type AddPullRequestReviewInput = {
  body?: string | null | undefined,
clientMutationId?: string | null | undefined,
comments?: Readonly<Array<DraftPullRequestReviewComment | null | undefined>> | null | undefined,
commitOID?: string | null | undefined,
event?: PullRequestReviewEvent | null | undefined,
pullRequestId: string,
threads?: Readonly<Array<DraftPullRequestReviewThread | null | undefined>> | null | undefined
}
    


/**
 * Autogenerated return type of AddPullRequestReview
 */
export class AddPullRequestReviewPayload extends $Base<"AddPullRequestReviewPayload"> {
  constructor() {
    super("AddPullRequestReviewPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The newly created pull request review.
 */
      pullRequestReview<Sel extends Selection<PullRequestReview>>(selectorFn: (s: PullRequestReview) => [...Sel]):$Field<"pullRequestReview", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReview)
      };
      return this.$_select("pullRequestReview", options) as any
    }
  

      
/**
 * The edge from the pull request's review connection.
 */
      reviewEdge<Sel extends Selection<PullRequestReviewEdge>>(selectorFn: (s: PullRequestReviewEdge) => [...Sel]):$Field<"reviewEdge", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewEdge)
      };
      return this.$_select("reviewEdge", options) as any
    }
  
}


/**
 * Autogenerated input type of AddPullRequestReviewThread
 */
export type AddPullRequestReviewThreadInput = {
  body: string,
clientMutationId?: string | null | undefined,
line: number,
path: string,
pullRequestId?: string | null | undefined,
pullRequestReviewId?: string | null | undefined,
side?: DiffSide | null | undefined,
startLine?: number | null | undefined,
startSide?: DiffSide | null | undefined
}
    


/**
 * Autogenerated return type of AddPullRequestReviewThread
 */
export class AddPullRequestReviewThreadPayload extends $Base<"AddPullRequestReviewThreadPayload"> {
  constructor() {
    super("AddPullRequestReviewThreadPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The newly created thread.
 */
      thread<Sel extends Selection<PullRequestReviewThread>>(selectorFn: (s: PullRequestReviewThread) => [...Sel]):$Field<"thread", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewThread)
      };
      return this.$_select("thread", options) as any
    }
  
}


/**
 * Autogenerated input type of AddReaction
 */
export type AddReactionInput = {
  clientMutationId?: string | null | undefined,
content: ReactionContent,
subjectId: string
}
    


/**
 * Autogenerated return type of AddReaction
 */
export class AddReactionPayload extends $Base<"AddReactionPayload"> {
  constructor() {
    super("AddReactionPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The reaction object.
 */
      reaction<Sel extends Selection<Reaction>>(selectorFn: (s: Reaction) => [...Sel]):$Field<"reaction", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Reaction)
      };
      return this.$_select("reaction", options) as any
    }
  

      
/**
 * The reactable subject.
 */
      subject<Sel extends Selection<Reactable>>(selectorFn: (s: Reactable) => [...Sel]):$Field<"subject", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Reactable)
      };
      return this.$_select("subject", options) as any
    }
  
}


/**
 * Autogenerated input type of AddStar
 */
export type AddStarInput = {
  clientMutationId?: string | null | undefined,
starrableId: string
}
    


/**
 * Autogenerated return type of AddStar
 */
export class AddStarPayload extends $Base<"AddStarPayload"> {
  constructor() {
    super("AddStarPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The starrable.
 */
      starrable<Sel extends Selection<Starrable>>(selectorFn: (s: Starrable) => [...Sel]):$Field<"starrable", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Starrable)
      };
      return this.$_select("starrable", options) as any
    }
  
}


/**
 * Autogenerated input type of AddUpvote
 */
export type AddUpvoteInput = {
  clientMutationId?: string | null | undefined,
subjectId: string
}
    


/**
 * Autogenerated return type of AddUpvote
 */
export class AddUpvotePayload extends $Base<"AddUpvotePayload"> {
  constructor() {
    super("AddUpvotePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The votable subject.
 */
      subject<Sel extends Selection<Votable>>(selectorFn: (s: Votable) => [...Sel]):$Field<"subject", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Votable)
      };
      return this.$_select("subject", options) as any
    }
  
}


/**
 * Autogenerated input type of AddVerifiableDomain
 */
export type AddVerifiableDomainInput = {
  clientMutationId?: string | null | undefined,
domain: string,
ownerId: string
}
    


/**
 * Autogenerated return type of AddVerifiableDomain
 */
export class AddVerifiableDomainPayload extends $Base<"AddVerifiableDomainPayload"> {
  constructor() {
    super("AddVerifiableDomainPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The verifiable domain that was added.
 */
      domain<Sel extends Selection<VerifiableDomain>>(selectorFn: (s: VerifiableDomain) => [...Sel]):$Field<"domain", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new VerifiableDomain)
      };
      return this.$_select("domain", options) as any
    }
  
}


/**
 * Represents a 'added_to_project' event on a given issue or pull request.
 */
export class AddedToProjectEvent extends $Base<"AddedToProjectEvent"> {
  constructor() {
    super("AddedToProjectEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }
}


/**
 * A GitHub App.
 */
export class App extends $Base<"App"> {
  constructor() {
    super("App")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The description of the app.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The IP addresses of the app.
 */
      ipAllowListEntries<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: IpAllowListEntryOrder | null | undefined,
      }>,Sel extends Selection<IpAllowListEntryConnection>>(args: Args, selectorFn: (s: IpAllowListEntryConnection) => [...Sel]):$Field<"ipAllowListEntries", GetOutput<Sel> , GetVariables<Sel, Args>>
ipAllowListEntries<Sel extends Selection<IpAllowListEntryConnection>>(selectorFn: (s: IpAllowListEntryConnection) => [...Sel]):$Field<"ipAllowListEntries", GetOutput<Sel> , GetVariables<Sel>>
ipAllowListEntries(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "IpAllowListEntryOrder"
            },
        args,

        selection: selectorFn(new IpAllowListEntryConnection)
      };
      return this.$_select("ipAllowListEntries", options) as any
    }
  

      
/**
 * The hex color code, without the leading '#', for the logo background.
 */
      get logoBackgroundColor(): $Field<"logoBackgroundColor", string>  {
       return this.$_select("logoBackgroundColor") as any
      }

      
/**
 * A URL pointing to the app's logo.
 */
      logoUrl<Args extends VariabledInput<{
        size?: number | null | undefined,
      }>>(args: Args):$Field<"logoUrl", string , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              size: "Int"
            },
        args,

        
      };
      return this.$_select("logoUrl", options) as any
    }
  

      
/**
 * The name of the app.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * A slug based on the name of the app for use in URLs.
 */
      get slug(): $Field<"slug", string>  {
       return this.$_select("slug") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The URL to the app's homepage.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * Autogenerated input type of ApproveDeployments
 */
export type ApproveDeploymentsInput = {
  clientMutationId?: string | null | undefined,
comment?: string | null | undefined,
environmentIds: Readonly<Array<string>>,
workflowRunId: string
}
    


/**
 * Autogenerated return type of ApproveDeployments
 */
export class ApproveDeploymentsPayload extends $Base<"ApproveDeploymentsPayload"> {
  constructor() {
    super("ApproveDeploymentsPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The affected deployments.
 */
      deployments<Sel extends Selection<Deployment>>(selectorFn: (s: Deployment) => [...Sel]):$Field<"deployments", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Deployment)
      };
      return this.$_select("deployments", options) as any
    }
  
}


/**
 * Autogenerated input type of ApproveVerifiableDomain
 */
export type ApproveVerifiableDomainInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of ApproveVerifiableDomain
 */
export class ApproveVerifiableDomainPayload extends $Base<"ApproveVerifiableDomainPayload"> {
  constructor() {
    super("ApproveVerifiableDomainPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The verifiable domain that was approved.
 */
      domain<Sel extends Selection<VerifiableDomain>>(selectorFn: (s: VerifiableDomain) => [...Sel]):$Field<"domain", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new VerifiableDomain)
      };
      return this.$_select("domain", options) as any
    }
  
}


/**
 * Autogenerated input type of ArchiveRepository
 */
export type ArchiveRepositoryInput = {
  clientMutationId?: string | null | undefined,
repositoryId: string
}
    


/**
 * Autogenerated return type of ArchiveRepository
 */
export class ArchiveRepositoryPayload extends $Base<"ArchiveRepositoryPayload"> {
  constructor() {
    super("ArchiveRepositoryPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The repository that was marked as archived.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * An object that can have users assigned to it.
 */
export class Assignable extends $Interface<{Issue: Issue,PullRequest: PullRequest}, "Assignable"> {
  constructor() {
    super({Issue: Issue,PullRequest: PullRequest}, "Assignable")
  }
}


/**
 * Represents an 'assigned' event on any assignable object.
 */
export class AssignedEvent extends $Base<"AssignedEvent"> {
  constructor() {
    super("AssignedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the assignable associated with the event.
 */
      assignable<Sel extends Selection<Assignable>>(selectorFn: (s: Assignable) => [...Sel]):$Field<"assignable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Assignable)
      };
      return this.$_select("assignable", options) as any
    }
  

      
/**
 * Identifies the user or mannequin that was assigned.
 */
      assignee<Sel extends Selection<Assignee>>(selectorFn: (s: Assignee) => [...Sel]):$Field<"assignee", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Assignee)
      };
      return this.$_select("assignee", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the user who was assigned.
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * Types that can be assigned to issues.
 */
export class Assignee extends $Union<{Bot: Bot,Mannequin: Mannequin,Organization: Organization,User: User,Node: Node,Actor: Actor,UniformResourceLocatable: UniformResourceLocatable,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "Assignee"> {
  constructor() {
    super({Bot: Bot,Mannequin: Mannequin,Organization: Organization,User: User,Node: Node,Actor: Actor,UniformResourceLocatable: UniformResourceLocatable,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * An entry in the audit log.
 */
export class AuditEntry extends $Interface<{MembersCanDeleteReposClearAuditEntry: MembersCanDeleteReposClearAuditEntry,MembersCanDeleteReposDisableAuditEntry: MembersCanDeleteReposDisableAuditEntry,MembersCanDeleteReposEnableAuditEntry: MembersCanDeleteReposEnableAuditEntry,OauthApplicationCreateAuditEntry: OauthApplicationCreateAuditEntry,OrgAddBillingManagerAuditEntry: OrgAddBillingManagerAuditEntry,OrgAddMemberAuditEntry: OrgAddMemberAuditEntry,OrgBlockUserAuditEntry: OrgBlockUserAuditEntry,OrgConfigDisableCollaboratorsOnlyAuditEntry: OrgConfigDisableCollaboratorsOnlyAuditEntry,OrgConfigEnableCollaboratorsOnlyAuditEntry: OrgConfigEnableCollaboratorsOnlyAuditEntry,OrgCreateAuditEntry: OrgCreateAuditEntry,OrgDisableOauthAppRestrictionsAuditEntry: OrgDisableOauthAppRestrictionsAuditEntry,OrgDisableSamlAuditEntry: OrgDisableSamlAuditEntry,OrgDisableTwoFactorRequirementAuditEntry: OrgDisableTwoFactorRequirementAuditEntry,OrgEnableOauthAppRestrictionsAuditEntry: OrgEnableOauthAppRestrictionsAuditEntry,OrgEnableSamlAuditEntry: OrgEnableSamlAuditEntry,OrgEnableTwoFactorRequirementAuditEntry: OrgEnableTwoFactorRequirementAuditEntry,OrgInviteMemberAuditEntry: OrgInviteMemberAuditEntry,OrgInviteToBusinessAuditEntry: OrgInviteToBusinessAuditEntry,OrgOauthAppAccessApprovedAuditEntry: OrgOauthAppAccessApprovedAuditEntry,OrgOauthAppAccessDeniedAuditEntry: OrgOauthAppAccessDeniedAuditEntry,OrgOauthAppAccessRequestedAuditEntry: OrgOauthAppAccessRequestedAuditEntry,OrgRemoveBillingManagerAuditEntry: OrgRemoveBillingManagerAuditEntry,OrgRemoveMemberAuditEntry: OrgRemoveMemberAuditEntry,OrgRemoveOutsideCollaboratorAuditEntry: OrgRemoveOutsideCollaboratorAuditEntry,OrgRestoreMemberAuditEntry: OrgRestoreMemberAuditEntry,OrgUnblockUserAuditEntry: OrgUnblockUserAuditEntry,OrgUpdateDefaultRepositoryPermissionAuditEntry: OrgUpdateDefaultRepositoryPermissionAuditEntry,OrgUpdateMemberAuditEntry: OrgUpdateMemberAuditEntry,OrgUpdateMemberRepositoryCreationPermissionAuditEntry: OrgUpdateMemberRepositoryCreationPermissionAuditEntry,OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntry,PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntry,RepoAccessAuditEntry: RepoAccessAuditEntry,RepoAddMemberAuditEntry: RepoAddMemberAuditEntry,RepoAddTopicAuditEntry: RepoAddTopicAuditEntry,RepoArchivedAuditEntry: RepoArchivedAuditEntry,RepoChangeMergeSettingAuditEntry: RepoChangeMergeSettingAuditEntry,RepoConfigDisableAnonymousGitAccessAuditEntry: RepoConfigDisableAnonymousGitAccessAuditEntry,RepoConfigDisableCollaboratorsOnlyAuditEntry: RepoConfigDisableCollaboratorsOnlyAuditEntry,RepoConfigDisableContributorsOnlyAuditEntry: RepoConfigDisableContributorsOnlyAuditEntry,RepoConfigDisableSockpuppetDisallowedAuditEntry: RepoConfigDisableSockpuppetDisallowedAuditEntry,RepoConfigEnableAnonymousGitAccessAuditEntry: RepoConfigEnableAnonymousGitAccessAuditEntry,RepoConfigEnableCollaboratorsOnlyAuditEntry: RepoConfigEnableCollaboratorsOnlyAuditEntry,RepoConfigEnableContributorsOnlyAuditEntry: RepoConfigEnableContributorsOnlyAuditEntry,RepoConfigEnableSockpuppetDisallowedAuditEntry: RepoConfigEnableSockpuppetDisallowedAuditEntry,RepoConfigLockAnonymousGitAccessAuditEntry: RepoConfigLockAnonymousGitAccessAuditEntry,RepoConfigUnlockAnonymousGitAccessAuditEntry: RepoConfigUnlockAnonymousGitAccessAuditEntry,RepoCreateAuditEntry: RepoCreateAuditEntry,RepoDestroyAuditEntry: RepoDestroyAuditEntry,RepoRemoveMemberAuditEntry: RepoRemoveMemberAuditEntry,RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntry,RepositoryVisibilityChangeDisableAuditEntry: RepositoryVisibilityChangeDisableAuditEntry,RepositoryVisibilityChangeEnableAuditEntry: RepositoryVisibilityChangeEnableAuditEntry,TeamAddMemberAuditEntry: TeamAddMemberAuditEntry,TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntry,TeamChangeParentTeamAuditEntry: TeamChangeParentTeamAuditEntry,TeamRemoveMemberAuditEntry: TeamRemoveMemberAuditEntry,TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntry}, "AuditEntry"> {
  constructor() {
    super({MembersCanDeleteReposClearAuditEntry: MembersCanDeleteReposClearAuditEntry,MembersCanDeleteReposDisableAuditEntry: MembersCanDeleteReposDisableAuditEntry,MembersCanDeleteReposEnableAuditEntry: MembersCanDeleteReposEnableAuditEntry,OauthApplicationCreateAuditEntry: OauthApplicationCreateAuditEntry,OrgAddBillingManagerAuditEntry: OrgAddBillingManagerAuditEntry,OrgAddMemberAuditEntry: OrgAddMemberAuditEntry,OrgBlockUserAuditEntry: OrgBlockUserAuditEntry,OrgConfigDisableCollaboratorsOnlyAuditEntry: OrgConfigDisableCollaboratorsOnlyAuditEntry,OrgConfigEnableCollaboratorsOnlyAuditEntry: OrgConfigEnableCollaboratorsOnlyAuditEntry,OrgCreateAuditEntry: OrgCreateAuditEntry,OrgDisableOauthAppRestrictionsAuditEntry: OrgDisableOauthAppRestrictionsAuditEntry,OrgDisableSamlAuditEntry: OrgDisableSamlAuditEntry,OrgDisableTwoFactorRequirementAuditEntry: OrgDisableTwoFactorRequirementAuditEntry,OrgEnableOauthAppRestrictionsAuditEntry: OrgEnableOauthAppRestrictionsAuditEntry,OrgEnableSamlAuditEntry: OrgEnableSamlAuditEntry,OrgEnableTwoFactorRequirementAuditEntry: OrgEnableTwoFactorRequirementAuditEntry,OrgInviteMemberAuditEntry: OrgInviteMemberAuditEntry,OrgInviteToBusinessAuditEntry: OrgInviteToBusinessAuditEntry,OrgOauthAppAccessApprovedAuditEntry: OrgOauthAppAccessApprovedAuditEntry,OrgOauthAppAccessDeniedAuditEntry: OrgOauthAppAccessDeniedAuditEntry,OrgOauthAppAccessRequestedAuditEntry: OrgOauthAppAccessRequestedAuditEntry,OrgRemoveBillingManagerAuditEntry: OrgRemoveBillingManagerAuditEntry,OrgRemoveMemberAuditEntry: OrgRemoveMemberAuditEntry,OrgRemoveOutsideCollaboratorAuditEntry: OrgRemoveOutsideCollaboratorAuditEntry,OrgRestoreMemberAuditEntry: OrgRestoreMemberAuditEntry,OrgUnblockUserAuditEntry: OrgUnblockUserAuditEntry,OrgUpdateDefaultRepositoryPermissionAuditEntry: OrgUpdateDefaultRepositoryPermissionAuditEntry,OrgUpdateMemberAuditEntry: OrgUpdateMemberAuditEntry,OrgUpdateMemberRepositoryCreationPermissionAuditEntry: OrgUpdateMemberRepositoryCreationPermissionAuditEntry,OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntry,PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntry,RepoAccessAuditEntry: RepoAccessAuditEntry,RepoAddMemberAuditEntry: RepoAddMemberAuditEntry,RepoAddTopicAuditEntry: RepoAddTopicAuditEntry,RepoArchivedAuditEntry: RepoArchivedAuditEntry,RepoChangeMergeSettingAuditEntry: RepoChangeMergeSettingAuditEntry,RepoConfigDisableAnonymousGitAccessAuditEntry: RepoConfigDisableAnonymousGitAccessAuditEntry,RepoConfigDisableCollaboratorsOnlyAuditEntry: RepoConfigDisableCollaboratorsOnlyAuditEntry,RepoConfigDisableContributorsOnlyAuditEntry: RepoConfigDisableContributorsOnlyAuditEntry,RepoConfigDisableSockpuppetDisallowedAuditEntry: RepoConfigDisableSockpuppetDisallowedAuditEntry,RepoConfigEnableAnonymousGitAccessAuditEntry: RepoConfigEnableAnonymousGitAccessAuditEntry,RepoConfigEnableCollaboratorsOnlyAuditEntry: RepoConfigEnableCollaboratorsOnlyAuditEntry,RepoConfigEnableContributorsOnlyAuditEntry: RepoConfigEnableContributorsOnlyAuditEntry,RepoConfigEnableSockpuppetDisallowedAuditEntry: RepoConfigEnableSockpuppetDisallowedAuditEntry,RepoConfigLockAnonymousGitAccessAuditEntry: RepoConfigLockAnonymousGitAccessAuditEntry,RepoConfigUnlockAnonymousGitAccessAuditEntry: RepoConfigUnlockAnonymousGitAccessAuditEntry,RepoCreateAuditEntry: RepoCreateAuditEntry,RepoDestroyAuditEntry: RepoDestroyAuditEntry,RepoRemoveMemberAuditEntry: RepoRemoveMemberAuditEntry,RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntry,RepositoryVisibilityChangeDisableAuditEntry: RepositoryVisibilityChangeDisableAuditEntry,RepositoryVisibilityChangeEnableAuditEntry: RepositoryVisibilityChangeEnableAuditEntry,TeamAddMemberAuditEntry: TeamAddMemberAuditEntry,TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntry,TeamChangeParentTeamAuditEntry: TeamChangeParentTeamAuditEntry,TeamRemoveMemberAuditEntry: TeamRemoveMemberAuditEntry,TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntry}, "AuditEntry")
  }
}


/**
 * Types that can initiate an audit log event.
 */
export class AuditEntryActor extends $Union<{Bot: Bot,Organization: Organization,User: User,Node: Node,Actor: Actor,UniformResourceLocatable: UniformResourceLocatable,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "AuditEntryActor"> {
  constructor() {
    super({Bot: Bot,Organization: Organization,User: User,Node: Node,Actor: Actor,UniformResourceLocatable: UniformResourceLocatable,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * Ordering options for Audit Log connections.
 */
export type AuditLogOrder = {
  direction?: OrderDirection | null | undefined,
field?: AuditLogOrderField | null | undefined
}
    

  
/**
 * Properties by which Audit Log connections can be ordered.
 */
export enum AuditLogOrderField {
  
/**
 * Order audit log entries by timestamp
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * Represents a 'auto_merge_disabled' event on a given pull request.
 */
export class AutoMergeDisabledEvent extends $Base<"AutoMergeDisabledEvent"> {
  constructor() {
    super("AutoMergeDisabledEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The user who disabled auto-merge for this Pull Request
 */
      disabler<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"disabler", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("disabler", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The reason auto-merge was disabled
 */
      get reason(): $Field<"reason", string | null | undefined>  {
       return this.$_select("reason") as any
      }

      
/**
 * The reason_code relating to why auto-merge was disabled
 */
      get reasonCode(): $Field<"reasonCode", string | null | undefined>  {
       return this.$_select("reasonCode") as any
      }
}


/**
 * Represents a 'auto_merge_enabled' event on a given pull request.
 */
export class AutoMergeEnabledEvent extends $Base<"AutoMergeEnabledEvent"> {
  constructor() {
    super("AutoMergeEnabledEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The user who enabled auto-merge for this Pull Request
 */
      enabler<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"enabler", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("enabler", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents an auto-merge request for a pull request
 */
export class AutoMergeRequest extends $Base<"AutoMergeRequest"> {
  constructor() {
    super("AutoMergeRequest")
  }

  
      
/**
 * The email address of the author of this auto-merge request.
 */
      get authorEmail(): $Field<"authorEmail", string | null | undefined>  {
       return this.$_select("authorEmail") as any
      }

      
/**
 * The commit message of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging.
 */
      get commitBody(): $Field<"commitBody", string | null | undefined>  {
       return this.$_select("commitBody") as any
      }

      
/**
 * The commit title of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging
 */
      get commitHeadline(): $Field<"commitHeadline", string | null | undefined>  {
       return this.$_select("commitHeadline") as any
      }

      
/**
 * When was this auto-merge request was enabled.
 */
      get enabledAt(): $Field<"enabledAt", string | null | undefined>  {
       return this.$_select("enabledAt") as any
      }

      
/**
 * The actor who created the auto-merge request.
 */
      enabledBy<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"enabledBy", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("enabledBy", options) as any
    }
  

      
/**
 * The merge method of the auto-merge request. If a merge queue is required by the base branch, this value will be set by the merge queue when merging.
 */
      get mergeMethod(): $Field<"mergeMethod", PullRequestMergeMethod>  {
       return this.$_select("mergeMethod") as any
      }

      
/**
 * The pull request that this auto-merge request is set against.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents a 'auto_rebase_enabled' event on a given pull request.
 */
export class AutoRebaseEnabledEvent extends $Base<"AutoRebaseEnabledEvent"> {
  constructor() {
    super("AutoRebaseEnabledEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The user who enabled auto-merge (rebase) for this Pull Request
 */
      enabler<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"enabler", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("enabler", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents a 'auto_squash_enabled' event on a given pull request.
 */
export class AutoSquashEnabledEvent extends $Base<"AutoSquashEnabledEvent"> {
  constructor() {
    super("AutoSquashEnabledEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The user who enabled auto-merge (squash) for this Pull Request
 */
      enabler<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"enabler", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("enabler", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents a 'automatic_base_change_failed' event on a given pull request.
 */
export class AutomaticBaseChangeFailedEvent extends $Base<"AutomaticBaseChangeFailedEvent"> {
  constructor() {
    super("AutomaticBaseChangeFailedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The new base for this PR
 */
      get newBase(): $Field<"newBase", string>  {
       return this.$_select("newBase") as any
      }

      
/**
 * The old base for this PR
 */
      get oldBase(): $Field<"oldBase", string>  {
       return this.$_select("oldBase") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents a 'automatic_base_change_succeeded' event on a given pull request.
 */
export class AutomaticBaseChangeSucceededEvent extends $Base<"AutomaticBaseChangeSucceededEvent"> {
  constructor() {
    super("AutomaticBaseChangeSucceededEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The new base for this PR
 */
      get newBase(): $Field<"newBase", string>  {
       return this.$_select("newBase") as any
      }

      
/**
 * The old base for this PR
 */
      get oldBase(): $Field<"oldBase", string>  {
       return this.$_select("oldBase") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * A (potentially binary) string encoded using base64.
 */
export type Base64String = string



/**
 * Represents a 'base_ref_changed' event on a given issue or pull request.
 */
export class BaseRefChangedEvent extends $Base<"BaseRefChangedEvent"> {
  constructor() {
    super("BaseRefChangedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the name of the base ref for the pull request after it was changed.
 */
      get currentRefName(): $Field<"currentRefName", string>  {
       return this.$_select("currentRefName") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the name of the base ref for the pull request before it was changed.
 */
      get previousRefName(): $Field<"previousRefName", string>  {
       return this.$_select("previousRefName") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents a 'base_ref_deleted' event on a given pull request.
 */
export class BaseRefDeletedEvent extends $Base<"BaseRefDeletedEvent"> {
  constructor() {
    super("BaseRefDeletedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the name of the Ref associated with the `base_ref_deleted` event.
 */
      get baseRefName(): $Field<"baseRefName", string | null | undefined>  {
       return this.$_select("baseRefName") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents a 'base_ref_force_pushed' event on a given pull request.
 */
export class BaseRefForcePushedEvent extends $Base<"BaseRefForcePushedEvent"> {
  constructor() {
    super("BaseRefForcePushedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the after commit SHA for the 'base_ref_force_pushed' event.
 */
      afterCommit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"afterCommit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("afterCommit", options) as any
    }
  

      
/**
 * Identifies the before commit SHA for the 'base_ref_force_pushed' event.
 */
      beforeCommit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"beforeCommit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("beforeCommit", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
 */
      ref<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"ref", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("ref", options) as any
    }
  
}


/**
 * Represents a Git blame.
 */
export class Blame extends $Base<"Blame"> {
  constructor() {
    super("Blame")
  }

  
      
/**
 * The list of ranges from a Git blame.
 */
      ranges<Sel extends Selection<BlameRange>>(selectorFn: (s: BlameRange) => [...Sel]):$Field<"ranges", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BlameRange)
      };
      return this.$_select("ranges", options) as any
    }
  
}


/**
 * Represents a range of information from a Git blame.
 */
export class BlameRange extends $Base<"BlameRange"> {
  constructor() {
    super("BlameRange")
  }

  
      
/**
 * Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change.
 */
      get age(): $Field<"age", number>  {
       return this.$_select("age") as any
      }

      
/**
 * Identifies the line author
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
/**
 * The ending line for the range
 */
      get endingLine(): $Field<"endingLine", number>  {
       return this.$_select("endingLine") as any
      }

      
/**
 * The starting line for the range
 */
      get startingLine(): $Field<"startingLine", number>  {
       return this.$_select("startingLine") as any
      }
}


/**
 * Represents a Git blob.
 */
export class Blob extends $Base<"Blob"> {
  constructor() {
    super("Blob")
  }

  
      
/**
 * An abbreviated version of the Git object ID
 */
      get abbreviatedOid(): $Field<"abbreviatedOid", string>  {
       return this.$_select("abbreviatedOid") as any
      }

      
/**
 * Byte size of Blob object
 */
      get byteSize(): $Field<"byteSize", number>  {
       return this.$_select("byteSize") as any
      }

      
/**
 * The HTTP path for this Git object
 */
      get commitResourcePath(): $Field<"commitResourcePath", string>  {
       return this.$_select("commitResourcePath") as any
      }

      
/**
 * The HTTP URL for this Git object
 */
      get commitUrl(): $Field<"commitUrl", string>  {
       return this.$_select("commitUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
 */
      get isBinary(): $Field<"isBinary", boolean | null | undefined>  {
       return this.$_select("isBinary") as any
      }

      
/**
 * Indicates whether the contents is truncated
 */
      get isTruncated(): $Field<"isTruncated", boolean>  {
       return this.$_select("isTruncated") as any
      }

      
/**
 * The Git object ID
 */
      get oid(): $Field<"oid", string>  {
       return this.$_select("oid") as any
      }

      
/**
 * The Repository the Git object belongs to
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * UTF8 text data or null if the Blob is binary
 */
      get text(): $Field<"text", string | null | undefined>  {
       return this.$_select("text") as any
      }
}


/**
 * A special type of user which takes actions on behalf of GitHub Apps.
 */
export class Bot extends $Base<"Bot"> {
  constructor() {
    super("Bot")
  }

  
      
/**
 * A URL pointing to the GitHub App's public avatar.
 */
      avatarUrl<Args extends VariabledInput<{
        size?: number | null | undefined,
      }>>(args: Args):$Field<"avatarUrl", string , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              size: "Int"
            },
        args,

        
      };
      return this.$_select("avatarUrl", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The username of the actor.
 */
      get login(): $Field<"login", string>  {
       return this.$_select("login") as any
      }

      
/**
 * The HTTP path for this bot
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this bot
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * Types which can be actors for `BranchActorAllowance` objects.
 */
export class BranchActorAllowanceActor extends $Union<{App: App,Team: Team,User: User,Node: Node,Subscribable: Subscribable,MemberStatusable: MemberStatusable,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "BranchActorAllowanceActor"> {
  constructor() {
    super({App: App,Team: Team,User: User,Node: Node,Subscribable: Subscribable,MemberStatusable: MemberStatusable,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * A branch protection rule.
 */
export class BranchProtectionRule extends $Base<"BranchProtectionRule"> {
  constructor() {
    super("BranchProtectionRule")
  }

  
      
/**
 * Can this branch be deleted.
 */
      get allowsDeletions(): $Field<"allowsDeletions", boolean>  {
       return this.$_select("allowsDeletions") as any
      }

      
/**
 * Are force pushes allowed on this branch.
 */
      get allowsForcePushes(): $Field<"allowsForcePushes", boolean>  {
       return this.$_select("allowsForcePushes") as any
      }

      
/**
 * Is branch creation a protected operation.
 */
      get blocksCreations(): $Field<"blocksCreations", boolean>  {
       return this.$_select("blocksCreations") as any
      }

      
/**
 * A list of conflicts matching branches protection rule and other branch protection rules
 */
      branchProtectionRuleConflicts<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<BranchProtectionRuleConflictConnection>>(args: Args, selectorFn: (s: BranchProtectionRuleConflictConnection) => [...Sel]):$Field<"branchProtectionRuleConflicts", GetOutput<Sel> , GetVariables<Sel, Args>>
branchProtectionRuleConflicts<Sel extends Selection<BranchProtectionRuleConflictConnection>>(selectorFn: (s: BranchProtectionRuleConflictConnection) => [...Sel]):$Field<"branchProtectionRuleConflicts", GetOutput<Sel> , GetVariables<Sel>>
branchProtectionRuleConflicts(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new BranchProtectionRuleConflictConnection)
      };
      return this.$_select("branchProtectionRuleConflicts", options) as any
    }
  

      
/**
 * A list of actors able to force push for this branch protection rule.
 */
      bypassForcePushAllowances<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<BypassForcePushAllowanceConnection>>(args: Args, selectorFn: (s: BypassForcePushAllowanceConnection) => [...Sel]):$Field<"bypassForcePushAllowances", GetOutput<Sel> , GetVariables<Sel, Args>>
bypassForcePushAllowances<Sel extends Selection<BypassForcePushAllowanceConnection>>(selectorFn: (s: BypassForcePushAllowanceConnection) => [...Sel]):$Field<"bypassForcePushAllowances", GetOutput<Sel> , GetVariables<Sel>>
bypassForcePushAllowances(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new BypassForcePushAllowanceConnection)
      };
      return this.$_select("bypassForcePushAllowances", options) as any
    }
  

      
/**
 * A list of actors able to bypass PRs for this branch protection rule.
 */
      bypassPullRequestAllowances<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<BypassPullRequestAllowanceConnection>>(args: Args, selectorFn: (s: BypassPullRequestAllowanceConnection) => [...Sel]):$Field<"bypassPullRequestAllowances", GetOutput<Sel> , GetVariables<Sel, Args>>
bypassPullRequestAllowances<Sel extends Selection<BypassPullRequestAllowanceConnection>>(selectorFn: (s: BypassPullRequestAllowanceConnection) => [...Sel]):$Field<"bypassPullRequestAllowances", GetOutput<Sel> , GetVariables<Sel>>
bypassPullRequestAllowances(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new BypassPullRequestAllowanceConnection)
      };
      return this.$_select("bypassPullRequestAllowances", options) as any
    }
  

      
/**
 * The actor who created this branch protection rule.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * Will new commits pushed to matching branches dismiss pull request review approvals.
 */
      get dismissesStaleReviews(): $Field<"dismissesStaleReviews", boolean>  {
       return this.$_select("dismissesStaleReviews") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Can admins overwrite branch protection.
 */
      get isAdminEnforced(): $Field<"isAdminEnforced", boolean>  {
       return this.$_select("isAdminEnforced") as any
      }

      
/**
 * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
 */
      get lockAllowsFetchAndMerge(): $Field<"lockAllowsFetchAndMerge", boolean>  {
       return this.$_select("lockAllowsFetchAndMerge") as any
      }

      
/**
 * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
 */
      get lockBranch(): $Field<"lockBranch", boolean>  {
       return this.$_select("lockBranch") as any
      }

      
/**
 * Repository refs that are protected by this rule
 */
      matchingRefs<Args extends VariabledInput<{
        query?: string | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<RefConnection>>(args: Args, selectorFn: (s: RefConnection) => [...Sel]):$Field<"matchingRefs", GetOutput<Sel> , GetVariables<Sel, Args>>
matchingRefs<Sel extends Selection<RefConnection>>(selectorFn: (s: RefConnection) => [...Sel]):$Field<"matchingRefs", GetOutput<Sel> , GetVariables<Sel>>
matchingRefs(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new RefConnection)
      };
      return this.$_select("matchingRefs", options) as any
    }
  

      
/**
 * Identifies the protection rule pattern.
 */
      get pattern(): $Field<"pattern", string>  {
       return this.$_select("pattern") as any
      }

      
/**
 * A list push allowances for this branch protection rule.
 */
      pushAllowances<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PushAllowanceConnection>>(args: Args, selectorFn: (s: PushAllowanceConnection) => [...Sel]):$Field<"pushAllowances", GetOutput<Sel> , GetVariables<Sel, Args>>
pushAllowances<Sel extends Selection<PushAllowanceConnection>>(selectorFn: (s: PushAllowanceConnection) => [...Sel]):$Field<"pushAllowances", GetOutput<Sel> , GetVariables<Sel>>
pushAllowances(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PushAllowanceConnection)
      };
      return this.$_select("pushAllowances", options) as any
    }
  

      
/**
 * The repository associated with this branch protection rule.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * Whether someone other than the person who last pushed to the branch must approve this pull request
 */
      get requireLastPushApproval(): $Field<"requireLastPushApproval", boolean>  {
       return this.$_select("requireLastPushApproval") as any
      }

      
/**
 * Number of approving reviews required to update matching branches.
 */
      get requiredApprovingReviewCount(): $Field<"requiredApprovingReviewCount", number | null | undefined>  {
       return this.$_select("requiredApprovingReviewCount") as any
      }

      
/**
 * List of required status check contexts that must pass for commits to be accepted to matching branches.
 */
      get requiredStatusCheckContexts(): $Field<"requiredStatusCheckContexts", Readonly<Array<string | null | undefined>> | null | undefined>  {
       return this.$_select("requiredStatusCheckContexts") as any
      }

      
/**
 * List of required status checks that must pass for commits to be accepted to matching branches.
 */
      requiredStatusChecks<Sel extends Selection<RequiredStatusCheckDescription>>(selectorFn: (s: RequiredStatusCheckDescription) => [...Sel]):$Field<"requiredStatusChecks", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RequiredStatusCheckDescription)
      };
      return this.$_select("requiredStatusChecks", options) as any
    }
  

      
/**
 * Are approving reviews required to update matching branches.
 */
      get requiresApprovingReviews(): $Field<"requiresApprovingReviews", boolean>  {
       return this.$_select("requiresApprovingReviews") as any
      }

      
/**
 * Are reviews from code owners required to update matching branches.
 */
      get requiresCodeOwnerReviews(): $Field<"requiresCodeOwnerReviews", boolean>  {
       return this.$_select("requiresCodeOwnerReviews") as any
      }

      
/**
 * Are commits required to be signed.
 */
      get requiresCommitSignatures(): $Field<"requiresCommitSignatures", boolean>  {
       return this.$_select("requiresCommitSignatures") as any
      }

      
/**
 * Are conversations required to be resolved before merging.
 */
      get requiresConversationResolution(): $Field<"requiresConversationResolution", boolean>  {
       return this.$_select("requiresConversationResolution") as any
      }

      
/**
 * Are merge commits prohibited from being pushed to this branch.
 */
      get requiresLinearHistory(): $Field<"requiresLinearHistory", boolean>  {
       return this.$_select("requiresLinearHistory") as any
      }

      
/**
 * Are status checks required to update matching branches.
 */
      get requiresStatusChecks(): $Field<"requiresStatusChecks", boolean>  {
       return this.$_select("requiresStatusChecks") as any
      }

      
/**
 * Are branches required to be up to date before merging.
 */
      get requiresStrictStatusChecks(): $Field<"requiresStrictStatusChecks", boolean>  {
       return this.$_select("requiresStrictStatusChecks") as any
      }

      
/**
 * Is pushing to matching branches restricted.
 */
      get restrictsPushes(): $Field<"restrictsPushes", boolean>  {
       return this.$_select("restrictsPushes") as any
      }

      
/**
 * Is dismissal of pull request reviews restricted.
 */
      get restrictsReviewDismissals(): $Field<"restrictsReviewDismissals", boolean>  {
       return this.$_select("restrictsReviewDismissals") as any
      }

      
/**
 * A list review dismissal allowances for this branch protection rule.
 */
      reviewDismissalAllowances<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ReviewDismissalAllowanceConnection>>(args: Args, selectorFn: (s: ReviewDismissalAllowanceConnection) => [...Sel]):$Field<"reviewDismissalAllowances", GetOutput<Sel> , GetVariables<Sel, Args>>
reviewDismissalAllowances<Sel extends Selection<ReviewDismissalAllowanceConnection>>(selectorFn: (s: ReviewDismissalAllowanceConnection) => [...Sel]):$Field<"reviewDismissalAllowances", GetOutput<Sel> , GetVariables<Sel>>
reviewDismissalAllowances(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ReviewDismissalAllowanceConnection)
      };
      return this.$_select("reviewDismissalAllowances", options) as any
    }
  
}


/**
 * A conflict between two branch protection rules.
 */
export class BranchProtectionRuleConflict extends $Base<"BranchProtectionRuleConflict"> {
  constructor() {
    super("BranchProtectionRuleConflict")
  }

  
      
/**
 * Identifies the branch protection rule.
 */
      branchProtectionRule<Sel extends Selection<BranchProtectionRule>>(selectorFn: (s: BranchProtectionRule) => [...Sel]):$Field<"branchProtectionRule", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRule)
      };
      return this.$_select("branchProtectionRule", options) as any
    }
  

      
/**
 * Identifies the conflicting branch protection rule.
 */
      conflictingBranchProtectionRule<Sel extends Selection<BranchProtectionRule>>(selectorFn: (s: BranchProtectionRule) => [...Sel]):$Field<"conflictingBranchProtectionRule", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRule)
      };
      return this.$_select("conflictingBranchProtectionRule", options) as any
    }
  

      
/**
 * Identifies the branch ref that has conflicting rules
 */
      ref<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"ref", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("ref", options) as any
    }
  
}


/**
 * The connection type for BranchProtectionRuleConflict.
 */
export class BranchProtectionRuleConflictConnection extends $Base<"BranchProtectionRuleConflictConnection"> {
  constructor() {
    super("BranchProtectionRuleConflictConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<BranchProtectionRuleConflictEdge>>(selectorFn: (s: BranchProtectionRuleConflictEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRuleConflictEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<BranchProtectionRuleConflict>>(selectorFn: (s: BranchProtectionRuleConflict) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRuleConflict)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class BranchProtectionRuleConflictEdge extends $Base<"BranchProtectionRuleConflictEdge"> {
  constructor() {
    super("BranchProtectionRuleConflictEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<BranchProtectionRuleConflict>>(selectorFn: (s: BranchProtectionRuleConflict) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRuleConflict)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The connection type for BranchProtectionRule.
 */
export class BranchProtectionRuleConnection extends $Base<"BranchProtectionRuleConnection"> {
  constructor() {
    super("BranchProtectionRuleConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<BranchProtectionRuleEdge>>(selectorFn: (s: BranchProtectionRuleEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRuleEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<BranchProtectionRule>>(selectorFn: (s: BranchProtectionRule) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRule)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class BranchProtectionRuleEdge extends $Base<"BranchProtectionRuleEdge"> {
  constructor() {
    super("BranchProtectionRuleEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<BranchProtectionRule>>(selectorFn: (s: BranchProtectionRule) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRule)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A user, team, or app who has the ability to bypass a force push requirement on a protected branch.
 */
export class BypassForcePushAllowance extends $Base<"BypassForcePushAllowance"> {
  constructor() {
    super("BypassForcePushAllowance")
  }

  
      
/**
 * The actor that can force push.
 */
      actor<Sel extends Selection<BranchActorAllowanceActor>>(selectorFn: (s: BranchActorAllowanceActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchActorAllowanceActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the branch protection rule associated with the allowed user, team, or app.
 */
      branchProtectionRule<Sel extends Selection<BranchProtectionRule>>(selectorFn: (s: BranchProtectionRule) => [...Sel]):$Field<"branchProtectionRule", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRule)
      };
      return this.$_select("branchProtectionRule", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }
}


/**
 * The connection type for BypassForcePushAllowance.
 */
export class BypassForcePushAllowanceConnection extends $Base<"BypassForcePushAllowanceConnection"> {
  constructor() {
    super("BypassForcePushAllowanceConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<BypassForcePushAllowanceEdge>>(selectorFn: (s: BypassForcePushAllowanceEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BypassForcePushAllowanceEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<BypassForcePushAllowance>>(selectorFn: (s: BypassForcePushAllowance) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BypassForcePushAllowance)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class BypassForcePushAllowanceEdge extends $Base<"BypassForcePushAllowanceEdge"> {
  constructor() {
    super("BypassForcePushAllowanceEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<BypassForcePushAllowance>>(selectorFn: (s: BypassForcePushAllowance) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BypassForcePushAllowance)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A user, team, or app who has the ability to bypass a pull request requirement on a protected branch.
 */
export class BypassPullRequestAllowance extends $Base<"BypassPullRequestAllowance"> {
  constructor() {
    super("BypassPullRequestAllowance")
  }

  
      
/**
 * The actor that can bypass.
 */
      actor<Sel extends Selection<BranchActorAllowanceActor>>(selectorFn: (s: BranchActorAllowanceActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchActorAllowanceActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the branch protection rule associated with the allowed user, team, or app.
 */
      branchProtectionRule<Sel extends Selection<BranchProtectionRule>>(selectorFn: (s: BranchProtectionRule) => [...Sel]):$Field<"branchProtectionRule", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRule)
      };
      return this.$_select("branchProtectionRule", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }
}


/**
 * The connection type for BypassPullRequestAllowance.
 */
export class BypassPullRequestAllowanceConnection extends $Base<"BypassPullRequestAllowanceConnection"> {
  constructor() {
    super("BypassPullRequestAllowanceConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<BypassPullRequestAllowanceEdge>>(selectorFn: (s: BypassPullRequestAllowanceEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BypassPullRequestAllowanceEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<BypassPullRequestAllowance>>(selectorFn: (s: BypassPullRequestAllowance) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BypassPullRequestAllowance)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class BypassPullRequestAllowanceEdge extends $Base<"BypassPullRequestAllowanceEdge"> {
  constructor() {
    super("BypassPullRequestAllowanceEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<BypassPullRequestAllowance>>(selectorFn: (s: BypassPullRequestAllowance) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BypassPullRequestAllowance)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The Common Vulnerability Scoring System
 */
export class CVSS extends $Base<"CVSS"> {
  constructor() {
    super("CVSS")
  }

  
      
/**
 * The CVSS score associated with this advisory
 */
      get score(): $Field<"score", number>  {
       return this.$_select("score") as any
      }

      
/**
 * The CVSS vector string associated with this advisory
 */
      get vectorString(): $Field<"vectorString", string | null | undefined>  {
       return this.$_select("vectorString") as any
      }
}


/**
 * A common weakness enumeration
 */
export class CWE extends $Base<"CWE"> {
  constructor() {
    super("CWE")
  }

  
      
/**
 * The id of the CWE
 */
      get cweId(): $Field<"cweId", string>  {
       return this.$_select("cweId") as any
      }

      
/**
 * A detailed description of this CWE
 */
      get description(): $Field<"description", string>  {
       return this.$_select("description") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The name of this CWE
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }
}


/**
 * The connection type for CWE.
 */
export class CWEConnection extends $Base<"CWEConnection"> {
  constructor() {
    super("CWEConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CWEEdge>>(selectorFn: (s: CWEEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CWEEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<CWE>>(selectorFn: (s: CWE) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CWE)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class CWEEdge extends $Base<"CWEEdge"> {
  constructor() {
    super("CWEEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<CWE>>(selectorFn: (s: CWE) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CWE)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Autogenerated input type of CancelEnterpriseAdminInvitation
 */
export type CancelEnterpriseAdminInvitationInput = {
  clientMutationId?: string | null | undefined,
invitationId: string
}
    


/**
 * Autogenerated return type of CancelEnterpriseAdminInvitation
 */
export class CancelEnterpriseAdminInvitationPayload extends $Base<"CancelEnterpriseAdminInvitationPayload"> {
  constructor() {
    super("CancelEnterpriseAdminInvitationPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The invitation that was canceled.
 */
      invitation<Sel extends Selection<EnterpriseAdministratorInvitation>>(selectorFn: (s: EnterpriseAdministratorInvitation) => [...Sel]):$Field<"invitation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseAdministratorInvitation)
      };
      return this.$_select("invitation", options) as any
    }
  

      
/**
 * A message confirming the result of canceling an administrator invitation.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of CancelSponsorship
 */
export type CancelSponsorshipInput = {
  clientMutationId?: string | null | undefined,
sponsorId?: string | null | undefined,
sponsorLogin?: string | null | undefined,
sponsorableId?: string | null | undefined,
sponsorableLogin?: string | null | undefined
}
    


/**
 * Autogenerated return type of CancelSponsorship
 */
export class CancelSponsorshipPayload extends $Base<"CancelSponsorshipPayload"> {
  constructor() {
    super("CancelSponsorshipPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The tier that was being used at the time of cancellation.
 */
      sponsorsTier<Sel extends Selection<SponsorsTier>>(selectorFn: (s: SponsorsTier) => [...Sel]):$Field<"sponsorsTier", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsTier)
      };
      return this.$_select("sponsorsTier", options) as any
    }
  
}


/**
 * Autogenerated input type of ChangeUserStatus
 */
export type ChangeUserStatusInput = {
  clientMutationId?: string | null | undefined,
emoji?: string | null | undefined,
expiresAt?: string | null | undefined,
limitedAvailability?: boolean | null | undefined,
message?: string | null | undefined,
organizationId?: string | null | undefined
}
    


/**
 * Autogenerated return type of ChangeUserStatus
 */
export class ChangeUserStatusPayload extends $Base<"ChangeUserStatusPayload"> {
  constructor() {
    super("ChangeUserStatusPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * Your updated status.
 */
      status<Sel extends Selection<UserStatus>>(selectorFn: (s: UserStatus) => [...Sel]):$Field<"status", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserStatus)
      };
      return this.$_select("status", options) as any
    }
  
}


/**
 * A single check annotation.
 */
export class CheckAnnotation extends $Base<"CheckAnnotation"> {
  constructor() {
    super("CheckAnnotation")
  }

  
      
/**
 * The annotation's severity level.
 */
      get annotationLevel(): $Field<"annotationLevel", CheckAnnotationLevel | null | undefined>  {
       return this.$_select("annotationLevel") as any
      }

      
/**
 * The path to the file that this annotation was made on.
 */
      get blobUrl(): $Field<"blobUrl", string>  {
       return this.$_select("blobUrl") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The position of this annotation.
 */
      location<Sel extends Selection<CheckAnnotationSpan>>(selectorFn: (s: CheckAnnotationSpan) => [...Sel]):$Field<"location", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckAnnotationSpan)
      };
      return this.$_select("location", options) as any
    }
  

      
/**
 * The annotation's message.
 */
      get message(): $Field<"message", string>  {
       return this.$_select("message") as any
      }

      
/**
 * The path that this annotation was made on.
 */
      get path(): $Field<"path", string>  {
       return this.$_select("path") as any
      }

      
/**
 * Additional information about the annotation.
 */
      get rawDetails(): $Field<"rawDetails", string | null | undefined>  {
       return this.$_select("rawDetails") as any
      }

      
/**
 * The annotation's title
 */
      get title(): $Field<"title", string | null | undefined>  {
       return this.$_select("title") as any
      }
}


/**
 * The connection type for CheckAnnotation.
 */
export class CheckAnnotationConnection extends $Base<"CheckAnnotationConnection"> {
  constructor() {
    super("CheckAnnotationConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CheckAnnotationEdge>>(selectorFn: (s: CheckAnnotationEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckAnnotationEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<CheckAnnotation>>(selectorFn: (s: CheckAnnotation) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckAnnotation)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Information from a check run analysis to specific lines of code.
 */
export type CheckAnnotationData = {
  annotationLevel: CheckAnnotationLevel,
location: CheckAnnotationRange,
message: string,
path: string,
rawDetails?: string | null | undefined,
title?: string | null | undefined
}
    


/**
 * An edge in a connection.
 */
export class CheckAnnotationEdge extends $Base<"CheckAnnotationEdge"> {
  constructor() {
    super("CheckAnnotationEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<CheckAnnotation>>(selectorFn: (s: CheckAnnotation) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckAnnotation)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * Represents an annotation's information level.
 */
export enum CheckAnnotationLevel {
  
/**
 * An annotation indicating an inescapable error.
 */
  FAILURE = "FAILURE",

/**
 * An annotation indicating some information.
 */
  NOTICE = "NOTICE",

/**
 * An annotation indicating an ignorable error.
 */
  WARNING = "WARNING"
}
  


/**
 * A character position in a check annotation.
 */
export class CheckAnnotationPosition extends $Base<"CheckAnnotationPosition"> {
  constructor() {
    super("CheckAnnotationPosition")
  }

  
      
/**
 * Column number (1 indexed).
 */
      get column(): $Field<"column", number | null | undefined>  {
       return this.$_select("column") as any
      }

      
/**
 * Line number (1 indexed).
 */
      get line(): $Field<"line", number>  {
       return this.$_select("line") as any
      }
}


/**
 * Information from a check run analysis to specific lines of code.
 */
export type CheckAnnotationRange = {
  endColumn?: number | null | undefined,
endLine: number,
startColumn?: number | null | undefined,
startLine: number
}
    


/**
 * An inclusive pair of positions for a check annotation.
 */
export class CheckAnnotationSpan extends $Base<"CheckAnnotationSpan"> {
  constructor() {
    super("CheckAnnotationSpan")
  }

  
      
/**
 * End position (inclusive).
 */
      end<Sel extends Selection<CheckAnnotationPosition>>(selectorFn: (s: CheckAnnotationPosition) => [...Sel]):$Field<"end", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckAnnotationPosition)
      };
      return this.$_select("end", options) as any
    }
  

      
/**
 * Start position (inclusive).
 */
      start<Sel extends Selection<CheckAnnotationPosition>>(selectorFn: (s: CheckAnnotationPosition) => [...Sel]):$Field<"start", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckAnnotationPosition)
      };
      return this.$_select("start", options) as any
    }
  
}

  
/**
 * The possible states for a check suite or run conclusion.
 */
export enum CheckConclusionState {
  
/**
 * The check suite or run requires action.
 */
  ACTION_REQUIRED = "ACTION_REQUIRED",

/**
 * The check suite or run has timed out.
 */
  TIMED_OUT = "TIMED_OUT",

/**
 * The check suite or run has been cancelled.
 */
  CANCELLED = "CANCELLED",

/**
 * The check suite or run has failed.
 */
  FAILURE = "FAILURE",

/**
 * The check suite or run has succeeded.
 */
  SUCCESS = "SUCCESS",

/**
 * The check suite or run was neutral.
 */
  NEUTRAL = "NEUTRAL",

/**
 * The check suite or run was skipped.
 */
  SKIPPED = "SKIPPED",

/**
 * The check suite or run has failed at startup.
 */
  STARTUP_FAILURE = "STARTUP_FAILURE",

/**
 * The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion.
 */
  STALE = "STALE"
}
  


/**
 * A check run.
 */
export class CheckRun extends $Base<"CheckRun"> {
  constructor() {
    super("CheckRun")
  }

  
      
/**
 * The check run's annotations
 */
      annotations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<CheckAnnotationConnection>>(args: Args, selectorFn: (s: CheckAnnotationConnection) => [...Sel]):$Field<"annotations", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
annotations<Sel extends Selection<CheckAnnotationConnection>>(selectorFn: (s: CheckAnnotationConnection) => [...Sel]):$Field<"annotations", GetOutput<Sel> | undefined , GetVariables<Sel>>
annotations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new CheckAnnotationConnection)
      };
      return this.$_select("annotations", options) as any
    }
  

      
/**
 * The check suite that this run is a part of.
 */
      checkSuite<Sel extends Selection<CheckSuite>>(selectorFn: (s: CheckSuite) => [...Sel]):$Field<"checkSuite", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckSuite)
      };
      return this.$_select("checkSuite", options) as any
    }
  

      
/**
 * Identifies the date and time when the check run was completed.
 */
      get completedAt(): $Field<"completedAt", string | null | undefined>  {
       return this.$_select("completedAt") as any
      }

      
/**
 * The conclusion of the check run.
 */
      get conclusion(): $Field<"conclusion", CheckConclusionState | null | undefined>  {
       return this.$_select("conclusion") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The corresponding deployment for this job, if any
 */
      deployment<Sel extends Selection<Deployment>>(selectorFn: (s: Deployment) => [...Sel]):$Field<"deployment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Deployment)
      };
      return this.$_select("deployment", options) as any
    }
  

      
/**
 * The URL from which to find full details of the check run on the integrator's site.
 */
      get detailsUrl(): $Field<"detailsUrl", string | null | undefined>  {
       return this.$_select("detailsUrl") as any
      }

      
/**
 * A reference for the check run on the integrator's system.
 */
      get externalId(): $Field<"externalId", string | null | undefined>  {
       return this.$_select("externalId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether this is required to pass before merging for a specific pull request.
 */
      isRequired<Args extends VariabledInput<{
        pullRequestId?: string | null | undefined
pullRequestNumber?: number | null | undefined,
      }>>(args: Args):$Field<"isRequired", boolean , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              pullRequestId: "ID",
pullRequestNumber: "Int"
            },
        args,

        
      };
      return this.$_select("isRequired", options) as any
    }
  

      
/**
 * The name of the check for this check run.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * Information about a pending deployment, if any, in this check run
 */
      pendingDeploymentRequest<Sel extends Selection<DeploymentRequest>>(selectorFn: (s: DeploymentRequest) => [...Sel]):$Field<"pendingDeploymentRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentRequest)
      };
      return this.$_select("pendingDeploymentRequest", options) as any
    }
  

      
/**
 * The permalink to the check run summary.
 */
      get permalink(): $Field<"permalink", string>  {
       return this.$_select("permalink") as any
      }

      
/**
 * The repository associated with this check run.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for this check run.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the date and time when the check run was started.
 */
      get startedAt(): $Field<"startedAt", string | null | undefined>  {
       return this.$_select("startedAt") as any
      }

      
/**
 * The current status of the check run.
 */
      get status(): $Field<"status", CheckStatusState>  {
       return this.$_select("status") as any
      }

      
/**
 * The check run's steps
 */
      steps<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
number?: number | null | undefined,
      }>,Sel extends Selection<CheckStepConnection>>(args: Args, selectorFn: (s: CheckStepConnection) => [...Sel]):$Field<"steps", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
steps<Sel extends Selection<CheckStepConnection>>(selectorFn: (s: CheckStepConnection) => [...Sel]):$Field<"steps", GetOutput<Sel> | undefined , GetVariables<Sel>>
steps(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
number: "Int"
            },
        args,

        selection: selectorFn(new CheckStepConnection)
      };
      return this.$_select("steps", options) as any
    }
  

      
/**
 * A string representing the check run's summary
 */
      get summary(): $Field<"summary", string | null | undefined>  {
       return this.$_select("summary") as any
      }

      
/**
 * A string representing the check run's text
 */
      get text(): $Field<"text", string | null | undefined>  {
       return this.$_select("text") as any
      }

      
/**
 * A string representing the check run
 */
      get title(): $Field<"title", string | null | undefined>  {
       return this.$_select("title") as any
      }

      
/**
 * The HTTP URL for this check run.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * Possible further actions the integrator can perform.
 */
export type CheckRunAction = {
  description: string,
identifier: string,
label: string
}
    


/**
 * The connection type for CheckRun.
 */
export class CheckRunConnection extends $Base<"CheckRunConnection"> {
  constructor() {
    super("CheckRunConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CheckRunEdge>>(selectorFn: (s: CheckRunEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckRunEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<CheckRun>>(selectorFn: (s: CheckRun) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckRun)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class CheckRunEdge extends $Base<"CheckRunEdge"> {
  constructor() {
    super("CheckRunEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<CheckRun>>(selectorFn: (s: CheckRun) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckRun)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The filters that are available when fetching check runs.
 */
export type CheckRunFilter = {
  appId?: number | null | undefined,
checkName?: string | null | undefined,
checkType?: CheckRunType | null | undefined,
conclusions?: Readonly<Array<CheckConclusionState>> | null | undefined,
status?: CheckStatusState | null | undefined,
statuses?: Readonly<Array<CheckStatusState>> | null | undefined
}
    


/**
 * Descriptive details about the check run.
 */
export type CheckRunOutput = {
  annotations?: Readonly<Array<CheckAnnotationData>> | null | undefined,
images?: Readonly<Array<CheckRunOutputImage>> | null | undefined,
summary: string,
text?: string | null | undefined,
title: string
}
    


/**
 * Images attached to the check run output displayed in the GitHub pull request UI.
 */
export type CheckRunOutputImage = {
  alt: string,
caption?: string | null | undefined,
imageUrl: string
}
    

  
/**
 * The possible states of a check run in a status rollup.
 */
export enum CheckRunState {
  
/**
 * The check run requires action.
 */
  ACTION_REQUIRED = "ACTION_REQUIRED",

/**
 * The check run has been cancelled.
 */
  CANCELLED = "CANCELLED",

/**
 * The check run has been completed.
 */
  COMPLETED = "COMPLETED",

/**
 * The check run has failed.
 */
  FAILURE = "FAILURE",

/**
 * The check run is in progress.
 */
  IN_PROGRESS = "IN_PROGRESS",

/**
 * The check run was neutral.
 */
  NEUTRAL = "NEUTRAL",

/**
 * The check run is in pending state.
 */
  PENDING = "PENDING",

/**
 * The check run has been queued.
 */
  QUEUED = "QUEUED",

/**
 * The check run was skipped.
 */
  SKIPPED = "SKIPPED",

/**
 * The check run was marked stale by GitHub. Only GitHub can use this conclusion.
 */
  STALE = "STALE",

/**
 * The check run has failed at startup.
 */
  STARTUP_FAILURE = "STARTUP_FAILURE",

/**
 * The check run has succeeded.
 */
  SUCCESS = "SUCCESS",

/**
 * The check run has timed out.
 */
  TIMED_OUT = "TIMED_OUT",

/**
 * The check run is in waiting state.
 */
  WAITING = "WAITING"
}
  


/**
 * Represents a count of the state of a check run.
 */
export class CheckRunStateCount extends $Base<"CheckRunStateCount"> {
  constructor() {
    super("CheckRunStateCount")
  }

  
      
/**
 * The number of check runs with this state.
 */
      get count(): $Field<"count", number>  {
       return this.$_select("count") as any
      }

      
/**
 * The state of a check run.
 */
      get state(): $Field<"state", CheckRunState>  {
       return this.$_select("state") as any
      }
}

  
/**
 * The possible types of check runs.
 */
export enum CheckRunType {
  
/**
 * Every check run available.
 */
  ALL = "ALL",

/**
 * The latest check run.
 */
  LATEST = "LATEST"
}
  

  
/**
 * The possible states for a check suite or run status.
 */
export enum CheckStatusState {
  
/**
 * The check suite or run has been queued.
 */
  QUEUED = "QUEUED",

/**
 * The check suite or run is in progress.
 */
  IN_PROGRESS = "IN_PROGRESS",

/**
 * The check suite or run has been completed.
 */
  COMPLETED = "COMPLETED",

/**
 * The check suite or run is in waiting state.
 */
  WAITING = "WAITING",

/**
 * The check suite or run is in pending state.
 */
  PENDING = "PENDING",

/**
 * The check suite or run has been requested.
 */
  REQUESTED = "REQUESTED"
}
  


/**
 * A single check step.
 */
export class CheckStep extends $Base<"CheckStep"> {
  constructor() {
    super("CheckStep")
  }

  
      
/**
 * Identifies the date and time when the check step was completed.
 */
      get completedAt(): $Field<"completedAt", string | null | undefined>  {
       return this.$_select("completedAt") as any
      }

      
/**
 * The conclusion of the check step.
 */
      get conclusion(): $Field<"conclusion", CheckConclusionState | null | undefined>  {
       return this.$_select("conclusion") as any
      }

      
/**
 * A reference for the check step on the integrator's system.
 */
      get externalId(): $Field<"externalId", string | null | undefined>  {
       return this.$_select("externalId") as any
      }

      
/**
 * The step's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The index of the step in the list of steps of the parent check run.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * Number of seconds to completion.
 */
      get secondsToCompletion(): $Field<"secondsToCompletion", number | null | undefined>  {
       return this.$_select("secondsToCompletion") as any
      }

      
/**
 * Identifies the date and time when the check step was started.
 */
      get startedAt(): $Field<"startedAt", string | null | undefined>  {
       return this.$_select("startedAt") as any
      }

      
/**
 * The current status of the check step.
 */
      get status(): $Field<"status", CheckStatusState>  {
       return this.$_select("status") as any
      }
}


/**
 * The connection type for CheckStep.
 */
export class CheckStepConnection extends $Base<"CheckStepConnection"> {
  constructor() {
    super("CheckStepConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CheckStepEdge>>(selectorFn: (s: CheckStepEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckStepEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<CheckStep>>(selectorFn: (s: CheckStep) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckStep)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class CheckStepEdge extends $Base<"CheckStepEdge"> {
  constructor() {
    super("CheckStepEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<CheckStep>>(selectorFn: (s: CheckStep) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckStep)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A check suite.
 */
export class CheckSuite extends $Base<"CheckSuite"> {
  constructor() {
    super("CheckSuite")
  }

  
      
/**
 * The GitHub App which created this check suite.
 */
      app<Sel extends Selection<App>>(selectorFn: (s: App) => [...Sel]):$Field<"app", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new App)
      };
      return this.$_select("app", options) as any
    }
  

      
/**
 * The name of the branch for this check suite.
 */
      branch<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"branch", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("branch", options) as any
    }
  

      
/**
 * The check runs associated with a check suite.
 */
      checkRuns<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
filterBy?: CheckRunFilter | null | undefined,
      }>,Sel extends Selection<CheckRunConnection>>(args: Args, selectorFn: (s: CheckRunConnection) => [...Sel]):$Field<"checkRuns", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
checkRuns<Sel extends Selection<CheckRunConnection>>(selectorFn: (s: CheckRunConnection) => [...Sel]):$Field<"checkRuns", GetOutput<Sel> | undefined , GetVariables<Sel>>
checkRuns(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
filterBy: "CheckRunFilter"
            },
        args,

        selection: selectorFn(new CheckRunConnection)
      };
      return this.$_select("checkRuns", options) as any
    }
  

      
/**
 * The commit for this check suite
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
/**
 * The conclusion of this check suite.
 */
      get conclusion(): $Field<"conclusion", CheckConclusionState | null | undefined>  {
       return this.$_select("conclusion") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The user who triggered the check suite.
 */
      creator<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * A list of open pull requests matching the check suite.
 */
      matchingPullRequests<Args extends VariabledInput<{
        states?: Readonly<Array<PullRequestState>> | null | undefined
labels?: Readonly<Array<string>> | null | undefined
headRefName?: string | null | undefined
baseRefName?: string | null | undefined
orderBy?: IssueOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestConnection>>(args: Args, selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"matchingPullRequests", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
matchingPullRequests<Sel extends Selection<PullRequestConnection>>(selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"matchingPullRequests", GetOutput<Sel> | undefined , GetVariables<Sel>>
matchingPullRequests(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              states: "[PullRequestState!]",
labels: "[String!]",
headRefName: "String",
baseRefName: "String",
orderBy: "IssueOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestConnection)
      };
      return this.$_select("matchingPullRequests", options) as any
    }
  

      
/**
 * The push that triggered this check suite.
 */
      push<Sel extends Selection<Push>>(selectorFn: (s: Push) => [...Sel]):$Field<"push", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Push)
      };
      return this.$_select("push", options) as any
    }
  

      
/**
 * The repository associated with this check suite.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for this check suite
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The status of this check suite.
 */
      get status(): $Field<"status", CheckStatusState>  {
       return this.$_select("status") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this check suite
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * The workflow run associated with this check suite.
 */
      workflowRun<Sel extends Selection<WorkflowRun>>(selectorFn: (s: WorkflowRun) => [...Sel]):$Field<"workflowRun", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new WorkflowRun)
      };
      return this.$_select("workflowRun", options) as any
    }
  
}


/**
 * The auto-trigger preferences that are available for check suites.
 */
export type CheckSuiteAutoTriggerPreference = {
  appId: string,
setting: boolean
}
    


/**
 * The connection type for CheckSuite.
 */
export class CheckSuiteConnection extends $Base<"CheckSuiteConnection"> {
  constructor() {
    super("CheckSuiteConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CheckSuiteEdge>>(selectorFn: (s: CheckSuiteEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckSuiteEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<CheckSuite>>(selectorFn: (s: CheckSuite) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckSuite)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class CheckSuiteEdge extends $Base<"CheckSuiteEdge"> {
  constructor() {
    super("CheckSuiteEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<CheckSuite>>(selectorFn: (s: CheckSuite) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckSuite)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The filters that are available when fetching check suites.
 */
export type CheckSuiteFilter = {
  appId?: number | null | undefined,
checkName?: string | null | undefined
}
    


/**
 * Autogenerated input type of ClearLabelsFromLabelable
 */
export type ClearLabelsFromLabelableInput = {
  clientMutationId?: string | null | undefined,
labelableId: string
}
    


/**
 * Autogenerated return type of ClearLabelsFromLabelable
 */
export class ClearLabelsFromLabelablePayload extends $Base<"ClearLabelsFromLabelablePayload"> {
  constructor() {
    super("ClearLabelsFromLabelablePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The item that was unlabeled.
 */
      labelable<Sel extends Selection<Labelable>>(selectorFn: (s: Labelable) => [...Sel]):$Field<"labelable", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Labelable)
      };
      return this.$_select("labelable", options) as any
    }
  
}


/**
 * Autogenerated input type of ClearProjectV2ItemFieldValue
 */
export type ClearProjectV2ItemFieldValueInput = {
  clientMutationId?: string | null | undefined,
fieldId: string,
itemId: string,
projectId: string
}
    


/**
 * Autogenerated return type of ClearProjectV2ItemFieldValue
 */
export class ClearProjectV2ItemFieldValuePayload extends $Base<"ClearProjectV2ItemFieldValuePayload"> {
  constructor() {
    super("ClearProjectV2ItemFieldValuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated item.
 */
      projectV2Item<Sel extends Selection<ProjectV2Item>>(selectorFn: (s: ProjectV2Item) => [...Sel]):$Field<"projectV2Item", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Item)
      };
      return this.$_select("projectV2Item", options) as any
    }
  
}


/**
 * Autogenerated input type of CloneProject
 */
export type CloneProjectInput = {
  body?: string | null | undefined,
clientMutationId?: string | null | undefined,
includeWorkflows: boolean,
name: string,
public?: boolean | null | undefined,
sourceId: string,
targetOwnerId: string
}
    


/**
 * Autogenerated return type of CloneProject
 */
export class CloneProjectPayload extends $Base<"CloneProjectPayload"> {
  constructor() {
    super("CloneProjectPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The id of the JobStatus for populating cloned fields.
 */
      get jobStatusId(): $Field<"jobStatusId", string | null | undefined>  {
       return this.$_select("jobStatusId") as any
      }

      
/**
 * The new cloned project.
 */
      project<Sel extends Selection<Project>>(selectorFn: (s: Project) => [...Sel]):$Field<"project", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Project)
      };
      return this.$_select("project", options) as any
    }
  
}


/**
 * Autogenerated input type of CloneTemplateRepository
 */
export type CloneTemplateRepositoryInput = {
  clientMutationId?: string | null | undefined,
description?: string | null | undefined,
includeAllBranches?: boolean | null | undefined,
name: string,
ownerId: string,
repositoryId: string,
visibility: RepositoryVisibility
}
    


/**
 * Autogenerated return type of CloneTemplateRepository
 */
export class CloneTemplateRepositoryPayload extends $Base<"CloneTemplateRepositoryPayload"> {
  constructor() {
    super("CloneTemplateRepositoryPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new repository.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * An object that can be closed
 */
export class Closable extends $Interface<{Issue: Issue,Milestone: Milestone,Project: Project,ProjectNext: ProjectNext,ProjectV2: ProjectV2,PullRequest: PullRequest}, "Closable"> {
  constructor() {
    super({Issue: Issue,Milestone: Milestone,Project: Project,ProjectNext: ProjectNext,ProjectV2: ProjectV2,PullRequest: PullRequest}, "Closable")
  }
}


/**
 * Autogenerated input type of CloseIssue
 */
export type CloseIssueInput = {
  clientMutationId?: string | null | undefined,
issueId: string,
stateReason?: IssueClosedStateReason | null | undefined
}
    


/**
 * Autogenerated return type of CloseIssue
 */
export class CloseIssuePayload extends $Base<"CloseIssuePayload"> {
  constructor() {
    super("CloseIssuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The issue that was closed.
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  
}


/**
 * Autogenerated input type of ClosePullRequest
 */
export type ClosePullRequestInput = {
  clientMutationId?: string | null | undefined,
pullRequestId: string
}
    


/**
 * Autogenerated return type of ClosePullRequest
 */
export class ClosePullRequestPayload extends $Base<"ClosePullRequestPayload"> {
  constructor() {
    super("ClosePullRequestPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The pull request that was closed.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents a 'closed' event on any `Closable`.
 */
export class ClosedEvent extends $Base<"ClosedEvent"> {
  constructor() {
    super("ClosedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Object that was closed.
 */
      closable<Sel extends Selection<Closable>>(selectorFn: (s: Closable) => [...Sel]):$Field<"closable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Closable)
      };
      return this.$_select("closable", options) as any
    }
  

      
/**
 * Object which triggered the creation of this event.
 */
      closer<Sel extends Selection<Closer>>(selectorFn: (s: Closer) => [...Sel]):$Field<"closer", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Closer)
      };
      return this.$_select("closer", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The HTTP path for this closed event.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The reason the issue state was changed to closed.
 */
      get stateReason(): $Field<"stateReason", IssueStateReason | null | undefined>  {
       return this.$_select("stateReason") as any
      }

      
/**
 * The HTTP URL for this closed event.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * The object which triggered a `ClosedEvent`.
 */
export class Closer extends $Union<{Commit: Commit,PullRequest: PullRequest,Node: Node,GitObject: GitObject,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner}, "Closer"> {
  constructor() {
    super({Commit: Commit,PullRequest: PullRequest,Node: Node,GitObject: GitObject,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner})
  }
}


/**
 * The Code of Conduct for a repository
 */
export class CodeOfConduct extends $Base<"CodeOfConduct"> {
  constructor() {
    super("CodeOfConduct")
  }

  
      
/**
 * The body of the Code of Conduct
 */
      get body(): $Field<"body", string | null | undefined>  {
       return this.$_select("body") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The key for the Code of Conduct
 */
      get key(): $Field<"key", string>  {
       return this.$_select("key") as any
      }

      
/**
 * The formal name of the Code of Conduct
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The HTTP path for this Code of Conduct
 */
      get resourcePath(): $Field<"resourcePath", string | null | undefined>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for this Code of Conduct
 */
      get url(): $Field<"url", string | null | undefined>  {
       return this.$_select("url") as any
      }
}

  
/**
 * Collaborators affiliation level with a subject.
 */
export enum CollaboratorAffiliation {
  
/**
 * All outside collaborators of an organization-owned subject.
 */
  OUTSIDE = "OUTSIDE",

/**
 * All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
 */
  DIRECT = "DIRECT",

/**
 * All collaborators the authenticated user can see.
 */
  ALL = "ALL"
}
  


/**
 * Represents a comment.
 */
export class Comment extends $Interface<{CommitComment: CommitComment,Discussion: Discussion,DiscussionComment: DiscussionComment,GistComment: GistComment,Issue: Issue,IssueComment: IssueComment,PullRequest: PullRequest,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment}, "Comment"> {
  constructor() {
    super({CommitComment: CommitComment,Discussion: Discussion,DiscussionComment: DiscussionComment,GistComment: GistComment,Issue: Issue,IssueComment: IssueComment,PullRequest: PullRequest,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment}, "Comment")
  }
}

  
/**
 * A comment author association with repository.
 */
export enum CommentAuthorAssociation {
  
/**
 * Author is a member of the organization that owns the repository.
 */
  MEMBER = "MEMBER",

/**
 * Author is the owner of the repository.
 */
  OWNER = "OWNER",

/**
 * Author is a placeholder for an unclaimed user.
 */
  MANNEQUIN = "MANNEQUIN",

/**
 * Author has been invited to collaborate on the repository.
 */
  COLLABORATOR = "COLLABORATOR",

/**
 * Author has previously committed to the repository.
 */
  CONTRIBUTOR = "CONTRIBUTOR",

/**
 * Author has not previously committed to the repository.
 */
  FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR",

/**
 * Author has not previously committed to GitHub.
 */
  FIRST_TIMER = "FIRST_TIMER",

/**
 * Author has no association with the repository.
 */
  NONE = "NONE"
}
  

  
/**
 * The possible errors that will prevent a user from updating a comment.
 */
export enum CommentCannotUpdateReason {
  
/**
 * Unable to create comment because repository is archived.
 */
  ARCHIVED = "ARCHIVED",

/**
 * You must be the author or have write access to this repository to update this comment.
 */
  INSUFFICIENT_ACCESS = "INSUFFICIENT_ACCESS",

/**
 * Unable to create comment because issue is locked.
 */
  LOCKED = "LOCKED",

/**
 * You must be logged in to update this comment.
 */
  LOGIN_REQUIRED = "LOGIN_REQUIRED",

/**
 * Repository is under maintenance.
 */
  MAINTENANCE = "MAINTENANCE",

/**
 * At least one email address must be verified to update this comment.
 */
  VERIFIED_EMAIL_REQUIRED = "VERIFIED_EMAIL_REQUIRED",

/**
 * You cannot update this comment
 */
  DENIED = "DENIED"
}
  


/**
 * Represents a 'comment_deleted' event on a given issue or pull request.
 */
export class CommentDeletedEvent extends $Base<"CommentDeletedEvent"> {
  constructor() {
    super("CommentDeletedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The user who authored the deleted comment.
 */
      deletedCommentAuthor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"deletedCommentAuthor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("deletedCommentAuthor", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }
}


/**
 * Represents a Git commit.
 */
export class Commit extends $Base<"Commit"> {
  constructor() {
    super("Commit")
  }

  
      
/**
 * An abbreviated version of the Git object ID
 */
      get abbreviatedOid(): $Field<"abbreviatedOid", string>  {
       return this.$_select("abbreviatedOid") as any
      }

      
/**
 * The number of additions in this commit.
 */
      get additions(): $Field<"additions", number>  {
       return this.$_select("additions") as any
      }

      
/**
 * The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit
 */
      associatedPullRequests<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: PullRequestOrder | null | undefined,
      }>,Sel extends Selection<PullRequestConnection>>(args: Args, selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"associatedPullRequests", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
associatedPullRequests<Sel extends Selection<PullRequestConnection>>(selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"associatedPullRequests", GetOutput<Sel> | undefined , GetVariables<Sel>>
associatedPullRequests(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "PullRequestOrder"
            },
        args,

        selection: selectorFn(new PullRequestConnection)
      };
      return this.$_select("associatedPullRequests", options) as any
    }
  

      
/**
 * Authorship details of the commit.
 */
      author<Sel extends Selection<GitActor>>(selectorFn: (s: GitActor) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitActor)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Check if the committer and the author match.
 */
      get authoredByCommitter(): $Field<"authoredByCommitter", boolean>  {
       return this.$_select("authoredByCommitter") as any
      }

      
/**
 * The datetime when this commit was authored.
 */
      get authoredDate(): $Field<"authoredDate", string>  {
       return this.$_select("authoredDate") as any
      }

      
/**
 * The list of authors for this commit based on the git author and the Co-authored-by
message trailer. The git author will always be first.

 */
      authors<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<GitActorConnection>>(args: Args, selectorFn: (s: GitActorConnection) => [...Sel]):$Field<"authors", GetOutput<Sel> , GetVariables<Sel, Args>>
authors<Sel extends Selection<GitActorConnection>>(selectorFn: (s: GitActorConnection) => [...Sel]):$Field<"authors", GetOutput<Sel> , GetVariables<Sel>>
authors(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new GitActorConnection)
      };
      return this.$_select("authors", options) as any
    }
  

      
/**
 * Fetches `git blame` information.
 */
      blame<Args extends VariabledInput<{
        path: string,
      }>,Sel extends Selection<Blame>>(args: Args, selectorFn: (s: Blame) => [...Sel]):$Field<"blame", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              path: "String!"
            },
        args,

        selection: selectorFn(new Blame)
      };
      return this.$_select("blame", options) as any
    }
  

      
/**
 * We recommend using the `changedFielsIfAvailable` field instead of `changedFiles`, as `changedFiles` will cause your request to return an error if GitHub is unable to calculate the number of changed files.
 */
      get changedFiles(): $Field<"changedFiles", number>  {
       return this.$_select("changedFiles") as any
      }

      
/**
 * The number of changed files in this commit. If GitHub is unable to calculate the number of changed files (for example due to a timeout), this will return `null`. We recommend using this field instead of `changedFiles`.
 */
      get changedFilesIfAvailable(): $Field<"changedFilesIfAvailable", number | null | undefined>  {
       return this.$_select("changedFilesIfAvailable") as any
      }

      
/**
 * The check suites associated with a commit.
 */
      checkSuites<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
filterBy?: CheckSuiteFilter | null | undefined,
      }>,Sel extends Selection<CheckSuiteConnection>>(args: Args, selectorFn: (s: CheckSuiteConnection) => [...Sel]):$Field<"checkSuites", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
checkSuites<Sel extends Selection<CheckSuiteConnection>>(selectorFn: (s: CheckSuiteConnection) => [...Sel]):$Field<"checkSuites", GetOutput<Sel> | undefined , GetVariables<Sel>>
checkSuites(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
filterBy: "CheckSuiteFilter"
            },
        args,

        selection: selectorFn(new CheckSuiteConnection)
      };
      return this.$_select("checkSuites", options) as any
    }
  

      
/**
 * Comments made on the commit.
 */
      comments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<CommitCommentConnection>>(args: Args, selectorFn: (s: CommitCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel, Args>>
comments<Sel extends Selection<CommitCommentConnection>>(selectorFn: (s: CommitCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel>>
comments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new CommitCommentConnection)
      };
      return this.$_select("comments", options) as any
    }
  

      
/**
 * The HTTP path for this Git object
 */
      get commitResourcePath(): $Field<"commitResourcePath", string>  {
       return this.$_select("commitResourcePath") as any
      }

      
/**
 * The HTTP URL for this Git object
 */
      get commitUrl(): $Field<"commitUrl", string>  {
       return this.$_select("commitUrl") as any
      }

      
/**
 * The datetime when this commit was committed.
 */
      get committedDate(): $Field<"committedDate", string>  {
       return this.$_select("committedDate") as any
      }

      
/**
 * Check if committed via GitHub web UI.
 */
      get committedViaWeb(): $Field<"committedViaWeb", boolean>  {
       return this.$_select("committedViaWeb") as any
      }

      
/**
 * Committer details of the commit.
 */
      committer<Sel extends Selection<GitActor>>(selectorFn: (s: GitActor) => [...Sel]):$Field<"committer", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitActor)
      };
      return this.$_select("committer", options) as any
    }
  

      
/**
 * The number of deletions in this commit.
 */
      get deletions(): $Field<"deletions", number>  {
       return this.$_select("deletions") as any
      }

      
/**
 * The deployments associated with a commit.
 */
      deployments<Args extends VariabledInput<{
        environments?: Readonly<Array<string>> | null | undefined
orderBy?: DeploymentOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<DeploymentConnection>>(args: Args, selectorFn: (s: DeploymentConnection) => [...Sel]):$Field<"deployments", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
deployments<Sel extends Selection<DeploymentConnection>>(selectorFn: (s: DeploymentConnection) => [...Sel]):$Field<"deployments", GetOutput<Sel> | undefined , GetVariables<Sel>>
deployments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              environments: "[String!]",
orderBy: "DeploymentOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new DeploymentConnection)
      };
      return this.$_select("deployments", options) as any
    }
  

      
/**
 * The tree entry representing the file located at the given path.
 */
      file<Args extends VariabledInput<{
        path: string,
      }>,Sel extends Selection<TreeEntry>>(args: Args, selectorFn: (s: TreeEntry) => [...Sel]):$Field<"file", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              path: "String!"
            },
        args,

        selection: selectorFn(new TreeEntry)
      };
      return this.$_select("file", options) as any
    }
  

      
/**
 * The linear commit history starting from (and including) this commit, in the same order as `git log`.
 */
      history<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
path?: string | null | undefined
author?: CommitAuthor | null | undefined
since?: string | null | undefined
until?: string | null | undefined,
      }>,Sel extends Selection<CommitHistoryConnection>>(args: Args, selectorFn: (s: CommitHistoryConnection) => [...Sel]):$Field<"history", GetOutput<Sel> , GetVariables<Sel, Args>>
history<Sel extends Selection<CommitHistoryConnection>>(selectorFn: (s: CommitHistoryConnection) => [...Sel]):$Field<"history", GetOutput<Sel> , GetVariables<Sel>>
history(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
path: "String",
author: "CommitAuthor",
since: "GitTimestamp",
until: "GitTimestamp"
            },
        args,

        selection: selectorFn(new CommitHistoryConnection)
      };
      return this.$_select("history", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The Git commit message
 */
      get message(): $Field<"message", string>  {
       return this.$_select("message") as any
      }

      
/**
 * The Git commit message body
 */
      get messageBody(): $Field<"messageBody", string>  {
       return this.$_select("messageBody") as any
      }

      
/**
 * The commit message body rendered to HTML.
 */
      get messageBodyHTML(): $Field<"messageBodyHTML", string>  {
       return this.$_select("messageBodyHTML") as any
      }

      
/**
 * The Git commit message headline
 */
      get messageHeadline(): $Field<"messageHeadline", string>  {
       return this.$_select("messageHeadline") as any
      }

      
/**
 * The commit message headline rendered to HTML.
 */
      get messageHeadlineHTML(): $Field<"messageHeadlineHTML", string>  {
       return this.$_select("messageHeadlineHTML") as any
      }

      
/**
 * The Git object ID
 */
      get oid(): $Field<"oid", string>  {
       return this.$_select("oid") as any
      }

      
/**
 * The organization this commit was made on behalf of.
 */
      onBehalfOf<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"onBehalfOf", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("onBehalfOf", options) as any
    }
  

      
/**
 * The parents of a commit.
 */
      parents<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<CommitConnection>>(args: Args, selectorFn: (s: CommitConnection) => [...Sel]):$Field<"parents", GetOutput<Sel> , GetVariables<Sel, Args>>
parents<Sel extends Selection<CommitConnection>>(selectorFn: (s: CommitConnection) => [...Sel]):$Field<"parents", GetOutput<Sel> , GetVariables<Sel>>
parents(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new CommitConnection)
      };
      return this.$_select("parents", options) as any
    }
  

      
/**
 * The datetime when this commit was pushed.
 */
      get pushedDate(): $Field<"pushedDate", string | null | undefined>  {
       return this.$_select("pushedDate") as any
      }

      
/**
 * The Repository this commit belongs to
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for this commit
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Commit signing information, if present.
 */
      signature<Sel extends Selection<GitSignature>>(selectorFn: (s: GitSignature) => [...Sel]):$Field<"signature", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitSignature)
      };
      return this.$_select("signature", options) as any
    }
  

      
/**
 * Status information for this commit
 */
      status<Sel extends Selection<Status>>(selectorFn: (s: Status) => [...Sel]):$Field<"status", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Status)
      };
      return this.$_select("status", options) as any
    }
  

      
/**
 * Check and Status rollup information for this commit.
 */
      statusCheckRollup<Sel extends Selection<StatusCheckRollup>>(selectorFn: (s: StatusCheckRollup) => [...Sel]):$Field<"statusCheckRollup", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new StatusCheckRollup)
      };
      return this.$_select("statusCheckRollup", options) as any
    }
  

      
/**
 * Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
 */
      submodules<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<SubmoduleConnection>>(args: Args, selectorFn: (s: SubmoduleConnection) => [...Sel]):$Field<"submodules", GetOutput<Sel> , GetVariables<Sel, Args>>
submodules<Sel extends Selection<SubmoduleConnection>>(selectorFn: (s: SubmoduleConnection) => [...Sel]):$Field<"submodules", GetOutput<Sel> , GetVariables<Sel>>
submodules(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new SubmoduleConnection)
      };
      return this.$_select("submodules", options) as any
    }
  

      
/**
 * Returns a URL to download a tarball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes.
 */
      get tarballUrl(): $Field<"tarballUrl", string>  {
       return this.$_select("tarballUrl") as any
      }

      
/**
 * Commit's root Tree
 */
      tree<Sel extends Selection<Tree>>(selectorFn: (s: Tree) => [...Sel]):$Field<"tree", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Tree)
      };
      return this.$_select("tree", options) as any
    }
  

      
/**
 * The HTTP path for the tree of this commit
 */
      get treeResourcePath(): $Field<"treeResourcePath", string>  {
       return this.$_select("treeResourcePath") as any
      }

      
/**
 * The HTTP URL for the tree of this commit
 */
      get treeUrl(): $Field<"treeUrl", string>  {
       return this.$_select("treeUrl") as any
      }

      
/**
 * The HTTP URL for this commit
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * Check if the viewer is able to change their subscription status for the repository.
 */
      get viewerCanSubscribe(): $Field<"viewerCanSubscribe", boolean>  {
       return this.$_select("viewerCanSubscribe") as any
      }

      
/**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
      get viewerSubscription(): $Field<"viewerSubscription", SubscriptionState | null | undefined>  {
       return this.$_select("viewerSubscription") as any
      }

      
/**
 * Returns a URL to download a zipball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes.
 */
      get zipballUrl(): $Field<"zipballUrl", string>  {
       return this.$_select("zipballUrl") as any
      }
}


/**
 * Specifies an author for filtering Git commits.
 */
export type CommitAuthor = {
  emails?: Readonly<Array<string>> | null | undefined,
id?: string | null | undefined
}
    


/**
 * Represents a comment on a given Commit.
 */
export class CommitComment extends $Base<"CommitComment"> {
  constructor() {
    super("CommitComment")
  }

  
      
/**
 * The actor who authored the comment.
 */
      author<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Author's association with the subject of the comment.
 */
      get authorAssociation(): $Field<"authorAssociation", CommentAuthorAssociation>  {
       return this.$_select("authorAssociation") as any
      }

      
/**
 * Identifies the comment body.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * The body rendered to text.
 */
      get bodyText(): $Field<"bodyText", string>  {
       return this.$_select("bodyText") as any
      }

      
/**
 * Identifies the commit associated with the comment, if the commit exists.
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Check if this comment was created via an email reply.
 */
      get createdViaEmail(): $Field<"createdViaEmail", boolean>  {
       return this.$_select("createdViaEmail") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The actor who edited the comment.
 */
      editor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"editor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("editor", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Check if this comment was edited and includes an edit with the creation data
 */
      get includesCreatedEdit(): $Field<"includesCreatedEdit", boolean>  {
       return this.$_select("includesCreatedEdit") as any
      }

      
/**
 * Returns whether or not a comment has been minimized.
 */
      get isMinimized(): $Field<"isMinimized", boolean>  {
       return this.$_select("isMinimized") as any
      }

      
/**
 * The moment the editor made the last edit
 */
      get lastEditedAt(): $Field<"lastEditedAt", string | null | undefined>  {
       return this.$_select("lastEditedAt") as any
      }

      
/**
 * Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
 */
      get minimizedReason(): $Field<"minimizedReason", string | null | undefined>  {
       return this.$_select("minimizedReason") as any
      }

      
/**
 * Identifies the file path associated with the comment.
 */
      get path(): $Field<"path", string | null | undefined>  {
       return this.$_select("path") as any
      }

      
/**
 * Identifies the line position associated with the comment.
 */
      get position(): $Field<"position", number | null | undefined>  {
       return this.$_select("position") as any
      }

      
/**
 * Identifies when the comment was published at.
 */
      get publishedAt(): $Field<"publishedAt", string | null | undefined>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * A list of reactions grouped by content left on the subject.
 */
      reactionGroups<Sel extends Selection<ReactionGroup>>(selectorFn: (s: ReactionGroup) => [...Sel]):$Field<"reactionGroups", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactionGroup)
      };
      return this.$_select("reactionGroups", options) as any
    }
  

      
/**
 * A list of Reactions left on the Issue.
 */
      reactions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
content?: ReactionContent | null | undefined
orderBy?: ReactionOrder | null | undefined,
      }>,Sel extends Selection<ReactionConnection>>(args: Args, selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel, Args>>
reactions<Sel extends Selection<ReactionConnection>>(selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel>>
reactions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
content: "ReactionContent",
orderBy: "ReactionOrder"
            },
        args,

        selection: selectorFn(new ReactionConnection)
      };
      return this.$_select("reactions", options) as any
    }
  

      
/**
 * The repository associated with this node.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path permalink for this commit comment.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL permalink for this commit comment.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * A list of edits to this content.
 */
      userContentEdits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserContentEditConnection>>(args: Args, selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
userContentEdits<Sel extends Selection<UserContentEditConnection>>(selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel>>
userContentEdits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserContentEditConnection)
      };
      return this.$_select("userContentEdits", options) as any
    }
  

      
/**
 * Check if the current viewer can delete this object.
 */
      get viewerCanDelete(): $Field<"viewerCanDelete", boolean>  {
       return this.$_select("viewerCanDelete") as any
      }

      
/**
 * Check if the current viewer can minimize this object.
 */
      get viewerCanMinimize(): $Field<"viewerCanMinimize", boolean>  {
       return this.$_select("viewerCanMinimize") as any
      }

      
/**
 * Can user react to this subject
 */
      get viewerCanReact(): $Field<"viewerCanReact", boolean>  {
       return this.$_select("viewerCanReact") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * Reasons why the current viewer can not update this comment.
 */
      get viewerCannotUpdateReasons(): $Field<"viewerCannotUpdateReasons", Readonly<Array<CommentCannotUpdateReason>>>  {
       return this.$_select("viewerCannotUpdateReasons") as any
      }

      
/**
 * Did the viewer author this comment.
 */
      get viewerDidAuthor(): $Field<"viewerDidAuthor", boolean>  {
       return this.$_select("viewerDidAuthor") as any
      }
}


/**
 * The connection type for CommitComment.
 */
export class CommitCommentConnection extends $Base<"CommitCommentConnection"> {
  constructor() {
    super("CommitCommentConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CommitCommentEdge>>(selectorFn: (s: CommitCommentEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CommitCommentEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<CommitComment>>(selectorFn: (s: CommitComment) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CommitComment)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class CommitCommentEdge extends $Base<"CommitCommentEdge"> {
  constructor() {
    super("CommitCommentEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<CommitComment>>(selectorFn: (s: CommitComment) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CommitComment)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A thread of comments on a commit.
 */
export class CommitCommentThread extends $Base<"CommitCommentThread"> {
  constructor() {
    super("CommitCommentThread")
  }

  
      
/**
 * The comments that exist in this thread.
 */
      comments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<CommitCommentConnection>>(args: Args, selectorFn: (s: CommitCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel, Args>>
comments<Sel extends Selection<CommitCommentConnection>>(selectorFn: (s: CommitCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel>>
comments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new CommitCommentConnection)
      };
      return this.$_select("comments", options) as any
    }
  

      
/**
 * The commit the comments were made on.
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The file the comments were made on.
 */
      get path(): $Field<"path", string | null | undefined>  {
       return this.$_select("path") as any
      }

      
/**
 * The position in the diff for the commit that the comment was made on.
 */
      get position(): $Field<"position", number | null | undefined>  {
       return this.$_select("position") as any
      }

      
/**
 * The repository associated with this node.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * The connection type for Commit.
 */
export class CommitConnection extends $Base<"CommitConnection"> {
  constructor() {
    super("CommitConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CommitEdge>>(selectorFn: (s: CommitEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CommitEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Ordering options for commit contribution connections.
 */
export type CommitContributionOrder = {
  direction: OrderDirection,
field: CommitContributionOrderField
}
    

  
/**
 * Properties by which commit contribution connections can be ordered.
 */
export enum CommitContributionOrderField {
  
/**
 * Order commit contributions by when they were made.
 */
  OCCURRED_AT = "OCCURRED_AT",

/**
 * Order commit contributions by how many commits they represent.
 */
  COMMIT_COUNT = "COMMIT_COUNT"
}
  


/**
 * This aggregates commits made by a user within one repository.
 */
export class CommitContributionsByRepository extends $Base<"CommitContributionsByRepository"> {
  constructor() {
    super("CommitContributionsByRepository")
  }

  
      
/**
 * The commit contributions, each representing a day.
 */
      contributions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: CommitContributionOrder | null | undefined,
      }>,Sel extends Selection<CreatedCommitContributionConnection>>(args: Args, selectorFn: (s: CreatedCommitContributionConnection) => [...Sel]):$Field<"contributions", GetOutput<Sel> , GetVariables<Sel, Args>>
contributions<Sel extends Selection<CreatedCommitContributionConnection>>(selectorFn: (s: CreatedCommitContributionConnection) => [...Sel]):$Field<"contributions", GetOutput<Sel> , GetVariables<Sel>>
contributions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "CommitContributionOrder"
            },
        args,

        selection: selectorFn(new CreatedCommitContributionConnection)
      };
      return this.$_select("contributions", options) as any
    }
  

      
/**
 * The repository in which the commits were made.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for the user's commits to the repository in this time range.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for the user's commits to the repository in this time range.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * An edge in a connection.
 */
export class CommitEdge extends $Base<"CommitEdge"> {
  constructor() {
    super("CommitEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The connection type for Commit.
 */
export class CommitHistoryConnection extends $Base<"CommitHistoryConnection"> {
  constructor() {
    super("CommitHistoryConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CommitEdge>>(selectorFn: (s: CommitEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CommitEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * A message to include with a new commit
 */
export type CommitMessage = {
  body?: string | null | undefined,
headline: string
}
    


/**
 * A git ref for a commit to be appended to.

The ref must be a branch, i.e. its fully qualified name must start
with `refs/heads/` (although the input is not required to be fully
qualified).

The Ref may be specified by its global node ID or by the
`repositoryNameWithOwner` and `branchName`.

### Examples

Specify a branch using a global node ID:

    { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }

Specify a branch using `repositoryNameWithOwner` and `branchName`:

    {
      "repositoryNameWithOwner": "github/graphql-client",
      "branchName": "main"
    }


 */
export type CommittableBranch = {
  branchName?: string | null | undefined,
id?: string | null | undefined,
repositoryNameWithOwner?: string | null | undefined
}
    


/**
 * Represents a comparison between two commit revisions.
 */
export class Comparison extends $Base<"Comparison"> {
  constructor() {
    super("Comparison")
  }

  
      
/**
 * The number of commits ahead of the base branch.
 */
      get aheadBy(): $Field<"aheadBy", number>  {
       return this.$_select("aheadBy") as any
      }

      
/**
 * The base revision of this comparison.
 */
      baseTarget<Sel extends Selection<GitObject>>(selectorFn: (s: GitObject) => [...Sel]):$Field<"baseTarget", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitObject)
      };
      return this.$_select("baseTarget", options) as any
    }
  

      
/**
 * The number of commits behind the base branch.
 */
      get behindBy(): $Field<"behindBy", number>  {
       return this.$_select("behindBy") as any
      }

      
/**
 * The commits which compose this comparison.
 */
      commits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ComparisonCommitConnection>>(args: Args, selectorFn: (s: ComparisonCommitConnection) => [...Sel]):$Field<"commits", GetOutput<Sel> , GetVariables<Sel, Args>>
commits<Sel extends Selection<ComparisonCommitConnection>>(selectorFn: (s: ComparisonCommitConnection) => [...Sel]):$Field<"commits", GetOutput<Sel> , GetVariables<Sel>>
commits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ComparisonCommitConnection)
      };
      return this.$_select("commits", options) as any
    }
  

      
/**
 * The head revision of this comparison.
 */
      headTarget<Sel extends Selection<GitObject>>(selectorFn: (s: GitObject) => [...Sel]):$Field<"headTarget", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitObject)
      };
      return this.$_select("headTarget", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The status of this comparison.
 */
      get status(): $Field<"status", ComparisonStatus>  {
       return this.$_select("status") as any
      }
}


/**
 * The connection type for Commit.
 */
export class ComparisonCommitConnection extends $Base<"ComparisonCommitConnection"> {
  constructor() {
    super("ComparisonCommitConnection")
  }

  
      
/**
 * The total count of authors and co-authors across all commits.
 */
      get authorCount(): $Field<"authorCount", number>  {
       return this.$_select("authorCount") as any
      }

      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CommitEdge>>(selectorFn: (s: CommitEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CommitEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}

  
/**
 * The status of a git comparison between two refs.
 */
export enum ComparisonStatus {
  
/**
 * The head ref is both ahead and behind of the base ref, indicating git history has diverged.
 */
  DIVERGED = "DIVERGED",

/**
 * The head ref is ahead of the base ref.
 */
  AHEAD = "AHEAD",

/**
 * The head ref is behind the base ref.
 */
  BEHIND = "BEHIND",

/**
 * The head ref and base ref are identical.
 */
  IDENTICAL = "IDENTICAL"
}
  


/**
 * Represents a 'connected' event on a given issue or pull request.
 */
export class ConnectedEvent extends $Base<"ConnectedEvent"> {
  constructor() {
    super("ConnectedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Reference originated in a different repository.
 */
      get isCrossRepository(): $Field<"isCrossRepository", boolean>  {
       return this.$_select("isCrossRepository") as any
      }

      
/**
 * Issue or pull request that made the reference.
 */
      source<Sel extends Selection<ReferencedSubject>>(selectorFn: (s: ReferencedSubject) => [...Sel]):$Field<"source", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReferencedSubject)
      };
      return this.$_select("source", options) as any
    }
  

      
/**
 * Issue or pull request which was connected.
 */
      subject<Sel extends Selection<ReferencedSubject>>(selectorFn: (s: ReferencedSubject) => [...Sel]):$Field<"subject", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReferencedSubject)
      };
      return this.$_select("subject", options) as any
    }
  
}


/**
 * Represents a contribution a user made on GitHub, such as opening an issue.
 */
export class Contribution extends $Interface<{CreatedCommitContribution: CreatedCommitContribution,CreatedIssueContribution: CreatedIssueContribution,CreatedPullRequestContribution: CreatedPullRequestContribution,CreatedPullRequestReviewContribution: CreatedPullRequestReviewContribution,CreatedRepositoryContribution: CreatedRepositoryContribution,JoinedGitHubContribution: JoinedGitHubContribution,RestrictedContribution: RestrictedContribution}, "Contribution"> {
  constructor() {
    super({CreatedCommitContribution: CreatedCommitContribution,CreatedIssueContribution: CreatedIssueContribution,CreatedPullRequestContribution: CreatedPullRequestContribution,CreatedPullRequestReviewContribution: CreatedPullRequestReviewContribution,CreatedRepositoryContribution: CreatedRepositoryContribution,JoinedGitHubContribution: JoinedGitHubContribution,RestrictedContribution: RestrictedContribution}, "Contribution")
  }
}


/**
 * A calendar of contributions made on GitHub by a user.
 */
export class ContributionCalendar extends $Base<"ContributionCalendar"> {
  constructor() {
    super("ContributionCalendar")
  }

  
      
/**
 * A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
 */
      get colors(): $Field<"colors", Readonly<Array<string>>>  {
       return this.$_select("colors") as any
      }

      
/**
 * Determine if the color set was chosen because it's currently Halloween.
 */
      get isHalloween(): $Field<"isHalloween", boolean>  {
       return this.$_select("isHalloween") as any
      }

      
/**
 * A list of the months of contributions in this calendar.
 */
      months<Sel extends Selection<ContributionCalendarMonth>>(selectorFn: (s: ContributionCalendarMonth) => [...Sel]):$Field<"months", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ContributionCalendarMonth)
      };
      return this.$_select("months", options) as any
    }
  

      
/**
 * The count of total contributions in the calendar.
 */
      get totalContributions(): $Field<"totalContributions", number>  {
       return this.$_select("totalContributions") as any
      }

      
/**
 * A list of the weeks of contributions in this calendar.
 */
      weeks<Sel extends Selection<ContributionCalendarWeek>>(selectorFn: (s: ContributionCalendarWeek) => [...Sel]):$Field<"weeks", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ContributionCalendarWeek)
      };
      return this.$_select("weeks", options) as any
    }
  
}


/**
 * Represents a single day of contributions on GitHub by a user.
 */
export class ContributionCalendarDay extends $Base<"ContributionCalendarDay"> {
  constructor() {
    super("ContributionCalendarDay")
  }

  
      
/**
 * The hex color code that represents how many contributions were made on this day compared to others in the calendar.
 */
      get color(): $Field<"color", string>  {
       return this.$_select("color") as any
      }

      
/**
 * How many contributions were made by the user on this day.
 */
      get contributionCount(): $Field<"contributionCount", number>  {
       return this.$_select("contributionCount") as any
      }

      
/**
 * Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar.
 */
      get contributionLevel(): $Field<"contributionLevel", ContributionLevel>  {
       return this.$_select("contributionLevel") as any
      }

      
/**
 * The day this square represents.
 */
      get date(): $Field<"date", string>  {
       return this.$_select("date") as any
      }

      
/**
 * A number representing which day of the week this square represents, e.g., 1 is Monday.
 */
      get weekday(): $Field<"weekday", number>  {
       return this.$_select("weekday") as any
      }
}


/**
 * A month of contributions in a user's contribution graph.
 */
export class ContributionCalendarMonth extends $Base<"ContributionCalendarMonth"> {
  constructor() {
    super("ContributionCalendarMonth")
  }

  
      
/**
 * The date of the first day of this month.
 */
      get firstDay(): $Field<"firstDay", string>  {
       return this.$_select("firstDay") as any
      }

      
/**
 * The name of the month.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * How many weeks started in this month.
 */
      get totalWeeks(): $Field<"totalWeeks", number>  {
       return this.$_select("totalWeeks") as any
      }

      
/**
 * The year the month occurred in.
 */
      get year(): $Field<"year", number>  {
       return this.$_select("year") as any
      }
}


/**
 * A week of contributions in a user's contribution graph.
 */
export class ContributionCalendarWeek extends $Base<"ContributionCalendarWeek"> {
  constructor() {
    super("ContributionCalendarWeek")
  }

  
      
/**
 * The days of contributions in this week.
 */
      contributionDays<Sel extends Selection<ContributionCalendarDay>>(selectorFn: (s: ContributionCalendarDay) => [...Sel]):$Field<"contributionDays", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ContributionCalendarDay)
      };
      return this.$_select("contributionDays", options) as any
    }
  

      
/**
 * The date of the earliest square in this week.
 */
      get firstDay(): $Field<"firstDay", string>  {
       return this.$_select("firstDay") as any
      }
}

  
/**
 * Varying levels of contributions from none to many.
 */
export enum ContributionLevel {
  
/**
 * No contributions occurred.
 */
  NONE = "NONE",

/**
 * Lowest 25% of days of contributions.
 */
  FIRST_QUARTILE = "FIRST_QUARTILE",

/**
 * Second lowest 25% of days of contributions. More contributions than the first quartile.
 */
  SECOND_QUARTILE = "SECOND_QUARTILE",

/**
 * Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile.
 */
  THIRD_QUARTILE = "THIRD_QUARTILE",

/**
 * Highest 25% of days of contributions. More contributions than the third quartile.
 */
  FOURTH_QUARTILE = "FOURTH_QUARTILE"
}
  


/**
 * Ordering options for contribution connections.
 */
export type ContributionOrder = {
  direction: OrderDirection
}
    


/**
 * A contributions collection aggregates contributions such as opened issues and commits created by a user.
 */
export class ContributionsCollection extends $Base<"ContributionsCollection"> {
  constructor() {
    super("ContributionsCollection")
  }

  
      
/**
 * Commit contributions made by the user, grouped by repository.
 */
      commitContributionsByRepository<Args extends VariabledInput<{
        maxRepositories?: number | null | undefined,
      }>,Sel extends Selection<CommitContributionsByRepository>>(args: Args, selectorFn: (s: CommitContributionsByRepository) => [...Sel]):$Field<"commitContributionsByRepository", Array<GetOutput<Sel>> , GetVariables<Sel, Args>>
commitContributionsByRepository<Sel extends Selection<CommitContributionsByRepository>>(selectorFn: (s: CommitContributionsByRepository) => [...Sel]):$Field<"commitContributionsByRepository", Array<GetOutput<Sel>> , GetVariables<Sel>>
commitContributionsByRepository(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              maxRepositories: "Int"
            },
        args,

        selection: selectorFn(new CommitContributionsByRepository)
      };
      return this.$_select("commitContributionsByRepository", options) as any
    }
  

      
/**
 * A calendar of this user's contributions on GitHub.
 */
      contributionCalendar<Sel extends Selection<ContributionCalendar>>(selectorFn: (s: ContributionCalendar) => [...Sel]):$Field<"contributionCalendar", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ContributionCalendar)
      };
      return this.$_select("contributionCalendar", options) as any
    }
  

      
/**
 * The years the user has been making contributions with the most recent year first.
 */
      get contributionYears(): $Field<"contributionYears", Readonly<Array<number>>>  {
       return this.$_select("contributionYears") as any
      }

      
/**
 * Determine if this collection's time span ends in the current month.

 */
      get doesEndInCurrentMonth(): $Field<"doesEndInCurrentMonth", boolean>  {
       return this.$_select("doesEndInCurrentMonth") as any
      }

      
/**
 * The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
 */
      get earliestRestrictedContributionDate(): $Field<"earliestRestrictedContributionDate", string | null | undefined>  {
       return this.$_select("earliestRestrictedContributionDate") as any
      }

      
/**
 * The ending date and time of this collection.
 */
      get endedAt(): $Field<"endedAt", string>  {
       return this.$_select("endedAt") as any
      }

      
/**
 * The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
 */
      firstIssueContribution<Sel extends Selection<CreatedIssueOrRestrictedContribution>>(selectorFn: (s: CreatedIssueOrRestrictedContribution) => [...Sel]):$Field<"firstIssueContribution", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedIssueOrRestrictedContribution)
      };
      return this.$_select("firstIssueContribution", options) as any
    }
  

      
/**
 * The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
 */
      firstPullRequestContribution<Sel extends Selection<CreatedPullRequestOrRestrictedContribution>>(selectorFn: (s: CreatedPullRequestOrRestrictedContribution) => [...Sel]):$Field<"firstPullRequestContribution", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedPullRequestOrRestrictedContribution)
      };
      return this.$_select("firstPullRequestContribution", options) as any
    }
  

      
/**
 * The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned.
 */
      firstRepositoryContribution<Sel extends Selection<CreatedRepositoryOrRestrictedContribution>>(selectorFn: (s: CreatedRepositoryOrRestrictedContribution) => [...Sel]):$Field<"firstRepositoryContribution", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedRepositoryOrRestrictedContribution)
      };
      return this.$_select("firstRepositoryContribution", options) as any
    }
  

      
/**
 * Does the user have any more activity in the timeline that occurred prior to the collection's time range?
 */
      get hasActivityInThePast(): $Field<"hasActivityInThePast", boolean>  {
       return this.$_select("hasActivityInThePast") as any
      }

      
/**
 * Determine if there are any contributions in this collection.
 */
      get hasAnyContributions(): $Field<"hasAnyContributions", boolean>  {
       return this.$_select("hasAnyContributions") as any
      }

      
/**
 * Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts.
 */
      get hasAnyRestrictedContributions(): $Field<"hasAnyRestrictedContributions", boolean>  {
       return this.$_select("hasAnyRestrictedContributions") as any
      }

      
/**
 * Whether or not the collector's time span is all within the same day.
 */
      get isSingleDay(): $Field<"isSingleDay", boolean>  {
       return this.$_select("isSingleDay") as any
      }

      
/**
 * A list of issues the user opened.
 */
      issueContributions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
excludeFirst?: boolean | null | undefined
excludePopular?: boolean | null | undefined
orderBy?: ContributionOrder | null | undefined,
      }>,Sel extends Selection<CreatedIssueContributionConnection>>(args: Args, selectorFn: (s: CreatedIssueContributionConnection) => [...Sel]):$Field<"issueContributions", GetOutput<Sel> , GetVariables<Sel, Args>>
issueContributions<Sel extends Selection<CreatedIssueContributionConnection>>(selectorFn: (s: CreatedIssueContributionConnection) => [...Sel]):$Field<"issueContributions", GetOutput<Sel> , GetVariables<Sel>>
issueContributions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
excludeFirst: "Boolean",
excludePopular: "Boolean",
orderBy: "ContributionOrder"
            },
        args,

        selection: selectorFn(new CreatedIssueContributionConnection)
      };
      return this.$_select("issueContributions", options) as any
    }
  

      
/**
 * Issue contributions made by the user, grouped by repository.
 */
      issueContributionsByRepository<Args extends VariabledInput<{
        maxRepositories?: number | null | undefined
excludeFirst?: boolean | null | undefined
excludePopular?: boolean | null | undefined,
      }>,Sel extends Selection<IssueContributionsByRepository>>(args: Args, selectorFn: (s: IssueContributionsByRepository) => [...Sel]):$Field<"issueContributionsByRepository", Array<GetOutput<Sel>> , GetVariables<Sel, Args>>
issueContributionsByRepository<Sel extends Selection<IssueContributionsByRepository>>(selectorFn: (s: IssueContributionsByRepository) => [...Sel]):$Field<"issueContributionsByRepository", Array<GetOutput<Sel>> , GetVariables<Sel>>
issueContributionsByRepository(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              maxRepositories: "Int",
excludeFirst: "Boolean",
excludePopular: "Boolean"
            },
        args,

        selection: selectorFn(new IssueContributionsByRepository)
      };
      return this.$_select("issueContributionsByRepository", options) as any
    }
  

      
/**
 * When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false.
 */
      joinedGitHubContribution<Sel extends Selection<JoinedGitHubContribution>>(selectorFn: (s: JoinedGitHubContribution) => [...Sel]):$Field<"joinedGitHubContribution", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new JoinedGitHubContribution)
      };
      return this.$_select("joinedGitHubContribution", options) as any
    }
  

      
/**
 * The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
 */
      get latestRestrictedContributionDate(): $Field<"latestRestrictedContributionDate", string | null | undefined>  {
       return this.$_select("latestRestrictedContributionDate") as any
      }

      
/**
 * When this collection's time range does not include any activity from the user, use this
to get a different collection from an earlier time range that does have activity.

 */
      mostRecentCollectionWithActivity<Sel extends Selection<ContributionsCollection>>(selectorFn: (s: ContributionsCollection) => [...Sel]):$Field<"mostRecentCollectionWithActivity", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ContributionsCollection)
      };
      return this.$_select("mostRecentCollectionWithActivity", options) as any
    }
  

      
/**
 * Returns a different contributions collection from an earlier time range than this one
that does not have any contributions.

 */
      mostRecentCollectionWithoutActivity<Sel extends Selection<ContributionsCollection>>(selectorFn: (s: ContributionsCollection) => [...Sel]):$Field<"mostRecentCollectionWithoutActivity", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ContributionsCollection)
      };
      return this.$_select("mostRecentCollectionWithoutActivity", options) as any
    }
  

      
/**
 * The issue the user opened on GitHub that received the most comments in the specified
time frame.

 */
      popularIssueContribution<Sel extends Selection<CreatedIssueContribution>>(selectorFn: (s: CreatedIssueContribution) => [...Sel]):$Field<"popularIssueContribution", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedIssueContribution)
      };
      return this.$_select("popularIssueContribution", options) as any
    }
  

      
/**
 * The pull request the user opened on GitHub that received the most comments in the
specified time frame.

 */
      popularPullRequestContribution<Sel extends Selection<CreatedPullRequestContribution>>(selectorFn: (s: CreatedPullRequestContribution) => [...Sel]):$Field<"popularPullRequestContribution", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedPullRequestContribution)
      };
      return this.$_select("popularPullRequestContribution", options) as any
    }
  

      
/**
 * Pull request contributions made by the user.
 */
      pullRequestContributions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
excludeFirst?: boolean | null | undefined
excludePopular?: boolean | null | undefined
orderBy?: ContributionOrder | null | undefined,
      }>,Sel extends Selection<CreatedPullRequestContributionConnection>>(args: Args, selectorFn: (s: CreatedPullRequestContributionConnection) => [...Sel]):$Field<"pullRequestContributions", GetOutput<Sel> , GetVariables<Sel, Args>>
pullRequestContributions<Sel extends Selection<CreatedPullRequestContributionConnection>>(selectorFn: (s: CreatedPullRequestContributionConnection) => [...Sel]):$Field<"pullRequestContributions", GetOutput<Sel> , GetVariables<Sel>>
pullRequestContributions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
excludeFirst: "Boolean",
excludePopular: "Boolean",
orderBy: "ContributionOrder"
            },
        args,

        selection: selectorFn(new CreatedPullRequestContributionConnection)
      };
      return this.$_select("pullRequestContributions", options) as any
    }
  

      
/**
 * Pull request contributions made by the user, grouped by repository.
 */
      pullRequestContributionsByRepository<Args extends VariabledInput<{
        maxRepositories?: number | null | undefined
excludeFirst?: boolean | null | undefined
excludePopular?: boolean | null | undefined,
      }>,Sel extends Selection<PullRequestContributionsByRepository>>(args: Args, selectorFn: (s: PullRequestContributionsByRepository) => [...Sel]):$Field<"pullRequestContributionsByRepository", Array<GetOutput<Sel>> , GetVariables<Sel, Args>>
pullRequestContributionsByRepository<Sel extends Selection<PullRequestContributionsByRepository>>(selectorFn: (s: PullRequestContributionsByRepository) => [...Sel]):$Field<"pullRequestContributionsByRepository", Array<GetOutput<Sel>> , GetVariables<Sel>>
pullRequestContributionsByRepository(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              maxRepositories: "Int",
excludeFirst: "Boolean",
excludePopular: "Boolean"
            },
        args,

        selection: selectorFn(new PullRequestContributionsByRepository)
      };
      return this.$_select("pullRequestContributionsByRepository", options) as any
    }
  

      
/**
 * Pull request review contributions made by the user. Returns the most recently
submitted review for each PR reviewed by the user.

 */
      pullRequestReviewContributions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ContributionOrder | null | undefined,
      }>,Sel extends Selection<CreatedPullRequestReviewContributionConnection>>(args: Args, selectorFn: (s: CreatedPullRequestReviewContributionConnection) => [...Sel]):$Field<"pullRequestReviewContributions", GetOutput<Sel> , GetVariables<Sel, Args>>
pullRequestReviewContributions<Sel extends Selection<CreatedPullRequestReviewContributionConnection>>(selectorFn: (s: CreatedPullRequestReviewContributionConnection) => [...Sel]):$Field<"pullRequestReviewContributions", GetOutput<Sel> , GetVariables<Sel>>
pullRequestReviewContributions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ContributionOrder"
            },
        args,

        selection: selectorFn(new CreatedPullRequestReviewContributionConnection)
      };
      return this.$_select("pullRequestReviewContributions", options) as any
    }
  

      
/**
 * Pull request review contributions made by the user, grouped by repository.
 */
      pullRequestReviewContributionsByRepository<Args extends VariabledInput<{
        maxRepositories?: number | null | undefined,
      }>,Sel extends Selection<PullRequestReviewContributionsByRepository>>(args: Args, selectorFn: (s: PullRequestReviewContributionsByRepository) => [...Sel]):$Field<"pullRequestReviewContributionsByRepository", Array<GetOutput<Sel>> , GetVariables<Sel, Args>>
pullRequestReviewContributionsByRepository<Sel extends Selection<PullRequestReviewContributionsByRepository>>(selectorFn: (s: PullRequestReviewContributionsByRepository) => [...Sel]):$Field<"pullRequestReviewContributionsByRepository", Array<GetOutput<Sel>> , GetVariables<Sel>>
pullRequestReviewContributionsByRepository(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              maxRepositories: "Int"
            },
        args,

        selection: selectorFn(new PullRequestReviewContributionsByRepository)
      };
      return this.$_select("pullRequestReviewContributionsByRepository", options) as any
    }
  

      
/**
 * A list of repositories owned by the user that the user created in this time range.
 */
      repositoryContributions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
excludeFirst?: boolean | null | undefined
orderBy?: ContributionOrder | null | undefined,
      }>,Sel extends Selection<CreatedRepositoryContributionConnection>>(args: Args, selectorFn: (s: CreatedRepositoryContributionConnection) => [...Sel]):$Field<"repositoryContributions", GetOutput<Sel> , GetVariables<Sel, Args>>
repositoryContributions<Sel extends Selection<CreatedRepositoryContributionConnection>>(selectorFn: (s: CreatedRepositoryContributionConnection) => [...Sel]):$Field<"repositoryContributions", GetOutput<Sel> , GetVariables<Sel>>
repositoryContributions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
excludeFirst: "Boolean",
orderBy: "ContributionOrder"
            },
        args,

        selection: selectorFn(new CreatedRepositoryContributionConnection)
      };
      return this.$_select("repositoryContributions", options) as any
    }
  

      
/**
 * A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts.
 */
      get restrictedContributionsCount(): $Field<"restrictedContributionsCount", number>  {
       return this.$_select("restrictedContributionsCount") as any
      }

      
/**
 * The beginning date and time of this collection.
 */
      get startedAt(): $Field<"startedAt", string>  {
       return this.$_select("startedAt") as any
      }

      
/**
 * How many commits were made by the user in this time span.
 */
      get totalCommitContributions(): $Field<"totalCommitContributions", number>  {
       return this.$_select("totalCommitContributions") as any
      }

      
/**
 * How many issues the user opened.
 */
      totalIssueContributions<Args extends VariabledInput<{
        excludeFirst?: boolean | null | undefined
excludePopular?: boolean | null | undefined,
      }>>(args: Args):$Field<"totalIssueContributions", number , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              excludeFirst: "Boolean",
excludePopular: "Boolean"
            },
        args,

        
      };
      return this.$_select("totalIssueContributions", options) as any
    }
  

      
/**
 * How many pull requests the user opened.
 */
      totalPullRequestContributions<Args extends VariabledInput<{
        excludeFirst?: boolean | null | undefined
excludePopular?: boolean | null | undefined,
      }>>(args: Args):$Field<"totalPullRequestContributions", number , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              excludeFirst: "Boolean",
excludePopular: "Boolean"
            },
        args,

        
      };
      return this.$_select("totalPullRequestContributions", options) as any
    }
  

      
/**
 * How many pull request reviews the user left.
 */
      get totalPullRequestReviewContributions(): $Field<"totalPullRequestReviewContributions", number>  {
       return this.$_select("totalPullRequestReviewContributions") as any
      }

      
/**
 * How many different repositories the user committed to.
 */
      get totalRepositoriesWithContributedCommits(): $Field<"totalRepositoriesWithContributedCommits", number>  {
       return this.$_select("totalRepositoriesWithContributedCommits") as any
      }

      
/**
 * How many different repositories the user opened issues in.
 */
      totalRepositoriesWithContributedIssues<Args extends VariabledInput<{
        excludeFirst?: boolean | null | undefined
excludePopular?: boolean | null | undefined,
      }>>(args: Args):$Field<"totalRepositoriesWithContributedIssues", number , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              excludeFirst: "Boolean",
excludePopular: "Boolean"
            },
        args,

        
      };
      return this.$_select("totalRepositoriesWithContributedIssues", options) as any
    }
  

      
/**
 * How many different repositories the user left pull request reviews in.
 */
      get totalRepositoriesWithContributedPullRequestReviews(): $Field<"totalRepositoriesWithContributedPullRequestReviews", number>  {
       return this.$_select("totalRepositoriesWithContributedPullRequestReviews") as any
      }

      
/**
 * How many different repositories the user opened pull requests in.
 */
      totalRepositoriesWithContributedPullRequests<Args extends VariabledInput<{
        excludeFirst?: boolean | null | undefined
excludePopular?: boolean | null | undefined,
      }>>(args: Args):$Field<"totalRepositoriesWithContributedPullRequests", number , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              excludeFirst: "Boolean",
excludePopular: "Boolean"
            },
        args,

        
      };
      return this.$_select("totalRepositoriesWithContributedPullRequests", options) as any
    }
  

      
/**
 * How many repositories the user created.
 */
      totalRepositoryContributions<Args extends VariabledInput<{
        excludeFirst?: boolean | null | undefined,
      }>>(args: Args):$Field<"totalRepositoryContributions", number , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              excludeFirst: "Boolean"
            },
        args,

        
      };
      return this.$_select("totalRepositoryContributions", options) as any
    }
  

      
/**
 * The user who made the contributions in this collection.
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * Autogenerated input type of ConvertProjectCardNoteToIssue
 */
export type ConvertProjectCardNoteToIssueInput = {
  body?: string | null | undefined,
clientMutationId?: string | null | undefined,
projectCardId: string,
repositoryId: string,
title?: string | null | undefined
}
    


/**
 * Autogenerated return type of ConvertProjectCardNoteToIssue
 */
export class ConvertProjectCardNoteToIssuePayload extends $Base<"ConvertProjectCardNoteToIssuePayload"> {
  constructor() {
    super("ConvertProjectCardNoteToIssuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated ProjectCard.
 */
      projectCard<Sel extends Selection<ProjectCard>>(selectorFn: (s: ProjectCard) => [...Sel]):$Field<"projectCard", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectCard)
      };
      return this.$_select("projectCard", options) as any
    }
  
}


/**
 * Autogenerated input type of ConvertPullRequestToDraft
 */
export type ConvertPullRequestToDraftInput = {
  clientMutationId?: string | null | undefined,
pullRequestId: string
}
    


/**
 * Autogenerated return type of ConvertPullRequestToDraft
 */
export class ConvertPullRequestToDraftPayload extends $Base<"ConvertPullRequestToDraftPayload"> {
  constructor() {
    super("ConvertPullRequestToDraftPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The pull request that is now a draft.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents a 'convert_to_draft' event on a given pull request.
 */
export class ConvertToDraftEvent extends $Base<"ConvertToDraftEvent"> {
  constructor() {
    super("ConvertToDraftEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The HTTP path for this convert to draft event.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for this convert to draft event.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * Represents a 'converted_note_to_issue' event on a given issue or pull request.
 */
export class ConvertedNoteToIssueEvent extends $Base<"ConvertedNoteToIssueEvent"> {
  constructor() {
    super("ConvertedNoteToIssueEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }
}


/**
 * Represents a 'converted_to_discussion' event on a given issue.
 */
export class ConvertedToDiscussionEvent extends $Base<"ConvertedToDiscussionEvent"> {
  constructor() {
    super("ConvertedToDiscussionEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The discussion that the issue was converted into.
 */
      discussion<Sel extends Selection<Discussion>>(selectorFn: (s: Discussion) => [...Sel]):$Field<"discussion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Discussion)
      };
      return this.$_select("discussion", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }
}


/**
 * Autogenerated input type of CreateBranchProtectionRule
 */
export type CreateBranchProtectionRuleInput = {
  allowsDeletions?: boolean | null | undefined,
allowsForcePushes?: boolean | null | undefined,
blocksCreations?: boolean | null | undefined,
bypassForcePushActorIds?: Readonly<Array<string>> | null | undefined,
bypassPullRequestActorIds?: Readonly<Array<string>> | null | undefined,
clientMutationId?: string | null | undefined,
dismissesStaleReviews?: boolean | null | undefined,
isAdminEnforced?: boolean | null | undefined,
lockAllowsFetchAndMerge?: boolean | null | undefined,
lockBranch?: boolean | null | undefined,
pattern: string,
pushActorIds?: Readonly<Array<string>> | null | undefined,
repositoryId: string,
requireLastPushApproval?: boolean | null | undefined,
requiredApprovingReviewCount?: number | null | undefined,
requiredStatusCheckContexts?: Readonly<Array<string>> | null | undefined,
requiredStatusChecks?: Readonly<Array<RequiredStatusCheckInput>> | null | undefined,
requiresApprovingReviews?: boolean | null | undefined,
requiresCodeOwnerReviews?: boolean | null | undefined,
requiresCommitSignatures?: boolean | null | undefined,
requiresConversationResolution?: boolean | null | undefined,
requiresLinearHistory?: boolean | null | undefined,
requiresStatusChecks?: boolean | null | undefined,
requiresStrictStatusChecks?: boolean | null | undefined,
restrictsPushes?: boolean | null | undefined,
restrictsReviewDismissals?: boolean | null | undefined,
reviewDismissalActorIds?: Readonly<Array<string>> | null | undefined
}
    


/**
 * Autogenerated return type of CreateBranchProtectionRule
 */
export class CreateBranchProtectionRulePayload extends $Base<"CreateBranchProtectionRulePayload"> {
  constructor() {
    super("CreateBranchProtectionRulePayload")
  }

  
      
/**
 * The newly created BranchProtectionRule.
 */
      branchProtectionRule<Sel extends Selection<BranchProtectionRule>>(selectorFn: (s: BranchProtectionRule) => [...Sel]):$Field<"branchProtectionRule", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRule)
      };
      return this.$_select("branchProtectionRule", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of CreateCheckRun
 */
export type CreateCheckRunInput = {
  actions?: Readonly<Array<CheckRunAction>> | null | undefined,
clientMutationId?: string | null | undefined,
completedAt?: string | null | undefined,
conclusion?: CheckConclusionState | null | undefined,
detailsUrl?: string | null | undefined,
externalId?: string | null | undefined,
headSha: string,
name: string,
output?: CheckRunOutput | null | undefined,
repositoryId: string,
startedAt?: string | null | undefined,
status?: RequestableCheckStatusState | null | undefined
}
    


/**
 * Autogenerated return type of CreateCheckRun
 */
export class CreateCheckRunPayload extends $Base<"CreateCheckRunPayload"> {
  constructor() {
    super("CreateCheckRunPayload")
  }

  
      
/**
 * The newly created check run.
 */
      checkRun<Sel extends Selection<CheckRun>>(selectorFn: (s: CheckRun) => [...Sel]):$Field<"checkRun", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckRun)
      };
      return this.$_select("checkRun", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of CreateCheckSuite
 */
export type CreateCheckSuiteInput = {
  clientMutationId?: string | null | undefined,
headSha: string,
repositoryId: string
}
    


/**
 * Autogenerated return type of CreateCheckSuite
 */
export class CreateCheckSuitePayload extends $Base<"CreateCheckSuitePayload"> {
  constructor() {
    super("CreateCheckSuitePayload")
  }

  
      
/**
 * The newly created check suite.
 */
      checkSuite<Sel extends Selection<CheckSuite>>(selectorFn: (s: CheckSuite) => [...Sel]):$Field<"checkSuite", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckSuite)
      };
      return this.$_select("checkSuite", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of CreateCommitOnBranch
 */
export type CreateCommitOnBranchInput = {
  branch: CommittableBranch,
clientMutationId?: string | null | undefined,
expectedHeadOid: string,
fileChanges?: FileChanges | null | undefined,
message: CommitMessage
}
    


/**
 * Autogenerated return type of CreateCommitOnBranch
 */
export class CreateCommitOnBranchPayload extends $Base<"CreateCommitOnBranchPayload"> {
  constructor() {
    super("CreateCommitOnBranchPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new commit.
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
/**
 * The ref which has been updated to point to the new commit.
 */
      ref<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"ref", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("ref", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateDiscussion
 */
export type CreateDiscussionInput = {
  body: string,
categoryId: string,
clientMutationId?: string | null | undefined,
repositoryId: string,
title: string
}
    


/**
 * Autogenerated return type of CreateDiscussion
 */
export class CreateDiscussionPayload extends $Base<"CreateDiscussionPayload"> {
  constructor() {
    super("CreateDiscussionPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The discussion that was just created.
 */
      discussion<Sel extends Selection<Discussion>>(selectorFn: (s: Discussion) => [...Sel]):$Field<"discussion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Discussion)
      };
      return this.$_select("discussion", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateEnterpriseOrganization
 */
export type CreateEnterpriseOrganizationInput = {
  adminLogins: Readonly<Array<string>>,
billingEmail: string,
clientMutationId?: string | null | undefined,
enterpriseId: string,
login: string,
profileName: string
}
    


/**
 * Autogenerated return type of CreateEnterpriseOrganization
 */
export class CreateEnterpriseOrganizationPayload extends $Base<"CreateEnterpriseOrganizationPayload"> {
  constructor() {
    super("CreateEnterpriseOrganizationPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise that owns the created organization.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * The organization that was created.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateEnvironment
 */
export type CreateEnvironmentInput = {
  clientMutationId?: string | null | undefined,
name: string,
repositoryId: string
}
    


/**
 * Autogenerated return type of CreateEnvironment
 */
export class CreateEnvironmentPayload extends $Base<"CreateEnvironmentPayload"> {
  constructor() {
    super("CreateEnvironmentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new or existing environment.
 */
      environment<Sel extends Selection<Environment>>(selectorFn: (s: Environment) => [...Sel]):$Field<"environment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Environment)
      };
      return this.$_select("environment", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateIpAllowListEntry
 */
export type CreateIpAllowListEntryInput = {
  allowListValue: string,
clientMutationId?: string | null | undefined,
isActive: boolean,
name?: string | null | undefined,
ownerId: string
}
    


/**
 * Autogenerated return type of CreateIpAllowListEntry
 */
export class CreateIpAllowListEntryPayload extends $Base<"CreateIpAllowListEntryPayload"> {
  constructor() {
    super("CreateIpAllowListEntryPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The IP allow list entry that was created.
 */
      ipAllowListEntry<Sel extends Selection<IpAllowListEntry>>(selectorFn: (s: IpAllowListEntry) => [...Sel]):$Field<"ipAllowListEntry", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IpAllowListEntry)
      };
      return this.$_select("ipAllowListEntry", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateIssue
 */
export type CreateIssueInput = {
  assigneeIds?: Readonly<Array<string>> | null | undefined,
body?: string | null | undefined,
clientMutationId?: string | null | undefined,
issueTemplate?: string | null | undefined,
labelIds?: Readonly<Array<string>> | null | undefined,
milestoneId?: string | null | undefined,
projectIds?: Readonly<Array<string>> | null | undefined,
repositoryId: string,
title: string
}
    


/**
 * Autogenerated return type of CreateIssue
 */
export class CreateIssuePayload extends $Base<"CreateIssuePayload"> {
  constructor() {
    super("CreateIssuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new issue.
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateLinkedBranch
 */
export type CreateLinkedBranchInput = {
  clientMutationId?: string | null | undefined,
issueId: string,
name?: string | null | undefined,
oid: string,
repositoryId?: string | null | undefined
}
    


/**
 * Autogenerated return type of CreateLinkedBranch
 */
export class CreateLinkedBranchPayload extends $Base<"CreateLinkedBranchPayload"> {
  constructor() {
    super("CreateLinkedBranchPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new branch issue reference.
 */
      linkedBranch<Sel extends Selection<LinkedBranch>>(selectorFn: (s: LinkedBranch) => [...Sel]):$Field<"linkedBranch", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new LinkedBranch)
      };
      return this.$_select("linkedBranch", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateMigrationSource
 */
export type CreateMigrationSourceInput = {
  accessToken?: string | null | undefined,
clientMutationId?: string | null | undefined,
githubPat?: string | null | undefined,
name: string,
ownerId: string,
type: MigrationSourceType,
url: string
}
    


/**
 * Autogenerated return type of CreateMigrationSource
 */
export class CreateMigrationSourcePayload extends $Base<"CreateMigrationSourcePayload"> {
  constructor() {
    super("CreateMigrationSourcePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The created Octoshift migration source.
 */
      migrationSource<Sel extends Selection<MigrationSource>>(selectorFn: (s: MigrationSource) => [...Sel]):$Field<"migrationSource", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new MigrationSource)
      };
      return this.$_select("migrationSource", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateProject
 */
export type CreateProjectInput = {
  body?: string | null | undefined,
clientMutationId?: string | null | undefined,
name: string,
ownerId: string,
repositoryIds?: Readonly<Array<string>> | null | undefined,
template?: ProjectTemplate | null | undefined
}
    


/**
 * Autogenerated return type of CreateProject
 */
export class CreateProjectPayload extends $Base<"CreateProjectPayload"> {
  constructor() {
    super("CreateProjectPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new project.
 */
      project<Sel extends Selection<Project>>(selectorFn: (s: Project) => [...Sel]):$Field<"project", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Project)
      };
      return this.$_select("project", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateProjectV2
 */
export type CreateProjectV2Input = {
  clientMutationId?: string | null | undefined,
ownerId: string,
title: string
}
    


/**
 * Autogenerated return type of CreateProjectV2
 */
export class CreateProjectV2Payload extends $Base<"CreateProjectV2Payload"> {
  constructor() {
    super("CreateProjectV2Payload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new project.
 */
      projectV2<Sel extends Selection<ProjectV2>>(selectorFn: (s: ProjectV2) => [...Sel]):$Field<"projectV2", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("projectV2", options) as any
    }
  
}


/**
 * Autogenerated input type of CreatePullRequest
 */
export type CreatePullRequestInput = {
  baseRefName: string,
body?: string | null | undefined,
clientMutationId?: string | null | undefined,
draft?: boolean | null | undefined,
headRefName: string,
maintainerCanModify?: boolean | null | undefined,
repositoryId: string,
title: string
}
    


/**
 * Autogenerated return type of CreatePullRequest
 */
export class CreatePullRequestPayload extends $Base<"CreatePullRequestPayload"> {
  constructor() {
    super("CreatePullRequestPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new pull request.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateRef
 */
export type CreateRefInput = {
  clientMutationId?: string | null | undefined,
name: string,
oid: string,
repositoryId: string
}
    


/**
 * Autogenerated return type of CreateRef
 */
export class CreateRefPayload extends $Base<"CreateRefPayload"> {
  constructor() {
    super("CreateRefPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The newly created ref.
 */
      ref<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"ref", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("ref", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateRepository
 */
export type CreateRepositoryInput = {
  clientMutationId?: string | null | undefined,
description?: string | null | undefined,
hasIssuesEnabled?: boolean | null | undefined,
hasWikiEnabled?: boolean | null | undefined,
homepageUrl?: string | null | undefined,
name: string,
ownerId?: string | null | undefined,
teamId?: string | null | undefined,
template?: boolean | null | undefined,
visibility: RepositoryVisibility
}
    


/**
 * Autogenerated return type of CreateRepository
 */
export class CreateRepositoryPayload extends $Base<"CreateRepositoryPayload"> {
  constructor() {
    super("CreateRepositoryPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new repository.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateSponsorsTier
 */
export type CreateSponsorsTierInput = {
  amount: number,
clientMutationId?: string | null | undefined,
description: string,
isRecurring?: boolean | null | undefined,
publish?: boolean | null | undefined,
repositoryId?: string | null | undefined,
repositoryName?: string | null | undefined,
repositoryOwnerLogin?: string | null | undefined,
sponsorableId?: string | null | undefined,
sponsorableLogin?: string | null | undefined,
welcomeMessage?: string | null | undefined
}
    


/**
 * Autogenerated return type of CreateSponsorsTier
 */
export class CreateSponsorsTierPayload extends $Base<"CreateSponsorsTierPayload"> {
  constructor() {
    super("CreateSponsorsTierPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new tier.
 */
      sponsorsTier<Sel extends Selection<SponsorsTier>>(selectorFn: (s: SponsorsTier) => [...Sel]):$Field<"sponsorsTier", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsTier)
      };
      return this.$_select("sponsorsTier", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateSponsorship
 */
export type CreateSponsorshipInput = {
  amount?: number | null | undefined,
clientMutationId?: string | null | undefined,
isRecurring?: boolean | null | undefined,
privacyLevel?: SponsorshipPrivacy | null | undefined,
receiveEmails?: boolean | null | undefined,
sponsorId?: string | null | undefined,
sponsorLogin?: string | null | undefined,
sponsorableId?: string | null | undefined,
sponsorableLogin?: string | null | undefined,
tierId?: string | null | undefined
}
    


/**
 * Autogenerated return type of CreateSponsorship
 */
export class CreateSponsorshipPayload extends $Base<"CreateSponsorshipPayload"> {
  constructor() {
    super("CreateSponsorshipPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The sponsorship that was started.
 */
      sponsorship<Sel extends Selection<Sponsorship>>(selectorFn: (s: Sponsorship) => [...Sel]):$Field<"sponsorship", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsorship)
      };
      return this.$_select("sponsorship", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateTeamDiscussionComment
 */
export type CreateTeamDiscussionCommentInput = {
  body: string,
clientMutationId?: string | null | undefined,
discussionId: string
}
    


/**
 * Autogenerated return type of CreateTeamDiscussionComment
 */
export class CreateTeamDiscussionCommentPayload extends $Base<"CreateTeamDiscussionCommentPayload"> {
  constructor() {
    super("CreateTeamDiscussionCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new comment.
 */
      teamDiscussionComment<Sel extends Selection<TeamDiscussionComment>>(selectorFn: (s: TeamDiscussionComment) => [...Sel]):$Field<"teamDiscussionComment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamDiscussionComment)
      };
      return this.$_select("teamDiscussionComment", options) as any
    }
  
}


/**
 * Autogenerated input type of CreateTeamDiscussion
 */
export type CreateTeamDiscussionInput = {
  body: string,
clientMutationId?: string | null | undefined,
private?: boolean | null | undefined,
teamId: string,
title: string
}
    


/**
 * Autogenerated return type of CreateTeamDiscussion
 */
export class CreateTeamDiscussionPayload extends $Base<"CreateTeamDiscussionPayload"> {
  constructor() {
    super("CreateTeamDiscussionPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new discussion.
 */
      teamDiscussion<Sel extends Selection<TeamDiscussion>>(selectorFn: (s: TeamDiscussion) => [...Sel]):$Field<"teamDiscussion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamDiscussion)
      };
      return this.$_select("teamDiscussion", options) as any
    }
  
}


/**
 * Represents the contribution a user made by committing to a repository.
 */
export class CreatedCommitContribution extends $Base<"CreatedCommitContribution"> {
  constructor() {
    super("CreatedCommitContribution")
  }

  
      
/**
 * How many commits were made on this day to this repository by the user.
 */
      get commitCount(): $Field<"commitCount", number>  {
       return this.$_select("commitCount") as any
      }

      
/**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.

 */
      get isRestricted(): $Field<"isRestricted", boolean>  {
       return this.$_select("isRestricted") as any
      }

      
/**
 * When this contribution was made.
 */
      get occurredAt(): $Field<"occurredAt", string>  {
       return this.$_select("occurredAt") as any
      }

      
/**
 * The repository the user made a commit in.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for this contribution.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for this contribution.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * The user who made this contribution.

 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * The connection type for CreatedCommitContribution.
 */
export class CreatedCommitContributionConnection extends $Base<"CreatedCommitContributionConnection"> {
  constructor() {
    super("CreatedCommitContributionConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CreatedCommitContributionEdge>>(selectorFn: (s: CreatedCommitContributionEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedCommitContributionEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<CreatedCommitContribution>>(selectorFn: (s: CreatedCommitContribution) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedCommitContribution)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of commits across days and repositories in the connection.

 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class CreatedCommitContributionEdge extends $Base<"CreatedCommitContributionEdge"> {
  constructor() {
    super("CreatedCommitContributionEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<CreatedCommitContribution>>(selectorFn: (s: CreatedCommitContribution) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedCommitContribution)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents the contribution a user made on GitHub by opening an issue.
 */
export class CreatedIssueContribution extends $Base<"CreatedIssueContribution"> {
  constructor() {
    super("CreatedIssueContribution")
  }

  
      
/**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.

 */
      get isRestricted(): $Field<"isRestricted", boolean>  {
       return this.$_select("isRestricted") as any
      }

      
/**
 * The issue that was opened.
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  

      
/**
 * When this contribution was made.
 */
      get occurredAt(): $Field<"occurredAt", string>  {
       return this.$_select("occurredAt") as any
      }

      
/**
 * The HTTP path for this contribution.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for this contribution.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * The user who made this contribution.

 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * The connection type for CreatedIssueContribution.
 */
export class CreatedIssueContributionConnection extends $Base<"CreatedIssueContributionConnection"> {
  constructor() {
    super("CreatedIssueContributionConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CreatedIssueContributionEdge>>(selectorFn: (s: CreatedIssueContributionEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedIssueContributionEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<CreatedIssueContribution>>(selectorFn: (s: CreatedIssueContribution) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedIssueContribution)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class CreatedIssueContributionEdge extends $Base<"CreatedIssueContributionEdge"> {
  constructor() {
    super("CreatedIssueContributionEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<CreatedIssueContribution>>(selectorFn: (s: CreatedIssueContribution) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedIssueContribution)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents either a issue the viewer can access or a restricted contribution.
 */
export class CreatedIssueOrRestrictedContribution extends $Union<{CreatedIssueContribution: CreatedIssueContribution,RestrictedContribution: RestrictedContribution,Contribution: Contribution}, "CreatedIssueOrRestrictedContribution"> {
  constructor() {
    super({CreatedIssueContribution: CreatedIssueContribution,RestrictedContribution: RestrictedContribution,Contribution: Contribution})
  }
}


/**
 * Represents the contribution a user made on GitHub by opening a pull request.
 */
export class CreatedPullRequestContribution extends $Base<"CreatedPullRequestContribution"> {
  constructor() {
    super("CreatedPullRequestContribution")
  }

  
      
/**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.

 */
      get isRestricted(): $Field<"isRestricted", boolean>  {
       return this.$_select("isRestricted") as any
      }

      
/**
 * When this contribution was made.
 */
      get occurredAt(): $Field<"occurredAt", string>  {
       return this.$_select("occurredAt") as any
      }

      
/**
 * The pull request that was opened.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The HTTP path for this contribution.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for this contribution.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * The user who made this contribution.

 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * The connection type for CreatedPullRequestContribution.
 */
export class CreatedPullRequestContributionConnection extends $Base<"CreatedPullRequestContributionConnection"> {
  constructor() {
    super("CreatedPullRequestContributionConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CreatedPullRequestContributionEdge>>(selectorFn: (s: CreatedPullRequestContributionEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedPullRequestContributionEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<CreatedPullRequestContribution>>(selectorFn: (s: CreatedPullRequestContribution) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedPullRequestContribution)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class CreatedPullRequestContributionEdge extends $Base<"CreatedPullRequestContributionEdge"> {
  constructor() {
    super("CreatedPullRequestContributionEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<CreatedPullRequestContribution>>(selectorFn: (s: CreatedPullRequestContribution) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedPullRequestContribution)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents either a pull request the viewer can access or a restricted contribution.
 */
export class CreatedPullRequestOrRestrictedContribution extends $Union<{CreatedPullRequestContribution: CreatedPullRequestContribution,RestrictedContribution: RestrictedContribution,Contribution: Contribution}, "CreatedPullRequestOrRestrictedContribution"> {
  constructor() {
    super({CreatedPullRequestContribution: CreatedPullRequestContribution,RestrictedContribution: RestrictedContribution,Contribution: Contribution})
  }
}


/**
 * Represents the contribution a user made by leaving a review on a pull request.
 */
export class CreatedPullRequestReviewContribution extends $Base<"CreatedPullRequestReviewContribution"> {
  constructor() {
    super("CreatedPullRequestReviewContribution")
  }

  
      
/**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.

 */
      get isRestricted(): $Field<"isRestricted", boolean>  {
       return this.$_select("isRestricted") as any
      }

      
/**
 * When this contribution was made.
 */
      get occurredAt(): $Field<"occurredAt", string>  {
       return this.$_select("occurredAt") as any
      }

      
/**
 * The pull request the user reviewed.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The review the user left on the pull request.
 */
      pullRequestReview<Sel extends Selection<PullRequestReview>>(selectorFn: (s: PullRequestReview) => [...Sel]):$Field<"pullRequestReview", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReview)
      };
      return this.$_select("pullRequestReview", options) as any
    }
  

      
/**
 * The repository containing the pull request that the user reviewed.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for this contribution.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for this contribution.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * The user who made this contribution.

 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * The connection type for CreatedPullRequestReviewContribution.
 */
export class CreatedPullRequestReviewContributionConnection extends $Base<"CreatedPullRequestReviewContributionConnection"> {
  constructor() {
    super("CreatedPullRequestReviewContributionConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CreatedPullRequestReviewContributionEdge>>(selectorFn: (s: CreatedPullRequestReviewContributionEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedPullRequestReviewContributionEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<CreatedPullRequestReviewContribution>>(selectorFn: (s: CreatedPullRequestReviewContribution) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedPullRequestReviewContribution)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class CreatedPullRequestReviewContributionEdge extends $Base<"CreatedPullRequestReviewContributionEdge"> {
  constructor() {
    super("CreatedPullRequestReviewContributionEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<CreatedPullRequestReviewContribution>>(selectorFn: (s: CreatedPullRequestReviewContribution) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedPullRequestReviewContribution)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents the contribution a user made on GitHub by creating a repository.
 */
export class CreatedRepositoryContribution extends $Base<"CreatedRepositoryContribution"> {
  constructor() {
    super("CreatedRepositoryContribution")
  }

  
      
/**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.

 */
      get isRestricted(): $Field<"isRestricted", boolean>  {
       return this.$_select("isRestricted") as any
      }

      
/**
 * When this contribution was made.
 */
      get occurredAt(): $Field<"occurredAt", string>  {
       return this.$_select("occurredAt") as any
      }

      
/**
 * The repository that was created.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for this contribution.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for this contribution.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * The user who made this contribution.

 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * The connection type for CreatedRepositoryContribution.
 */
export class CreatedRepositoryContributionConnection extends $Base<"CreatedRepositoryContributionConnection"> {
  constructor() {
    super("CreatedRepositoryContributionConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<CreatedRepositoryContributionEdge>>(selectorFn: (s: CreatedRepositoryContributionEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedRepositoryContributionEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<CreatedRepositoryContribution>>(selectorFn: (s: CreatedRepositoryContribution) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedRepositoryContribution)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class CreatedRepositoryContributionEdge extends $Base<"CreatedRepositoryContributionEdge"> {
  constructor() {
    super("CreatedRepositoryContributionEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<CreatedRepositoryContribution>>(selectorFn: (s: CreatedRepositoryContribution) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CreatedRepositoryContribution)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents either a repository the viewer can access or a restricted contribution.
 */
export class CreatedRepositoryOrRestrictedContribution extends $Union<{CreatedRepositoryContribution: CreatedRepositoryContribution,RestrictedContribution: RestrictedContribution,Contribution: Contribution}, "CreatedRepositoryOrRestrictedContribution"> {
  constructor() {
    super({CreatedRepositoryContribution: CreatedRepositoryContribution,RestrictedContribution: RestrictedContribution,Contribution: Contribution})
  }
}


/**
 * Represents a mention made by one issue or pull request to another.
 */
export class CrossReferencedEvent extends $Base<"CrossReferencedEvent"> {
  constructor() {
    super("CrossReferencedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Reference originated in a different repository.
 */
      get isCrossRepository(): $Field<"isCrossRepository", boolean>  {
       return this.$_select("isCrossRepository") as any
      }

      
/**
 * Identifies when the reference was made.
 */
      get referencedAt(): $Field<"referencedAt", string>  {
       return this.$_select("referencedAt") as any
      }

      
/**
 * The HTTP path for this pull request.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Issue or pull request that made the reference.
 */
      source<Sel extends Selection<ReferencedSubject>>(selectorFn: (s: ReferencedSubject) => [...Sel]):$Field<"source", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReferencedSubject)
      };
      return this.$_select("source", options) as any
    }
  

      
/**
 * Issue or pull request to which the reference was made.
 */
      target<Sel extends Selection<ReferencedSubject>>(selectorFn: (s: ReferencedSubject) => [...Sel]):$Field<"target", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReferencedSubject)
      };
      return this.$_select("target", options) as any
    }
  

      
/**
 * The HTTP URL for this pull request.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * Checks if the target will be closed when the source is merged.
 */
      get willCloseTarget(): $Field<"willCloseTarget", boolean>  {
       return this.$_select("willCloseTarget") as any
      }
}


/**
 * An ISO-8601 encoded date string.
 */
export type Date = string



/**
 * An ISO-8601 encoded UTC date string.
 */
export type DateTime = string



/**
 * Autogenerated input type of DeclineTopicSuggestion
 */
export type DeclineTopicSuggestionInput = {
  clientMutationId?: string | null | undefined,
name: string,
reason: TopicSuggestionDeclineReason,
repositoryId: string
}
    


/**
 * Autogenerated return type of DeclineTopicSuggestion
 */
export class DeclineTopicSuggestionPayload extends $Base<"DeclineTopicSuggestionPayload"> {
  constructor() {
    super("DeclineTopicSuggestionPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The declined topic.
 */
      topic<Sel extends Selection<Topic>>(selectorFn: (s: Topic) => [...Sel]):$Field<"topic", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Topic)
      };
      return this.$_select("topic", options) as any
    }
  
}

  
/**
 * The possible base permissions for repositories.
 */
export enum DefaultRepositoryPermissionField {
  
/**
 * No access
 */
  NONE = "NONE",

/**
 * Can read repos by default
 */
  READ = "READ",

/**
 * Can read and write repos by default
 */
  WRITE = "WRITE",

/**
 * Can read, write, and administrate repos by default
 */
  ADMIN = "ADMIN"
}
  


/**
 * Entities that can be deleted.
 */
export class Deletable extends $Interface<{CommitComment: CommitComment,Discussion: Discussion,DiscussionComment: DiscussionComment,GistComment: GistComment,IssueComment: IssueComment,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment}, "Deletable"> {
  constructor() {
    super({CommitComment: CommitComment,Discussion: Discussion,DiscussionComment: DiscussionComment,GistComment: GistComment,IssueComment: IssueComment,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment}, "Deletable")
  }
}


/**
 * Autogenerated input type of DeleteBranchProtectionRule
 */
export type DeleteBranchProtectionRuleInput = {
  branchProtectionRuleId: string,
clientMutationId?: string | null | undefined
}
    


/**
 * Autogenerated return type of DeleteBranchProtectionRule
 */
export class DeleteBranchProtectionRulePayload extends $Base<"DeleteBranchProtectionRulePayload"> {
  constructor() {
    super("DeleteBranchProtectionRulePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of DeleteDeployment
 */
export type DeleteDeploymentInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of DeleteDeployment
 */
export class DeleteDeploymentPayload extends $Base<"DeleteDeploymentPayload"> {
  constructor() {
    super("DeleteDeploymentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of DeleteDiscussionComment
 */
export type DeleteDiscussionCommentInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of DeleteDiscussionComment
 */
export class DeleteDiscussionCommentPayload extends $Base<"DeleteDiscussionCommentPayload"> {
  constructor() {
    super("DeleteDiscussionCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The discussion comment that was just deleted.
 */
      comment<Sel extends Selection<DiscussionComment>>(selectorFn: (s: DiscussionComment) => [...Sel]):$Field<"comment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionComment)
      };
      return this.$_select("comment", options) as any
    }
  
}


/**
 * Autogenerated input type of DeleteDiscussion
 */
export type DeleteDiscussionInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of DeleteDiscussion
 */
export class DeleteDiscussionPayload extends $Base<"DeleteDiscussionPayload"> {
  constructor() {
    super("DeleteDiscussionPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The discussion that was just deleted.
 */
      discussion<Sel extends Selection<Discussion>>(selectorFn: (s: Discussion) => [...Sel]):$Field<"discussion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Discussion)
      };
      return this.$_select("discussion", options) as any
    }
  
}


/**
 * Autogenerated input type of DeleteEnvironment
 */
export type DeleteEnvironmentInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of DeleteEnvironment
 */
export class DeleteEnvironmentPayload extends $Base<"DeleteEnvironmentPayload"> {
  constructor() {
    super("DeleteEnvironmentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of DeleteIpAllowListEntry
 */
export type DeleteIpAllowListEntryInput = {
  clientMutationId?: string | null | undefined,
ipAllowListEntryId: string
}
    


/**
 * Autogenerated return type of DeleteIpAllowListEntry
 */
export class DeleteIpAllowListEntryPayload extends $Base<"DeleteIpAllowListEntryPayload"> {
  constructor() {
    super("DeleteIpAllowListEntryPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The IP allow list entry that was deleted.
 */
      ipAllowListEntry<Sel extends Selection<IpAllowListEntry>>(selectorFn: (s: IpAllowListEntry) => [...Sel]):$Field<"ipAllowListEntry", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IpAllowListEntry)
      };
      return this.$_select("ipAllowListEntry", options) as any
    }
  
}


/**
 * Autogenerated input type of DeleteIssueComment
 */
export type DeleteIssueCommentInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of DeleteIssueComment
 */
export class DeleteIssueCommentPayload extends $Base<"DeleteIssueCommentPayload"> {
  constructor() {
    super("DeleteIssueCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of DeleteIssue
 */
export type DeleteIssueInput = {
  clientMutationId?: string | null | undefined,
issueId: string
}
    


/**
 * Autogenerated return type of DeleteIssue
 */
export class DeleteIssuePayload extends $Base<"DeleteIssuePayload"> {
  constructor() {
    super("DeleteIssuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The repository the issue belonged to
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * Autogenerated input type of DeleteLinkedBranch
 */
export type DeleteLinkedBranchInput = {
  clientMutationId?: string | null | undefined,
linkedBranchId: string
}
    


/**
 * Autogenerated return type of DeleteLinkedBranch
 */
export class DeleteLinkedBranchPayload extends $Base<"DeleteLinkedBranchPayload"> {
  constructor() {
    super("DeleteLinkedBranchPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The issue the linked branch was unlinked from.
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  
}


/**
 * Autogenerated input type of DeleteProjectCard
 */
export type DeleteProjectCardInput = {
  cardId: string,
clientMutationId?: string | null | undefined
}
    


/**
 * Autogenerated return type of DeleteProjectCard
 */
export class DeleteProjectCardPayload extends $Base<"DeleteProjectCardPayload"> {
  constructor() {
    super("DeleteProjectCardPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The column the deleted card was in.
 */
      column<Sel extends Selection<ProjectColumn>>(selectorFn: (s: ProjectColumn) => [...Sel]):$Field<"column", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectColumn)
      };
      return this.$_select("column", options) as any
    }
  

      
/**
 * The deleted card ID.
 */
      get deletedCardId(): $Field<"deletedCardId", string | null | undefined>  {
       return this.$_select("deletedCardId") as any
      }
}


/**
 * Autogenerated input type of DeleteProjectColumn
 */
export type DeleteProjectColumnInput = {
  clientMutationId?: string | null | undefined,
columnId: string
}
    


/**
 * Autogenerated return type of DeleteProjectColumn
 */
export class DeleteProjectColumnPayload extends $Base<"DeleteProjectColumnPayload"> {
  constructor() {
    super("DeleteProjectColumnPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The deleted column ID.
 */
      get deletedColumnId(): $Field<"deletedColumnId", string | null | undefined>  {
       return this.$_select("deletedColumnId") as any
      }

      
/**
 * The project the deleted column was in.
 */
      project<Sel extends Selection<Project>>(selectorFn: (s: Project) => [...Sel]):$Field<"project", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Project)
      };
      return this.$_select("project", options) as any
    }
  
}


/**
 * Autogenerated input type of DeleteProject
 */
export type DeleteProjectInput = {
  clientMutationId?: string | null | undefined,
projectId: string
}
    


/**
 * Autogenerated input type of DeleteProjectNextItem
 */
export type DeleteProjectNextItemInput = {
  clientMutationId?: string | null | undefined,
itemId?: string | null | undefined,
projectId?: string | null | undefined
}
    


/**
 * Autogenerated return type of DeleteProjectNextItem
 */
export class DeleteProjectNextItemPayload extends $Base<"DeleteProjectNextItemPayload"> {
  constructor() {
    super("DeleteProjectNextItemPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The ID of the deleted item.
 */
      get deletedItemId(): $Field<"deletedItemId", string | null | undefined>  {
       return this.$_select("deletedItemId") as any
      }
}


/**
 * Autogenerated return type of DeleteProject
 */
export class DeleteProjectPayload extends $Base<"DeleteProjectPayload"> {
  constructor() {
    super("DeleteProjectPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The repository or organization the project was removed from.
 */
      owner<Sel extends Selection<ProjectOwner>>(selectorFn: (s: ProjectOwner) => [...Sel]):$Field<"owner", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectOwner)
      };
      return this.$_select("owner", options) as any
    }
  
}


/**
 * Autogenerated input type of DeleteProjectV2Item
 */
export type DeleteProjectV2ItemInput = {
  clientMutationId?: string | null | undefined,
itemId: string,
projectId: string
}
    


/**
 * Autogenerated return type of DeleteProjectV2Item
 */
export class DeleteProjectV2ItemPayload extends $Base<"DeleteProjectV2ItemPayload"> {
  constructor() {
    super("DeleteProjectV2ItemPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The ID of the deleted item.
 */
      get deletedItemId(): $Field<"deletedItemId", string | null | undefined>  {
       return this.$_select("deletedItemId") as any
      }
}


/**
 * Autogenerated input type of DeletePullRequestReviewComment
 */
export type DeletePullRequestReviewCommentInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of DeletePullRequestReviewComment
 */
export class DeletePullRequestReviewCommentPayload extends $Base<"DeletePullRequestReviewCommentPayload"> {
  constructor() {
    super("DeletePullRequestReviewCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The pull request review the deleted comment belonged to.
 */
      pullRequestReview<Sel extends Selection<PullRequestReview>>(selectorFn: (s: PullRequestReview) => [...Sel]):$Field<"pullRequestReview", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReview)
      };
      return this.$_select("pullRequestReview", options) as any
    }
  

      
/**
 * The deleted pull request review comment.
 */
      pullRequestReviewComment<Sel extends Selection<PullRequestReviewComment>>(selectorFn: (s: PullRequestReviewComment) => [...Sel]):$Field<"pullRequestReviewComment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewComment)
      };
      return this.$_select("pullRequestReviewComment", options) as any
    }
  
}


/**
 * Autogenerated input type of DeletePullRequestReview
 */
export type DeletePullRequestReviewInput = {
  clientMutationId?: string | null | undefined,
pullRequestReviewId: string
}
    


/**
 * Autogenerated return type of DeletePullRequestReview
 */
export class DeletePullRequestReviewPayload extends $Base<"DeletePullRequestReviewPayload"> {
  constructor() {
    super("DeletePullRequestReviewPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The deleted pull request review.
 */
      pullRequestReview<Sel extends Selection<PullRequestReview>>(selectorFn: (s: PullRequestReview) => [...Sel]):$Field<"pullRequestReview", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReview)
      };
      return this.$_select("pullRequestReview", options) as any
    }
  
}


/**
 * Autogenerated input type of DeleteRef
 */
export type DeleteRefInput = {
  clientMutationId?: string | null | undefined,
refId: string
}
    


/**
 * Autogenerated return type of DeleteRef
 */
export class DeleteRefPayload extends $Base<"DeleteRefPayload"> {
  constructor() {
    super("DeleteRefPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of DeleteTeamDiscussionComment
 */
export type DeleteTeamDiscussionCommentInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of DeleteTeamDiscussionComment
 */
export class DeleteTeamDiscussionCommentPayload extends $Base<"DeleteTeamDiscussionCommentPayload"> {
  constructor() {
    super("DeleteTeamDiscussionCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of DeleteTeamDiscussion
 */
export type DeleteTeamDiscussionInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of DeleteTeamDiscussion
 */
export class DeleteTeamDiscussionPayload extends $Base<"DeleteTeamDiscussionPayload"> {
  constructor() {
    super("DeleteTeamDiscussionPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of DeleteVerifiableDomain
 */
export type DeleteVerifiableDomainInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of DeleteVerifiableDomain
 */
export class DeleteVerifiableDomainPayload extends $Base<"DeleteVerifiableDomainPayload"> {
  constructor() {
    super("DeleteVerifiableDomainPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The owning account from which the domain was deleted.
 */
      owner<Sel extends Selection<VerifiableDomainOwner>>(selectorFn: (s: VerifiableDomainOwner) => [...Sel]):$Field<"owner", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new VerifiableDomainOwner)
      };
      return this.$_select("owner", options) as any
    }
  
}


/**
 * Represents a 'demilestoned' event on a given issue or pull request.
 */
export class DemilestonedEvent extends $Base<"DemilestonedEvent"> {
  constructor() {
    super("DemilestonedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the milestone title associated with the 'demilestoned' event.
 */
      get milestoneTitle(): $Field<"milestoneTitle", string>  {
       return this.$_select("milestoneTitle") as any
      }

      
/**
 * Object referenced by event.
 */
      subject<Sel extends Selection<MilestoneItem>>(selectorFn: (s: MilestoneItem) => [...Sel]):$Field<"subject", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new MilestoneItem)
      };
      return this.$_select("subject", options) as any
    }
  
}


/**
 * A Dependabot Update for a dependency in a repository
 */
export class DependabotUpdate extends $Base<"DependabotUpdate"> {
  constructor() {
    super("DependabotUpdate")
  }

  
      
/**
 * The error from a dependency update
 */
      error<Sel extends Selection<DependabotUpdateError>>(selectorFn: (s: DependabotUpdateError) => [...Sel]):$Field<"error", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DependabotUpdateError)
      };
      return this.$_select("error", options) as any
    }
  

      
/**
 * The associated pull request
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The repository associated with this node.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * An error produced from a Dependabot Update
 */
export class DependabotUpdateError extends $Base<"DependabotUpdateError"> {
  constructor() {
    super("DependabotUpdateError")
  }

  
      
/**
 * The body of the error
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The error code
 */
      get errorType(): $Field<"errorType", string>  {
       return this.$_select("errorType") as any
      }

      
/**
 * The title of the error
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }
}

  
/**
 * The possible ecosystems of a dependency graph package.
 */
export enum DependencyGraphEcosystem {
  
/**
 * Ruby gems hosted at RubyGems.org
 */
  RUBYGEMS = "RUBYGEMS",

/**
 * JavaScript packages hosted at npmjs.com
 */
  NPM = "NPM",

/**
 * Python packages hosted at PyPI.org
 */
  PIP = "PIP",

/**
 * Java artifacts hosted at the Maven central repository
 */
  MAVEN = "MAVEN",

/**
 * .NET packages hosted at the NuGet Gallery
 */
  NUGET = "NUGET",

/**
 * PHP packages hosted at packagist.org
 */
  COMPOSER = "COMPOSER",

/**
 * Go modules
 */
  GO = "GO",

/**
 * GitHub Actions
 */
  ACTIONS = "ACTIONS",

/**
 * Rust crates
 */
  RUST = "RUST",

/**
 * Dart packages hosted at pub.dev
 */
  PUB = "PUB"
}
  


/**
 * A repository deploy key.
 */
export class DeployKey extends $Base<"DeployKey"> {
  constructor() {
    super("DeployKey")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The deploy key.
 */
      get key(): $Field<"key", string>  {
       return this.$_select("key") as any
      }

      
/**
 * Whether or not the deploy key is read only.
 */
      get readOnly(): $Field<"readOnly", boolean>  {
       return this.$_select("readOnly") as any
      }

      
/**
 * The deploy key title.
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }

      
/**
 * Whether or not the deploy key has been verified.
 */
      get verified(): $Field<"verified", boolean>  {
       return this.$_select("verified") as any
      }
}


/**
 * The connection type for DeployKey.
 */
export class DeployKeyConnection extends $Base<"DeployKeyConnection"> {
  constructor() {
    super("DeployKeyConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<DeployKeyEdge>>(selectorFn: (s: DeployKeyEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeployKeyEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<DeployKey>>(selectorFn: (s: DeployKey) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeployKey)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class DeployKeyEdge extends $Base<"DeployKeyEdge"> {
  constructor() {
    super("DeployKeyEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<DeployKey>>(selectorFn: (s: DeployKey) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeployKey)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents a 'deployed' event on a given pull request.
 */
export class DeployedEvent extends $Base<"DeployedEvent"> {
  constructor() {
    super("DeployedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The deployment associated with the 'deployed' event.
 */
      deployment<Sel extends Selection<Deployment>>(selectorFn: (s: Deployment) => [...Sel]):$Field<"deployment", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Deployment)
      };
      return this.$_select("deployment", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The ref associated with the 'deployed' event.
 */
      ref<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"ref", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("ref", options) as any
    }
  
}


/**
 * Represents triggered deployment instance.
 */
export class Deployment extends $Base<"Deployment"> {
  constructor() {
    super("Deployment")
  }

  
      
/**
 * Identifies the commit sha of the deployment.
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
/**
 * Identifies the oid of the deployment commit, even if the commit has been deleted.
 */
      get commitOid(): $Field<"commitOid", string>  {
       return this.$_select("commitOid") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the actor who triggered the deployment.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The deployment description.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * The latest environment to which this deployment was made.
 */
      get environment(): $Field<"environment", string | null | undefined>  {
       return this.$_select("environment") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The latest environment to which this deployment was made.
 */
      get latestEnvironment(): $Field<"latestEnvironment", string | null | undefined>  {
       return this.$_select("latestEnvironment") as any
      }

      
/**
 * The latest status of this deployment.
 */
      latestStatus<Sel extends Selection<DeploymentStatus>>(selectorFn: (s: DeploymentStatus) => [...Sel]):$Field<"latestStatus", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentStatus)
      };
      return this.$_select("latestStatus", options) as any
    }
  

      
/**
 * The original environment to which this deployment was made.
 */
      get originalEnvironment(): $Field<"originalEnvironment", string | null | undefined>  {
       return this.$_select("originalEnvironment") as any
      }

      
/**
 * Extra information that a deployment system might need.
 */
      get payload(): $Field<"payload", string | null | undefined>  {
       return this.$_select("payload") as any
      }

      
/**
 * Identifies the Ref of the deployment, if the deployment was created by ref.
 */
      ref<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"ref", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("ref", options) as any
    }
  

      
/**
 * Identifies the repository associated with the deployment.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The current state of the deployment.
 */
      get state(): $Field<"state", DeploymentState | null | undefined>  {
       return this.$_select("state") as any
      }

      
/**
 * A list of statuses associated with the deployment.
 */
      statuses<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<DeploymentStatusConnection>>(args: Args, selectorFn: (s: DeploymentStatusConnection) => [...Sel]):$Field<"statuses", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
statuses<Sel extends Selection<DeploymentStatusConnection>>(selectorFn: (s: DeploymentStatusConnection) => [...Sel]):$Field<"statuses", GetOutput<Sel> | undefined , GetVariables<Sel>>
statuses(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new DeploymentStatusConnection)
      };
      return this.$_select("statuses", options) as any
    }
  

      
/**
 * The deployment task.
 */
      get task(): $Field<"task", string | null | undefined>  {
       return this.$_select("task") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The connection type for Deployment.
 */
export class DeploymentConnection extends $Base<"DeploymentConnection"> {
  constructor() {
    super("DeploymentConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<DeploymentEdge>>(selectorFn: (s: DeploymentEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Deployment>>(selectorFn: (s: Deployment) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Deployment)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class DeploymentEdge extends $Base<"DeploymentEdge"> {
  constructor() {
    super("DeploymentEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Deployment>>(selectorFn: (s: Deployment) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Deployment)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents a 'deployment_environment_changed' event on a given pull request.
 */
export class DeploymentEnvironmentChangedEvent extends $Base<"DeploymentEnvironmentChangedEvent"> {
  constructor() {
    super("DeploymentEnvironmentChangedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The deployment status that updated the deployment environment.
 */
      deploymentStatus<Sel extends Selection<DeploymentStatus>>(selectorFn: (s: DeploymentStatus) => [...Sel]):$Field<"deploymentStatus", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentStatus)
      };
      return this.$_select("deploymentStatus", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Ordering options for deployment connections
 */
export type DeploymentOrder = {
  direction: OrderDirection,
field: DeploymentOrderField
}
    

  
/**
 * Properties by which deployment connections can be ordered.
 */
export enum DeploymentOrderField {
  
/**
 * Order collection by creation time
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * A protection rule.
 */
export class DeploymentProtectionRule extends $Base<"DeploymentProtectionRule"> {
  constructor() {
    super("DeploymentProtectionRule")
  }

  
      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The teams or users that can review the deployment
 */
      reviewers<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<DeploymentReviewerConnection>>(args: Args, selectorFn: (s: DeploymentReviewerConnection) => [...Sel]):$Field<"reviewers", GetOutput<Sel> , GetVariables<Sel, Args>>
reviewers<Sel extends Selection<DeploymentReviewerConnection>>(selectorFn: (s: DeploymentReviewerConnection) => [...Sel]):$Field<"reviewers", GetOutput<Sel> , GetVariables<Sel>>
reviewers(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new DeploymentReviewerConnection)
      };
      return this.$_select("reviewers", options) as any
    }
  

      
/**
 * The timeout in minutes for this protection rule.
 */
      get timeout(): $Field<"timeout", number>  {
       return this.$_select("timeout") as any
      }

      
/**
 * The type of protection rule.
 */
      get type(): $Field<"type", DeploymentProtectionRuleType>  {
       return this.$_select("type") as any
      }
}


/**
 * The connection type for DeploymentProtectionRule.
 */
export class DeploymentProtectionRuleConnection extends $Base<"DeploymentProtectionRuleConnection"> {
  constructor() {
    super("DeploymentProtectionRuleConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<DeploymentProtectionRuleEdge>>(selectorFn: (s: DeploymentProtectionRuleEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentProtectionRuleEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<DeploymentProtectionRule>>(selectorFn: (s: DeploymentProtectionRule) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentProtectionRule)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class DeploymentProtectionRuleEdge extends $Base<"DeploymentProtectionRuleEdge"> {
  constructor() {
    super("DeploymentProtectionRuleEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<DeploymentProtectionRule>>(selectorFn: (s: DeploymentProtectionRule) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentProtectionRule)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The possible protection rule types.
 */
export enum DeploymentProtectionRuleType {
  
/**
 * Required reviewers
 */
  REQUIRED_REVIEWERS = "REQUIRED_REVIEWERS",

/**
 * Wait timer
 */
  WAIT_TIMER = "WAIT_TIMER"
}
  


/**
 * A request to deploy a workflow run to an environment.
 */
export class DeploymentRequest extends $Base<"DeploymentRequest"> {
  constructor() {
    super("DeploymentRequest")
  }

  
      
/**
 * Whether or not the current user can approve the deployment
 */
      get currentUserCanApprove(): $Field<"currentUserCanApprove", boolean>  {
       return this.$_select("currentUserCanApprove") as any
      }

      
/**
 * The target environment of the deployment
 */
      environment<Sel extends Selection<Environment>>(selectorFn: (s: Environment) => [...Sel]):$Field<"environment", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Environment)
      };
      return this.$_select("environment", options) as any
    }
  

      
/**
 * The teams or users that can review the deployment
 */
      reviewers<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<DeploymentReviewerConnection>>(args: Args, selectorFn: (s: DeploymentReviewerConnection) => [...Sel]):$Field<"reviewers", GetOutput<Sel> , GetVariables<Sel, Args>>
reviewers<Sel extends Selection<DeploymentReviewerConnection>>(selectorFn: (s: DeploymentReviewerConnection) => [...Sel]):$Field<"reviewers", GetOutput<Sel> , GetVariables<Sel>>
reviewers(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new DeploymentReviewerConnection)
      };
      return this.$_select("reviewers", options) as any
    }
  

      
/**
 * The wait timer in minutes configured in the environment
 */
      get waitTimer(): $Field<"waitTimer", number>  {
       return this.$_select("waitTimer") as any
      }

      
/**
 * The wait timer in minutes configured in the environment
 */
      get waitTimerStartedAt(): $Field<"waitTimerStartedAt", string | null | undefined>  {
       return this.$_select("waitTimerStartedAt") as any
      }
}


/**
 * The connection type for DeploymentRequest.
 */
export class DeploymentRequestConnection extends $Base<"DeploymentRequestConnection"> {
  constructor() {
    super("DeploymentRequestConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<DeploymentRequestEdge>>(selectorFn: (s: DeploymentRequestEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentRequestEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<DeploymentRequest>>(selectorFn: (s: DeploymentRequest) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentRequest)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class DeploymentRequestEdge extends $Base<"DeploymentRequestEdge"> {
  constructor() {
    super("DeploymentRequestEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<DeploymentRequest>>(selectorFn: (s: DeploymentRequest) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentRequest)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A deployment review.
 */
export class DeploymentReview extends $Base<"DeploymentReview"> {
  constructor() {
    super("DeploymentReview")
  }

  
      
/**
 * The comment the user left.
 */
      get comment(): $Field<"comment", string>  {
       return this.$_select("comment") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The environments approved or rejected
 */
      environments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<EnvironmentConnection>>(args: Args, selectorFn: (s: EnvironmentConnection) => [...Sel]):$Field<"environments", GetOutput<Sel> , GetVariables<Sel, Args>>
environments<Sel extends Selection<EnvironmentConnection>>(selectorFn: (s: EnvironmentConnection) => [...Sel]):$Field<"environments", GetOutput<Sel> , GetVariables<Sel>>
environments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new EnvironmentConnection)
      };
      return this.$_select("environments", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The decision of the user.
 */
      get state(): $Field<"state", DeploymentReviewState>  {
       return this.$_select("state") as any
      }

      
/**
 * The user that reviewed the deployment.
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * The connection type for DeploymentReview.
 */
export class DeploymentReviewConnection extends $Base<"DeploymentReviewConnection"> {
  constructor() {
    super("DeploymentReviewConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<DeploymentReviewEdge>>(selectorFn: (s: DeploymentReviewEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentReviewEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<DeploymentReview>>(selectorFn: (s: DeploymentReview) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentReview)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class DeploymentReviewEdge extends $Base<"DeploymentReviewEdge"> {
  constructor() {
    super("DeploymentReviewEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<DeploymentReview>>(selectorFn: (s: DeploymentReview) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentReview)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The possible states for a deployment review.
 */
export enum DeploymentReviewState {
  
/**
 * The deployment was approved.
 */
  APPROVED = "APPROVED",

/**
 * The deployment was rejected.
 */
  REJECTED = "REJECTED"
}
  


/**
 * Users and teams.
 */
export class DeploymentReviewer extends $Union<{Team: Team,User: User,Node: Node,Subscribable: Subscribable,MemberStatusable: MemberStatusable,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "DeploymentReviewer"> {
  constructor() {
    super({Team: Team,User: User,Node: Node,Subscribable: Subscribable,MemberStatusable: MemberStatusable,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * The connection type for DeploymentReviewer.
 */
export class DeploymentReviewerConnection extends $Base<"DeploymentReviewerConnection"> {
  constructor() {
    super("DeploymentReviewerConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<DeploymentReviewerEdge>>(selectorFn: (s: DeploymentReviewerEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentReviewerEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<DeploymentReviewer>>(selectorFn: (s: DeploymentReviewer) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentReviewer)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class DeploymentReviewerEdge extends $Base<"DeploymentReviewerEdge"> {
  constructor() {
    super("DeploymentReviewerEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<DeploymentReviewer>>(selectorFn: (s: DeploymentReviewer) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentReviewer)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The possible states in which a deployment can be.
 */
export enum DeploymentState {
  
/**
 * The pending deployment was not updated after 30 minutes.
 */
  ABANDONED = "ABANDONED",

/**
 * The deployment is currently active.
 */
  ACTIVE = "ACTIVE",

/**
 * An inactive transient deployment.
 */
  DESTROYED = "DESTROYED",

/**
 * The deployment experienced an error.
 */
  ERROR = "ERROR",

/**
 * The deployment has failed.
 */
  FAILURE = "FAILURE",

/**
 * The deployment is inactive.
 */
  INACTIVE = "INACTIVE",

/**
 * The deployment is pending.
 */
  PENDING = "PENDING",

/**
 * The deployment has queued
 */
  QUEUED = "QUEUED",

/**
 * The deployment is in progress.
 */
  IN_PROGRESS = "IN_PROGRESS",

/**
 * The deployment is waiting.
 */
  WAITING = "WAITING"
}
  


/**
 * Describes the status of a given deployment attempt.
 */
export class DeploymentStatus extends $Base<"DeploymentStatus"> {
  constructor() {
    super("DeploymentStatus")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the actor who triggered the deployment.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the deployment associated with status.
 */
      deployment<Sel extends Selection<Deployment>>(selectorFn: (s: Deployment) => [...Sel]):$Field<"deployment", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Deployment)
      };
      return this.$_select("deployment", options) as any
    }
  

      
/**
 * Identifies the description of the deployment.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * Identifies the environment URL of the deployment.
 */
      get environmentUrl(): $Field<"environmentUrl", string | null | undefined>  {
       return this.$_select("environmentUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the log URL of the deployment.
 */
      get logUrl(): $Field<"logUrl", string | null | undefined>  {
       return this.$_select("logUrl") as any
      }

      
/**
 * Identifies the current state of the deployment.
 */
      get state(): $Field<"state", DeploymentStatusState>  {
       return this.$_select("state") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The connection type for DeploymentStatus.
 */
export class DeploymentStatusConnection extends $Base<"DeploymentStatusConnection"> {
  constructor() {
    super("DeploymentStatusConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<DeploymentStatusEdge>>(selectorFn: (s: DeploymentStatusEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentStatusEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<DeploymentStatus>>(selectorFn: (s: DeploymentStatus) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentStatus)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class DeploymentStatusEdge extends $Base<"DeploymentStatusEdge"> {
  constructor() {
    super("DeploymentStatusEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<DeploymentStatus>>(selectorFn: (s: DeploymentStatus) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DeploymentStatus)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The possible states for a deployment status.
 */
export enum DeploymentStatusState {
  
/**
 * The deployment is pending.
 */
  PENDING = "PENDING",

/**
 * The deployment was successful.
 */
  SUCCESS = "SUCCESS",

/**
 * The deployment has failed.
 */
  FAILURE = "FAILURE",

/**
 * The deployment is inactive.
 */
  INACTIVE = "INACTIVE",

/**
 * The deployment experienced an error.
 */
  ERROR = "ERROR",

/**
 * The deployment is queued
 */
  QUEUED = "QUEUED",

/**
 * The deployment is in progress.
 */
  IN_PROGRESS = "IN_PROGRESS",

/**
 * The deployment is waiting.
 */
  WAITING = "WAITING"
}
  

  
/**
 * The possible sides of a diff.
 */
export enum DiffSide {
  
/**
 * The left side of the diff.
 */
  LEFT = "LEFT",

/**
 * The right side of the diff.
 */
  RIGHT = "RIGHT"
}
  


/**
 * Autogenerated input type of DisablePullRequestAutoMerge
 */
export type DisablePullRequestAutoMergeInput = {
  clientMutationId?: string | null | undefined,
pullRequestId: string
}
    


/**
 * Autogenerated return type of DisablePullRequestAutoMerge
 */
export class DisablePullRequestAutoMergePayload extends $Base<"DisablePullRequestAutoMergePayload"> {
  constructor() {
    super("DisablePullRequestAutoMergePayload")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The pull request auto merge was disabled on.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents a 'disconnected' event on a given issue or pull request.
 */
export class DisconnectedEvent extends $Base<"DisconnectedEvent"> {
  constructor() {
    super("DisconnectedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Reference originated in a different repository.
 */
      get isCrossRepository(): $Field<"isCrossRepository", boolean>  {
       return this.$_select("isCrossRepository") as any
      }

      
/**
 * Issue or pull request from which the issue was disconnected.
 */
      source<Sel extends Selection<ReferencedSubject>>(selectorFn: (s: ReferencedSubject) => [...Sel]):$Field<"source", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReferencedSubject)
      };
      return this.$_select("source", options) as any
    }
  

      
/**
 * Issue or pull request which was disconnected.
 */
      subject<Sel extends Selection<ReferencedSubject>>(selectorFn: (s: ReferencedSubject) => [...Sel]):$Field<"subject", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReferencedSubject)
      };
      return this.$_select("subject", options) as any
    }
  
}


/**
 * A discussion in a repository.
 */
export class Discussion extends $Base<"Discussion"> {
  constructor() {
    super("Discussion")
  }

  
      
/**
 * Reason that the conversation was locked.
 */
      get activeLockReason(): $Field<"activeLockReason", LockReason | null | undefined>  {
       return this.$_select("activeLockReason") as any
      }

      
/**
 * The comment chosen as this discussion's answer, if any.
 */
      answer<Sel extends Selection<DiscussionComment>>(selectorFn: (s: DiscussionComment) => [...Sel]):$Field<"answer", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionComment)
      };
      return this.$_select("answer", options) as any
    }
  

      
/**
 * The time when a user chose this discussion's answer, if answered.
 */
      get answerChosenAt(): $Field<"answerChosenAt", string | null | undefined>  {
       return this.$_select("answerChosenAt") as any
      }

      
/**
 * The user who chose this discussion's answer, if answered.
 */
      answerChosenBy<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"answerChosenBy", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("answerChosenBy", options) as any
    }
  

      
/**
 * The actor who authored the comment.
 */
      author<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Author's association with the subject of the comment.
 */
      get authorAssociation(): $Field<"authorAssociation", CommentAuthorAssociation>  {
       return this.$_select("authorAssociation") as any
      }

      
/**
 * The main text of the discussion post.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * The body rendered to text.
 */
      get bodyText(): $Field<"bodyText", string>  {
       return this.$_select("bodyText") as any
      }

      
/**
 * The category for this discussion.
 */
      category<Sel extends Selection<DiscussionCategory>>(selectorFn: (s: DiscussionCategory) => [...Sel]):$Field<"category", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionCategory)
      };
      return this.$_select("category", options) as any
    }
  

      
/**
 * The replies to the discussion.
 */
      comments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<DiscussionCommentConnection>>(args: Args, selectorFn: (s: DiscussionCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel, Args>>
comments<Sel extends Selection<DiscussionCommentConnection>>(selectorFn: (s: DiscussionCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel>>
comments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new DiscussionCommentConnection)
      };
      return this.$_select("comments", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Check if this comment was created via an email reply.
 */
      get createdViaEmail(): $Field<"createdViaEmail", boolean>  {
       return this.$_select("createdViaEmail") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The actor who edited the comment.
 */
      editor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"editor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("editor", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Check if this comment was edited and includes an edit with the creation data
 */
      get includesCreatedEdit(): $Field<"includesCreatedEdit", boolean>  {
       return this.$_select("includesCreatedEdit") as any
      }

      
/**
 * A list of labels associated with the object.
 */
      labels<Args extends VariabledInput<{
        orderBy?: LabelOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<LabelConnection>>(args: Args, selectorFn: (s: LabelConnection) => [...Sel]):$Field<"labels", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
labels<Sel extends Selection<LabelConnection>>(selectorFn: (s: LabelConnection) => [...Sel]):$Field<"labels", GetOutput<Sel> | undefined , GetVariables<Sel>>
labels(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "LabelOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new LabelConnection)
      };
      return this.$_select("labels", options) as any
    }
  

      
/**
 * The moment the editor made the last edit
 */
      get lastEditedAt(): $Field<"lastEditedAt", string | null | undefined>  {
       return this.$_select("lastEditedAt") as any
      }

      
/**
 * `true` if the object is locked
 */
      get locked(): $Field<"locked", boolean>  {
       return this.$_select("locked") as any
      }

      
/**
 * The number identifying this discussion within the repository.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * The poll associated with this discussion, if one exists.
 */
      poll<Sel extends Selection<DiscussionPoll>>(selectorFn: (s: DiscussionPoll) => [...Sel]):$Field<"poll", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionPoll)
      };
      return this.$_select("poll", options) as any
    }
  

      
/**
 * Identifies when the comment was published at.
 */
      get publishedAt(): $Field<"publishedAt", string | null | undefined>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * A list of reactions grouped by content left on the subject.
 */
      reactionGroups<Sel extends Selection<ReactionGroup>>(selectorFn: (s: ReactionGroup) => [...Sel]):$Field<"reactionGroups", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactionGroup)
      };
      return this.$_select("reactionGroups", options) as any
    }
  

      
/**
 * A list of Reactions left on the Issue.
 */
      reactions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
content?: ReactionContent | null | undefined
orderBy?: ReactionOrder | null | undefined,
      }>,Sel extends Selection<ReactionConnection>>(args: Args, selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel, Args>>
reactions<Sel extends Selection<ReactionConnection>>(selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel>>
reactions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
content: "ReactionContent",
orderBy: "ReactionOrder"
            },
        args,

        selection: selectorFn(new ReactionConnection)
      };
      return this.$_select("reactions", options) as any
    }
  

      
/**
 * The repository associated with this node.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The path for this discussion.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The title of this discussion.
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * Number of upvotes that this subject has received.
 */
      get upvoteCount(): $Field<"upvoteCount", number>  {
       return this.$_select("upvoteCount") as any
      }

      
/**
 * The URL for this discussion.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * A list of edits to this content.
 */
      userContentEdits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserContentEditConnection>>(args: Args, selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
userContentEdits<Sel extends Selection<UserContentEditConnection>>(selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel>>
userContentEdits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserContentEditConnection)
      };
      return this.$_select("userContentEdits", options) as any
    }
  

      
/**
 * Check if the current viewer can delete this object.
 */
      get viewerCanDelete(): $Field<"viewerCanDelete", boolean>  {
       return this.$_select("viewerCanDelete") as any
      }

      
/**
 * Can user react to this subject
 */
      get viewerCanReact(): $Field<"viewerCanReact", boolean>  {
       return this.$_select("viewerCanReact") as any
      }

      
/**
 * Check if the viewer is able to change their subscription status for the repository.
 */
      get viewerCanSubscribe(): $Field<"viewerCanSubscribe", boolean>  {
       return this.$_select("viewerCanSubscribe") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * Whether or not the current user can add or remove an upvote on this subject.
 */
      get viewerCanUpvote(): $Field<"viewerCanUpvote", boolean>  {
       return this.$_select("viewerCanUpvote") as any
      }

      
/**
 * Did the viewer author this comment.
 */
      get viewerDidAuthor(): $Field<"viewerDidAuthor", boolean>  {
       return this.$_select("viewerDidAuthor") as any
      }

      
/**
 * Whether or not the current user has already upvoted this subject.
 */
      get viewerHasUpvoted(): $Field<"viewerHasUpvoted", boolean>  {
       return this.$_select("viewerHasUpvoted") as any
      }

      
/**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
      get viewerSubscription(): $Field<"viewerSubscription", SubscriptionState | null | undefined>  {
       return this.$_select("viewerSubscription") as any
      }
}


/**
 * A category for discussions in a repository.
 */
export class DiscussionCategory extends $Base<"DiscussionCategory"> {
  constructor() {
    super("DiscussionCategory")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * A description of this category.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * An emoji representing this category.
 */
      get emoji(): $Field<"emoji", string>  {
       return this.$_select("emoji") as any
      }

      
/**
 * This category's emoji rendered as HTML.
 */
      get emojiHTML(): $Field<"emojiHTML", string>  {
       return this.$_select("emojiHTML") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
 */
      get isAnswerable(): $Field<"isAnswerable", boolean>  {
       return this.$_select("isAnswerable") as any
      }

      
/**
 * The name of this category.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The repository associated with this node.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The slug of this category.
 */
      get slug(): $Field<"slug", string>  {
       return this.$_select("slug") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The connection type for DiscussionCategory.
 */
export class DiscussionCategoryConnection extends $Base<"DiscussionCategoryConnection"> {
  constructor() {
    super("DiscussionCategoryConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<DiscussionCategoryEdge>>(selectorFn: (s: DiscussionCategoryEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionCategoryEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<DiscussionCategory>>(selectorFn: (s: DiscussionCategory) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionCategory)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class DiscussionCategoryEdge extends $Base<"DiscussionCategoryEdge"> {
  constructor() {
    super("DiscussionCategoryEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<DiscussionCategory>>(selectorFn: (s: DiscussionCategory) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionCategory)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A comment on a discussion.
 */
export class DiscussionComment extends $Base<"DiscussionComment"> {
  constructor() {
    super("DiscussionComment")
  }

  
      
/**
 * The actor who authored the comment.
 */
      author<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Author's association with the subject of the comment.
 */
      get authorAssociation(): $Field<"authorAssociation", CommentAuthorAssociation>  {
       return this.$_select("authorAssociation") as any
      }

      
/**
 * The body as Markdown.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * The body rendered to text.
 */
      get bodyText(): $Field<"bodyText", string>  {
       return this.$_select("bodyText") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Check if this comment was created via an email reply.
 */
      get createdViaEmail(): $Field<"createdViaEmail", boolean>  {
       return this.$_select("createdViaEmail") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The time when this replied-to comment was deleted
 */
      get deletedAt(): $Field<"deletedAt", string | null | undefined>  {
       return this.$_select("deletedAt") as any
      }

      
/**
 * The discussion this comment was created in
 */
      discussion<Sel extends Selection<Discussion>>(selectorFn: (s: Discussion) => [...Sel]):$Field<"discussion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Discussion)
      };
      return this.$_select("discussion", options) as any
    }
  

      
/**
 * The actor who edited the comment.
 */
      editor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"editor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("editor", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Check if this comment was edited and includes an edit with the creation data
 */
      get includesCreatedEdit(): $Field<"includesCreatedEdit", boolean>  {
       return this.$_select("includesCreatedEdit") as any
      }

      
/**
 * Has this comment been chosen as the answer of its discussion?
 */
      get isAnswer(): $Field<"isAnswer", boolean>  {
       return this.$_select("isAnswer") as any
      }

      
/**
 * Returns whether or not a comment has been minimized.
 */
      get isMinimized(): $Field<"isMinimized", boolean>  {
       return this.$_select("isMinimized") as any
      }

      
/**
 * The moment the editor made the last edit
 */
      get lastEditedAt(): $Field<"lastEditedAt", string | null | undefined>  {
       return this.$_select("lastEditedAt") as any
      }

      
/**
 * Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
 */
      get minimizedReason(): $Field<"minimizedReason", string | null | undefined>  {
       return this.$_select("minimizedReason") as any
      }

      
/**
 * Identifies when the comment was published at.
 */
      get publishedAt(): $Field<"publishedAt", string | null | undefined>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * A list of reactions grouped by content left on the subject.
 */
      reactionGroups<Sel extends Selection<ReactionGroup>>(selectorFn: (s: ReactionGroup) => [...Sel]):$Field<"reactionGroups", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactionGroup)
      };
      return this.$_select("reactionGroups", options) as any
    }
  

      
/**
 * A list of Reactions left on the Issue.
 */
      reactions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
content?: ReactionContent | null | undefined
orderBy?: ReactionOrder | null | undefined,
      }>,Sel extends Selection<ReactionConnection>>(args: Args, selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel, Args>>
reactions<Sel extends Selection<ReactionConnection>>(selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel>>
reactions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
content: "ReactionContent",
orderBy: "ReactionOrder"
            },
        args,

        selection: selectorFn(new ReactionConnection)
      };
      return this.$_select("reactions", options) as any
    }
  

      
/**
 * The threaded replies to this comment.
 */
      replies<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<DiscussionCommentConnection>>(args: Args, selectorFn: (s: DiscussionCommentConnection) => [...Sel]):$Field<"replies", GetOutput<Sel> , GetVariables<Sel, Args>>
replies<Sel extends Selection<DiscussionCommentConnection>>(selectorFn: (s: DiscussionCommentConnection) => [...Sel]):$Field<"replies", GetOutput<Sel> , GetVariables<Sel>>
replies(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new DiscussionCommentConnection)
      };
      return this.$_select("replies", options) as any
    }
  

      
/**
 * The discussion comment this comment is a reply to
 */
      replyTo<Sel extends Selection<DiscussionComment>>(selectorFn: (s: DiscussionComment) => [...Sel]):$Field<"replyTo", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionComment)
      };
      return this.$_select("replyTo", options) as any
    }
  

      
/**
 * The path for this discussion comment.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * Number of upvotes that this subject has received.
 */
      get upvoteCount(): $Field<"upvoteCount", number>  {
       return this.$_select("upvoteCount") as any
      }

      
/**
 * The URL for this discussion comment.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * A list of edits to this content.
 */
      userContentEdits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserContentEditConnection>>(args: Args, selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
userContentEdits<Sel extends Selection<UserContentEditConnection>>(selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel>>
userContentEdits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserContentEditConnection)
      };
      return this.$_select("userContentEdits", options) as any
    }
  

      
/**
 * Check if the current viewer can delete this object.
 */
      get viewerCanDelete(): $Field<"viewerCanDelete", boolean>  {
       return this.$_select("viewerCanDelete") as any
      }

      
/**
 * Can the current user mark this comment as an answer?
 */
      get viewerCanMarkAsAnswer(): $Field<"viewerCanMarkAsAnswer", boolean>  {
       return this.$_select("viewerCanMarkAsAnswer") as any
      }

      
/**
 * Check if the current viewer can minimize this object.
 */
      get viewerCanMinimize(): $Field<"viewerCanMinimize", boolean>  {
       return this.$_select("viewerCanMinimize") as any
      }

      
/**
 * Can user react to this subject
 */
      get viewerCanReact(): $Field<"viewerCanReact", boolean>  {
       return this.$_select("viewerCanReact") as any
      }

      
/**
 * Can the current user unmark this comment as an answer?
 */
      get viewerCanUnmarkAsAnswer(): $Field<"viewerCanUnmarkAsAnswer", boolean>  {
       return this.$_select("viewerCanUnmarkAsAnswer") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * Whether or not the current user can add or remove an upvote on this subject.
 */
      get viewerCanUpvote(): $Field<"viewerCanUpvote", boolean>  {
       return this.$_select("viewerCanUpvote") as any
      }

      
/**
 * Reasons why the current viewer can not update this comment.
 */
      get viewerCannotUpdateReasons(): $Field<"viewerCannotUpdateReasons", Readonly<Array<CommentCannotUpdateReason>>>  {
       return this.$_select("viewerCannotUpdateReasons") as any
      }

      
/**
 * Did the viewer author this comment.
 */
      get viewerDidAuthor(): $Field<"viewerDidAuthor", boolean>  {
       return this.$_select("viewerDidAuthor") as any
      }

      
/**
 * Whether or not the current user has already upvoted this subject.
 */
      get viewerHasUpvoted(): $Field<"viewerHasUpvoted", boolean>  {
       return this.$_select("viewerHasUpvoted") as any
      }
}


/**
 * The connection type for DiscussionComment.
 */
export class DiscussionCommentConnection extends $Base<"DiscussionCommentConnection"> {
  constructor() {
    super("DiscussionCommentConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<DiscussionCommentEdge>>(selectorFn: (s: DiscussionCommentEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionCommentEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<DiscussionComment>>(selectorFn: (s: DiscussionComment) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionComment)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class DiscussionCommentEdge extends $Base<"DiscussionCommentEdge"> {
  constructor() {
    super("DiscussionCommentEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<DiscussionComment>>(selectorFn: (s: DiscussionComment) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionComment)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The connection type for Discussion.
 */
export class DiscussionConnection extends $Base<"DiscussionConnection"> {
  constructor() {
    super("DiscussionConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<DiscussionEdge>>(selectorFn: (s: DiscussionEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Discussion>>(selectorFn: (s: Discussion) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Discussion)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class DiscussionEdge extends $Base<"DiscussionEdge"> {
  constructor() {
    super("DiscussionEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Discussion>>(selectorFn: (s: Discussion) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Discussion)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ways in which lists of discussions can be ordered upon return.
 */
export type DiscussionOrder = {
  direction: OrderDirection,
field: DiscussionOrderField
}
    

  
/**
 * Properties by which discussion connections can be ordered.
 */
export enum DiscussionOrderField {
  
/**
 * Order discussions by creation time.
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order discussions by most recent modification time.
 */
  UPDATED_AT = "UPDATED_AT"
}
  


/**
 * A poll for a discussion.
 */
export class DiscussionPoll extends $Base<"DiscussionPoll"> {
  constructor() {
    super("DiscussionPoll")
  }

  
      
/**
 * The discussion that this poll belongs to.
 */
      discussion<Sel extends Selection<Discussion>>(selectorFn: (s: Discussion) => [...Sel]):$Field<"discussion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Discussion)
      };
      return this.$_select("discussion", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The options for this poll.
 */
      options<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: DiscussionPollOptionOrder | null | undefined,
      }>,Sel extends Selection<DiscussionPollOptionConnection>>(args: Args, selectorFn: (s: DiscussionPollOptionConnection) => [...Sel]):$Field<"options", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
options<Sel extends Selection<DiscussionPollOptionConnection>>(selectorFn: (s: DiscussionPollOptionConnection) => [...Sel]):$Field<"options", GetOutput<Sel> | undefined , GetVariables<Sel>>
options(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "DiscussionPollOptionOrder"
            },
        args,

        selection: selectorFn(new DiscussionPollOptionConnection)
      };
      return this.$_select("options", options) as any
    }
  

      
/**
 * The question that is being asked by this poll.
 */
      get question(): $Field<"question", string>  {
       return this.$_select("question") as any
      }

      
/**
 * The total number of votes that have been cast for this poll.
 */
      get totalVoteCount(): $Field<"totalVoteCount", number>  {
       return this.$_select("totalVoteCount") as any
      }

      
/**
 * Indicates if the viewer has permission to vote in this poll.
 */
      get viewerCanVote(): $Field<"viewerCanVote", boolean>  {
       return this.$_select("viewerCanVote") as any
      }

      
/**
 * Indicates if the viewer has voted for any option in this poll.
 */
      get viewerHasVoted(): $Field<"viewerHasVoted", boolean>  {
       return this.$_select("viewerHasVoted") as any
      }
}


/**
 * An option for a discussion poll.
 */
export class DiscussionPollOption extends $Base<"DiscussionPollOption"> {
  constructor() {
    super("DiscussionPollOption")
  }

  
      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The text for this option.
 */
      get option(): $Field<"option", string>  {
       return this.$_select("option") as any
      }

      
/**
 * The discussion poll that this option belongs to.
 */
      poll<Sel extends Selection<DiscussionPoll>>(selectorFn: (s: DiscussionPoll) => [...Sel]):$Field<"poll", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionPoll)
      };
      return this.$_select("poll", options) as any
    }
  

      
/**
 * The total number of votes that have been cast for this option.
 */
      get totalVoteCount(): $Field<"totalVoteCount", number>  {
       return this.$_select("totalVoteCount") as any
      }

      
/**
 * Indicates if the viewer has voted for this option in the poll.
 */
      get viewerHasVoted(): $Field<"viewerHasVoted", boolean>  {
       return this.$_select("viewerHasVoted") as any
      }
}


/**
 * The connection type for DiscussionPollOption.
 */
export class DiscussionPollOptionConnection extends $Base<"DiscussionPollOptionConnection"> {
  constructor() {
    super("DiscussionPollOptionConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<DiscussionPollOptionEdge>>(selectorFn: (s: DiscussionPollOptionEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionPollOptionEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<DiscussionPollOption>>(selectorFn: (s: DiscussionPollOption) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionPollOption)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class DiscussionPollOptionEdge extends $Base<"DiscussionPollOptionEdge"> {
  constructor() {
    super("DiscussionPollOptionEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<DiscussionPollOption>>(selectorFn: (s: DiscussionPollOption) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionPollOption)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for discussion poll option connections.
 */
export type DiscussionPollOptionOrder = {
  direction: OrderDirection,
field: DiscussionPollOptionOrderField
}
    

  
/**
 * Properties by which discussion poll option connections can be ordered.
 */
export enum DiscussionPollOptionOrderField {
  
/**
 * Order poll options by the order that the poll author specified when creating the poll.
 */
  AUTHORED_ORDER = "AUTHORED_ORDER",

/**
 * Order poll options by the number of votes it has.
 */
  VOTE_COUNT = "VOTE_COUNT"
}
  


/**
 * Autogenerated input type of DismissPullRequestReview
 */
export type DismissPullRequestReviewInput = {
  clientMutationId?: string | null | undefined,
message: string,
pullRequestReviewId: string
}
    


/**
 * Autogenerated return type of DismissPullRequestReview
 */
export class DismissPullRequestReviewPayload extends $Base<"DismissPullRequestReviewPayload"> {
  constructor() {
    super("DismissPullRequestReviewPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The dismissed pull request review.
 */
      pullRequestReview<Sel extends Selection<PullRequestReview>>(selectorFn: (s: PullRequestReview) => [...Sel]):$Field<"pullRequestReview", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReview)
      };
      return this.$_select("pullRequestReview", options) as any
    }
  
}

  
/**
 * The possible reasons that a Dependabot alert was dismissed.
 */
export enum DismissReason {
  
/**
 * A fix has already been started
 */
  FIX_STARTED = "FIX_STARTED",

/**
 * No bandwidth to fix this
 */
  NO_BANDWIDTH = "NO_BANDWIDTH",

/**
 * Risk is tolerable to this project
 */
  TOLERABLE_RISK = "TOLERABLE_RISK",

/**
 * This alert is inaccurate or incorrect
 */
  INACCURATE = "INACCURATE",

/**
 * Vulnerable code is not actually used
 */
  NOT_USED = "NOT_USED"
}
  


/**
 * Autogenerated input type of DismissRepositoryVulnerabilityAlert
 */
export type DismissRepositoryVulnerabilityAlertInput = {
  clientMutationId?: string | null | undefined,
dismissReason: DismissReason,
repositoryVulnerabilityAlertId: string
}
    


/**
 * Autogenerated return type of DismissRepositoryVulnerabilityAlert
 */
export class DismissRepositoryVulnerabilityAlertPayload extends $Base<"DismissRepositoryVulnerabilityAlertPayload"> {
  constructor() {
    super("DismissRepositoryVulnerabilityAlertPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The Dependabot alert that was dismissed
 */
      repositoryVulnerabilityAlert<Sel extends Selection<RepositoryVulnerabilityAlert>>(selectorFn: (s: RepositoryVulnerabilityAlert) => [...Sel]):$Field<"repositoryVulnerabilityAlert", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryVulnerabilityAlert)
      };
      return this.$_select("repositoryVulnerabilityAlert", options) as any
    }
  
}


/**
 * A draft issue within a project.
 */
export class DraftIssue extends $Base<"DraftIssue"> {
  constructor() {
    super("DraftIssue")
  }

  
      
/**
 * A list of users to assigned to this draft issue.
 */
      assignees<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserConnection>>(args: Args, selectorFn: (s: UserConnection) => [...Sel]):$Field<"assignees", GetOutput<Sel> , GetVariables<Sel, Args>>
assignees<Sel extends Selection<UserConnection>>(selectorFn: (s: UserConnection) => [...Sel]):$Field<"assignees", GetOutput<Sel> , GetVariables<Sel>>
assignees(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserConnection)
      };
      return this.$_select("assignees", options) as any
    }
  

      
/**
 * The body of the draft issue.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The body of the draft issue rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * The body of the draft issue rendered to text.
 */
      get bodyText(): $Field<"bodyText", string>  {
       return this.$_select("bodyText") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who created this draft issue.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project (beta) that contains this draft issue.
 */
      project<Sel extends Selection<ProjectNext>>(selectorFn: (s: ProjectNext) => [...Sel]):$Field<"project", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNext)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * The project (beta) item that wraps this draft issue.
 */
      projectItem<Sel extends Selection<ProjectNextItem>>(selectorFn: (s: ProjectNextItem) => [...Sel]):$Field<"projectItem", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextItem)
      };
      return this.$_select("projectItem", options) as any
    }
  

      
/**
 * List of items linked with the draft issue (currently draft issue can be linked to only one item).
 */
      projectV2Items<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2ItemConnection>>(args: Args, selectorFn: (s: ProjectV2ItemConnection) => [...Sel]):$Field<"projectV2Items", GetOutput<Sel> , GetVariables<Sel, Args>>
projectV2Items<Sel extends Selection<ProjectV2ItemConnection>>(selectorFn: (s: ProjectV2ItemConnection) => [...Sel]):$Field<"projectV2Items", GetOutput<Sel> , GetVariables<Sel>>
projectV2Items(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2ItemConnection)
      };
      return this.$_select("projectV2Items", options) as any
    }
  

      
/**
 * Projects that link to this draft issue (currently draft issue can be linked to only one project).
 */
      projectsV2<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2Connection>>(args: Args, selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel, Args>>
projectsV2<Sel extends Selection<ProjectV2Connection>>(selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel>>
projectsV2(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2Connection)
      };
      return this.$_select("projectsV2", options) as any
    }
  

      
/**
 * The title of the draft issue
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * Specifies a review comment to be left with a Pull Request Review.
 */
export type DraftPullRequestReviewComment = {
  body: string,
path: string,
position: number
}
    


/**
 * Specifies a review comment thread to be left with a Pull Request Review.
 */
export type DraftPullRequestReviewThread = {
  body: string,
line: number,
path: string,
side?: DiffSide | null | undefined,
startLine?: number | null | undefined,
startSide?: DiffSide | null | undefined
}
    


/**
 * Autogenerated input type of EnablePullRequestAutoMerge
 */
export type EnablePullRequestAutoMergeInput = {
  authorEmail?: string | null | undefined,
clientMutationId?: string | null | undefined,
commitBody?: string | null | undefined,
commitHeadline?: string | null | undefined,
mergeMethod?: PullRequestMergeMethod | null | undefined,
pullRequestId: string
}
    


/**
 * Autogenerated return type of EnablePullRequestAutoMerge
 */
export class EnablePullRequestAutoMergePayload extends $Base<"EnablePullRequestAutoMergePayload"> {
  constructor() {
    super("EnablePullRequestAutoMergePayload")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The pull request auto-merge was enabled on.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * An account to manage multiple organizations with consolidated policy and billing.
 */
export class Enterprise extends $Base<"Enterprise"> {
  constructor() {
    super("Enterprise")
  }

  
      
/**
 * A URL pointing to the enterprise's public avatar.
 */
      avatarUrl<Args extends VariabledInput<{
        size?: number | null | undefined,
      }>>(args: Args):$Field<"avatarUrl", string , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              size: "Int"
            },
        args,

        
      };
      return this.$_select("avatarUrl", options) as any
    }
  

      
/**
 * Enterprise billing information visible to enterprise billing managers.
 */
      billingInfo<Sel extends Selection<EnterpriseBillingInfo>>(selectorFn: (s: EnterpriseBillingInfo) => [...Sel]):$Field<"billingInfo", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseBillingInfo)
      };
      return this.$_select("billingInfo", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The description of the enterprise.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * The description of the enterprise as HTML.
 */
      get descriptionHTML(): $Field<"descriptionHTML", string>  {
       return this.$_select("descriptionHTML") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The location of the enterprise.
 */
      get location(): $Field<"location", string | null | undefined>  {
       return this.$_select("location") as any
      }

      
/**
 * A list of users who are members of this enterprise.
 */
      members<Args extends VariabledInput<{
        organizationLogins?: Readonly<Array<string>> | null | undefined
query?: string | null | undefined
orderBy?: EnterpriseMemberOrder | null | undefined
role?: EnterpriseUserAccountMembershipRole | null | undefined
deployment?: EnterpriseUserDeployment | null | undefined
hasTwoFactorEnabled?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<EnterpriseMemberConnection>>(args: Args, selectorFn: (s: EnterpriseMemberConnection) => [...Sel]):$Field<"members", GetOutput<Sel> , GetVariables<Sel, Args>>
members<Sel extends Selection<EnterpriseMemberConnection>>(selectorFn: (s: EnterpriseMemberConnection) => [...Sel]):$Field<"members", GetOutput<Sel> , GetVariables<Sel>>
members(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              organizationLogins: "[String!]",
query: "String",
orderBy: "EnterpriseMemberOrder",
role: "EnterpriseUserAccountMembershipRole",
deployment: "EnterpriseUserDeployment",
hasTwoFactorEnabled: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new EnterpriseMemberConnection)
      };
      return this.$_select("members", options) as any
    }
  

      
/**
 * The name of the enterprise.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * A list of organizations that belong to this enterprise.
 */
      organizations<Args extends VariabledInput<{
        query?: string | null | undefined
viewerOrganizationRole?: RoleInOrganization | null | undefined
orderBy?: OrganizationOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"organizations", GetOutput<Sel> , GetVariables<Sel, Args>>
organizations<Sel extends Selection<OrganizationConnection>>(selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"organizations", GetOutput<Sel> , GetVariables<Sel>>
organizations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
viewerOrganizationRole: "RoleInOrganization",
orderBy: "OrganizationOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("organizations", options) as any
    }
  

      
/**
 * Enterprise information only visible to enterprise owners.
 */
      ownerInfo<Sel extends Selection<EnterpriseOwnerInfo>>(selectorFn: (s: EnterpriseOwnerInfo) => [...Sel]):$Field<"ownerInfo", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseOwnerInfo)
      };
      return this.$_select("ownerInfo", options) as any
    }
  

      
/**
 * The HTTP path for this enterprise.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The URL-friendly identifier for the enterprise.
 */
      get slug(): $Field<"slug", string>  {
       return this.$_select("slug") as any
      }

      
/**
 * The HTTP URL for this enterprise.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * Is the current viewer an admin of this enterprise?
 */
      get viewerIsAdmin(): $Field<"viewerIsAdmin", boolean>  {
       return this.$_select("viewerIsAdmin") as any
      }

      
/**
 * The URL of the enterprise website.
 */
      get websiteUrl(): $Field<"websiteUrl", string | null | undefined>  {
       return this.$_select("websiteUrl") as any
      }
}


/**
 * The connection type for User.
 */
export class EnterpriseAdministratorConnection extends $Base<"EnterpriseAdministratorConnection"> {
  constructor() {
    super("EnterpriseAdministratorConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<EnterpriseAdministratorEdge>>(selectorFn: (s: EnterpriseAdministratorEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseAdministratorEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * A User who is an administrator of an enterprise.
 */
export class EnterpriseAdministratorEdge extends $Base<"EnterpriseAdministratorEdge"> {
  constructor() {
    super("EnterpriseAdministratorEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * The role of the administrator.
 */
      get role(): $Field<"role", EnterpriseAdministratorRole>  {
       return this.$_select("role") as any
      }
}


/**
 * An invitation for a user to become an owner or billing manager of an enterprise.
 */
export class EnterpriseAdministratorInvitation extends $Base<"EnterpriseAdministratorInvitation"> {
  constructor() {
    super("EnterpriseAdministratorInvitation")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The email of the person who was invited to the enterprise.
 */
      get email(): $Field<"email", string | null | undefined>  {
       return this.$_select("email") as any
      }

      
/**
 * The enterprise the invitation is for.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The user who was invited to the enterprise.
 */
      invitee<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"invitee", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("invitee", options) as any
    }
  

      
/**
 * The user who created the invitation.
 */
      inviter<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"inviter", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("inviter", options) as any
    }
  

      
/**
 * The invitee's pending role in the enterprise (owner or billing_manager).
 */
      get role(): $Field<"role", EnterpriseAdministratorRole>  {
       return this.$_select("role") as any
      }
}


/**
 * The connection type for EnterpriseAdministratorInvitation.
 */
export class EnterpriseAdministratorInvitationConnection extends $Base<"EnterpriseAdministratorInvitationConnection"> {
  constructor() {
    super("EnterpriseAdministratorInvitationConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<EnterpriseAdministratorInvitationEdge>>(selectorFn: (s: EnterpriseAdministratorInvitationEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseAdministratorInvitationEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<EnterpriseAdministratorInvitation>>(selectorFn: (s: EnterpriseAdministratorInvitation) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseAdministratorInvitation)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class EnterpriseAdministratorInvitationEdge extends $Base<"EnterpriseAdministratorInvitationEdge"> {
  constructor() {
    super("EnterpriseAdministratorInvitationEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<EnterpriseAdministratorInvitation>>(selectorFn: (s: EnterpriseAdministratorInvitation) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseAdministratorInvitation)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for enterprise administrator invitation connections
 */
export type EnterpriseAdministratorInvitationOrder = {
  direction: OrderDirection,
field: EnterpriseAdministratorInvitationOrderField
}
    

  
/**
 * Properties by which enterprise administrator invitation connections can be ordered.
 */
export enum EnterpriseAdministratorInvitationOrderField {
  
/**
 * Order enterprise administrator member invitations by creation time
 */
  CREATED_AT = "CREATED_AT"
}
  

  
/**
 * The possible administrator roles in an enterprise account.
 */
export enum EnterpriseAdministratorRole {
  
/**
 * Represents an owner of the enterprise account.
 */
  OWNER = "OWNER",

/**
 * Represents a billing manager of the enterprise account.
 */
  BILLING_MANAGER = "BILLING_MANAGER"
}
  

  
/**
 * The possible values for the enterprise allow private repository forking policy value.
 */
export enum EnterpriseAllowPrivateRepositoryForkingPolicyValue {
  
/**
 * Members can fork a repository to an organization within this enterprise.
 */
  ENTERPRISE_ORGANIZATIONS = "ENTERPRISE_ORGANIZATIONS",

/**
 * Members can fork a repository only within the same organization (intra-org).
 */
  SAME_ORGANIZATION = "SAME_ORGANIZATION",

/**
 * Members can fork a repository to their user account or within the same organization.
 */
  SAME_ORGANIZATION_USER_ACCOUNTS = "SAME_ORGANIZATION_USER_ACCOUNTS",

/**
 * Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise.
 */
  ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS = "ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS",

/**
 * Members can fork a repository to their user account.
 */
  USER_ACCOUNTS = "USER_ACCOUNTS",

/**
 * Members can fork a repository to their user account or an organization, either inside or outside of this enterprise.
 */
  EVERYWHERE = "EVERYWHERE"
}
  


/**
 * Metadata for an audit entry containing enterprise account information.
 */
export class EnterpriseAuditEntryData extends $Interface<{MembersCanDeleteReposClearAuditEntry: MembersCanDeleteReposClearAuditEntry,MembersCanDeleteReposDisableAuditEntry: MembersCanDeleteReposDisableAuditEntry,MembersCanDeleteReposEnableAuditEntry: MembersCanDeleteReposEnableAuditEntry,OrgInviteToBusinessAuditEntry: OrgInviteToBusinessAuditEntry,PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntry,PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntry,RepositoryVisibilityChangeDisableAuditEntry: RepositoryVisibilityChangeDisableAuditEntry,RepositoryVisibilityChangeEnableAuditEntry: RepositoryVisibilityChangeEnableAuditEntry}, "EnterpriseAuditEntryData"> {
  constructor() {
    super({MembersCanDeleteReposClearAuditEntry: MembersCanDeleteReposClearAuditEntry,MembersCanDeleteReposDisableAuditEntry: MembersCanDeleteReposDisableAuditEntry,MembersCanDeleteReposEnableAuditEntry: MembersCanDeleteReposEnableAuditEntry,OrgInviteToBusinessAuditEntry: OrgInviteToBusinessAuditEntry,PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntry,PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntry,RepositoryVisibilityChangeDisableAuditEntry: RepositoryVisibilityChangeDisableAuditEntry,RepositoryVisibilityChangeEnableAuditEntry: RepositoryVisibilityChangeEnableAuditEntry}, "EnterpriseAuditEntryData")
  }
}


/**
 * Enterprise billing information visible to enterprise billing managers and owners.
 */
export class EnterpriseBillingInfo extends $Base<"EnterpriseBillingInfo"> {
  constructor() {
    super("EnterpriseBillingInfo")
  }

  
      
/**
 * The number of licenseable users/emails across the enterprise.
 */
      get allLicensableUsersCount(): $Field<"allLicensableUsersCount", number>  {
       return this.$_select("allLicensableUsersCount") as any
      }

      
/**
 * The number of data packs used by all organizations owned by the enterprise.
 */
      get assetPacks(): $Field<"assetPacks", number>  {
       return this.$_select("assetPacks") as any
      }

      
/**
 * The bandwidth quota in GB for all organizations owned by the enterprise.
 */
      get bandwidthQuota(): $Field<"bandwidthQuota", number>  {
       return this.$_select("bandwidthQuota") as any
      }

      
/**
 * The bandwidth usage in GB for all organizations owned by the enterprise.
 */
      get bandwidthUsage(): $Field<"bandwidthUsage", number>  {
       return this.$_select("bandwidthUsage") as any
      }

      
/**
 * The bandwidth usage as a percentage of the bandwidth quota.
 */
      get bandwidthUsagePercentage(): $Field<"bandwidthUsagePercentage", number>  {
       return this.$_select("bandwidthUsagePercentage") as any
      }

      
/**
 * The storage quota in GB for all organizations owned by the enterprise.
 */
      get storageQuota(): $Field<"storageQuota", number>  {
       return this.$_select("storageQuota") as any
      }

      
/**
 * The storage usage in GB for all organizations owned by the enterprise.
 */
      get storageUsage(): $Field<"storageUsage", number>  {
       return this.$_select("storageUsage") as any
      }

      
/**
 * The storage usage as a percentage of the storage quota.
 */
      get storageUsagePercentage(): $Field<"storageUsagePercentage", number>  {
       return this.$_select("storageUsagePercentage") as any
      }

      
/**
 * The number of available licenses across all owned organizations based on the unique number of billable users.
 */
      get totalAvailableLicenses(): $Field<"totalAvailableLicenses", number>  {
       return this.$_select("totalAvailableLicenses") as any
      }

      
/**
 * The total number of licenses allocated.
 */
      get totalLicenses(): $Field<"totalLicenses", number>  {
       return this.$_select("totalLicenses") as any
      }
}

  
/**
 * The possible values for the enterprise base repository permission setting.
 */
export enum EnterpriseDefaultRepositoryPermissionSettingValue {
  
/**
 * Organizations in the enterprise choose base repository permissions for their members.
 */
  NO_POLICY = "NO_POLICY",

/**
 * Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
 */
  ADMIN = "ADMIN",

/**
 * Organization members will be able to clone, pull, and push all organization repositories.
 */
  WRITE = "WRITE",

/**
 * Organization members will be able to clone and pull all organization repositories.
 */
  READ = "READ",

/**
 * Organization members will only be able to clone and pull public repositories.
 */
  NONE = "NONE"
}
  

  
/**
 * The possible values for an enabled/disabled enterprise setting.
 */
export enum EnterpriseEnabledDisabledSettingValue {
  
/**
 * The setting is enabled for organizations in the enterprise.
 */
  ENABLED = "ENABLED",

/**
 * The setting is disabled for organizations in the enterprise.
 */
  DISABLED = "DISABLED",

/**
 * There is no policy set for organizations in the enterprise.
 */
  NO_POLICY = "NO_POLICY"
}
  

  
/**
 * The possible values for an enabled/no policy enterprise setting.
 */
export enum EnterpriseEnabledSettingValue {
  
/**
 * The setting is enabled for organizations in the enterprise.
 */
  ENABLED = "ENABLED",

/**
 * There is no policy set for organizations in the enterprise.
 */
  NO_POLICY = "NO_POLICY"
}
  


/**
 * An identity provider configured to provision identities for an enterprise.
 */
export class EnterpriseIdentityProvider extends $Base<"EnterpriseIdentityProvider"> {
  constructor() {
    super("EnterpriseIdentityProvider")
  }

  
      
/**
 * The digest algorithm used to sign SAML requests for the identity provider.
 */
      get digestMethod(): $Field<"digestMethod", SamlDigestAlgorithm | null | undefined>  {
       return this.$_select("digestMethod") as any
      }

      
/**
 * The enterprise this identity provider belongs to.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * ExternalIdentities provisioned by this identity provider.
 */
      externalIdentities<Args extends VariabledInput<{
        membersOnly?: boolean | null | undefined
login?: string | null | undefined
userName?: string | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ExternalIdentityConnection>>(args: Args, selectorFn: (s: ExternalIdentityConnection) => [...Sel]):$Field<"externalIdentities", GetOutput<Sel> , GetVariables<Sel, Args>>
externalIdentities<Sel extends Selection<ExternalIdentityConnection>>(selectorFn: (s: ExternalIdentityConnection) => [...Sel]):$Field<"externalIdentities", GetOutput<Sel> , GetVariables<Sel>>
externalIdentities(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              membersOnly: "Boolean",
login: "String",
userName: "String",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ExternalIdentityConnection)
      };
      return this.$_select("externalIdentities", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The x509 certificate used by the identity provider to sign assertions and responses.
 */
      get idpCertificate(): $Field<"idpCertificate", string | null | undefined>  {
       return this.$_select("idpCertificate") as any
      }

      
/**
 * The Issuer Entity ID for the SAML identity provider.
 */
      get issuer(): $Field<"issuer", string | null | undefined>  {
       return this.$_select("issuer") as any
      }

      
/**
 * Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
 */
      get recoveryCodes(): $Field<"recoveryCodes", Readonly<Array<string>> | null | undefined>  {
       return this.$_select("recoveryCodes") as any
      }

      
/**
 * The signature algorithm used to sign SAML requests for the identity provider.
 */
      get signatureMethod(): $Field<"signatureMethod", SamlSignatureAlgorithm | null | undefined>  {
       return this.$_select("signatureMethod") as any
      }

      
/**
 * The URL endpoint for the identity provider's SAML SSO.
 */
      get ssoUrl(): $Field<"ssoUrl", string | null | undefined>  {
       return this.$_select("ssoUrl") as any
      }
}


/**
 * An object that is a member of an enterprise.
 */
export class EnterpriseMember extends $Union<{EnterpriseUserAccount: EnterpriseUserAccount,User: User,Actor: Actor,Node: Node,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "EnterpriseMember"> {
  constructor() {
    super({EnterpriseUserAccount: EnterpriseUserAccount,User: User,Actor: Actor,Node: Node,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * The connection type for EnterpriseMember.
 */
export class EnterpriseMemberConnection extends $Base<"EnterpriseMemberConnection"> {
  constructor() {
    super("EnterpriseMemberConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<EnterpriseMemberEdge>>(selectorFn: (s: EnterpriseMemberEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseMemberEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<EnterpriseMember>>(selectorFn: (s: EnterpriseMember) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseMember)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * A User who is a member of an enterprise through one or more organizations.
 */
export class EnterpriseMemberEdge extends $Base<"EnterpriseMemberEdge"> {
  constructor() {
    super("EnterpriseMemberEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<EnterpriseMember>>(selectorFn: (s: EnterpriseMember) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseMember)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for enterprise member connections.
 */
export type EnterpriseMemberOrder = {
  direction: OrderDirection,
field: EnterpriseMemberOrderField
}
    

  
/**
 * Properties by which enterprise member connections can be ordered.
 */
export enum EnterpriseMemberOrderField {
  
/**
 * Order enterprise members by login
 */
  LOGIN = "LOGIN",

/**
 * Order enterprise members by creation time
 */
  CREATED_AT = "CREATED_AT"
}
  

  
/**
 * The possible values for the enterprise members can create repositories setting.
 */
export enum EnterpriseMembersCanCreateRepositoriesSettingValue {
  
/**
 * Organization administrators choose whether to allow members to create repositories.
 */
  NO_POLICY = "NO_POLICY",

/**
 * Members will be able to create public and private repositories.
 */
  ALL = "ALL",

/**
 * Members will be able to create only public repositories.
 */
  PUBLIC = "PUBLIC",

/**
 * Members will be able to create only private repositories.
 */
  PRIVATE = "PRIVATE",

/**
 * Members will not be able to create public or private repositories.
 */
  DISABLED = "DISABLED"
}
  

  
/**
 * The possible values for the members can make purchases setting.
 */
export enum EnterpriseMembersCanMakePurchasesSettingValue {
  
/**
 * The setting is enabled for organizations in the enterprise.
 */
  ENABLED = "ENABLED",

/**
 * The setting is disabled for organizations in the enterprise.
 */
  DISABLED = "DISABLED"
}
  


/**
 * The connection type for Organization.
 */
export class EnterpriseOrganizationMembershipConnection extends $Base<"EnterpriseOrganizationMembershipConnection"> {
  constructor() {
    super("EnterpriseOrganizationMembershipConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<EnterpriseOrganizationMembershipEdge>>(selectorFn: (s: EnterpriseOrganizationMembershipEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseOrganizationMembershipEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An enterprise organization that a user is a member of.
 */
export class EnterpriseOrganizationMembershipEdge extends $Base<"EnterpriseOrganizationMembershipEdge"> {
  constructor() {
    super("EnterpriseOrganizationMembershipEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * The role of the user in the enterprise membership.
 */
      get role(): $Field<"role", EnterpriseUserAccountMembershipRole>  {
       return this.$_select("role") as any
      }
}


/**
 * The connection type for User.
 */
export class EnterpriseOutsideCollaboratorConnection extends $Base<"EnterpriseOutsideCollaboratorConnection"> {
  constructor() {
    super("EnterpriseOutsideCollaboratorConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<EnterpriseOutsideCollaboratorEdge>>(selectorFn: (s: EnterpriseOutsideCollaboratorEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseOutsideCollaboratorEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * A User who is an outside collaborator of an enterprise through one or more organizations.
 */
export class EnterpriseOutsideCollaboratorEdge extends $Base<"EnterpriseOutsideCollaboratorEdge"> {
  constructor() {
    super("EnterpriseOutsideCollaboratorEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * The enterprise organization repositories this user is a member of.
 */
      repositories<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: RepositoryOrder | null | undefined,
      }>,Sel extends Selection<EnterpriseRepositoryInfoConnection>>(args: Args, selectorFn: (s: EnterpriseRepositoryInfoConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel, Args>>
repositories<Sel extends Selection<EnterpriseRepositoryInfoConnection>>(selectorFn: (s: EnterpriseRepositoryInfoConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel>>
repositories(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "RepositoryOrder"
            },
        args,

        selection: selectorFn(new EnterpriseRepositoryInfoConnection)
      };
      return this.$_select("repositories", options) as any
    }
  
}


/**
 * Enterprise information only visible to enterprise owners.
 */
export class EnterpriseOwnerInfo extends $Base<"EnterpriseOwnerInfo"> {
  constructor() {
    super("EnterpriseOwnerInfo")
  }

  
      
/**
 * A list of all of the administrators for this enterprise.
 */
      admins<Args extends VariabledInput<{
        organizationLogins?: Readonly<Array<string>> | null | undefined
query?: string | null | undefined
role?: EnterpriseAdministratorRole | null | undefined
orderBy?: EnterpriseMemberOrder | null | undefined
hasTwoFactorEnabled?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<EnterpriseAdministratorConnection>>(args: Args, selectorFn: (s: EnterpriseAdministratorConnection) => [...Sel]):$Field<"admins", GetOutput<Sel> , GetVariables<Sel, Args>>
admins<Sel extends Selection<EnterpriseAdministratorConnection>>(selectorFn: (s: EnterpriseAdministratorConnection) => [...Sel]):$Field<"admins", GetOutput<Sel> , GetVariables<Sel>>
admins(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              organizationLogins: "[String!]",
query: "String",
role: "EnterpriseAdministratorRole",
orderBy: "EnterpriseMemberOrder",
hasTwoFactorEnabled: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new EnterpriseAdministratorConnection)
      };
      return this.$_select("admins", options) as any
    }
  

      
/**
 * A list of users in the enterprise who currently have two-factor authentication disabled.
 */
      affiliatedUsersWithTwoFactorDisabled<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserConnection>>(args: Args, selectorFn: (s: UserConnection) => [...Sel]):$Field<"affiliatedUsersWithTwoFactorDisabled", GetOutput<Sel> , GetVariables<Sel, Args>>
affiliatedUsersWithTwoFactorDisabled<Sel extends Selection<UserConnection>>(selectorFn: (s: UserConnection) => [...Sel]):$Field<"affiliatedUsersWithTwoFactorDisabled", GetOutput<Sel> , GetVariables<Sel>>
affiliatedUsersWithTwoFactorDisabled(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserConnection)
      };
      return this.$_select("affiliatedUsersWithTwoFactorDisabled", options) as any
    }
  

      
/**
 * Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
 */
      get affiliatedUsersWithTwoFactorDisabledExist(): $Field<"affiliatedUsersWithTwoFactorDisabledExist", boolean>  {
       return this.$_select("affiliatedUsersWithTwoFactorDisabledExist") as any
      }

      
/**
 * The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
 */
      get allowPrivateRepositoryForkingSetting(): $Field<"allowPrivateRepositoryForkingSetting", EnterpriseEnabledDisabledSettingValue>  {
       return this.$_select("allowPrivateRepositoryForkingSetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the provided private repository forking setting value.
 */
      allowPrivateRepositoryForkingSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: boolean
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"allowPrivateRepositoryForkingSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "Boolean!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("allowPrivateRepositoryForkingSettingOrganizations", options) as any
    }
  

      
/**
 * The value for the allow private repository forking policy on the enterprise.
 */
      get allowPrivateRepositoryForkingSettingPolicyValue(): $Field<"allowPrivateRepositoryForkingSettingPolicyValue", EnterpriseAllowPrivateRepositoryForkingPolicyValue | null | undefined>  {
       return this.$_select("allowPrivateRepositoryForkingSettingPolicyValue") as any
      }

      
/**
 * The setting value for base repository permissions for organizations in this enterprise.
 */
      get defaultRepositoryPermissionSetting(): $Field<"defaultRepositoryPermissionSetting", EnterpriseDefaultRepositoryPermissionSettingValue>  {
       return this.$_select("defaultRepositoryPermissionSetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the provided base repository permission.
 */
      defaultRepositoryPermissionSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: DefaultRepositoryPermissionField
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"defaultRepositoryPermissionSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "DefaultRepositoryPermissionField!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("defaultRepositoryPermissionSettingOrganizations", options) as any
    }
  

      
/**
 * A list of domains owned by the enterprise.
 */
      domains<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
isVerified?: boolean | null | undefined
isApproved?: boolean | null | undefined
orderBy?: VerifiableDomainOrder | null | undefined,
      }>,Sel extends Selection<VerifiableDomainConnection>>(args: Args, selectorFn: (s: VerifiableDomainConnection) => [...Sel]):$Field<"domains", GetOutput<Sel> , GetVariables<Sel, Args>>
domains<Sel extends Selection<VerifiableDomainConnection>>(selectorFn: (s: VerifiableDomainConnection) => [...Sel]):$Field<"domains", GetOutput<Sel> , GetVariables<Sel>>
domains(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
isVerified: "Boolean",
isApproved: "Boolean",
orderBy: "VerifiableDomainOrder"
            },
        args,

        selection: selectorFn(new VerifiableDomainConnection)
      };
      return this.$_select("domains", options) as any
    }
  

      
/**
 * Enterprise Server installations owned by the enterprise.
 */
      enterpriseServerInstallations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
connectedOnly?: boolean | null | undefined
orderBy?: EnterpriseServerInstallationOrder | null | undefined,
      }>,Sel extends Selection<EnterpriseServerInstallationConnection>>(args: Args, selectorFn: (s: EnterpriseServerInstallationConnection) => [...Sel]):$Field<"enterpriseServerInstallations", GetOutput<Sel> , GetVariables<Sel, Args>>
enterpriseServerInstallations<Sel extends Selection<EnterpriseServerInstallationConnection>>(selectorFn: (s: EnterpriseServerInstallationConnection) => [...Sel]):$Field<"enterpriseServerInstallations", GetOutput<Sel> , GetVariables<Sel>>
enterpriseServerInstallations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
connectedOnly: "Boolean",
orderBy: "EnterpriseServerInstallationOrder"
            },
        args,

        selection: selectorFn(new EnterpriseServerInstallationConnection)
      };
      return this.$_select("enterpriseServerInstallations", options) as any
    }
  

      
/**
 * The setting value for whether the enterprise has an IP allow list enabled.
 */
      get ipAllowListEnabledSetting(): $Field<"ipAllowListEnabledSetting", IpAllowListEnabledSettingValue>  {
       return this.$_select("ipAllowListEnabledSetting") as any
      }

      
/**
 * The IP addresses that are allowed to access resources owned by the enterprise.
 */
      ipAllowListEntries<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: IpAllowListEntryOrder | null | undefined,
      }>,Sel extends Selection<IpAllowListEntryConnection>>(args: Args, selectorFn: (s: IpAllowListEntryConnection) => [...Sel]):$Field<"ipAllowListEntries", GetOutput<Sel> , GetVariables<Sel, Args>>
ipAllowListEntries<Sel extends Selection<IpAllowListEntryConnection>>(selectorFn: (s: IpAllowListEntryConnection) => [...Sel]):$Field<"ipAllowListEntries", GetOutput<Sel> , GetVariables<Sel>>
ipAllowListEntries(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "IpAllowListEntryOrder"
            },
        args,

        selection: selectorFn(new IpAllowListEntryConnection)
      };
      return this.$_select("ipAllowListEntries", options) as any
    }
  

      
/**
 * The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled.
 */
      get ipAllowListForInstalledAppsEnabledSetting(): $Field<"ipAllowListForInstalledAppsEnabledSetting", IpAllowListForInstalledAppsEnabledSettingValue>  {
       return this.$_select("ipAllowListForInstalledAppsEnabledSetting") as any
      }

      
/**
 * Whether or not the base repository permission is currently being updated.
 */
      get isUpdatingDefaultRepositoryPermission(): $Field<"isUpdatingDefaultRepositoryPermission", boolean>  {
       return this.$_select("isUpdatingDefaultRepositoryPermission") as any
      }

      
/**
 * Whether the two-factor authentication requirement is currently being enforced.
 */
      get isUpdatingTwoFactorRequirement(): $Field<"isUpdatingTwoFactorRequirement", boolean>  {
       return this.$_select("isUpdatingTwoFactorRequirement") as any
      }

      
/**
 * The setting value for whether organization members with admin permissions on a repository can change repository visibility.
 */
      get membersCanChangeRepositoryVisibilitySetting(): $Field<"membersCanChangeRepositoryVisibilitySetting", EnterpriseEnabledDisabledSettingValue>  {
       return this.$_select("membersCanChangeRepositoryVisibilitySetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the provided can change repository visibility setting value.
 */
      membersCanChangeRepositoryVisibilitySettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: boolean
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"membersCanChangeRepositoryVisibilitySettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "Boolean!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("membersCanChangeRepositoryVisibilitySettingOrganizations", options) as any
    }
  

      
/**
 * The setting value for whether members of organizations in the enterprise can create internal repositories.
 */
      get membersCanCreateInternalRepositoriesSetting(): $Field<"membersCanCreateInternalRepositoriesSetting", boolean | null | undefined>  {
       return this.$_select("membersCanCreateInternalRepositoriesSetting") as any
      }

      
/**
 * The setting value for whether members of organizations in the enterprise can create private repositories.
 */
      get membersCanCreatePrivateRepositoriesSetting(): $Field<"membersCanCreatePrivateRepositoriesSetting", boolean | null | undefined>  {
       return this.$_select("membersCanCreatePrivateRepositoriesSetting") as any
      }

      
/**
 * The setting value for whether members of organizations in the enterprise can create public repositories.
 */
      get membersCanCreatePublicRepositoriesSetting(): $Field<"membersCanCreatePublicRepositoriesSetting", boolean | null | undefined>  {
       return this.$_select("membersCanCreatePublicRepositoriesSetting") as any
      }

      
/**
 * The setting value for whether members of organizations in the enterprise can create repositories.
 */
      get membersCanCreateRepositoriesSetting(): $Field<"membersCanCreateRepositoriesSetting", EnterpriseMembersCanCreateRepositoriesSettingValue | null | undefined>  {
       return this.$_select("membersCanCreateRepositoriesSetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the provided repository creation setting value.
 */
      membersCanCreateRepositoriesSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: OrganizationMembersCanCreateRepositoriesSettingValue
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"membersCanCreateRepositoriesSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "OrganizationMembersCanCreateRepositoriesSettingValue!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("membersCanCreateRepositoriesSettingOrganizations", options) as any
    }
  

      
/**
 * The setting value for whether members with admin permissions for repositories can delete issues.
 */
      get membersCanDeleteIssuesSetting(): $Field<"membersCanDeleteIssuesSetting", EnterpriseEnabledDisabledSettingValue>  {
       return this.$_select("membersCanDeleteIssuesSetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the provided members can delete issues setting value.
 */
      membersCanDeleteIssuesSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: boolean
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"membersCanDeleteIssuesSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "Boolean!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("membersCanDeleteIssuesSettingOrganizations", options) as any
    }
  

      
/**
 * The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
 */
      get membersCanDeleteRepositoriesSetting(): $Field<"membersCanDeleteRepositoriesSetting", EnterpriseEnabledDisabledSettingValue>  {
       return this.$_select("membersCanDeleteRepositoriesSetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the provided members can delete repositories setting value.
 */
      membersCanDeleteRepositoriesSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: boolean
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"membersCanDeleteRepositoriesSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "Boolean!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("membersCanDeleteRepositoriesSettingOrganizations", options) as any
    }
  

      
/**
 * The setting value for whether members of organizations in the enterprise can invite outside collaborators.
 */
      get membersCanInviteCollaboratorsSetting(): $Field<"membersCanInviteCollaboratorsSetting", EnterpriseEnabledDisabledSettingValue>  {
       return this.$_select("membersCanInviteCollaboratorsSetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the provided members can invite collaborators setting value.
 */
      membersCanInviteCollaboratorsSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: boolean
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"membersCanInviteCollaboratorsSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "Boolean!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("membersCanInviteCollaboratorsSettingOrganizations", options) as any
    }
  

      
/**
 * Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
 */
      get membersCanMakePurchasesSetting(): $Field<"membersCanMakePurchasesSetting", EnterpriseMembersCanMakePurchasesSettingValue>  {
       return this.$_select("membersCanMakePurchasesSetting") as any
      }

      
/**
 * The setting value for whether members with admin permissions for repositories can update protected branches.
 */
      get membersCanUpdateProtectedBranchesSetting(): $Field<"membersCanUpdateProtectedBranchesSetting", EnterpriseEnabledDisabledSettingValue>  {
       return this.$_select("membersCanUpdateProtectedBranchesSetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the provided members can update protected branches setting value.
 */
      membersCanUpdateProtectedBranchesSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: boolean
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"membersCanUpdateProtectedBranchesSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "Boolean!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("membersCanUpdateProtectedBranchesSettingOrganizations", options) as any
    }
  

      
/**
 * The setting value for whether members can view dependency insights.
 */
      get membersCanViewDependencyInsightsSetting(): $Field<"membersCanViewDependencyInsightsSetting", EnterpriseEnabledDisabledSettingValue>  {
       return this.$_select("membersCanViewDependencyInsightsSetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the provided members can view dependency insights setting value.
 */
      membersCanViewDependencyInsightsSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: boolean
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"membersCanViewDependencyInsightsSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "Boolean!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("membersCanViewDependencyInsightsSettingOrganizations", options) as any
    }
  

      
/**
 * Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.
 */
      get notificationDeliveryRestrictionEnabledSetting(): $Field<"notificationDeliveryRestrictionEnabledSetting", NotificationRestrictionSettingValue>  {
       return this.$_select("notificationDeliveryRestrictionEnabledSetting") as any
      }

      
/**
 * The OIDC Identity Provider for the enterprise.
 */
      oidcProvider<Sel extends Selection<OIDCProvider>>(selectorFn: (s: OIDCProvider) => [...Sel]):$Field<"oidcProvider", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OIDCProvider)
      };
      return this.$_select("oidcProvider", options) as any
    }
  

      
/**
 * The setting value for whether organization projects are enabled for organizations in this enterprise.
 */
      get organizationProjectsSetting(): $Field<"organizationProjectsSetting", EnterpriseEnabledDisabledSettingValue>  {
       return this.$_select("organizationProjectsSetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the provided organization projects setting value.
 */
      organizationProjectsSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: boolean
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"organizationProjectsSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "Boolean!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("organizationProjectsSettingOrganizations", options) as any
    }
  

      
/**
 * A list of outside collaborators across the repositories in the enterprise.
 */
      outsideCollaborators<Args extends VariabledInput<{
        login?: string | null | undefined
query?: string | null | undefined
orderBy?: EnterpriseMemberOrder | null | undefined
visibility?: RepositoryVisibility | null | undefined
hasTwoFactorEnabled?: boolean | null | undefined
organizationLogins?: Readonly<Array<string>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<EnterpriseOutsideCollaboratorConnection>>(args: Args, selectorFn: (s: EnterpriseOutsideCollaboratorConnection) => [...Sel]):$Field<"outsideCollaborators", GetOutput<Sel> , GetVariables<Sel, Args>>
outsideCollaborators<Sel extends Selection<EnterpriseOutsideCollaboratorConnection>>(selectorFn: (s: EnterpriseOutsideCollaboratorConnection) => [...Sel]):$Field<"outsideCollaborators", GetOutput<Sel> , GetVariables<Sel>>
outsideCollaborators(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              login: "String",
query: "String",
orderBy: "EnterpriseMemberOrder",
visibility: "RepositoryVisibility",
hasTwoFactorEnabled: "Boolean",
organizationLogins: "[String!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new EnterpriseOutsideCollaboratorConnection)
      };
      return this.$_select("outsideCollaborators", options) as any
    }
  

      
/**
 * A list of pending administrator invitations for the enterprise.
 */
      pendingAdminInvitations<Args extends VariabledInput<{
        query?: string | null | undefined
orderBy?: EnterpriseAdministratorInvitationOrder | null | undefined
role?: EnterpriseAdministratorRole | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<EnterpriseAdministratorInvitationConnection>>(args: Args, selectorFn: (s: EnterpriseAdministratorInvitationConnection) => [...Sel]):$Field<"pendingAdminInvitations", GetOutput<Sel> , GetVariables<Sel, Args>>
pendingAdminInvitations<Sel extends Selection<EnterpriseAdministratorInvitationConnection>>(selectorFn: (s: EnterpriseAdministratorInvitationConnection) => [...Sel]):$Field<"pendingAdminInvitations", GetOutput<Sel> , GetVariables<Sel>>
pendingAdminInvitations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
orderBy: "EnterpriseAdministratorInvitationOrder",
role: "EnterpriseAdministratorRole",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new EnterpriseAdministratorInvitationConnection)
      };
      return this.$_select("pendingAdminInvitations", options) as any
    }
  

      
/**
 * A list of pending collaborator invitations across the repositories in the enterprise.
 */
      pendingCollaboratorInvitations<Args extends VariabledInput<{
        query?: string | null | undefined
orderBy?: RepositoryInvitationOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<RepositoryInvitationConnection>>(args: Args, selectorFn: (s: RepositoryInvitationConnection) => [...Sel]):$Field<"pendingCollaboratorInvitations", GetOutput<Sel> , GetVariables<Sel, Args>>
pendingCollaboratorInvitations<Sel extends Selection<RepositoryInvitationConnection>>(selectorFn: (s: RepositoryInvitationConnection) => [...Sel]):$Field<"pendingCollaboratorInvitations", GetOutput<Sel> , GetVariables<Sel>>
pendingCollaboratorInvitations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
orderBy: "RepositoryInvitationOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new RepositoryInvitationConnection)
      };
      return this.$_select("pendingCollaboratorInvitations", options) as any
    }
  

      
/**
 * A list of pending member invitations for organizations in the enterprise.
 */
      pendingMemberInvitations<Args extends VariabledInput<{
        query?: string | null | undefined
organizationLogins?: Readonly<Array<string>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<EnterprisePendingMemberInvitationConnection>>(args: Args, selectorFn: (s: EnterprisePendingMemberInvitationConnection) => [...Sel]):$Field<"pendingMemberInvitations", GetOutput<Sel> , GetVariables<Sel, Args>>
pendingMemberInvitations<Sel extends Selection<EnterprisePendingMemberInvitationConnection>>(selectorFn: (s: EnterprisePendingMemberInvitationConnection) => [...Sel]):$Field<"pendingMemberInvitations", GetOutput<Sel> , GetVariables<Sel>>
pendingMemberInvitations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
organizationLogins: "[String!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new EnterprisePendingMemberInvitationConnection)
      };
      return this.$_select("pendingMemberInvitations", options) as any
    }
  

      
/**
 * The setting value for whether repository projects are enabled in this enterprise.
 */
      get repositoryProjectsSetting(): $Field<"repositoryProjectsSetting", EnterpriseEnabledDisabledSettingValue>  {
       return this.$_select("repositoryProjectsSetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the provided repository projects setting value.
 */
      repositoryProjectsSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: boolean
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"repositoryProjectsSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "Boolean!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("repositoryProjectsSettingOrganizations", options) as any
    }
  

      
/**
 * The SAML Identity Provider for the enterprise. When used by a GitHub App, requires an installation token with read and write access to members.
 */
      samlIdentityProvider<Sel extends Selection<EnterpriseIdentityProvider>>(selectorFn: (s: EnterpriseIdentityProvider) => [...Sel]):$Field<"samlIdentityProvider", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseIdentityProvider)
      };
      return this.$_select("samlIdentityProvider", options) as any
    }
  

      
/**
 * A list of enterprise organizations configured with the SAML single sign-on setting value.
 */
      samlIdentityProviderSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: IdentityProviderConfigurationState
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"samlIdentityProviderSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "IdentityProviderConfigurationState!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("samlIdentityProviderSettingOrganizations", options) as any
    }
  

      
/**
 * A list of members with a support entitlement.
 */
      supportEntitlements<Args extends VariabledInput<{
        orderBy?: EnterpriseMemberOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<EnterpriseMemberConnection>>(args: Args, selectorFn: (s: EnterpriseMemberConnection) => [...Sel]):$Field<"supportEntitlements", GetOutput<Sel> , GetVariables<Sel, Args>>
supportEntitlements<Sel extends Selection<EnterpriseMemberConnection>>(selectorFn: (s: EnterpriseMemberConnection) => [...Sel]):$Field<"supportEntitlements", GetOutput<Sel> , GetVariables<Sel>>
supportEntitlements(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "EnterpriseMemberOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new EnterpriseMemberConnection)
      };
      return this.$_select("supportEntitlements", options) as any
    }
  

      
/**
 * The setting value for whether team discussions are enabled for organizations in this enterprise.
 */
      get teamDiscussionsSetting(): $Field<"teamDiscussionsSetting", EnterpriseEnabledDisabledSettingValue>  {
       return this.$_select("teamDiscussionsSetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the provided team discussions setting value.
 */
      teamDiscussionsSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: boolean
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"teamDiscussionsSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "Boolean!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("teamDiscussionsSettingOrganizations", options) as any
    }
  

      
/**
 * The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
 */
      get twoFactorRequiredSetting(): $Field<"twoFactorRequiredSetting", EnterpriseEnabledSettingValue>  {
       return this.$_select("twoFactorRequiredSetting") as any
      }

      
/**
 * A list of enterprise organizations configured with the two-factor authentication setting value.
 */
      twoFactorRequiredSettingOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
value: boolean
orderBy?: OrganizationOrder | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"twoFactorRequiredSettingOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
value: "Boolean!",
orderBy: "OrganizationOrder"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("twoFactorRequiredSettingOrganizations", options) as any
    }
  
}


/**
 * The connection type for OrganizationInvitation.
 */
export class EnterprisePendingMemberInvitationConnection extends $Base<"EnterprisePendingMemberInvitationConnection"> {
  constructor() {
    super("EnterprisePendingMemberInvitationConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<EnterprisePendingMemberInvitationEdge>>(selectorFn: (s: EnterprisePendingMemberInvitationEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterprisePendingMemberInvitationEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<OrganizationInvitation>>(selectorFn: (s: OrganizationInvitation) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationInvitation)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }

      
/**
 * Identifies the total count of unique users in the connection.
 */
      get totalUniqueUserCount(): $Field<"totalUniqueUserCount", number>  {
       return this.$_select("totalUniqueUserCount") as any
      }
}


/**
 * An invitation to be a member in an enterprise organization.
 */
export class EnterprisePendingMemberInvitationEdge extends $Base<"EnterprisePendingMemberInvitationEdge"> {
  constructor() {
    super("EnterprisePendingMemberInvitationEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<OrganizationInvitation>>(selectorFn: (s: OrganizationInvitation) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationInvitation)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A subset of repository information queryable from an enterprise.
 */
export class EnterpriseRepositoryInfo extends $Base<"EnterpriseRepositoryInfo"> {
  constructor() {
    super("EnterpriseRepositoryInfo")
  }

  
      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies if the repository is private or internal.
 */
      get isPrivate(): $Field<"isPrivate", boolean>  {
       return this.$_select("isPrivate") as any
      }

      
/**
 * The repository's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The repository's name with owner.
 */
      get nameWithOwner(): $Field<"nameWithOwner", string>  {
       return this.$_select("nameWithOwner") as any
      }
}


/**
 * The connection type for EnterpriseRepositoryInfo.
 */
export class EnterpriseRepositoryInfoConnection extends $Base<"EnterpriseRepositoryInfoConnection"> {
  constructor() {
    super("EnterpriseRepositoryInfoConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<EnterpriseRepositoryInfoEdge>>(selectorFn: (s: EnterpriseRepositoryInfoEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseRepositoryInfoEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<EnterpriseRepositoryInfo>>(selectorFn: (s: EnterpriseRepositoryInfo) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseRepositoryInfo)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class EnterpriseRepositoryInfoEdge extends $Base<"EnterpriseRepositoryInfoEdge"> {
  constructor() {
    super("EnterpriseRepositoryInfoEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<EnterpriseRepositoryInfo>>(selectorFn: (s: EnterpriseRepositoryInfo) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseRepositoryInfo)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * An Enterprise Server installation.
 */
export class EnterpriseServerInstallation extends $Base<"EnterpriseServerInstallation"> {
  constructor() {
    super("EnterpriseServerInstallation")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The customer name to which the Enterprise Server installation belongs.
 */
      get customerName(): $Field<"customerName", string>  {
       return this.$_select("customerName") as any
      }

      
/**
 * The host name of the Enterprise Server installation.
 */
      get hostName(): $Field<"hostName", string>  {
       return this.$_select("hostName") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
 */
      get isConnected(): $Field<"isConnected", boolean>  {
       return this.$_select("isConnected") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * User accounts on this Enterprise Server installation.
 */
      userAccounts<Args extends VariabledInput<{
        orderBy?: EnterpriseServerUserAccountOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<EnterpriseServerUserAccountConnection>>(args: Args, selectorFn: (s: EnterpriseServerUserAccountConnection) => [...Sel]):$Field<"userAccounts", GetOutput<Sel> , GetVariables<Sel, Args>>
userAccounts<Sel extends Selection<EnterpriseServerUserAccountConnection>>(selectorFn: (s: EnterpriseServerUserAccountConnection) => [...Sel]):$Field<"userAccounts", GetOutput<Sel> , GetVariables<Sel>>
userAccounts(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "EnterpriseServerUserAccountOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new EnterpriseServerUserAccountConnection)
      };
      return this.$_select("userAccounts", options) as any
    }
  

      
/**
 * User accounts uploads for the Enterprise Server installation.
 */
      userAccountsUploads<Args extends VariabledInput<{
        orderBy?: EnterpriseServerUserAccountsUploadOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<EnterpriseServerUserAccountsUploadConnection>>(args: Args, selectorFn: (s: EnterpriseServerUserAccountsUploadConnection) => [...Sel]):$Field<"userAccountsUploads", GetOutput<Sel> , GetVariables<Sel, Args>>
userAccountsUploads<Sel extends Selection<EnterpriseServerUserAccountsUploadConnection>>(selectorFn: (s: EnterpriseServerUserAccountsUploadConnection) => [...Sel]):$Field<"userAccountsUploads", GetOutput<Sel> , GetVariables<Sel>>
userAccountsUploads(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "EnterpriseServerUserAccountsUploadOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new EnterpriseServerUserAccountsUploadConnection)
      };
      return this.$_select("userAccountsUploads", options) as any
    }
  
}


/**
 * The connection type for EnterpriseServerInstallation.
 */
export class EnterpriseServerInstallationConnection extends $Base<"EnterpriseServerInstallationConnection"> {
  constructor() {
    super("EnterpriseServerInstallationConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<EnterpriseServerInstallationEdge>>(selectorFn: (s: EnterpriseServerInstallationEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerInstallationEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<EnterpriseServerInstallation>>(selectorFn: (s: EnterpriseServerInstallation) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerInstallation)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class EnterpriseServerInstallationEdge extends $Base<"EnterpriseServerInstallationEdge"> {
  constructor() {
    super("EnterpriseServerInstallationEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<EnterpriseServerInstallation>>(selectorFn: (s: EnterpriseServerInstallation) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerInstallation)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for Enterprise Server installation connections.
 */
export type EnterpriseServerInstallationOrder = {
  direction: OrderDirection,
field: EnterpriseServerInstallationOrderField
}
    

  
/**
 * Properties by which Enterprise Server installation connections can be ordered.
 */
export enum EnterpriseServerInstallationOrderField {
  
/**
 * Order Enterprise Server installations by host name
 */
  HOST_NAME = "HOST_NAME",

/**
 * Order Enterprise Server installations by customer name
 */
  CUSTOMER_NAME = "CUSTOMER_NAME",

/**
 * Order Enterprise Server installations by creation time
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * A user account on an Enterprise Server installation.
 */
export class EnterpriseServerUserAccount extends $Base<"EnterpriseServerUserAccount"> {
  constructor() {
    super("EnterpriseServerUserAccount")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * User emails belonging to this user account.
 */
      emails<Args extends VariabledInput<{
        orderBy?: EnterpriseServerUserAccountEmailOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<EnterpriseServerUserAccountEmailConnection>>(args: Args, selectorFn: (s: EnterpriseServerUserAccountEmailConnection) => [...Sel]):$Field<"emails", GetOutput<Sel> , GetVariables<Sel, Args>>
emails<Sel extends Selection<EnterpriseServerUserAccountEmailConnection>>(selectorFn: (s: EnterpriseServerUserAccountEmailConnection) => [...Sel]):$Field<"emails", GetOutput<Sel> , GetVariables<Sel>>
emails(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "EnterpriseServerUserAccountEmailOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new EnterpriseServerUserAccountEmailConnection)
      };
      return this.$_select("emails", options) as any
    }
  

      
/**
 * The Enterprise Server installation on which this user account exists.
 */
      enterpriseServerInstallation<Sel extends Selection<EnterpriseServerInstallation>>(selectorFn: (s: EnterpriseServerInstallation) => [...Sel]):$Field<"enterpriseServerInstallation", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerInstallation)
      };
      return this.$_select("enterpriseServerInstallation", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether the user account is a site administrator on the Enterprise Server installation.
 */
      get isSiteAdmin(): $Field<"isSiteAdmin", boolean>  {
       return this.$_select("isSiteAdmin") as any
      }

      
/**
 * The login of the user account on the Enterprise Server installation.
 */
      get login(): $Field<"login", string>  {
       return this.$_select("login") as any
      }

      
/**
 * The profile name of the user account on the Enterprise Server installation.
 */
      get profileName(): $Field<"profileName", string | null | undefined>  {
       return this.$_select("profileName") as any
      }

      
/**
 * The date and time when the user account was created on the Enterprise Server installation.
 */
      get remoteCreatedAt(): $Field<"remoteCreatedAt", string>  {
       return this.$_select("remoteCreatedAt") as any
      }

      
/**
 * The ID of the user account on the Enterprise Server installation.
 */
      get remoteUserId(): $Field<"remoteUserId", number>  {
       return this.$_select("remoteUserId") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The connection type for EnterpriseServerUserAccount.
 */
export class EnterpriseServerUserAccountConnection extends $Base<"EnterpriseServerUserAccountConnection"> {
  constructor() {
    super("EnterpriseServerUserAccountConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<EnterpriseServerUserAccountEdge>>(selectorFn: (s: EnterpriseServerUserAccountEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerUserAccountEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<EnterpriseServerUserAccount>>(selectorFn: (s: EnterpriseServerUserAccount) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerUserAccount)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class EnterpriseServerUserAccountEdge extends $Base<"EnterpriseServerUserAccountEdge"> {
  constructor() {
    super("EnterpriseServerUserAccountEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<EnterpriseServerUserAccount>>(selectorFn: (s: EnterpriseServerUserAccount) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerUserAccount)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * An email belonging to a user account on an Enterprise Server installation.
 */
export class EnterpriseServerUserAccountEmail extends $Base<"EnterpriseServerUserAccountEmail"> {
  constructor() {
    super("EnterpriseServerUserAccountEmail")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The email address.
 */
      get email(): $Field<"email", string>  {
       return this.$_select("email") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Indicates whether this is the primary email of the associated user account.
 */
      get isPrimary(): $Field<"isPrimary", boolean>  {
       return this.$_select("isPrimary") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The user account to which the email belongs.
 */
      userAccount<Sel extends Selection<EnterpriseServerUserAccount>>(selectorFn: (s: EnterpriseServerUserAccount) => [...Sel]):$Field<"userAccount", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerUserAccount)
      };
      return this.$_select("userAccount", options) as any
    }
  
}


/**
 * The connection type for EnterpriseServerUserAccountEmail.
 */
export class EnterpriseServerUserAccountEmailConnection extends $Base<"EnterpriseServerUserAccountEmailConnection"> {
  constructor() {
    super("EnterpriseServerUserAccountEmailConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<EnterpriseServerUserAccountEmailEdge>>(selectorFn: (s: EnterpriseServerUserAccountEmailEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerUserAccountEmailEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<EnterpriseServerUserAccountEmail>>(selectorFn: (s: EnterpriseServerUserAccountEmail) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerUserAccountEmail)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class EnterpriseServerUserAccountEmailEdge extends $Base<"EnterpriseServerUserAccountEmailEdge"> {
  constructor() {
    super("EnterpriseServerUserAccountEmailEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<EnterpriseServerUserAccountEmail>>(selectorFn: (s: EnterpriseServerUserAccountEmail) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerUserAccountEmail)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for Enterprise Server user account email connections.
 */
export type EnterpriseServerUserAccountEmailOrder = {
  direction: OrderDirection,
field: EnterpriseServerUserAccountEmailOrderField
}
    

  
/**
 * Properties by which Enterprise Server user account email connections can be ordered.
 */
export enum EnterpriseServerUserAccountEmailOrderField {
  
/**
 * Order emails by email
 */
  EMAIL = "EMAIL"
}
  


/**
 * Ordering options for Enterprise Server user account connections.
 */
export type EnterpriseServerUserAccountOrder = {
  direction: OrderDirection,
field: EnterpriseServerUserAccountOrderField
}
    

  
/**
 * Properties by which Enterprise Server user account connections can be ordered.
 */
export enum EnterpriseServerUserAccountOrderField {
  
/**
 * Order user accounts by login
 */
  LOGIN = "LOGIN",

/**
 * Order user accounts by creation time on the Enterprise Server installation
 */
  REMOTE_CREATED_AT = "REMOTE_CREATED_AT"
}
  


/**
 * A user accounts upload from an Enterprise Server installation.
 */
export class EnterpriseServerUserAccountsUpload extends $Base<"EnterpriseServerUserAccountsUpload"> {
  constructor() {
    super("EnterpriseServerUserAccountsUpload")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The enterprise to which this upload belongs.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * The Enterprise Server installation for which this upload was generated.
 */
      enterpriseServerInstallation<Sel extends Selection<EnterpriseServerInstallation>>(selectorFn: (s: EnterpriseServerInstallation) => [...Sel]):$Field<"enterpriseServerInstallation", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerInstallation)
      };
      return this.$_select("enterpriseServerInstallation", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The name of the file uploaded.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The synchronization state of the upload
 */
      get syncState(): $Field<"syncState", EnterpriseServerUserAccountsUploadSyncState>  {
       return this.$_select("syncState") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The connection type for EnterpriseServerUserAccountsUpload.
 */
export class EnterpriseServerUserAccountsUploadConnection extends $Base<"EnterpriseServerUserAccountsUploadConnection"> {
  constructor() {
    super("EnterpriseServerUserAccountsUploadConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<EnterpriseServerUserAccountsUploadEdge>>(selectorFn: (s: EnterpriseServerUserAccountsUploadEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerUserAccountsUploadEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<EnterpriseServerUserAccountsUpload>>(selectorFn: (s: EnterpriseServerUserAccountsUpload) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerUserAccountsUpload)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class EnterpriseServerUserAccountsUploadEdge extends $Base<"EnterpriseServerUserAccountsUploadEdge"> {
  constructor() {
    super("EnterpriseServerUserAccountsUploadEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<EnterpriseServerUserAccountsUpload>>(selectorFn: (s: EnterpriseServerUserAccountsUpload) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseServerUserAccountsUpload)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for Enterprise Server user accounts upload connections.
 */
export type EnterpriseServerUserAccountsUploadOrder = {
  direction: OrderDirection,
field: EnterpriseServerUserAccountsUploadOrderField
}
    

  
/**
 * Properties by which Enterprise Server user accounts upload connections can be ordered.
 */
export enum EnterpriseServerUserAccountsUploadOrderField {
  
/**
 * Order user accounts uploads by creation time
 */
  CREATED_AT = "CREATED_AT"
}
  

  
/**
 * Synchronization state of the Enterprise Server user accounts upload
 */
export enum EnterpriseServerUserAccountsUploadSyncState {
  
/**
 * The synchronization of the upload is pending.
 */
  PENDING = "PENDING",

/**
 * The synchronization of the upload succeeded.
 */
  SUCCESS = "SUCCESS",

/**
 * The synchronization of the upload failed.
 */
  FAILURE = "FAILURE"
}
  


/**
 * An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
 */
export class EnterpriseUserAccount extends $Base<"EnterpriseUserAccount"> {
  constructor() {
    super("EnterpriseUserAccount")
  }

  
      
/**
 * A URL pointing to the enterprise user account's public avatar.
 */
      avatarUrl<Args extends VariabledInput<{
        size?: number | null | undefined,
      }>>(args: Args):$Field<"avatarUrl", string , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              size: "Int"
            },
        args,

        
      };
      return this.$_select("avatarUrl", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The enterprise in which this user account exists.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * An identifier for the enterprise user account, a login or email address
 */
      get login(): $Field<"login", string>  {
       return this.$_select("login") as any
      }

      
/**
 * The name of the enterprise user account
 */
      get name(): $Field<"name", string | null | undefined>  {
       return this.$_select("name") as any
      }

      
/**
 * A list of enterprise organizations this user is a member of.
 */
      organizations<Args extends VariabledInput<{
        query?: string | null | undefined
orderBy?: OrganizationOrder | null | undefined
role?: EnterpriseUserAccountMembershipRole | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<EnterpriseOrganizationMembershipConnection>>(args: Args, selectorFn: (s: EnterpriseOrganizationMembershipConnection) => [...Sel]):$Field<"organizations", GetOutput<Sel> , GetVariables<Sel, Args>>
organizations<Sel extends Selection<EnterpriseOrganizationMembershipConnection>>(selectorFn: (s: EnterpriseOrganizationMembershipConnection) => [...Sel]):$Field<"organizations", GetOutput<Sel> , GetVariables<Sel>>
organizations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
orderBy: "OrganizationOrder",
role: "EnterpriseUserAccountMembershipRole",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new EnterpriseOrganizationMembershipConnection)
      };
      return this.$_select("organizations", options) as any
    }
  

      
/**
 * The HTTP path for this user.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this user.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * The user within the enterprise.
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}

  
/**
 * The possible roles for enterprise membership.
 */
export enum EnterpriseUserAccountMembershipRole {
  
/**
 * The user is a member of an organization in the enterprise.
 */
  MEMBER = "MEMBER",

/**
 * The user is an owner of an organization in the enterprise.
 */
  OWNER = "OWNER",

/**
 * The user is not an owner of the enterprise, and not a member or owner of any organizations in the enterprise; only for EMU-enabled enterprises.
 */
  UNAFFILIATED = "UNAFFILIATED"
}
  

  
/**
 * The possible GitHub Enterprise deployments where this user can exist.
 */
export enum EnterpriseUserDeployment {
  
/**
 * The user is part of a GitHub Enterprise Cloud deployment.
 */
  CLOUD = "CLOUD",

/**
 * The user is part of a GitHub Enterprise Server deployment.
 */
  SERVER = "SERVER"
}
  


/**
 * An environment.
 */
export class Environment extends $Base<"Environment"> {
  constructor() {
    super("Environment")
  }

  
      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The name of the environment
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The protection rules defined for this environment
 */
      protectionRules<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<DeploymentProtectionRuleConnection>>(args: Args, selectorFn: (s: DeploymentProtectionRuleConnection) => [...Sel]):$Field<"protectionRules", GetOutput<Sel> , GetVariables<Sel, Args>>
protectionRules<Sel extends Selection<DeploymentProtectionRuleConnection>>(selectorFn: (s: DeploymentProtectionRuleConnection) => [...Sel]):$Field<"protectionRules", GetOutput<Sel> , GetVariables<Sel>>
protectionRules(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new DeploymentProtectionRuleConnection)
      };
      return this.$_select("protectionRules", options) as any
    }
  
}


/**
 * The connection type for Environment.
 */
export class EnvironmentConnection extends $Base<"EnvironmentConnection"> {
  constructor() {
    super("EnvironmentConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<EnvironmentEdge>>(selectorFn: (s: EnvironmentEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnvironmentEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Environment>>(selectorFn: (s: Environment) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Environment)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class EnvironmentEdge extends $Base<"EnvironmentEdge"> {
  constructor() {
    super("EnvironmentEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Environment>>(selectorFn: (s: Environment) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Environment)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * An external identity provisioned by SAML SSO or SCIM.
 */
export class ExternalIdentity extends $Base<"ExternalIdentity"> {
  constructor() {
    super("ExternalIdentity")
  }

  
      
/**
 * The GUID for this identity
 */
      get guid(): $Field<"guid", string>  {
       return this.$_select("guid") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Organization invitation for this SCIM-provisioned external identity
 */
      organizationInvitation<Sel extends Selection<OrganizationInvitation>>(selectorFn: (s: OrganizationInvitation) => [...Sel]):$Field<"organizationInvitation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationInvitation)
      };
      return this.$_select("organizationInvitation", options) as any
    }
  

      
/**
 * SAML Identity attributes
 */
      samlIdentity<Sel extends Selection<ExternalIdentitySamlAttributes>>(selectorFn: (s: ExternalIdentitySamlAttributes) => [...Sel]):$Field<"samlIdentity", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ExternalIdentitySamlAttributes)
      };
      return this.$_select("samlIdentity", options) as any
    }
  

      
/**
 * SCIM Identity attributes
 */
      scimIdentity<Sel extends Selection<ExternalIdentityScimAttributes>>(selectorFn: (s: ExternalIdentityScimAttributes) => [...Sel]):$Field<"scimIdentity", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ExternalIdentityScimAttributes)
      };
      return this.$_select("scimIdentity", options) as any
    }
  

      
/**
 * User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * An attribute for the External Identity attributes collection
 */
export class ExternalIdentityAttribute extends $Base<"ExternalIdentityAttribute"> {
  constructor() {
    super("ExternalIdentityAttribute")
  }

  
      
/**
 * The attribute metadata as JSON
 */
      get metadata(): $Field<"metadata", string | null | undefined>  {
       return this.$_select("metadata") as any
      }

      
/**
 * The attribute name
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The attribute value
 */
      get value(): $Field<"value", string>  {
       return this.$_select("value") as any
      }
}


/**
 * The connection type for ExternalIdentity.
 */
export class ExternalIdentityConnection extends $Base<"ExternalIdentityConnection"> {
  constructor() {
    super("ExternalIdentityConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ExternalIdentityEdge>>(selectorFn: (s: ExternalIdentityEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ExternalIdentityEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ExternalIdentity>>(selectorFn: (s: ExternalIdentity) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ExternalIdentity)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ExternalIdentityEdge extends $Base<"ExternalIdentityEdge"> {
  constructor() {
    super("ExternalIdentityEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ExternalIdentity>>(selectorFn: (s: ExternalIdentity) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ExternalIdentity)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * SAML attributes for the External Identity
 */
export class ExternalIdentitySamlAttributes extends $Base<"ExternalIdentitySamlAttributes"> {
  constructor() {
    super("ExternalIdentitySamlAttributes")
  }

  
      
/**
 * SAML Identity attributes
 */
      attributes<Sel extends Selection<ExternalIdentityAttribute>>(selectorFn: (s: ExternalIdentityAttribute) => [...Sel]):$Field<"attributes", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ExternalIdentityAttribute)
      };
      return this.$_select("attributes", options) as any
    }
  

      
/**
 * The emails associated with the SAML identity
 */
      emails<Sel extends Selection<UserEmailMetadata>>(selectorFn: (s: UserEmailMetadata) => [...Sel]):$Field<"emails", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserEmailMetadata)
      };
      return this.$_select("emails", options) as any
    }
  

      
/**
 * Family name of the SAML identity
 */
      get familyName(): $Field<"familyName", string | null | undefined>  {
       return this.$_select("familyName") as any
      }

      
/**
 * Given name of the SAML identity
 */
      get givenName(): $Field<"givenName", string | null | undefined>  {
       return this.$_select("givenName") as any
      }

      
/**
 * The groups linked to this identity in IDP
 */
      get groups(): $Field<"groups", Readonly<Array<string>> | null | undefined>  {
       return this.$_select("groups") as any
      }

      
/**
 * The NameID of the SAML identity
 */
      get nameId(): $Field<"nameId", string | null | undefined>  {
       return this.$_select("nameId") as any
      }

      
/**
 * The userName of the SAML identity
 */
      get username(): $Field<"username", string | null | undefined>  {
       return this.$_select("username") as any
      }
}


/**
 * SCIM attributes for the External Identity
 */
export class ExternalIdentityScimAttributes extends $Base<"ExternalIdentityScimAttributes"> {
  constructor() {
    super("ExternalIdentityScimAttributes")
  }

  
      
/**
 * The emails associated with the SCIM identity
 */
      emails<Sel extends Selection<UserEmailMetadata>>(selectorFn: (s: UserEmailMetadata) => [...Sel]):$Field<"emails", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserEmailMetadata)
      };
      return this.$_select("emails", options) as any
    }
  

      
/**
 * Family name of the SCIM identity
 */
      get familyName(): $Field<"familyName", string | null | undefined>  {
       return this.$_select("familyName") as any
      }

      
/**
 * Given name of the SCIM identity
 */
      get givenName(): $Field<"givenName", string | null | undefined>  {
       return this.$_select("givenName") as any
      }

      
/**
 * The groups linked to this identity in IDP
 */
      get groups(): $Field<"groups", Readonly<Array<string>> | null | undefined>  {
       return this.$_select("groups") as any
      }

      
/**
 * The userName of the SCIM identity
 */
      get username(): $Field<"username", string | null | undefined>  {
       return this.$_select("username") as any
      }
}


/**
 * A command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced.
 */
export type FileAddition = {
  contents: string,
path: string
}
    


/**
 * A description of a set of changes to a file tree to be made as part of
a git commit, modeled as zero or more file `additions` and zero or more
file `deletions`.

Both fields are optional; omitting both will produce a commit with no
file changes.

`deletions` and `additions` describe changes to files identified
by their path in the git tree using unix-style path separators, i.e.
`/`.  The root of a git tree is an empty string, so paths are not
slash-prefixed.

`path` values must be unique across all `additions` and `deletions`
provided.  Any duplication will result in a validation error.

### Encoding

File contents must be provided in full for each `FileAddition`.

The `contents` of a `FileAddition` must be encoded using RFC 4648
compliant base64, i.e. correct padding is required and no characters
outside the standard alphabet may be used.  Invalid base64
encoding will be rejected with a validation error.

The encoded contents may be binary.

For text files, no assumptions are made about the character encoding of
the file contents (after base64 decoding).  No charset transcoding or
line-ending normalization will be performed; it is the client's
responsibility to manage the character encoding of files they provide.
However, for maximum compatibility we recommend using UTF-8 encoding
and ensuring that all files in a repository use a consistent
line-ending convention (`\n` or `\r\n`), and that all files end
with a newline.

### Modeling file changes

Each of the the five types of conceptual changes that can be made in a
git commit can be described using the `FileChanges` type as follows:

1. New file addition: create file `hello world\n` at path `docs/README.txt`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }

2. Existing file modification: change existing `docs/README.txt` to have new
   content `new content here\n`:

       {
         "additions" [
           {
             "path": "docs/README.txt",
             "contents": base64encode("new content here\n")
           }
         ]
       }

3. Existing file deletion: remove existing file `docs/README.txt`.
   Note that the path is required to exist -- specifying a
   path that does not exist on the given branch will abort the
   commit and return an error.

       {
         "deletions" [
           {
             "path": "docs/README.txt"
           }
         ]
       }


4. File rename with no changes: rename `docs/README.txt` with
   previous content `hello world\n` to the same content at
   `newdocs/README.txt`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("hello world\n")
           }
         ]
       }


5. File rename with changes: rename `docs/README.txt` with
   previous content `hello world\n` to a file at path
   `newdocs/README.txt` with content `new contents\n`:

       {
         "deletions" [
           {
             "path": "docs/README.txt",
           }
         ],
         "additions" [
           {
             "path": "newdocs/README.txt",
             "contents": base64encode("new contents\n")
           }
         ]
       }

 */
export type FileChanges = {
  additions?: Readonly<Array<FileAddition>> | null | undefined,
deletions?: Readonly<Array<FileDeletion>> | null | undefined
}
    


/**
 * A command to delete the file at the given path as part of a commit.
 */
export type FileDeletion = {
  path: string
}
    

  
/**
 * The possible viewed states of a file .
 */
export enum FileViewedState {
  
/**
 * The file has new changes since last viewed.
 */
  DISMISSED = "DISMISSED",

/**
 * The file has been marked as viewed.
 */
  VIEWED = "VIEWED",

/**
 * The file has not been marked as viewed.
 */
  UNVIEWED = "UNVIEWED"
}
  


/**
 * Autogenerated input type of FollowOrganization
 */
export type FollowOrganizationInput = {
  clientMutationId?: string | null | undefined,
organizationId: string
}
    


/**
 * Autogenerated return type of FollowOrganization
 */
export class FollowOrganizationPayload extends $Base<"FollowOrganizationPayload"> {
  constructor() {
    super("FollowOrganizationPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The organization that was followed.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  
}


/**
 * Autogenerated input type of FollowUser
 */
export type FollowUserInput = {
  clientMutationId?: string | null | undefined,
userId: string
}
    


/**
 * Autogenerated return type of FollowUser
 */
export class FollowUserPayload extends $Base<"FollowUserPayload"> {
  constructor() {
    super("FollowUserPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The user that was followed.
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * The connection type for User.
 */
export class FollowerConnection extends $Base<"FollowerConnection"> {
  constructor() {
    super("FollowerConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<UserEdge>>(selectorFn: (s: UserEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * The connection type for User.
 */
export class FollowingConnection extends $Base<"FollowingConnection"> {
  constructor() {
    super("FollowingConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<UserEdge>>(selectorFn: (s: UserEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * A funding platform link for a repository.
 */
export class FundingLink extends $Base<"FundingLink"> {
  constructor() {
    super("FundingLink")
  }

  
      
/**
 * The funding platform this link is for.
 */
      get platform(): $Field<"platform", FundingPlatform>  {
       return this.$_select("platform") as any
      }

      
/**
 * The configured URL for this funding link.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}

  
/**
 * The possible funding platforms for repository funding links.
 */
export enum FundingPlatform {
  
/**
 * GitHub funding platform.
 */
  GITHUB = "GITHUB",

/**
 * Patreon funding platform.
 */
  PATREON = "PATREON",

/**
 * Open Collective funding platform.
 */
  OPEN_COLLECTIVE = "OPEN_COLLECTIVE",

/**
 * Ko-fi funding platform.
 */
  KO_FI = "KO_FI",

/**
 * Tidelift funding platform.
 */
  TIDELIFT = "TIDELIFT",

/**
 * Community Bridge funding platform.
 */
  COMMUNITY_BRIDGE = "COMMUNITY_BRIDGE",

/**
 * Liberapay funding platform.
 */
  LIBERAPAY = "LIBERAPAY",

/**
 * IssueHunt funding platform.
 */
  ISSUEHUNT = "ISSUEHUNT",

/**
 * Otechie funding platform.
 */
  OTECHIE = "OTECHIE",

/**
 * LFX Crowdfunding funding platform.
 */
  LFX_CROWDFUNDING = "LFX_CROWDFUNDING",

/**
 * Custom funding platform.
 */
  CUSTOM = "CUSTOM"
}
  


/**
 * A generic hovercard context with a message and icon
 */
export class GenericHovercardContext extends $Base<"GenericHovercardContext"> {
  constructor() {
    super("GenericHovercardContext")
  }

  
      
/**
 * A string describing this context
 */
      get message(): $Field<"message", string>  {
       return this.$_select("message") as any
      }

      
/**
 * An octicon to accompany this context
 */
      get octicon(): $Field<"octicon", string>  {
       return this.$_select("octicon") as any
      }
}


/**
 * A Gist.
 */
export class Gist extends $Base<"Gist"> {
  constructor() {
    super("Gist")
  }

  
      
/**
 * A list of comments associated with the gist
 */
      comments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<GistCommentConnection>>(args: Args, selectorFn: (s: GistCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel, Args>>
comments<Sel extends Selection<GistCommentConnection>>(selectorFn: (s: GistCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel>>
comments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new GistCommentConnection)
      };
      return this.$_select("comments", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The gist description.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * The files in this gist.
 */
      files<Args extends VariabledInput<{
        limit?: number | null | undefined
oid?: string | null | undefined,
      }>,Sel extends Selection<GistFile>>(args: Args, selectorFn: (s: GistFile) => [...Sel]):$Field<"files", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel, Args>>
files<Sel extends Selection<GistFile>>(selectorFn: (s: GistFile) => [...Sel]):$Field<"files", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>>
files(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              limit: "Int",
oid: "GitObjectID"
            },
        args,

        selection: selectorFn(new GistFile)
      };
      return this.$_select("files", options) as any
    }
  

      
/**
 * A list of forks associated with the gist
 */
      forks<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: GistOrder | null | undefined,
      }>,Sel extends Selection<GistConnection>>(args: Args, selectorFn: (s: GistConnection) => [...Sel]):$Field<"forks", GetOutput<Sel> , GetVariables<Sel, Args>>
forks<Sel extends Selection<GistConnection>>(selectorFn: (s: GistConnection) => [...Sel]):$Field<"forks", GetOutput<Sel> , GetVariables<Sel>>
forks(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "GistOrder"
            },
        args,

        selection: selectorFn(new GistConnection)
      };
      return this.$_select("forks", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies if the gist is a fork.
 */
      get isFork(): $Field<"isFork", boolean>  {
       return this.$_select("isFork") as any
      }

      
/**
 * Whether the gist is public or not.
 */
      get isPublic(): $Field<"isPublic", boolean>  {
       return this.$_select("isPublic") as any
      }

      
/**
 * The gist name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The gist owner.
 */
      owner<Sel extends Selection<RepositoryOwner>>(selectorFn: (s: RepositoryOwner) => [...Sel]):$Field<"owner", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryOwner)
      };
      return this.$_select("owner", options) as any
    }
  

      
/**
 * Identifies when the gist was last pushed to.
 */
      get pushedAt(): $Field<"pushedAt", string | null | undefined>  {
       return this.$_select("pushedAt") as any
      }

      
/**
 * The HTML path to this resource.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Returns a count of how many stargazers there are on this object

 */
      get stargazerCount(): $Field<"stargazerCount", number>  {
       return this.$_select("stargazerCount") as any
      }

      
/**
 * A list of users who have starred this starrable.
 */
      stargazers<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: StarOrder | null | undefined,
      }>,Sel extends Selection<StargazerConnection>>(args: Args, selectorFn: (s: StargazerConnection) => [...Sel]):$Field<"stargazers", GetOutput<Sel> , GetVariables<Sel, Args>>
stargazers<Sel extends Selection<StargazerConnection>>(selectorFn: (s: StargazerConnection) => [...Sel]):$Field<"stargazers", GetOutput<Sel> , GetVariables<Sel>>
stargazers(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "StarOrder"
            },
        args,

        selection: selectorFn(new StargazerConnection)
      };
      return this.$_select("stargazers", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this Gist.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * Returns a boolean indicating whether the viewing user has starred this starrable.
 */
      get viewerHasStarred(): $Field<"viewerHasStarred", boolean>  {
       return this.$_select("viewerHasStarred") as any
      }
}


/**
 * Represents a comment on an Gist.
 */
export class GistComment extends $Base<"GistComment"> {
  constructor() {
    super("GistComment")
  }

  
      
/**
 * The actor who authored the comment.
 */
      author<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Author's association with the gist.
 */
      get authorAssociation(): $Field<"authorAssociation", CommentAuthorAssociation>  {
       return this.$_select("authorAssociation") as any
      }

      
/**
 * Identifies the comment body.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * The body rendered to text.
 */
      get bodyText(): $Field<"bodyText", string>  {
       return this.$_select("bodyText") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Check if this comment was created via an email reply.
 */
      get createdViaEmail(): $Field<"createdViaEmail", boolean>  {
       return this.$_select("createdViaEmail") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The actor who edited the comment.
 */
      editor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"editor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("editor", options) as any
    }
  

      
/**
 * The associated gist.
 */
      gist<Sel extends Selection<Gist>>(selectorFn: (s: Gist) => [...Sel]):$Field<"gist", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Gist)
      };
      return this.$_select("gist", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Check if this comment was edited and includes an edit with the creation data
 */
      get includesCreatedEdit(): $Field<"includesCreatedEdit", boolean>  {
       return this.$_select("includesCreatedEdit") as any
      }

      
/**
 * Returns whether or not a comment has been minimized.
 */
      get isMinimized(): $Field<"isMinimized", boolean>  {
       return this.$_select("isMinimized") as any
      }

      
/**
 * The moment the editor made the last edit
 */
      get lastEditedAt(): $Field<"lastEditedAt", string | null | undefined>  {
       return this.$_select("lastEditedAt") as any
      }

      
/**
 * Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
 */
      get minimizedReason(): $Field<"minimizedReason", string | null | undefined>  {
       return this.$_select("minimizedReason") as any
      }

      
/**
 * Identifies when the comment was published at.
 */
      get publishedAt(): $Field<"publishedAt", string | null | undefined>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * A list of edits to this content.
 */
      userContentEdits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserContentEditConnection>>(args: Args, selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
userContentEdits<Sel extends Selection<UserContentEditConnection>>(selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel>>
userContentEdits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserContentEditConnection)
      };
      return this.$_select("userContentEdits", options) as any
    }
  

      
/**
 * Check if the current viewer can delete this object.
 */
      get viewerCanDelete(): $Field<"viewerCanDelete", boolean>  {
       return this.$_select("viewerCanDelete") as any
      }

      
/**
 * Check if the current viewer can minimize this object.
 */
      get viewerCanMinimize(): $Field<"viewerCanMinimize", boolean>  {
       return this.$_select("viewerCanMinimize") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * Reasons why the current viewer can not update this comment.
 */
      get viewerCannotUpdateReasons(): $Field<"viewerCannotUpdateReasons", Readonly<Array<CommentCannotUpdateReason>>>  {
       return this.$_select("viewerCannotUpdateReasons") as any
      }

      
/**
 * Did the viewer author this comment.
 */
      get viewerDidAuthor(): $Field<"viewerDidAuthor", boolean>  {
       return this.$_select("viewerDidAuthor") as any
      }
}


/**
 * The connection type for GistComment.
 */
export class GistCommentConnection extends $Base<"GistCommentConnection"> {
  constructor() {
    super("GistCommentConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<GistCommentEdge>>(selectorFn: (s: GistCommentEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GistCommentEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<GistComment>>(selectorFn: (s: GistComment) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GistComment)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class GistCommentEdge extends $Base<"GistCommentEdge"> {
  constructor() {
    super("GistCommentEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<GistComment>>(selectorFn: (s: GistComment) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GistComment)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The connection type for Gist.
 */
export class GistConnection extends $Base<"GistConnection"> {
  constructor() {
    super("GistConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<GistEdge>>(selectorFn: (s: GistEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GistEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Gist>>(selectorFn: (s: Gist) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Gist)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class GistEdge extends $Base<"GistEdge"> {
  constructor() {
    super("GistEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Gist>>(selectorFn: (s: Gist) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Gist)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A file in a gist.
 */
export class GistFile extends $Base<"GistFile"> {
  constructor() {
    super("GistFile")
  }

  
      
/**
 * The file name encoded to remove characters that are invalid in URL paths.
 */
      get encodedName(): $Field<"encodedName", string | null | undefined>  {
       return this.$_select("encodedName") as any
      }

      
/**
 * The gist file encoding.
 */
      get encoding(): $Field<"encoding", string | null | undefined>  {
       return this.$_select("encoding") as any
      }

      
/**
 * The file extension from the file name.
 */
      get extension(): $Field<"extension", string | null | undefined>  {
       return this.$_select("extension") as any
      }

      
/**
 * Indicates if this file is an image.
 */
      get isImage(): $Field<"isImage", boolean>  {
       return this.$_select("isImage") as any
      }

      
/**
 * Whether the file's contents were truncated.
 */
      get isTruncated(): $Field<"isTruncated", boolean>  {
       return this.$_select("isTruncated") as any
      }

      
/**
 * The programming language this file is written in.
 */
      language<Sel extends Selection<Language>>(selectorFn: (s: Language) => [...Sel]):$Field<"language", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Language)
      };
      return this.$_select("language", options) as any
    }
  

      
/**
 * The gist file name.
 */
      get name(): $Field<"name", string | null | undefined>  {
       return this.$_select("name") as any
      }

      
/**
 * The gist file size in bytes.
 */
      get size(): $Field<"size", number | null | undefined>  {
       return this.$_select("size") as any
      }

      
/**
 * UTF8 text data or null if the file is binary
 */
      text<Args extends VariabledInput<{
        truncate?: number | null | undefined,
      }>>(args: Args):$Field<"text", string | null | undefined , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              truncate: "Int"
            },
        args,

        
      };
      return this.$_select("text", options) as any
    }
  
}


/**
 * Ordering options for gist connections
 */
export type GistOrder = {
  direction: OrderDirection,
field: GistOrderField
}
    

  
/**
 * Properties by which gist connections can be ordered.
 */
export enum GistOrderField {
  
/**
 * Order gists by creation time
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order gists by update time
 */
  UPDATED_AT = "UPDATED_AT",

/**
 * Order gists by push time
 */
  PUSHED_AT = "PUSHED_AT"
}
  

  
/**
 * The privacy of a Gist
 */
export enum GistPrivacy {
  
/**
 * Public
 */
  PUBLIC = "PUBLIC",

/**
 * Secret
 */
  SECRET = "SECRET",

/**
 * Gists that are public and secret
 */
  ALL = "ALL"
}
  


/**
 * Represents an actor in a Git commit (ie. an author or committer).
 */
export class GitActor extends $Base<"GitActor"> {
  constructor() {
    super("GitActor")
  }

  
      
/**
 * A URL pointing to the author's public avatar.
 */
      avatarUrl<Args extends VariabledInput<{
        size?: number | null | undefined,
      }>>(args: Args):$Field<"avatarUrl", string , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              size: "Int"
            },
        args,

        
      };
      return this.$_select("avatarUrl", options) as any
    }
  

      
/**
 * The timestamp of the Git action (authoring or committing).
 */
      get date(): $Field<"date", string | null | undefined>  {
       return this.$_select("date") as any
      }

      
/**
 * The email in the Git commit.
 */
      get email(): $Field<"email", string | null | undefined>  {
       return this.$_select("email") as any
      }

      
/**
 * The name in the Git commit.
 */
      get name(): $Field<"name", string | null | undefined>  {
       return this.$_select("name") as any
      }

      
/**
 * The GitHub user corresponding to the email field. Null if no such user exists.
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * The connection type for GitActor.
 */
export class GitActorConnection extends $Base<"GitActorConnection"> {
  constructor() {
    super("GitActorConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<GitActorEdge>>(selectorFn: (s: GitActorEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitActorEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<GitActor>>(selectorFn: (s: GitActor) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitActor)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class GitActorEdge extends $Base<"GitActorEdge"> {
  constructor() {
    super("GitActorEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<GitActor>>(selectorFn: (s: GitActor) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitActor)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents information about the GitHub instance.
 */
export class GitHubMetadata extends $Base<"GitHubMetadata"> {
  constructor() {
    super("GitHubMetadata")
  }

  
      
/**
 * Returns a String that's a SHA of `github-services`
 */
      get gitHubServicesSha(): $Field<"gitHubServicesSha", string>  {
       return this.$_select("gitHubServicesSha") as any
      }

      
/**
 * IP addresses that users connect to for git operations
 */
      get gitIpAddresses(): $Field<"gitIpAddresses", Readonly<Array<string>> | null | undefined>  {
       return this.$_select("gitIpAddresses") as any
      }

      
/**
 * IP addresses that service hooks are sent from
 */
      get hookIpAddresses(): $Field<"hookIpAddresses", Readonly<Array<string>> | null | undefined>  {
       return this.$_select("hookIpAddresses") as any
      }

      
/**
 * IP addresses that the importer connects from
 */
      get importerIpAddresses(): $Field<"importerIpAddresses", Readonly<Array<string>> | null | undefined>  {
       return this.$_select("importerIpAddresses") as any
      }

      
/**
 * Whether or not users are verified
 */
      get isPasswordAuthenticationVerifiable(): $Field<"isPasswordAuthenticationVerifiable", boolean>  {
       return this.$_select("isPasswordAuthenticationVerifiable") as any
      }

      
/**
 * IP addresses for GitHub Pages' A records
 */
      get pagesIpAddresses(): $Field<"pagesIpAddresses", Readonly<Array<string>> | null | undefined>  {
       return this.$_select("pagesIpAddresses") as any
      }
}


/**
 * Represents a Git object.
 */
export class GitObject extends $Interface<{Blob: Blob,Commit: Commit,Tag: Tag,Tree: Tree}, "GitObject"> {
  constructor() {
    super({Blob: Blob,Commit: Commit,Tag: Tag,Tree: Tree}, "GitObject")
  }
}


/**
 * A Git object ID.
 */
export type GitObjectID = string



/**
 * Git SSH string
 */
export type GitSSHRemote = string



/**
 * Information about a signature (GPG or S/MIME) on a Commit or Tag.
 */
export class GitSignature extends $Interface<{GpgSignature: GpgSignature,SmimeSignature: SmimeSignature,SshSignature: SshSignature,UnknownSignature: UnknownSignature}, "GitSignature"> {
  constructor() {
    super({GpgSignature: GpgSignature,SmimeSignature: SmimeSignature,SshSignature: SshSignature,UnknownSignature: UnknownSignature}, "GitSignature")
  }
}

  
/**
 * The state of a Git signature.
 */
export enum GitSignatureState {
  
/**
 * Valid signature and verified by GitHub
 */
  VALID = "VALID",

/**
 * Invalid signature
 */
  INVALID = "INVALID",

/**
 * Malformed signature
 */
  MALFORMED_SIG = "MALFORMED_SIG",

/**
 * Key used for signing not known to GitHub
 */
  UNKNOWN_KEY = "UNKNOWN_KEY",

/**
 * Invalid email used for signing
 */
  BAD_EMAIL = "BAD_EMAIL",

/**
 * Email used for signing unverified on GitHub
 */
  UNVERIFIED_EMAIL = "UNVERIFIED_EMAIL",

/**
 * Email used for signing not known to GitHub
 */
  NO_USER = "NO_USER",

/**
 * Unknown signature type
 */
  UNKNOWN_SIG_TYPE = "UNKNOWN_SIG_TYPE",

/**
 * Unsigned
 */
  UNSIGNED = "UNSIGNED",

/**
 * Internal error - the GPG verification service is unavailable at the moment
 */
  GPGVERIFY_UNAVAILABLE = "GPGVERIFY_UNAVAILABLE",

/**
 * Internal error - the GPG verification service misbehaved
 */
  GPGVERIFY_ERROR = "GPGVERIFY_ERROR",

/**
 * The usage flags for the key that signed this don't allow signing
 */
  NOT_SIGNING_KEY = "NOT_SIGNING_KEY",

/**
 * Signing key expired
 */
  EXPIRED_KEY = "EXPIRED_KEY",

/**
 * Valid signature, pending certificate revocation checking
 */
  OCSP_PENDING = "OCSP_PENDING",

/**
 * Valid signature, though certificate revocation check failed
 */
  OCSP_ERROR = "OCSP_ERROR",

/**
 * The signing certificate or its chain could not be verified
 */
  BAD_CERT = "BAD_CERT",

/**
 * One or more certificates in chain has been revoked
 */
  OCSP_REVOKED = "OCSP_REVOKED"
}
  


/**
 * An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
 */
export type GitTimestamp = string



/**
 * Represents a GPG signature on a Commit or Tag.
 */
export class GpgSignature extends $Base<"GpgSignature"> {
  constructor() {
    super("GpgSignature")
  }

  
      
/**
 * Email used to sign this object.
 */
      get email(): $Field<"email", string>  {
       return this.$_select("email") as any
      }

      
/**
 * True if the signature is valid and verified by GitHub.
 */
      get isValid(): $Field<"isValid", boolean>  {
       return this.$_select("isValid") as any
      }

      
/**
 * Hex-encoded ID of the key that signed this object.
 */
      get keyId(): $Field<"keyId", string | null | undefined>  {
       return this.$_select("keyId") as any
      }

      
/**
 * Payload for GPG signing object. Raw ODB object without the signature header.
 */
      get payload(): $Field<"payload", string>  {
       return this.$_select("payload") as any
      }

      
/**
 * ASCII-armored signature header from object.
 */
      get signature(): $Field<"signature", string>  {
       return this.$_select("signature") as any
      }

      
/**
 * GitHub user corresponding to the email signing this commit.
 */
      signer<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"signer", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("signer", options) as any
    }
  

      
/**
 * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
 */
      get state(): $Field<"state", GitSignatureState>  {
       return this.$_select("state") as any
      }

      
/**
 * True if the signature was made with GitHub's signing key.
 */
      get wasSignedByGitHub(): $Field<"wasSignedByGitHub", boolean>  {
       return this.$_select("wasSignedByGitHub") as any
      }
}


/**
 * Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole
 */
export type GrantEnterpriseOrganizationsMigratorRoleInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
login: string
}
    


/**
 * Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole
 */
export class GrantEnterpriseOrganizationsMigratorRolePayload extends $Base<"GrantEnterpriseOrganizationsMigratorRolePayload"> {
  constructor() {
    super("GrantEnterpriseOrganizationsMigratorRolePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The organizations that had the migrator role applied to for the given user.
 */
      organizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"organizations", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
organizations<Sel extends Selection<OrganizationConnection>>(selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"organizations", GetOutput<Sel> | undefined , GetVariables<Sel>>
organizations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("organizations", options) as any
    }
  
}


/**
 * Autogenerated input type of GrantMigratorRole
 */
export type GrantMigratorRoleInput = {
  actor: string,
actorType: ActorType,
clientMutationId?: string | null | undefined,
organizationId: string
}
    


/**
 * Autogenerated return type of GrantMigratorRole
 */
export class GrantMigratorRolePayload extends $Base<"GrantMigratorRolePayload"> {
  constructor() {
    super("GrantMigratorRolePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * Did the operation succeed?
 */
      get success(): $Field<"success", boolean | null | undefined>  {
       return this.$_select("success") as any
      }
}


/**
 * A string containing HTML code.
 */
export type HTML = string



/**
 * Represents a 'head_ref_deleted' event on a given pull request.
 */
export class HeadRefDeletedEvent extends $Base<"HeadRefDeletedEvent"> {
  constructor() {
    super("HeadRefDeletedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the Ref associated with the `head_ref_deleted` event.
 */
      headRef<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"headRef", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("headRef", options) as any
    }
  

      
/**
 * Identifies the name of the Ref associated with the `head_ref_deleted` event.
 */
      get headRefName(): $Field<"headRefName", string>  {
       return this.$_select("headRefName") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents a 'head_ref_force_pushed' event on a given pull request.
 */
export class HeadRefForcePushedEvent extends $Base<"HeadRefForcePushedEvent"> {
  constructor() {
    super("HeadRefForcePushedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the after commit SHA for the 'head_ref_force_pushed' event.
 */
      afterCommit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"afterCommit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("afterCommit", options) as any
    }
  

      
/**
 * Identifies the before commit SHA for the 'head_ref_force_pushed' event.
 */
      beforeCommit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"beforeCommit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("beforeCommit", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
 */
      ref<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"ref", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("ref", options) as any
    }
  
}


/**
 * Represents a 'head_ref_restored' event on a given pull request.
 */
export class HeadRefRestoredEvent extends $Base<"HeadRefRestoredEvent"> {
  constructor() {
    super("HeadRefRestoredEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Detail needed to display a hovercard for a user
 */
export class Hovercard extends $Base<"Hovercard"> {
  constructor() {
    super("Hovercard")
  }

  
      
/**
 * Each of the contexts for this hovercard
 */
      contexts<Sel extends Selection<HovercardContext>>(selectorFn: (s: HovercardContext) => [...Sel]):$Field<"contexts", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new HovercardContext)
      };
      return this.$_select("contexts", options) as any
    }
  
}


/**
 * An individual line of a hovercard
 */
export class HovercardContext extends $Interface<{GenericHovercardContext: GenericHovercardContext,OrganizationTeamsHovercardContext: OrganizationTeamsHovercardContext,OrganizationsHovercardContext: OrganizationsHovercardContext,ReviewStatusHovercardContext: ReviewStatusHovercardContext,ViewerHovercardContext: ViewerHovercardContext}, "HovercardContext"> {
  constructor() {
    super({GenericHovercardContext: GenericHovercardContext,OrganizationTeamsHovercardContext: OrganizationTeamsHovercardContext,OrganizationsHovercardContext: OrganizationsHovercardContext,ReviewStatusHovercardContext: ReviewStatusHovercardContext,ViewerHovercardContext: ViewerHovercardContext}, "HovercardContext")
  }
}

  
/**
 * The possible states in which authentication can be configured with an identity provider.
 */
export enum IdentityProviderConfigurationState {
  
/**
 * Authentication with an identity provider is configured and enforced.
 */
  ENFORCED = "ENFORCED",

/**
 * Authentication with an identity provider is configured but not enforced.
 */
  CONFIGURED = "CONFIGURED",

/**
 * Authentication with an identity provider is not configured.
 */
  UNCONFIGURED = "UNCONFIGURED"
}
  


/**
 * Autogenerated input type of InviteEnterpriseAdmin
 */
export type InviteEnterpriseAdminInput = {
  clientMutationId?: string | null | undefined,
email?: string | null | undefined,
enterpriseId: string,
invitee?: string | null | undefined,
role?: EnterpriseAdministratorRole | null | undefined
}
    


/**
 * Autogenerated return type of InviteEnterpriseAdmin
 */
export class InviteEnterpriseAdminPayload extends $Base<"InviteEnterpriseAdminPayload"> {
  constructor() {
    super("InviteEnterpriseAdminPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The created enterprise administrator invitation.
 */
      invitation<Sel extends Selection<EnterpriseAdministratorInvitation>>(selectorFn: (s: EnterpriseAdministratorInvitation) => [...Sel]):$Field<"invitation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseAdministratorInvitation)
      };
      return this.$_select("invitation", options) as any
    }
  
}

  
/**
 * The possible values for the IP allow list enabled setting.
 */
export enum IpAllowListEnabledSettingValue {
  
/**
 * The setting is enabled for the owner.
 */
  ENABLED = "ENABLED",

/**
 * The setting is disabled for the owner.
 */
  DISABLED = "DISABLED"
}
  


/**
 * An IP address or range of addresses that is allowed to access an owner's resources.
 */
export class IpAllowListEntry extends $Base<"IpAllowListEntry"> {
  constructor() {
    super("IpAllowListEntry")
  }

  
      
/**
 * A single IP address or range of IP addresses in CIDR notation.
 */
      get allowListValue(): $Field<"allowListValue", string>  {
       return this.$_select("allowListValue") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether the entry is currently active.
 */
      get isActive(): $Field<"isActive", boolean>  {
       return this.$_select("isActive") as any
      }

      
/**
 * The name of the IP allow list entry.
 */
      get name(): $Field<"name", string | null | undefined>  {
       return this.$_select("name") as any
      }

      
/**
 * The owner of the IP allow list entry.
 */
      owner<Sel extends Selection<IpAllowListOwner>>(selectorFn: (s: IpAllowListOwner) => [...Sel]):$Field<"owner", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IpAllowListOwner)
      };
      return this.$_select("owner", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The connection type for IpAllowListEntry.
 */
export class IpAllowListEntryConnection extends $Base<"IpAllowListEntryConnection"> {
  constructor() {
    super("IpAllowListEntryConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<IpAllowListEntryEdge>>(selectorFn: (s: IpAllowListEntryEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IpAllowListEntryEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<IpAllowListEntry>>(selectorFn: (s: IpAllowListEntry) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IpAllowListEntry)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class IpAllowListEntryEdge extends $Base<"IpAllowListEntryEdge"> {
  constructor() {
    super("IpAllowListEntryEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<IpAllowListEntry>>(selectorFn: (s: IpAllowListEntry) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IpAllowListEntry)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for IP allow list entry connections.
 */
export type IpAllowListEntryOrder = {
  direction: OrderDirection,
field: IpAllowListEntryOrderField
}
    

  
/**
 * Properties by which IP allow list entry connections can be ordered.
 */
export enum IpAllowListEntryOrderField {
  
/**
 * Order IP allow list entries by creation time.
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order IP allow list entries by the allow list value.
 */
  ALLOW_LIST_VALUE = "ALLOW_LIST_VALUE"
}
  

  
/**
 * The possible values for the IP allow list configuration for installed GitHub Apps setting.
 */
export enum IpAllowListForInstalledAppsEnabledSettingValue {
  
/**
 * The setting is enabled for the owner.
 */
  ENABLED = "ENABLED",

/**
 * The setting is disabled for the owner.
 */
  DISABLED = "DISABLED"
}
  


/**
 * Types that can own an IP allow list.
 */
export class IpAllowListOwner extends $Union<{App: App,Enterprise: Enterprise,Organization: Organization,Node: Node,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "IpAllowListOwner"> {
  constructor() {
    super({App: App,Enterprise: Enterprise,Organization: Organization,Node: Node,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
 */
export class Issue extends $Base<"Issue"> {
  constructor() {
    super("Issue")
  }

  
      
/**
 * Reason that the conversation was locked.
 */
      get activeLockReason(): $Field<"activeLockReason", LockReason | null | undefined>  {
       return this.$_select("activeLockReason") as any
      }

      
/**
 * A list of Users assigned to this object.
 */
      assignees<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserConnection>>(args: Args, selectorFn: (s: UserConnection) => [...Sel]):$Field<"assignees", GetOutput<Sel> , GetVariables<Sel, Args>>
assignees<Sel extends Selection<UserConnection>>(selectorFn: (s: UserConnection) => [...Sel]):$Field<"assignees", GetOutput<Sel> , GetVariables<Sel>>
assignees(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserConnection)
      };
      return this.$_select("assignees", options) as any
    }
  

      
/**
 * The actor who authored the comment.
 */
      author<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Author's association with the subject of the comment.
 */
      get authorAssociation(): $Field<"authorAssociation", CommentAuthorAssociation>  {
       return this.$_select("authorAssociation") as any
      }

      
/**
 * Identifies the body of the issue.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * The http path for this issue body
 */
      get bodyResourcePath(): $Field<"bodyResourcePath", string>  {
       return this.$_select("bodyResourcePath") as any
      }

      
/**
 * Identifies the body of the issue rendered to text.
 */
      get bodyText(): $Field<"bodyText", string>  {
       return this.$_select("bodyText") as any
      }

      
/**
 * The http URL for this issue body
 */
      get bodyUrl(): $Field<"bodyUrl", string>  {
       return this.$_select("bodyUrl") as any
      }

      
/**
 * `true` if the object is closed (definition of closed may depend on type)
 */
      get closed(): $Field<"closed", boolean>  {
       return this.$_select("closed") as any
      }

      
/**
 * Identifies the date and time when the object was closed.
 */
      get closedAt(): $Field<"closedAt", string | null | undefined>  {
       return this.$_select("closedAt") as any
      }

      
/**
 * A list of comments associated with the Issue.
 */
      comments<Args extends VariabledInput<{
        orderBy?: IssueCommentOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<IssueCommentConnection>>(args: Args, selectorFn: (s: IssueCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel, Args>>
comments<Sel extends Selection<IssueCommentConnection>>(selectorFn: (s: IssueCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel>>
comments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "IssueCommentOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new IssueCommentConnection)
      };
      return this.$_select("comments", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Check if this comment was created via an email reply.
 */
      get createdViaEmail(): $Field<"createdViaEmail", boolean>  {
       return this.$_select("createdViaEmail") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The actor who edited the comment.
 */
      editor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"editor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("editor", options) as any
    }
  

      
/**
 * The hovercard information for this issue
 */
      hovercard<Args extends VariabledInput<{
        includeNotificationContexts?: boolean | null | undefined,
      }>,Sel extends Selection<Hovercard>>(args: Args, selectorFn: (s: Hovercard) => [...Sel]):$Field<"hovercard", GetOutput<Sel> , GetVariables<Sel, Args>>
hovercard<Sel extends Selection<Hovercard>>(selectorFn: (s: Hovercard) => [...Sel]):$Field<"hovercard", GetOutput<Sel> , GetVariables<Sel>>
hovercard(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              includeNotificationContexts: "Boolean"
            },
        args,

        selection: selectorFn(new Hovercard)
      };
      return this.$_select("hovercard", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Check if this comment was edited and includes an edit with the creation data
 */
      get includesCreatedEdit(): $Field<"includesCreatedEdit", boolean>  {
       return this.$_select("includesCreatedEdit") as any
      }

      
/**
 * Indicates whether or not this issue is currently pinned to the repository issues list
 */
      get isPinned(): $Field<"isPinned", boolean | null | undefined>  {
       return this.$_select("isPinned") as any
      }

      
/**
 * Is this issue read by the viewer
 */
      get isReadByViewer(): $Field<"isReadByViewer", boolean | null | undefined>  {
       return this.$_select("isReadByViewer") as any
      }

      
/**
 * A list of labels associated with the object.
 */
      labels<Args extends VariabledInput<{
        orderBy?: LabelOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<LabelConnection>>(args: Args, selectorFn: (s: LabelConnection) => [...Sel]):$Field<"labels", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
labels<Sel extends Selection<LabelConnection>>(selectorFn: (s: LabelConnection) => [...Sel]):$Field<"labels", GetOutput<Sel> | undefined , GetVariables<Sel>>
labels(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "LabelOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new LabelConnection)
      };
      return this.$_select("labels", options) as any
    }
  

      
/**
 * The moment the editor made the last edit
 */
      get lastEditedAt(): $Field<"lastEditedAt", string | null | undefined>  {
       return this.$_select("lastEditedAt") as any
      }

      
/**
 * Branches linked to this issue.
 */
      linkedBranches<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<LinkedBranchConnection>>(args: Args, selectorFn: (s: LinkedBranchConnection) => [...Sel]):$Field<"linkedBranches", GetOutput<Sel> , GetVariables<Sel, Args>>
linkedBranches<Sel extends Selection<LinkedBranchConnection>>(selectorFn: (s: LinkedBranchConnection) => [...Sel]):$Field<"linkedBranches", GetOutput<Sel> , GetVariables<Sel>>
linkedBranches(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new LinkedBranchConnection)
      };
      return this.$_select("linkedBranches", options) as any
    }
  

      
/**
 * `true` if the object is locked
 */
      get locked(): $Field<"locked", boolean>  {
       return this.$_select("locked") as any
      }

      
/**
 * Identifies the milestone associated with the issue.
 */
      milestone<Sel extends Selection<Milestone>>(selectorFn: (s: Milestone) => [...Sel]):$Field<"milestone", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Milestone)
      };
      return this.$_select("milestone", options) as any
    }
  

      
/**
 * Identifies the issue number.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * A list of Users that are participating in the Issue conversation.
 */
      participants<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserConnection>>(args: Args, selectorFn: (s: UserConnection) => [...Sel]):$Field<"participants", GetOutput<Sel> , GetVariables<Sel, Args>>
participants<Sel extends Selection<UserConnection>>(selectorFn: (s: UserConnection) => [...Sel]):$Field<"participants", GetOutput<Sel> , GetVariables<Sel>>
participants(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserConnection)
      };
      return this.$_select("participants", options) as any
    }
  

      
/**
 * List of project cards associated with this issue.
 */
      projectCards<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
archivedStates?: Readonly<Array<ProjectCardArchivedState | null | undefined>> | null | undefined,
      }>,Sel extends Selection<ProjectCardConnection>>(args: Args, selectorFn: (s: ProjectCardConnection) => [...Sel]):$Field<"projectCards", GetOutput<Sel> , GetVariables<Sel, Args>>
projectCards<Sel extends Selection<ProjectCardConnection>>(selectorFn: (s: ProjectCardConnection) => [...Sel]):$Field<"projectCards", GetOutput<Sel> , GetVariables<Sel>>
projectCards(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
archivedStates: "[ProjectCardArchivedState]"
            },
        args,

        selection: selectorFn(new ProjectCardConnection)
      };
      return this.$_select("projectCards", options) as any
    }
  

      
/**
 * List of project items associated with this issue.
 */
      projectItems<Args extends VariabledInput<{
        includeArchived?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2ItemConnection>>(args: Args, selectorFn: (s: ProjectV2ItemConnection) => [...Sel]):$Field<"projectItems", GetOutput<Sel> , GetVariables<Sel, Args>>
projectItems<Sel extends Selection<ProjectV2ItemConnection>>(selectorFn: (s: ProjectV2ItemConnection) => [...Sel]):$Field<"projectItems", GetOutput<Sel> , GetVariables<Sel>>
projectItems(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              includeArchived: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2ItemConnection)
      };
      return this.$_select("projectItems", options) as any
    }
  

      
/**
 * Find a project by project (beta) number.
 */
      projectNext<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<ProjectNext>>(args: Args, selectorFn: (s: ProjectNext) => [...Sel]):$Field<"projectNext", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new ProjectNext)
      };
      return this.$_select("projectNext", options) as any
    }
  

      
/**
 * List of project (beta) items associated with this issue.
 */
      projectNextItems<Args extends VariabledInput<{
        includeArchived?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectNextItemConnection>>(args: Args, selectorFn: (s: ProjectNextItemConnection) => [...Sel]):$Field<"projectNextItems", GetOutput<Sel> , GetVariables<Sel, Args>>
projectNextItems<Sel extends Selection<ProjectNextItemConnection>>(selectorFn: (s: ProjectNextItemConnection) => [...Sel]):$Field<"projectNextItems", GetOutput<Sel> , GetVariables<Sel>>
projectNextItems(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              includeArchived: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectNextItemConnection)
      };
      return this.$_select("projectNextItems", options) as any
    }
  

      
/**
 * Find a project by number.
 */
      projectV2<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<ProjectV2>>(args: Args, selectorFn: (s: ProjectV2) => [...Sel]):$Field<"projectV2", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("projectV2", options) as any
    }
  

      
/**
 * A list of projects (beta) under the owner.
 */
      projectsNext<Args extends VariabledInput<{
        query?: string | null | undefined
sortBy?: ProjectNextOrderField | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectNextConnection>>(args: Args, selectorFn: (s: ProjectNextConnection) => [...Sel]):$Field<"projectsNext", GetOutput<Sel> , GetVariables<Sel, Args>>
projectsNext<Sel extends Selection<ProjectNextConnection>>(selectorFn: (s: ProjectNextConnection) => [...Sel]):$Field<"projectsNext", GetOutput<Sel> , GetVariables<Sel>>
projectsNext(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
sortBy: "ProjectNextOrderField",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectNextConnection)
      };
      return this.$_select("projectsNext", options) as any
    }
  

      
/**
 * A list of projects under the owner.
 */
      projectsV2<Args extends VariabledInput<{
        query?: string | null | undefined
orderBy?: ProjectV2Order | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2Connection>>(args: Args, selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel, Args>>
projectsV2<Sel extends Selection<ProjectV2Connection>>(selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel>>
projectsV2(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
orderBy: "ProjectV2Order",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2Connection)
      };
      return this.$_select("projectsV2", options) as any
    }
  

      
/**
 * Identifies when the comment was published at.
 */
      get publishedAt(): $Field<"publishedAt", string | null | undefined>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * A list of reactions grouped by content left on the subject.
 */
      reactionGroups<Sel extends Selection<ReactionGroup>>(selectorFn: (s: ReactionGroup) => [...Sel]):$Field<"reactionGroups", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactionGroup)
      };
      return this.$_select("reactionGroups", options) as any
    }
  

      
/**
 * A list of Reactions left on the Issue.
 */
      reactions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
content?: ReactionContent | null | undefined
orderBy?: ReactionOrder | null | undefined,
      }>,Sel extends Selection<ReactionConnection>>(args: Args, selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel, Args>>
reactions<Sel extends Selection<ReactionConnection>>(selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel>>
reactions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
content: "ReactionContent",
orderBy: "ReactionOrder"
            },
        args,

        selection: selectorFn(new ReactionConnection)
      };
      return this.$_select("reactions", options) as any
    }
  

      
/**
 * The repository associated with this node.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for this issue
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the state of the issue.
 */
      get state(): $Field<"state", IssueState>  {
       return this.$_select("state") as any
      }

      
/**
 * Identifies the reason for the issue state.
 */
      get stateReason(): $Field<"stateReason", IssueStateReason | null | undefined>  {
       return this.$_select("stateReason") as any
      }

      
/**
 * A list of events, comments, commits, etc. associated with the issue.
 */
      timeline<Args extends VariabledInput<{
        since?: string | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<IssueTimelineConnection>>(args: Args, selectorFn: (s: IssueTimelineConnection) => [...Sel]):$Field<"timeline", GetOutput<Sel> , GetVariables<Sel, Args>>
timeline<Sel extends Selection<IssueTimelineConnection>>(selectorFn: (s: IssueTimelineConnection) => [...Sel]):$Field<"timeline", GetOutput<Sel> , GetVariables<Sel>>
timeline(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              since: "DateTime",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new IssueTimelineConnection)
      };
      return this.$_select("timeline", options) as any
    }
  

      
/**
 * A list of events, comments, commits, etc. associated with the issue.
 */
      timelineItems<Args extends VariabledInput<{
        since?: string | null | undefined
skip?: number | null | undefined
itemTypes?: Readonly<Array<IssueTimelineItemsItemType>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<IssueTimelineItemsConnection>>(args: Args, selectorFn: (s: IssueTimelineItemsConnection) => [...Sel]):$Field<"timelineItems", GetOutput<Sel> , GetVariables<Sel, Args>>
timelineItems<Sel extends Selection<IssueTimelineItemsConnection>>(selectorFn: (s: IssueTimelineItemsConnection) => [...Sel]):$Field<"timelineItems", GetOutput<Sel> , GetVariables<Sel>>
timelineItems(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              since: "DateTime",
skip: "Int",
itemTypes: "[IssueTimelineItemsItemType!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new IssueTimelineItemsConnection)
      };
      return this.$_select("timelineItems", options) as any
    }
  

      
/**
 * Identifies the issue title.
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }

      
/**
 * Identifies the issue title rendered to HTML.
 */
      get titleHTML(): $Field<"titleHTML", string>  {
       return this.$_select("titleHTML") as any
      }

      
/**
 * A list of issues that track this issue
 */
      trackedInIssues<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<IssueConnection>>(args: Args, selectorFn: (s: IssueConnection) => [...Sel]):$Field<"trackedInIssues", GetOutput<Sel> , GetVariables<Sel, Args>>
trackedInIssues<Sel extends Selection<IssueConnection>>(selectorFn: (s: IssueConnection) => [...Sel]):$Field<"trackedInIssues", GetOutput<Sel> , GetVariables<Sel>>
trackedInIssues(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new IssueConnection)
      };
      return this.$_select("trackedInIssues", options) as any
    }
  

      
/**
 * A list of issues tracked inside the current issue
 */
      trackedIssues<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<IssueConnection>>(args: Args, selectorFn: (s: IssueConnection) => [...Sel]):$Field<"trackedIssues", GetOutput<Sel> , GetVariables<Sel, Args>>
trackedIssues<Sel extends Selection<IssueConnection>>(selectorFn: (s: IssueConnection) => [...Sel]):$Field<"trackedIssues", GetOutput<Sel> , GetVariables<Sel>>
trackedIssues(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new IssueConnection)
      };
      return this.$_select("trackedIssues", options) as any
    }
  

      
/**
 * The number of tracked issues for this issue
 */
      trackedIssuesCount<Args extends VariabledInput<{
        states?: Readonly<Array<TrackedIssueStates | null | undefined>> | null | undefined,
      }>>(args: Args):$Field<"trackedIssuesCount", number , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              states: "[TrackedIssueStates]"
            },
        args,

        
      };
      return this.$_select("trackedIssuesCount", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this issue
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * A list of edits to this content.
 */
      userContentEdits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserContentEditConnection>>(args: Args, selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
userContentEdits<Sel extends Selection<UserContentEditConnection>>(selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel>>
userContentEdits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserContentEditConnection)
      };
      return this.$_select("userContentEdits", options) as any
    }
  

      
/**
 * Can user react to this subject
 */
      get viewerCanReact(): $Field<"viewerCanReact", boolean>  {
       return this.$_select("viewerCanReact") as any
      }

      
/**
 * Check if the viewer is able to change their subscription status for the repository.
 */
      get viewerCanSubscribe(): $Field<"viewerCanSubscribe", boolean>  {
       return this.$_select("viewerCanSubscribe") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * Reasons why the current viewer can not update this comment.
 */
      get viewerCannotUpdateReasons(): $Field<"viewerCannotUpdateReasons", Readonly<Array<CommentCannotUpdateReason>>>  {
       return this.$_select("viewerCannotUpdateReasons") as any
      }

      
/**
 * Did the viewer author this comment.
 */
      get viewerDidAuthor(): $Field<"viewerDidAuthor", boolean>  {
       return this.$_select("viewerDidAuthor") as any
      }

      
/**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
      get viewerSubscription(): $Field<"viewerSubscription", SubscriptionState | null | undefined>  {
       return this.$_select("viewerSubscription") as any
      }
}

  
/**
 * The possible state reasons of a closed issue.
 */
export enum IssueClosedStateReason {
  
/**
 * An issue that has been closed as completed
 */
  COMPLETED = "COMPLETED",

/**
 * An issue that has been closed as not planned
 */
  NOT_PLANNED = "NOT_PLANNED"
}
  


/**
 * Represents a comment on an Issue.
 */
export class IssueComment extends $Base<"IssueComment"> {
  constructor() {
    super("IssueComment")
  }

  
      
/**
 * The actor who authored the comment.
 */
      author<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Author's association with the subject of the comment.
 */
      get authorAssociation(): $Field<"authorAssociation", CommentAuthorAssociation>  {
       return this.$_select("authorAssociation") as any
      }

      
/**
 * The body as Markdown.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * The body rendered to text.
 */
      get bodyText(): $Field<"bodyText", string>  {
       return this.$_select("bodyText") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Check if this comment was created via an email reply.
 */
      get createdViaEmail(): $Field<"createdViaEmail", boolean>  {
       return this.$_select("createdViaEmail") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The actor who edited the comment.
 */
      editor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"editor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("editor", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Check if this comment was edited and includes an edit with the creation data
 */
      get includesCreatedEdit(): $Field<"includesCreatedEdit", boolean>  {
       return this.$_select("includesCreatedEdit") as any
      }

      
/**
 * Returns whether or not a comment has been minimized.
 */
      get isMinimized(): $Field<"isMinimized", boolean>  {
       return this.$_select("isMinimized") as any
      }

      
/**
 * Identifies the issue associated with the comment.
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  

      
/**
 * The moment the editor made the last edit
 */
      get lastEditedAt(): $Field<"lastEditedAt", string | null | undefined>  {
       return this.$_select("lastEditedAt") as any
      }

      
/**
 * Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
 */
      get minimizedReason(): $Field<"minimizedReason", string | null | undefined>  {
       return this.$_select("minimizedReason") as any
      }

      
/**
 * Identifies when the comment was published at.
 */
      get publishedAt(): $Field<"publishedAt", string | null | undefined>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * Returns the pull request associated with the comment, if this comment was made on a
pull request.

 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * A list of reactions grouped by content left on the subject.
 */
      reactionGroups<Sel extends Selection<ReactionGroup>>(selectorFn: (s: ReactionGroup) => [...Sel]):$Field<"reactionGroups", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactionGroup)
      };
      return this.$_select("reactionGroups", options) as any
    }
  

      
/**
 * A list of Reactions left on the Issue.
 */
      reactions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
content?: ReactionContent | null | undefined
orderBy?: ReactionOrder | null | undefined,
      }>,Sel extends Selection<ReactionConnection>>(args: Args, selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel, Args>>
reactions<Sel extends Selection<ReactionConnection>>(selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel>>
reactions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
content: "ReactionContent",
orderBy: "ReactionOrder"
            },
        args,

        selection: selectorFn(new ReactionConnection)
      };
      return this.$_select("reactions", options) as any
    }
  

      
/**
 * The repository associated with this node.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for this issue comment
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this issue comment
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * A list of edits to this content.
 */
      userContentEdits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserContentEditConnection>>(args: Args, selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
userContentEdits<Sel extends Selection<UserContentEditConnection>>(selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel>>
userContentEdits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserContentEditConnection)
      };
      return this.$_select("userContentEdits", options) as any
    }
  

      
/**
 * Check if the current viewer can delete this object.
 */
      get viewerCanDelete(): $Field<"viewerCanDelete", boolean>  {
       return this.$_select("viewerCanDelete") as any
      }

      
/**
 * Check if the current viewer can minimize this object.
 */
      get viewerCanMinimize(): $Field<"viewerCanMinimize", boolean>  {
       return this.$_select("viewerCanMinimize") as any
      }

      
/**
 * Can user react to this subject
 */
      get viewerCanReact(): $Field<"viewerCanReact", boolean>  {
       return this.$_select("viewerCanReact") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * Reasons why the current viewer can not update this comment.
 */
      get viewerCannotUpdateReasons(): $Field<"viewerCannotUpdateReasons", Readonly<Array<CommentCannotUpdateReason>>>  {
       return this.$_select("viewerCannotUpdateReasons") as any
      }

      
/**
 * Did the viewer author this comment.
 */
      get viewerDidAuthor(): $Field<"viewerDidAuthor", boolean>  {
       return this.$_select("viewerDidAuthor") as any
      }
}


/**
 * The connection type for IssueComment.
 */
export class IssueCommentConnection extends $Base<"IssueCommentConnection"> {
  constructor() {
    super("IssueCommentConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<IssueCommentEdge>>(selectorFn: (s: IssueCommentEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueCommentEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<IssueComment>>(selectorFn: (s: IssueComment) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueComment)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class IssueCommentEdge extends $Base<"IssueCommentEdge"> {
  constructor() {
    super("IssueCommentEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<IssueComment>>(selectorFn: (s: IssueComment) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueComment)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ways in which lists of issue comments can be ordered upon return.
 */
export type IssueCommentOrder = {
  direction: OrderDirection,
field: IssueCommentOrderField
}
    

  
/**
 * Properties by which issue comment connections can be ordered.
 */
export enum IssueCommentOrderField {
  
/**
 * Order issue comments by update time
 */
  UPDATED_AT = "UPDATED_AT"
}
  


/**
 * The connection type for Issue.
 */
export class IssueConnection extends $Base<"IssueConnection"> {
  constructor() {
    super("IssueConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<IssueEdge>>(selectorFn: (s: IssueEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * This aggregates issues opened by a user within one repository.
 */
export class IssueContributionsByRepository extends $Base<"IssueContributionsByRepository"> {
  constructor() {
    super("IssueContributionsByRepository")
  }

  
      
/**
 * The issue contributions.
 */
      contributions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ContributionOrder | null | undefined,
      }>,Sel extends Selection<CreatedIssueContributionConnection>>(args: Args, selectorFn: (s: CreatedIssueContributionConnection) => [...Sel]):$Field<"contributions", GetOutput<Sel> , GetVariables<Sel, Args>>
contributions<Sel extends Selection<CreatedIssueContributionConnection>>(selectorFn: (s: CreatedIssueContributionConnection) => [...Sel]):$Field<"contributions", GetOutput<Sel> , GetVariables<Sel>>
contributions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ContributionOrder"
            },
        args,

        selection: selectorFn(new CreatedIssueContributionConnection)
      };
      return this.$_select("contributions", options) as any
    }
  

      
/**
 * The repository in which the issues were opened.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * An edge in a connection.
 */
export class IssueEdge extends $Base<"IssueEdge"> {
  constructor() {
    super("IssueEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ways in which to filter lists of issues.
 */
export type IssueFilters = {
  assignee?: string | null | undefined,
createdBy?: string | null | undefined,
labels?: Readonly<Array<string>> | null | undefined,
mentioned?: string | null | undefined,
milestone?: string | null | undefined,
milestoneNumber?: string | null | undefined,
since?: string | null | undefined,
states?: Readonly<Array<IssueState>> | null | undefined,
viewerSubscribed?: boolean | null | undefined
}
    


/**
 * Used for return value of Repository.issueOrPullRequest.
 */
export class IssueOrPullRequest extends $Union<{Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner}, "IssueOrPullRequest"> {
  constructor() {
    super({Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner})
  }
}


/**
 * Ways in which lists of issues can be ordered upon return.
 */
export type IssueOrder = {
  direction: OrderDirection,
field: IssueOrderField
}
    

  
/**
 * Properties by which issue connections can be ordered.
 */
export enum IssueOrderField {
  
/**
 * Order issues by creation time
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order issues by update time
 */
  UPDATED_AT = "UPDATED_AT",

/**
 * Order issues by comment count
 */
  COMMENTS = "COMMENTS"
}
  

  
/**
 * The possible states of an issue.
 */
export enum IssueState {
  
/**
 * An issue that is still open
 */
  OPEN = "OPEN",

/**
 * An issue that has been closed
 */
  CLOSED = "CLOSED"
}
  

  
/**
 * The possible state reasons of an issue.
 */
export enum IssueStateReason {
  
/**
 * An issue that has been reopened
 */
  REOPENED = "REOPENED",

/**
 * An issue that has been closed as not planned
 */
  NOT_PLANNED = "NOT_PLANNED",

/**
 * An issue that has been closed as completed
 */
  COMPLETED = "COMPLETED"
}
  


/**
 * A repository issue template.
 */
export class IssueTemplate extends $Base<"IssueTemplate"> {
  constructor() {
    super("IssueTemplate")
  }

  
      
/**
 * The template purpose.
 */
      get about(): $Field<"about", string | null | undefined>  {
       return this.$_select("about") as any
      }

      
/**
 * The suggested issue body.
 */
      get body(): $Field<"body", string | null | undefined>  {
       return this.$_select("body") as any
      }

      
/**
 * The template filename.
 */
      get filename(): $Field<"filename", string>  {
       return this.$_select("filename") as any
      }

      
/**
 * The template name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The suggested issue title.
 */
      get title(): $Field<"title", string | null | undefined>  {
       return this.$_select("title") as any
      }
}


/**
 * The connection type for IssueTimelineItem.
 */
export class IssueTimelineConnection extends $Base<"IssueTimelineConnection"> {
  constructor() {
    super("IssueTimelineConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<IssueTimelineItemEdge>>(selectorFn: (s: IssueTimelineItemEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueTimelineItemEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<IssueTimelineItem>>(selectorFn: (s: IssueTimelineItem) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueTimelineItem)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An item in an issue timeline
 */
export class IssueTimelineItem extends $Union<{AssignedEvent: AssignedEvent,ClosedEvent: ClosedEvent,Commit: Commit,CrossReferencedEvent: CrossReferencedEvent,DemilestonedEvent: DemilestonedEvent,IssueComment: IssueComment,LabeledEvent: LabeledEvent,LockedEvent: LockedEvent,MilestonedEvent: MilestonedEvent,ReferencedEvent: ReferencedEvent,RenamedTitleEvent: RenamedTitleEvent,ReopenedEvent: ReopenedEvent,SubscribedEvent: SubscribedEvent,TransferredEvent: TransferredEvent,UnassignedEvent: UnassignedEvent,UnlabeledEvent: UnlabeledEvent,UnlockedEvent: UnlockedEvent,UnsubscribedEvent: UnsubscribedEvent,UserBlockedEvent: UserBlockedEvent,Node: Node,UniformResourceLocatable: UniformResourceLocatable,GitObject: GitObject,Subscribable: Subscribable,Comment: Comment,Deletable: Deletable,Minimizable: Minimizable,Updatable: Updatable,UpdatableComment: UpdatableComment,Reactable: Reactable,RepositoryNode: RepositoryNode}, "IssueTimelineItem"> {
  constructor() {
    super({AssignedEvent: AssignedEvent,ClosedEvent: ClosedEvent,Commit: Commit,CrossReferencedEvent: CrossReferencedEvent,DemilestonedEvent: DemilestonedEvent,IssueComment: IssueComment,LabeledEvent: LabeledEvent,LockedEvent: LockedEvent,MilestonedEvent: MilestonedEvent,ReferencedEvent: ReferencedEvent,RenamedTitleEvent: RenamedTitleEvent,ReopenedEvent: ReopenedEvent,SubscribedEvent: SubscribedEvent,TransferredEvent: TransferredEvent,UnassignedEvent: UnassignedEvent,UnlabeledEvent: UnlabeledEvent,UnlockedEvent: UnlockedEvent,UnsubscribedEvent: UnsubscribedEvent,UserBlockedEvent: UserBlockedEvent,Node: Node,UniformResourceLocatable: UniformResourceLocatable,GitObject: GitObject,Subscribable: Subscribable,Comment: Comment,Deletable: Deletable,Minimizable: Minimizable,Updatable: Updatable,UpdatableComment: UpdatableComment,Reactable: Reactable,RepositoryNode: RepositoryNode})
  }
}


/**
 * An edge in a connection.
 */
export class IssueTimelineItemEdge extends $Base<"IssueTimelineItemEdge"> {
  constructor() {
    super("IssueTimelineItemEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<IssueTimelineItem>>(selectorFn: (s: IssueTimelineItem) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueTimelineItem)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * An item in an issue timeline
 */
export class IssueTimelineItems extends $Union<{AddedToProjectEvent: AddedToProjectEvent,AssignedEvent: AssignedEvent,ClosedEvent: ClosedEvent,CommentDeletedEvent: CommentDeletedEvent,ConnectedEvent: ConnectedEvent,ConvertedNoteToIssueEvent: ConvertedNoteToIssueEvent,ConvertedToDiscussionEvent: ConvertedToDiscussionEvent,CrossReferencedEvent: CrossReferencedEvent,DemilestonedEvent: DemilestonedEvent,DisconnectedEvent: DisconnectedEvent,IssueComment: IssueComment,LabeledEvent: LabeledEvent,LockedEvent: LockedEvent,MarkedAsDuplicateEvent: MarkedAsDuplicateEvent,MentionedEvent: MentionedEvent,MilestonedEvent: MilestonedEvent,MovedColumnsInProjectEvent: MovedColumnsInProjectEvent,PinnedEvent: PinnedEvent,ReferencedEvent: ReferencedEvent,RemovedFromProjectEvent: RemovedFromProjectEvent,RenamedTitleEvent: RenamedTitleEvent,ReopenedEvent: ReopenedEvent,SubscribedEvent: SubscribedEvent,TransferredEvent: TransferredEvent,UnassignedEvent: UnassignedEvent,UnlabeledEvent: UnlabeledEvent,UnlockedEvent: UnlockedEvent,UnmarkedAsDuplicateEvent: UnmarkedAsDuplicateEvent,UnpinnedEvent: UnpinnedEvent,UnsubscribedEvent: UnsubscribedEvent,UserBlockedEvent: UserBlockedEvent,Node: Node,UniformResourceLocatable: UniformResourceLocatable,Comment: Comment,Deletable: Deletable,Minimizable: Minimizable,Updatable: Updatable,UpdatableComment: UpdatableComment,Reactable: Reactable,RepositoryNode: RepositoryNode}, "IssueTimelineItems"> {
  constructor() {
    super({AddedToProjectEvent: AddedToProjectEvent,AssignedEvent: AssignedEvent,ClosedEvent: ClosedEvent,CommentDeletedEvent: CommentDeletedEvent,ConnectedEvent: ConnectedEvent,ConvertedNoteToIssueEvent: ConvertedNoteToIssueEvent,ConvertedToDiscussionEvent: ConvertedToDiscussionEvent,CrossReferencedEvent: CrossReferencedEvent,DemilestonedEvent: DemilestonedEvent,DisconnectedEvent: DisconnectedEvent,IssueComment: IssueComment,LabeledEvent: LabeledEvent,LockedEvent: LockedEvent,MarkedAsDuplicateEvent: MarkedAsDuplicateEvent,MentionedEvent: MentionedEvent,MilestonedEvent: MilestonedEvent,MovedColumnsInProjectEvent: MovedColumnsInProjectEvent,PinnedEvent: PinnedEvent,ReferencedEvent: ReferencedEvent,RemovedFromProjectEvent: RemovedFromProjectEvent,RenamedTitleEvent: RenamedTitleEvent,ReopenedEvent: ReopenedEvent,SubscribedEvent: SubscribedEvent,TransferredEvent: TransferredEvent,UnassignedEvent: UnassignedEvent,UnlabeledEvent: UnlabeledEvent,UnlockedEvent: UnlockedEvent,UnmarkedAsDuplicateEvent: UnmarkedAsDuplicateEvent,UnpinnedEvent: UnpinnedEvent,UnsubscribedEvent: UnsubscribedEvent,UserBlockedEvent: UserBlockedEvent,Node: Node,UniformResourceLocatable: UniformResourceLocatable,Comment: Comment,Deletable: Deletable,Minimizable: Minimizable,Updatable: Updatable,UpdatableComment: UpdatableComment,Reactable: Reactable,RepositoryNode: RepositoryNode})
  }
}


/**
 * The connection type for IssueTimelineItems.
 */
export class IssueTimelineItemsConnection extends $Base<"IssueTimelineItemsConnection"> {
  constructor() {
    super("IssueTimelineItemsConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<IssueTimelineItemsEdge>>(selectorFn: (s: IssueTimelineItemsEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueTimelineItemsEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * Identifies the count of items after applying `before` and `after` filters.
 */
      get filteredCount(): $Field<"filteredCount", number>  {
       return this.$_select("filteredCount") as any
      }

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<IssueTimelineItems>>(selectorFn: (s: IssueTimelineItems) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueTimelineItems)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
 */
      get pageCount(): $Field<"pageCount", number>  {
       return this.$_select("pageCount") as any
      }

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }

      
/**
 * Identifies the date and time when the timeline was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * An edge in a connection.
 */
export class IssueTimelineItemsEdge extends $Base<"IssueTimelineItemsEdge"> {
  constructor() {
    super("IssueTimelineItemsEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<IssueTimelineItems>>(selectorFn: (s: IssueTimelineItems) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueTimelineItems)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The possible item types found in a timeline.
 */
export enum IssueTimelineItemsItemType {
  
/**
 * Represents a comment on an Issue.
 */
  ISSUE_COMMENT = "ISSUE_COMMENT",

/**
 * Represents a mention made by one issue or pull request to another.
 */
  CROSS_REFERENCED_EVENT = "CROSS_REFERENCED_EVENT",

/**
 * Represents a 'added_to_project' event on a given issue or pull request.
 */
  ADDED_TO_PROJECT_EVENT = "ADDED_TO_PROJECT_EVENT",

/**
 * Represents an 'assigned' event on any assignable object.
 */
  ASSIGNED_EVENT = "ASSIGNED_EVENT",

/**
 * Represents a 'closed' event on any `Closable`.
 */
  CLOSED_EVENT = "CLOSED_EVENT",

/**
 * Represents a 'comment_deleted' event on a given issue or pull request.
 */
  COMMENT_DELETED_EVENT = "COMMENT_DELETED_EVENT",

/**
 * Represents a 'connected' event on a given issue or pull request.
 */
  CONNECTED_EVENT = "CONNECTED_EVENT",

/**
 * Represents a 'converted_note_to_issue' event on a given issue or pull request.
 */
  CONVERTED_NOTE_TO_ISSUE_EVENT = "CONVERTED_NOTE_TO_ISSUE_EVENT",

/**
 * Represents a 'converted_to_discussion' event on a given issue.
 */
  CONVERTED_TO_DISCUSSION_EVENT = "CONVERTED_TO_DISCUSSION_EVENT",

/**
 * Represents a 'demilestoned' event on a given issue or pull request.
 */
  DEMILESTONED_EVENT = "DEMILESTONED_EVENT",

/**
 * Represents a 'disconnected' event on a given issue or pull request.
 */
  DISCONNECTED_EVENT = "DISCONNECTED_EVENT",

/**
 * Represents a 'labeled' event on a given issue or pull request.
 */
  LABELED_EVENT = "LABELED_EVENT",

/**
 * Represents a 'locked' event on a given issue or pull request.
 */
  LOCKED_EVENT = "LOCKED_EVENT",

/**
 * Represents a 'marked_as_duplicate' event on a given issue or pull request.
 */
  MARKED_AS_DUPLICATE_EVENT = "MARKED_AS_DUPLICATE_EVENT",

/**
 * Represents a 'mentioned' event on a given issue or pull request.
 */
  MENTIONED_EVENT = "MENTIONED_EVENT",

/**
 * Represents a 'milestoned' event on a given issue or pull request.
 */
  MILESTONED_EVENT = "MILESTONED_EVENT",

/**
 * Represents a 'moved_columns_in_project' event on a given issue or pull request.
 */
  MOVED_COLUMNS_IN_PROJECT_EVENT = "MOVED_COLUMNS_IN_PROJECT_EVENT",

/**
 * Represents a 'pinned' event on a given issue or pull request.
 */
  PINNED_EVENT = "PINNED_EVENT",

/**
 * Represents a 'referenced' event on a given `ReferencedSubject`.
 */
  REFERENCED_EVENT = "REFERENCED_EVENT",

/**
 * Represents a 'removed_from_project' event on a given issue or pull request.
 */
  REMOVED_FROM_PROJECT_EVENT = "REMOVED_FROM_PROJECT_EVENT",

/**
 * Represents a 'renamed' event on a given issue or pull request
 */
  RENAMED_TITLE_EVENT = "RENAMED_TITLE_EVENT",

/**
 * Represents a 'reopened' event on any `Closable`.
 */
  REOPENED_EVENT = "REOPENED_EVENT",

/**
 * Represents a 'subscribed' event on a given `Subscribable`.
 */
  SUBSCRIBED_EVENT = "SUBSCRIBED_EVENT",

/**
 * Represents a 'transferred' event on a given issue or pull request.
 */
  TRANSFERRED_EVENT = "TRANSFERRED_EVENT",

/**
 * Represents an 'unassigned' event on any assignable object.
 */
  UNASSIGNED_EVENT = "UNASSIGNED_EVENT",

/**
 * Represents an 'unlabeled' event on a given issue or pull request.
 */
  UNLABELED_EVENT = "UNLABELED_EVENT",

/**
 * Represents an 'unlocked' event on a given issue or pull request.
 */
  UNLOCKED_EVENT = "UNLOCKED_EVENT",

/**
 * Represents a 'user_blocked' event on a given user.
 */
  USER_BLOCKED_EVENT = "USER_BLOCKED_EVENT",

/**
 * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
 */
  UNMARKED_AS_DUPLICATE_EVENT = "UNMARKED_AS_DUPLICATE_EVENT",

/**
 * Represents an 'unpinned' event on a given issue or pull request.
 */
  UNPINNED_EVENT = "UNPINNED_EVENT",

/**
 * Represents an 'unsubscribed' event on a given `Subscribable`.
 */
  UNSUBSCRIBED_EVENT = "UNSUBSCRIBED_EVENT"
}
  


/**
 * Represents a user signing up for a GitHub account.
 */
export class JoinedGitHubContribution extends $Base<"JoinedGitHubContribution"> {
  constructor() {
    super("JoinedGitHubContribution")
  }

  
      
/**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.

 */
      get isRestricted(): $Field<"isRestricted", boolean>  {
       return this.$_select("isRestricted") as any
      }

      
/**
 * When this contribution was made.
 */
      get occurredAt(): $Field<"occurredAt", string>  {
       return this.$_select("occurredAt") as any
      }

      
/**
 * The HTTP path for this contribution.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for this contribution.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * The user who made this contribution.

 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
 */
export class Label extends $Base<"Label"> {
  constructor() {
    super("Label")
  }

  
      
/**
 * Identifies the label color.
 */
      get color(): $Field<"color", string>  {
       return this.$_select("color") as any
      }

      
/**
 * Identifies the date and time when the label was created.
 */
      get createdAt(): $Field<"createdAt", string | null | undefined>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * A brief description of this label.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Indicates whether or not this is a default label.
 */
      get isDefault(): $Field<"isDefault", boolean>  {
       return this.$_select("isDefault") as any
      }

      
/**
 * A list of issues associated with this label.
 */
      issues<Args extends VariabledInput<{
        orderBy?: IssueOrder | null | undefined
labels?: Readonly<Array<string>> | null | undefined
states?: Readonly<Array<IssueState>> | null | undefined
filterBy?: IssueFilters | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<IssueConnection>>(args: Args, selectorFn: (s: IssueConnection) => [...Sel]):$Field<"issues", GetOutput<Sel> , GetVariables<Sel, Args>>
issues<Sel extends Selection<IssueConnection>>(selectorFn: (s: IssueConnection) => [...Sel]):$Field<"issues", GetOutput<Sel> , GetVariables<Sel>>
issues(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "IssueOrder",
labels: "[String!]",
states: "[IssueState!]",
filterBy: "IssueFilters",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new IssueConnection)
      };
      return this.$_select("issues", options) as any
    }
  

      
/**
 * Identifies the label name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * A list of pull requests associated with this label.
 */
      pullRequests<Args extends VariabledInput<{
        states?: Readonly<Array<PullRequestState>> | null | undefined
labels?: Readonly<Array<string>> | null | undefined
headRefName?: string | null | undefined
baseRefName?: string | null | undefined
orderBy?: IssueOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestConnection>>(args: Args, selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"pullRequests", GetOutput<Sel> , GetVariables<Sel, Args>>
pullRequests<Sel extends Selection<PullRequestConnection>>(selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"pullRequests", GetOutput<Sel> , GetVariables<Sel>>
pullRequests(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              states: "[PullRequestState!]",
labels: "[String!]",
headRefName: "String",
baseRefName: "String",
orderBy: "IssueOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestConnection)
      };
      return this.$_select("pullRequests", options) as any
    }
  

      
/**
 * The repository associated with this label.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for this label.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the date and time when the label was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string | null | undefined>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this label.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * The connection type for Label.
 */
export class LabelConnection extends $Base<"LabelConnection"> {
  constructor() {
    super("LabelConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<LabelEdge>>(selectorFn: (s: LabelEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new LabelEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Label>>(selectorFn: (s: Label) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Label)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class LabelEdge extends $Base<"LabelEdge"> {
  constructor() {
    super("LabelEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Label>>(selectorFn: (s: Label) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Label)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ways in which lists of labels can be ordered upon return.
 */
export type LabelOrder = {
  direction: OrderDirection,
field: LabelOrderField
}
    

  
/**
 * Properties by which label connections can be ordered.
 */
export enum LabelOrderField {
  
/**
 * Order labels by name 
 */
  NAME = "NAME",

/**
 * Order labels by creation time
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * An object that can have labels assigned to it.
 */
export class Labelable extends $Interface<{Discussion: Discussion,Issue: Issue,PullRequest: PullRequest}, "Labelable"> {
  constructor() {
    super({Discussion: Discussion,Issue: Issue,PullRequest: PullRequest}, "Labelable")
  }
}


/**
 * Represents a 'labeled' event on a given issue or pull request.
 */
export class LabeledEvent extends $Base<"LabeledEvent"> {
  constructor() {
    super("LabeledEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the label associated with the 'labeled' event.
 */
      label<Sel extends Selection<Label>>(selectorFn: (s: Label) => [...Sel]):$Field<"label", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Label)
      };
      return this.$_select("label", options) as any
    }
  

      
/**
 * Identifies the `Labelable` associated with the event.
 */
      labelable<Sel extends Selection<Labelable>>(selectorFn: (s: Labelable) => [...Sel]):$Field<"labelable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Labelable)
      };
      return this.$_select("labelable", options) as any
    }
  
}


/**
 * Represents a given language found in repositories.
 */
export class Language extends $Base<"Language"> {
  constructor() {
    super("Language")
  }

  
      
/**
 * The color defined for the current language.
 */
      get color(): $Field<"color", string | null | undefined>  {
       return this.$_select("color") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The name of the current language.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }
}


/**
 * A list of languages associated with the parent.
 */
export class LanguageConnection extends $Base<"LanguageConnection"> {
  constructor() {
    super("LanguageConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<LanguageEdge>>(selectorFn: (s: LanguageEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new LanguageEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Language>>(selectorFn: (s: Language) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Language)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }

      
/**
 * The total size in bytes of files written in that language.
 */
      get totalSize(): $Field<"totalSize", number>  {
       return this.$_select("totalSize") as any
      }
}


/**
 * Represents the language of a repository.
 */
export class LanguageEdge extends $Base<"LanguageEdge"> {
  constructor() {
    super("LanguageEdge")
  }

  
      
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
      node<Sel extends Selection<Language>>(selectorFn: (s: Language) => [...Sel]):$Field<"node", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Language)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * The number of bytes of code written in the language.
 */
      get size(): $Field<"size", number>  {
       return this.$_select("size") as any
      }
}


/**
 * Ordering options for language connections.
 */
export type LanguageOrder = {
  direction: OrderDirection,
field: LanguageOrderField
}
    

  
/**
 * Properties by which language connections can be ordered.
 */
export enum LanguageOrderField {
  
/**
 * Order languages by the size of all files containing the language
 */
  SIZE = "SIZE"
}
  


/**
 * A repository's open source license
 */
export class License extends $Base<"License"> {
  constructor() {
    super("License")
  }

  
      
/**
 * The full text of the license
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The conditions set by the license
 */
      conditions<Sel extends Selection<LicenseRule>>(selectorFn: (s: LicenseRule) => [...Sel]):$Field<"conditions", Array<GetOutput<Sel> | undefined> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new LicenseRule)
      };
      return this.$_select("conditions", options) as any
    }
  

      
/**
 * A human-readable description of the license
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * Whether the license should be featured
 */
      get featured(): $Field<"featured", boolean>  {
       return this.$_select("featured") as any
      }

      
/**
 * Whether the license should be displayed in license pickers
 */
      get hidden(): $Field<"hidden", boolean>  {
       return this.$_select("hidden") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Instructions on how to implement the license
 */
      get implementation(): $Field<"implementation", string | null | undefined>  {
       return this.$_select("implementation") as any
      }

      
/**
 * The lowercased SPDX ID of the license
 */
      get key(): $Field<"key", string>  {
       return this.$_select("key") as any
      }

      
/**
 * The limitations set by the license
 */
      limitations<Sel extends Selection<LicenseRule>>(selectorFn: (s: LicenseRule) => [...Sel]):$Field<"limitations", Array<GetOutput<Sel> | undefined> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new LicenseRule)
      };
      return this.$_select("limitations", options) as any
    }
  

      
/**
 * The license full name specified by <https://spdx.org/licenses>
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * Customary short name if applicable (e.g, GPLv3)
 */
      get nickname(): $Field<"nickname", string | null | undefined>  {
       return this.$_select("nickname") as any
      }

      
/**
 * The permissions set by the license
 */
      permissions<Sel extends Selection<LicenseRule>>(selectorFn: (s: LicenseRule) => [...Sel]):$Field<"permissions", Array<GetOutput<Sel> | undefined> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new LicenseRule)
      };
      return this.$_select("permissions", options) as any
    }
  

      
/**
 * Whether the license is a pseudo-license placeholder (e.g., other, no-license)
 */
      get pseudoLicense(): $Field<"pseudoLicense", boolean>  {
       return this.$_select("pseudoLicense") as any
      }

      
/**
 * Short identifier specified by <https://spdx.org/licenses>
 */
      get spdxId(): $Field<"spdxId", string | null | undefined>  {
       return this.$_select("spdxId") as any
      }

      
/**
 * URL to the license on <https://choosealicense.com>
 */
      get url(): $Field<"url", string | null | undefined>  {
       return this.$_select("url") as any
      }
}


/**
 * Describes a License's conditions, permissions, and limitations
 */
export class LicenseRule extends $Base<"LicenseRule"> {
  constructor() {
    super("LicenseRule")
  }

  
      
/**
 * A description of the rule
 */
      get description(): $Field<"description", string>  {
       return this.$_select("description") as any
      }

      
/**
 * The machine-readable rule key
 */
      get key(): $Field<"key", string>  {
       return this.$_select("key") as any
      }

      
/**
 * The human-readable rule label
 */
      get label(): $Field<"label", string>  {
       return this.$_select("label") as any
      }
}


/**
 * Autogenerated input type of LinkRepositoryToProject
 */
export type LinkRepositoryToProjectInput = {
  clientMutationId?: string | null | undefined,
projectId: string,
repositoryId: string
}
    


/**
 * Autogenerated return type of LinkRepositoryToProject
 */
export class LinkRepositoryToProjectPayload extends $Base<"LinkRepositoryToProjectPayload"> {
  constructor() {
    super("LinkRepositoryToProjectPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The linked Project.
 */
      project<Sel extends Selection<Project>>(selectorFn: (s: Project) => [...Sel]):$Field<"project", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Project)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * The linked Repository.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * A branch linked to an issue.
 */
export class LinkedBranch extends $Base<"LinkedBranch"> {
  constructor() {
    super("LinkedBranch")
  }

  
      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The branch's ref.
 */
      ref<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"ref", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("ref", options) as any
    }
  
}


/**
 * The connection type for LinkedBranch.
 */
export class LinkedBranchConnection extends $Base<"LinkedBranchConnection"> {
  constructor() {
    super("LinkedBranchConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<LinkedBranchEdge>>(selectorFn: (s: LinkedBranchEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new LinkedBranchEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<LinkedBranch>>(selectorFn: (s: LinkedBranch) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new LinkedBranch)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class LinkedBranchEdge extends $Base<"LinkedBranchEdge"> {
  constructor() {
    super("LinkedBranchEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<LinkedBranch>>(selectorFn: (s: LinkedBranch) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new LinkedBranch)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Autogenerated input type of LockLockable
 */
export type LockLockableInput = {
  clientMutationId?: string | null | undefined,
lockReason?: LockReason | null | undefined,
lockableId: string
}
    


/**
 * Autogenerated return type of LockLockable
 */
export class LockLockablePayload extends $Base<"LockLockablePayload"> {
  constructor() {
    super("LockLockablePayload")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The item that was locked.
 */
      lockedRecord<Sel extends Selection<Lockable>>(selectorFn: (s: Lockable) => [...Sel]):$Field<"lockedRecord", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Lockable)
      };
      return this.$_select("lockedRecord", options) as any
    }
  
}

  
/**
 * The possible reasons that an issue or pull request was locked.
 */
export enum LockReason {
  
/**
 * The issue or pull request was locked because the conversation was off-topic.
 */
  OFF_TOPIC = "OFF_TOPIC",

/**
 * The issue or pull request was locked because the conversation was too heated.
 */
  TOO_HEATED = "TOO_HEATED",

/**
 * The issue or pull request was locked because the conversation was resolved.
 */
  RESOLVED = "RESOLVED",

/**
 * The issue or pull request was locked because the conversation was spam.
 */
  SPAM = "SPAM"
}
  


/**
 * An object that can be locked.
 */
export class Lockable extends $Interface<{Discussion: Discussion,Issue: Issue,PullRequest: PullRequest}, "Lockable"> {
  constructor() {
    super({Discussion: Discussion,Issue: Issue,PullRequest: PullRequest}, "Lockable")
  }
}


/**
 * Represents a 'locked' event on a given issue or pull request.
 */
export class LockedEvent extends $Base<"LockedEvent"> {
  constructor() {
    super("LockedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Reason that the conversation was locked (optional).
 */
      get lockReason(): $Field<"lockReason", LockReason | null | undefined>  {
       return this.$_select("lockReason") as any
      }

      
/**
 * Object that was locked.
 */
      lockable<Sel extends Selection<Lockable>>(selectorFn: (s: Lockable) => [...Sel]):$Field<"lockable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Lockable)
      };
      return this.$_select("lockable", options) as any
    }
  
}


/**
 * A placeholder user for attribution of imported data on GitHub.
 */
export class Mannequin extends $Base<"Mannequin"> {
  constructor() {
    super("Mannequin")
  }

  
      
/**
 * A URL pointing to the GitHub App's public avatar.
 */
      avatarUrl<Args extends VariabledInput<{
        size?: number | null | undefined,
      }>>(args: Args):$Field<"avatarUrl", string , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              size: "Int"
            },
        args,

        
      };
      return this.$_select("avatarUrl", options) as any
    }
  

      
/**
 * The user that has claimed the data attributed to this mannequin.
 */
      claimant<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"claimant", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("claimant", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The mannequin's email on the source instance.
 */
      get email(): $Field<"email", string | null | undefined>  {
       return this.$_select("email") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The username of the actor.
 */
      get login(): $Field<"login", string>  {
       return this.$_select("login") as any
      }

      
/**
 * The HTML path to this resource.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The URL to this resource.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * Autogenerated input type of MarkDiscussionCommentAsAnswer
 */
export type MarkDiscussionCommentAsAnswerInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of MarkDiscussionCommentAsAnswer
 */
export class MarkDiscussionCommentAsAnswerPayload extends $Base<"MarkDiscussionCommentAsAnswerPayload"> {
  constructor() {
    super("MarkDiscussionCommentAsAnswerPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The discussion that includes the chosen comment.
 */
      discussion<Sel extends Selection<Discussion>>(selectorFn: (s: Discussion) => [...Sel]):$Field<"discussion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Discussion)
      };
      return this.$_select("discussion", options) as any
    }
  
}


/**
 * Autogenerated input type of MarkFileAsViewed
 */
export type MarkFileAsViewedInput = {
  clientMutationId?: string | null | undefined,
path: string,
pullRequestId: string
}
    


/**
 * Autogenerated return type of MarkFileAsViewed
 */
export class MarkFileAsViewedPayload extends $Base<"MarkFileAsViewedPayload"> {
  constructor() {
    super("MarkFileAsViewedPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated pull request.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Autogenerated input type of MarkPullRequestReadyForReview
 */
export type MarkPullRequestReadyForReviewInput = {
  clientMutationId?: string | null | undefined,
pullRequestId: string
}
    


/**
 * Autogenerated return type of MarkPullRequestReadyForReview
 */
export class MarkPullRequestReadyForReviewPayload extends $Base<"MarkPullRequestReadyForReviewPayload"> {
  constructor() {
    super("MarkPullRequestReadyForReviewPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The pull request that is ready for review.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents a 'marked_as_duplicate' event on a given issue or pull request.
 */
export class MarkedAsDuplicateEvent extends $Base<"MarkedAsDuplicateEvent"> {
  constructor() {
    super("MarkedAsDuplicateEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The authoritative issue or pull request which has been duplicated by another.
 */
      canonical<Sel extends Selection<IssueOrPullRequest>>(selectorFn: (s: IssueOrPullRequest) => [...Sel]):$Field<"canonical", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueOrPullRequest)
      };
      return this.$_select("canonical", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The issue or pull request which has been marked as a duplicate of another.
 */
      duplicate<Sel extends Selection<IssueOrPullRequest>>(selectorFn: (s: IssueOrPullRequest) => [...Sel]):$Field<"duplicate", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueOrPullRequest)
      };
      return this.$_select("duplicate", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Canonical and duplicate belong to different repositories.
 */
      get isCrossRepository(): $Field<"isCrossRepository", boolean>  {
       return this.$_select("isCrossRepository") as any
      }
}


/**
 * A public description of a Marketplace category.
 */
export class MarketplaceCategory extends $Base<"MarketplaceCategory"> {
  constructor() {
    super("MarketplaceCategory")
  }

  
      
/**
 * The category's description.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * The technical description of how apps listed in this category work with GitHub.
 */
      get howItWorks(): $Field<"howItWorks", string | null | undefined>  {
       return this.$_select("howItWorks") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The category's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * How many Marketplace listings have this as their primary category.
 */
      get primaryListingCount(): $Field<"primaryListingCount", number>  {
       return this.$_select("primaryListingCount") as any
      }

      
/**
 * The HTTP path for this Marketplace category.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * How many Marketplace listings have this as their secondary category.
 */
      get secondaryListingCount(): $Field<"secondaryListingCount", number>  {
       return this.$_select("secondaryListingCount") as any
      }

      
/**
 * The short name of the category used in its URL.
 */
      get slug(): $Field<"slug", string>  {
       return this.$_select("slug") as any
      }

      
/**
 * The HTTP URL for this Marketplace category.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * A listing in the GitHub integration marketplace.
 */
export class MarketplaceListing extends $Base<"MarketplaceListing"> {
  constructor() {
    super("MarketplaceListing")
  }

  
      
/**
 * The GitHub App this listing represents.
 */
      app<Sel extends Selection<App>>(selectorFn: (s: App) => [...Sel]):$Field<"app", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new App)
      };
      return this.$_select("app", options) as any
    }
  

      
/**
 * URL to the listing owner's company site.
 */
      get companyUrl(): $Field<"companyUrl", string | null | undefined>  {
       return this.$_select("companyUrl") as any
      }

      
/**
 * The HTTP path for configuring access to the listing's integration or OAuth app
 */
      get configurationResourcePath(): $Field<"configurationResourcePath", string>  {
       return this.$_select("configurationResourcePath") as any
      }

      
/**
 * The HTTP URL for configuring access to the listing's integration or OAuth app
 */
      get configurationUrl(): $Field<"configurationUrl", string>  {
       return this.$_select("configurationUrl") as any
      }

      
/**
 * URL to the listing's documentation.
 */
      get documentationUrl(): $Field<"documentationUrl", string | null | undefined>  {
       return this.$_select("documentationUrl") as any
      }

      
/**
 * The listing's detailed description.
 */
      get extendedDescription(): $Field<"extendedDescription", string | null | undefined>  {
       return this.$_select("extendedDescription") as any
      }

      
/**
 * The listing's detailed description rendered to HTML.
 */
      get extendedDescriptionHTML(): $Field<"extendedDescriptionHTML", string>  {
       return this.$_select("extendedDescriptionHTML") as any
      }

      
/**
 * The listing's introductory description.
 */
      get fullDescription(): $Field<"fullDescription", string>  {
       return this.$_select("fullDescription") as any
      }

      
/**
 * The listing's introductory description rendered to HTML.
 */
      get fullDescriptionHTML(): $Field<"fullDescriptionHTML", string>  {
       return this.$_select("fullDescriptionHTML") as any
      }

      
/**
 * Does this listing have any plans with a free trial?
 */
      get hasPublishedFreeTrialPlans(): $Field<"hasPublishedFreeTrialPlans", boolean>  {
       return this.$_select("hasPublishedFreeTrialPlans") as any
      }

      
/**
 * Does this listing have a terms of service link?
 */
      get hasTermsOfService(): $Field<"hasTermsOfService", boolean>  {
       return this.$_select("hasTermsOfService") as any
      }

      
/**
 * Whether the creator of the app is a verified org
 */
      get hasVerifiedOwner(): $Field<"hasVerifiedOwner", boolean>  {
       return this.$_select("hasVerifiedOwner") as any
      }

      
/**
 * A technical description of how this app works with GitHub.
 */
      get howItWorks(): $Field<"howItWorks", string | null | undefined>  {
       return this.$_select("howItWorks") as any
      }

      
/**
 * The listing's technical description rendered to HTML.
 */
      get howItWorksHTML(): $Field<"howItWorksHTML", string>  {
       return this.$_select("howItWorksHTML") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * URL to install the product to the viewer's account or organization.
 */
      get installationUrl(): $Field<"installationUrl", string | null | undefined>  {
       return this.$_select("installationUrl") as any
      }

      
/**
 * Whether this listing's app has been installed for the current viewer
 */
      get installedForViewer(): $Field<"installedForViewer", boolean>  {
       return this.$_select("installedForViewer") as any
      }

      
/**
 * Whether this listing has been removed from the Marketplace.
 */
      get isArchived(): $Field<"isArchived", boolean>  {
       return this.$_select("isArchived") as any
      }

      
/**
 * Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace.
 */
      get isDraft(): $Field<"isDraft", boolean>  {
       return this.$_select("isDraft") as any
      }

      
/**
 * Whether the product this listing represents is available as part of a paid plan.
 */
      get isPaid(): $Field<"isPaid", boolean>  {
       return this.$_select("isPaid") as any
      }

      
/**
 * Whether this listing has been approved for display in the Marketplace.
 */
      get isPublic(): $Field<"isPublic", boolean>  {
       return this.$_select("isPublic") as any
      }

      
/**
 * Whether this listing has been rejected by GitHub for display in the Marketplace.
 */
      get isRejected(): $Field<"isRejected", boolean>  {
       return this.$_select("isRejected") as any
      }

      
/**
 * Whether this listing has been approved for unverified display in the Marketplace.
 */
      get isUnverified(): $Field<"isUnverified", boolean>  {
       return this.$_select("isUnverified") as any
      }

      
/**
 * Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
 */
      get isUnverifiedPending(): $Field<"isUnverifiedPending", boolean>  {
       return this.$_select("isUnverifiedPending") as any
      }

      
/**
 * Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
 */
      get isVerificationPendingFromDraft(): $Field<"isVerificationPendingFromDraft", boolean>  {
       return this.$_select("isVerificationPendingFromDraft") as any
      }

      
/**
 * Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
 */
      get isVerificationPendingFromUnverified(): $Field<"isVerificationPendingFromUnverified", boolean>  {
       return this.$_select("isVerificationPendingFromUnverified") as any
      }

      
/**
 * Whether this listing has been approved for verified display in the Marketplace.
 */
      get isVerified(): $Field<"isVerified", boolean>  {
       return this.$_select("isVerified") as any
      }

      
/**
 * The hex color code, without the leading '#', for the logo background.
 */
      get logoBackgroundColor(): $Field<"logoBackgroundColor", string>  {
       return this.$_select("logoBackgroundColor") as any
      }

      
/**
 * URL for the listing's logo image.
 */
      logoUrl<Args extends VariabledInput<{
        size?: number | null | undefined,
      }>>(args: Args):$Field<"logoUrl", string | null | undefined , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              size: "Int"
            },
        args,

        
      };
      return this.$_select("logoUrl", options) as any
    }
  

      
/**
 * The listing's full name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The listing's very short description without a trailing period or ampersands.
 */
      get normalizedShortDescription(): $Field<"normalizedShortDescription", string>  {
       return this.$_select("normalizedShortDescription") as any
      }

      
/**
 * URL to the listing's detailed pricing.
 */
      get pricingUrl(): $Field<"pricingUrl", string | null | undefined>  {
       return this.$_select("pricingUrl") as any
      }

      
/**
 * The category that best describes the listing.
 */
      primaryCategory<Sel extends Selection<MarketplaceCategory>>(selectorFn: (s: MarketplaceCategory) => [...Sel]):$Field<"primaryCategory", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new MarketplaceCategory)
      };
      return this.$_select("primaryCategory", options) as any
    }
  

      
/**
 * URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
 */
      get privacyPolicyUrl(): $Field<"privacyPolicyUrl", string>  {
       return this.$_select("privacyPolicyUrl") as any
      }

      
/**
 * The HTTP path for the Marketplace listing.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The URLs for the listing's screenshots.
 */
      get screenshotUrls(): $Field<"screenshotUrls", Readonly<Array<string | null | undefined>>>  {
       return this.$_select("screenshotUrls") as any
      }

      
/**
 * An alternate category that describes the listing.
 */
      secondaryCategory<Sel extends Selection<MarketplaceCategory>>(selectorFn: (s: MarketplaceCategory) => [...Sel]):$Field<"secondaryCategory", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new MarketplaceCategory)
      };
      return this.$_select("secondaryCategory", options) as any
    }
  

      
/**
 * The listing's very short description.
 */
      get shortDescription(): $Field<"shortDescription", string>  {
       return this.$_select("shortDescription") as any
      }

      
/**
 * The short name of the listing used in its URL.
 */
      get slug(): $Field<"slug", string>  {
       return this.$_select("slug") as any
      }

      
/**
 * URL to the listing's status page.
 */
      get statusUrl(): $Field<"statusUrl", string | null | undefined>  {
       return this.$_select("statusUrl") as any
      }

      
/**
 * An email address for support for this listing's app.
 */
      get supportEmail(): $Field<"supportEmail", string | null | undefined>  {
       return this.$_select("supportEmail") as any
      }

      
/**
 * Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL.
 */
      get supportUrl(): $Field<"supportUrl", string>  {
       return this.$_select("supportUrl") as any
      }

      
/**
 * URL to the listing's terms of service.
 */
      get termsOfServiceUrl(): $Field<"termsOfServiceUrl", string | null | undefined>  {
       return this.$_select("termsOfServiceUrl") as any
      }

      
/**
 * The HTTP URL for the Marketplace listing.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * Can the current viewer add plans for this Marketplace listing.
 */
      get viewerCanAddPlans(): $Field<"viewerCanAddPlans", boolean>  {
       return this.$_select("viewerCanAddPlans") as any
      }

      
/**
 * Can the current viewer approve this Marketplace listing.
 */
      get viewerCanApprove(): $Field<"viewerCanApprove", boolean>  {
       return this.$_select("viewerCanApprove") as any
      }

      
/**
 * Can the current viewer delist this Marketplace listing.
 */
      get viewerCanDelist(): $Field<"viewerCanDelist", boolean>  {
       return this.$_select("viewerCanDelist") as any
      }

      
/**
 * Can the current viewer edit this Marketplace listing.
 */
      get viewerCanEdit(): $Field<"viewerCanEdit", boolean>  {
       return this.$_select("viewerCanEdit") as any
      }

      
/**
 * Can the current viewer edit the primary and secondary category of this
Marketplace listing.

 */
      get viewerCanEditCategories(): $Field<"viewerCanEditCategories", boolean>  {
       return this.$_select("viewerCanEditCategories") as any
      }

      
/**
 * Can the current viewer edit the plans for this Marketplace listing.
 */
      get viewerCanEditPlans(): $Field<"viewerCanEditPlans", boolean>  {
       return this.$_select("viewerCanEditPlans") as any
      }

      
/**
 * Can the current viewer return this Marketplace listing to draft state
so it becomes editable again.

 */
      get viewerCanRedraft(): $Field<"viewerCanRedraft", boolean>  {
       return this.$_select("viewerCanRedraft") as any
      }

      
/**
 * Can the current viewer reject this Marketplace listing by returning it to
an editable draft state or rejecting it entirely.

 */
      get viewerCanReject(): $Field<"viewerCanReject", boolean>  {
       return this.$_select("viewerCanReject") as any
      }

      
/**
 * Can the current viewer request this listing be reviewed for display in
the Marketplace as verified.

 */
      get viewerCanRequestApproval(): $Field<"viewerCanRequestApproval", boolean>  {
       return this.$_select("viewerCanRequestApproval") as any
      }

      
/**
 * Indicates whether the current user has an active subscription to this Marketplace listing.

 */
      get viewerHasPurchased(): $Field<"viewerHasPurchased", boolean>  {
       return this.$_select("viewerHasPurchased") as any
      }

      
/**
 * Indicates if the current user has purchased a subscription to this Marketplace listing
for all of the organizations the user owns.

 */
      get viewerHasPurchasedForAllOrganizations(): $Field<"viewerHasPurchasedForAllOrganizations", boolean>  {
       return this.$_select("viewerHasPurchasedForAllOrganizations") as any
      }

      
/**
 * Does the current viewer role allow them to administer this Marketplace listing.

 */
      get viewerIsListingAdmin(): $Field<"viewerIsListingAdmin", boolean>  {
       return this.$_select("viewerIsListingAdmin") as any
      }
}


/**
 * Look up Marketplace Listings
 */
export class MarketplaceListingConnection extends $Base<"MarketplaceListingConnection"> {
  constructor() {
    super("MarketplaceListingConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<MarketplaceListingEdge>>(selectorFn: (s: MarketplaceListingEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new MarketplaceListingEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<MarketplaceListing>>(selectorFn: (s: MarketplaceListing) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new MarketplaceListing)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class MarketplaceListingEdge extends $Base<"MarketplaceListingEdge"> {
  constructor() {
    super("MarketplaceListingEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<MarketplaceListing>>(selectorFn: (s: MarketplaceListing) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new MarketplaceListing)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Entities that have members who can set status messages.
 */
export class MemberStatusable extends $Interface<{Organization: Organization,Team: Team}, "MemberStatusable"> {
  constructor() {
    super({Organization: Organization,Team: Team}, "MemberStatusable")
  }
}


/**
 * Audit log entry for a members_can_delete_repos.clear event.
 */
export class MembersCanDeleteReposClearAuditEntry extends $Base<"MembersCanDeleteReposClearAuditEntry"> {
  constructor() {
    super("MembersCanDeleteReposClearAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The HTTP path for this enterprise.
 */
      get enterpriseResourcePath(): $Field<"enterpriseResourcePath", string | null | undefined>  {
       return this.$_select("enterpriseResourcePath") as any
      }

      
/**
 * The slug of the enterprise.
 */
      get enterpriseSlug(): $Field<"enterpriseSlug", string | null | undefined>  {
       return this.$_select("enterpriseSlug") as any
      }

      
/**
 * The HTTP URL for this enterprise.
 */
      get enterpriseUrl(): $Field<"enterpriseUrl", string | null | undefined>  {
       return this.$_select("enterpriseUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a members_can_delete_repos.disable event.
 */
export class MembersCanDeleteReposDisableAuditEntry extends $Base<"MembersCanDeleteReposDisableAuditEntry"> {
  constructor() {
    super("MembersCanDeleteReposDisableAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The HTTP path for this enterprise.
 */
      get enterpriseResourcePath(): $Field<"enterpriseResourcePath", string | null | undefined>  {
       return this.$_select("enterpriseResourcePath") as any
      }

      
/**
 * The slug of the enterprise.
 */
      get enterpriseSlug(): $Field<"enterpriseSlug", string | null | undefined>  {
       return this.$_select("enterpriseSlug") as any
      }

      
/**
 * The HTTP URL for this enterprise.
 */
      get enterpriseUrl(): $Field<"enterpriseUrl", string | null | undefined>  {
       return this.$_select("enterpriseUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a members_can_delete_repos.enable event.
 */
export class MembersCanDeleteReposEnableAuditEntry extends $Base<"MembersCanDeleteReposEnableAuditEntry"> {
  constructor() {
    super("MembersCanDeleteReposEnableAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The HTTP path for this enterprise.
 */
      get enterpriseResourcePath(): $Field<"enterpriseResourcePath", string | null | undefined>  {
       return this.$_select("enterpriseResourcePath") as any
      }

      
/**
 * The slug of the enterprise.
 */
      get enterpriseSlug(): $Field<"enterpriseSlug", string | null | undefined>  {
       return this.$_select("enterpriseSlug") as any
      }

      
/**
 * The HTTP URL for this enterprise.
 */
      get enterpriseUrl(): $Field<"enterpriseUrl", string | null | undefined>  {
       return this.$_select("enterpriseUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Represents a 'mentioned' event on a given issue or pull request.
 */
export class MentionedEvent extends $Base<"MentionedEvent"> {
  constructor() {
    super("MentionedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }
}


/**
 * Autogenerated input type of MergeBranch
 */
export type MergeBranchInput = {
  authorEmail?: string | null | undefined,
base: string,
clientMutationId?: string | null | undefined,
commitMessage?: string | null | undefined,
head: string,
repositoryId: string
}
    


/**
 * Autogenerated return type of MergeBranch
 */
export class MergeBranchPayload extends $Base<"MergeBranchPayload"> {
  constructor() {
    super("MergeBranchPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The resulting merge Commit.
 */
      mergeCommit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"mergeCommit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("mergeCommit", options) as any
    }
  
}

  
/**
 * The possible default commit messages for merges.
 */
export enum MergeCommitMessage {
  
/**
 * Default to the pull request's title.
 */
  PR_TITLE = "PR_TITLE",

/**
 * Default to the pull request's body.
 */
  PR_BODY = "PR_BODY",

/**
 * Default to a blank commit message.
 */
  BLANK = "BLANK"
}
  

  
/**
 * The possible default commit titles for merges.
 */
export enum MergeCommitTitle {
  
/**
 * Default to the pull request's title.
 */
  PR_TITLE = "PR_TITLE",

/**
 * Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
 */
  MERGE_MESSAGE = "MERGE_MESSAGE"
}
  


/**
 * Autogenerated input type of MergePullRequest
 */
export type MergePullRequestInput = {
  authorEmail?: string | null | undefined,
clientMutationId?: string | null | undefined,
commitBody?: string | null | undefined,
commitHeadline?: string | null | undefined,
expectedHeadOid?: string | null | undefined,
mergeMethod?: PullRequestMergeMethod | null | undefined,
pullRequestId: string
}
    


/**
 * Autogenerated return type of MergePullRequest
 */
export class MergePullRequestPayload extends $Base<"MergePullRequestPayload"> {
  constructor() {
    super("MergePullRequestPayload")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The pull request that was merged.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}

  
/**
 * Whether or not a PullRequest can be merged.
 */
export enum MergeableState {
  
/**
 * The pull request can be merged.
 */
  MERGEABLE = "MERGEABLE",

/**
 * The pull request cannot be merged due to merge conflicts.
 */
  CONFLICTING = "CONFLICTING",

/**
 * The mergeability of the pull request is still being calculated.
 */
  UNKNOWN = "UNKNOWN"
}
  


/**
 * Represents a 'merged' event on a given pull request.
 */
export class MergedEvent extends $Base<"MergedEvent"> {
  constructor() {
    super("MergedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the commit associated with the `merge` event.
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the Ref associated with the `merge` event.
 */
      mergeRef<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"mergeRef", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("mergeRef", options) as any
    }
  

      
/**
 * Identifies the name of the Ref associated with the `merge` event.
 */
      get mergeRefName(): $Field<"mergeRefName", string>  {
       return this.$_select("mergeRefName") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The HTTP path for this merged event.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for this merged event.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * Represents an Octoshift migration.
 */
export class Migration extends $Interface<{RepositoryMigration: RepositoryMigration}, "Migration"> {
  constructor() {
    super({RepositoryMigration: RepositoryMigration}, "Migration")
  }
}


/**
 * An Octoshift migration source.
 */
export class MigrationSource extends $Base<"MigrationSource"> {
  constructor() {
    super("MigrationSource")
  }

  
      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The Octoshift migration source name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The Octoshift migration source type.
 */
      get type(): $Field<"type", MigrationSourceType>  {
       return this.$_select("type") as any
      }

      
/**
 * The Octoshift migration source URL.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}

  
/**
 * Represents the different Octoshift migration sources.
 */
export enum MigrationSourceType {
  
/**
 * An Azure DevOps migration source.
 */
  AZURE_DEVOPS = "AZURE_DEVOPS",

/**
 * A Bitbucket Server migration source.
 */
  BITBUCKET_SERVER = "BITBUCKET_SERVER",

/**
 * A GitHub Migration API source.
 */
  GITHUB_ARCHIVE = "GITHUB_ARCHIVE"
}
  

  
/**
 * The Octoshift migration state.
 */
export enum MigrationState {
  
/**
 * The Octoshift migration has not started.
 */
  NOT_STARTED = "NOT_STARTED",

/**
 * The Octoshift migration has been queued.
 */
  QUEUED = "QUEUED",

/**
 * The Octoshift migration is in progress.
 */
  IN_PROGRESS = "IN_PROGRESS",

/**
 * The Octoshift migration has succeeded.
 */
  SUCCEEDED = "SUCCEEDED",

/**
 * The Octoshift migration has failed.
 */
  FAILED = "FAILED",

/**
 * The Octoshift migration needs to have its credentials validated.
 */
  PENDING_VALIDATION = "PENDING_VALIDATION",

/**
 * The Octoshift migration has invalid credentials.
 */
  FAILED_VALIDATION = "FAILED_VALIDATION"
}
  


/**
 * Represents a Milestone object on a given repository.
 */
export class Milestone extends $Base<"Milestone"> {
  constructor() {
    super("Milestone")
  }

  
      
/**
 * `true` if the object is closed (definition of closed may depend on type)
 */
      get closed(): $Field<"closed", boolean>  {
       return this.$_select("closed") as any
      }

      
/**
 * Identifies the date and time when the object was closed.
 */
      get closedAt(): $Field<"closedAt", string | null | undefined>  {
       return this.$_select("closedAt") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the actor who created the milestone.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the description of the milestone.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * Identifies the due date of the milestone.
 */
      get dueOn(): $Field<"dueOn", string | null | undefined>  {
       return this.$_select("dueOn") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * A list of issues associated with the milestone.
 */
      issues<Args extends VariabledInput<{
        orderBy?: IssueOrder | null | undefined
labels?: Readonly<Array<string>> | null | undefined
states?: Readonly<Array<IssueState>> | null | undefined
filterBy?: IssueFilters | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<IssueConnection>>(args: Args, selectorFn: (s: IssueConnection) => [...Sel]):$Field<"issues", GetOutput<Sel> , GetVariables<Sel, Args>>
issues<Sel extends Selection<IssueConnection>>(selectorFn: (s: IssueConnection) => [...Sel]):$Field<"issues", GetOutput<Sel> , GetVariables<Sel>>
issues(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "IssueOrder",
labels: "[String!]",
states: "[IssueState!]",
filterBy: "IssueFilters",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new IssueConnection)
      };
      return this.$_select("issues", options) as any
    }
  

      
/**
 * Identifies the number of the milestone.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * Identifies the percentage complete for the milestone
 */
      get progressPercentage(): $Field<"progressPercentage", number>  {
       return this.$_select("progressPercentage") as any
      }

      
/**
 * A list of pull requests associated with the milestone.
 */
      pullRequests<Args extends VariabledInput<{
        states?: Readonly<Array<PullRequestState>> | null | undefined
labels?: Readonly<Array<string>> | null | undefined
headRefName?: string | null | undefined
baseRefName?: string | null | undefined
orderBy?: IssueOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestConnection>>(args: Args, selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"pullRequests", GetOutput<Sel> , GetVariables<Sel, Args>>
pullRequests<Sel extends Selection<PullRequestConnection>>(selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"pullRequests", GetOutput<Sel> , GetVariables<Sel>>
pullRequests(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              states: "[PullRequestState!]",
labels: "[String!]",
headRefName: "String",
baseRefName: "String",
orderBy: "IssueOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestConnection)
      };
      return this.$_select("pullRequests", options) as any
    }
  

      
/**
 * The repository associated with this milestone.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for this milestone
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the state of the milestone.
 */
      get state(): $Field<"state", MilestoneState>  {
       return this.$_select("state") as any
      }

      
/**
 * Identifies the title of the milestone.
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this milestone
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * The connection type for Milestone.
 */
export class MilestoneConnection extends $Base<"MilestoneConnection"> {
  constructor() {
    super("MilestoneConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<MilestoneEdge>>(selectorFn: (s: MilestoneEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new MilestoneEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Milestone>>(selectorFn: (s: Milestone) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Milestone)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class MilestoneEdge extends $Base<"MilestoneEdge"> {
  constructor() {
    super("MilestoneEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Milestone>>(selectorFn: (s: Milestone) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Milestone)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Types that can be inside a Milestone.
 */
export class MilestoneItem extends $Union<{Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner}, "MilestoneItem"> {
  constructor() {
    super({Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner})
  }
}


/**
 * Ordering options for milestone connections.
 */
export type MilestoneOrder = {
  direction: OrderDirection,
field: MilestoneOrderField
}
    

  
/**
 * Properties by which milestone connections can be ordered.
 */
export enum MilestoneOrderField {
  
/**
 * Order milestones by when they are due.
 */
  DUE_DATE = "DUE_DATE",

/**
 * Order milestones by when they were created.
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order milestones by when they were last updated.
 */
  UPDATED_AT = "UPDATED_AT",

/**
 * Order milestones by their number.
 */
  NUMBER = "NUMBER"
}
  

  
/**
 * The possible states of a milestone.
 */
export enum MilestoneState {
  
/**
 * A milestone that is still open.
 */
  OPEN = "OPEN",

/**
 * A milestone that has been closed.
 */
  CLOSED = "CLOSED"
}
  


/**
 * Represents a 'milestoned' event on a given issue or pull request.
 */
export class MilestonedEvent extends $Base<"MilestonedEvent"> {
  constructor() {
    super("MilestonedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the milestone title associated with the 'milestoned' event.
 */
      get milestoneTitle(): $Field<"milestoneTitle", string>  {
       return this.$_select("milestoneTitle") as any
      }

      
/**
 * Object referenced by event.
 */
      subject<Sel extends Selection<MilestoneItem>>(selectorFn: (s: MilestoneItem) => [...Sel]):$Field<"subject", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new MilestoneItem)
      };
      return this.$_select("subject", options) as any
    }
  
}


/**
 * Entities that can be minimized.
 */
export class Minimizable extends $Interface<{CommitComment: CommitComment,DiscussionComment: DiscussionComment,GistComment: GistComment,IssueComment: IssueComment,PullRequestReviewComment: PullRequestReviewComment}, "Minimizable"> {
  constructor() {
    super({CommitComment: CommitComment,DiscussionComment: DiscussionComment,GistComment: GistComment,IssueComment: IssueComment,PullRequestReviewComment: PullRequestReviewComment}, "Minimizable")
  }
}


/**
 * Autogenerated input type of MinimizeComment
 */
export type MinimizeCommentInput = {
  classifier: ReportedContentClassifiers,
clientMutationId?: string | null | undefined,
subjectId: string
}
    


/**
 * Autogenerated return type of MinimizeComment
 */
export class MinimizeCommentPayload extends $Base<"MinimizeCommentPayload"> {
  constructor() {
    super("MinimizeCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The comment that was minimized.
 */
      minimizedComment<Sel extends Selection<Minimizable>>(selectorFn: (s: Minimizable) => [...Sel]):$Field<"minimizedComment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Minimizable)
      };
      return this.$_select("minimizedComment", options) as any
    }
  
}


/**
 * Autogenerated input type of MoveProjectCard
 */
export type MoveProjectCardInput = {
  afterCardId?: string | null | undefined,
cardId: string,
clientMutationId?: string | null | undefined,
columnId: string
}
    


/**
 * Autogenerated return type of MoveProjectCard
 */
export class MoveProjectCardPayload extends $Base<"MoveProjectCardPayload"> {
  constructor() {
    super("MoveProjectCardPayload")
  }

  
      
/**
 * The new edge of the moved card.
 */
      cardEdge<Sel extends Selection<ProjectCardEdge>>(selectorFn: (s: ProjectCardEdge) => [...Sel]):$Field<"cardEdge", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectCardEdge)
      };
      return this.$_select("cardEdge", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of MoveProjectColumn
 */
export type MoveProjectColumnInput = {
  afterColumnId?: string | null | undefined,
clientMutationId?: string | null | undefined,
columnId: string
}
    


/**
 * Autogenerated return type of MoveProjectColumn
 */
export class MoveProjectColumnPayload extends $Base<"MoveProjectColumnPayload"> {
  constructor() {
    super("MoveProjectColumnPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new edge of the moved column.
 */
      columnEdge<Sel extends Selection<ProjectColumnEdge>>(selectorFn: (s: ProjectColumnEdge) => [...Sel]):$Field<"columnEdge", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectColumnEdge)
      };
      return this.$_select("columnEdge", options) as any
    }
  
}


/**
 * Represents a 'moved_columns_in_project' event on a given issue or pull request.
 */
export class MovedColumnsInProjectEvent extends $Base<"MovedColumnsInProjectEvent"> {
  constructor() {
    super("MovedColumnsInProjectEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }
}


/**
 * The root query for implementing GraphQL mutations.
 */
export class Mutation extends $Base<"Mutation"> {
  constructor() {
    super("Mutation")
  }

  
      
/**
 * Clear all of a customer's queued migrations
 */
      abortQueuedMigrations<Args extends VariabledInput<{
        input: AbortQueuedMigrationsInput,
      }>,Sel extends Selection<AbortQueuedMigrationsPayload>>(args: Args, selectorFn: (s: AbortQueuedMigrationsPayload) => [...Sel]):$Field<"abortQueuedMigrations", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AbortQueuedMigrationsInput!"
            },
        args,

        selection: selectorFn(new AbortQueuedMigrationsPayload)
      };
      return this.$_select("abortQueuedMigrations", options) as any
    }
  

      
/**
 * Accepts a pending invitation for a user to become an administrator of an enterprise.
 */
      acceptEnterpriseAdministratorInvitation<Args extends VariabledInput<{
        input: AcceptEnterpriseAdministratorInvitationInput,
      }>,Sel extends Selection<AcceptEnterpriseAdministratorInvitationPayload>>(args: Args, selectorFn: (s: AcceptEnterpriseAdministratorInvitationPayload) => [...Sel]):$Field<"acceptEnterpriseAdministratorInvitation", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AcceptEnterpriseAdministratorInvitationInput!"
            },
        args,

        selection: selectorFn(new AcceptEnterpriseAdministratorInvitationPayload)
      };
      return this.$_select("acceptEnterpriseAdministratorInvitation", options) as any
    }
  

      
/**
 * Applies a suggested topic to the repository.
 */
      acceptTopicSuggestion<Args extends VariabledInput<{
        input: AcceptTopicSuggestionInput,
      }>,Sel extends Selection<AcceptTopicSuggestionPayload>>(args: Args, selectorFn: (s: AcceptTopicSuggestionPayload) => [...Sel]):$Field<"acceptTopicSuggestion", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AcceptTopicSuggestionInput!"
            },
        args,

        selection: selectorFn(new AcceptTopicSuggestionPayload)
      };
      return this.$_select("acceptTopicSuggestion", options) as any
    }
  

      
/**
 * Adds assignees to an assignable object.
 */
      addAssigneesToAssignable<Args extends VariabledInput<{
        input: AddAssigneesToAssignableInput,
      }>,Sel extends Selection<AddAssigneesToAssignablePayload>>(args: Args, selectorFn: (s: AddAssigneesToAssignablePayload) => [...Sel]):$Field<"addAssigneesToAssignable", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddAssigneesToAssignableInput!"
            },
        args,

        selection: selectorFn(new AddAssigneesToAssignablePayload)
      };
      return this.$_select("addAssigneesToAssignable", options) as any
    }
  

      
/**
 * Adds a comment to an Issue or Pull Request.
 */
      addComment<Args extends VariabledInput<{
        input: AddCommentInput,
      }>,Sel extends Selection<AddCommentPayload>>(args: Args, selectorFn: (s: AddCommentPayload) => [...Sel]):$Field<"addComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddCommentInput!"
            },
        args,

        selection: selectorFn(new AddCommentPayload)
      };
      return this.$_select("addComment", options) as any
    }
  

      
/**
 * Adds a comment to a Discussion, possibly as a reply to another comment.
 */
      addDiscussionComment<Args extends VariabledInput<{
        input: AddDiscussionCommentInput,
      }>,Sel extends Selection<AddDiscussionCommentPayload>>(args: Args, selectorFn: (s: AddDiscussionCommentPayload) => [...Sel]):$Field<"addDiscussionComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddDiscussionCommentInput!"
            },
        args,

        selection: selectorFn(new AddDiscussionCommentPayload)
      };
      return this.$_select("addDiscussionComment", options) as any
    }
  

      
/**
 * Vote for an option in a discussion poll.
 */
      addDiscussionPollVote<Args extends VariabledInput<{
        input: AddDiscussionPollVoteInput,
      }>,Sel extends Selection<AddDiscussionPollVotePayload>>(args: Args, selectorFn: (s: AddDiscussionPollVotePayload) => [...Sel]):$Field<"addDiscussionPollVote", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddDiscussionPollVoteInput!"
            },
        args,

        selection: selectorFn(new AddDiscussionPollVotePayload)
      };
      return this.$_select("addDiscussionPollVote", options) as any
    }
  

      
/**
 * Adds a support entitlement to an enterprise member.
 */
      addEnterpriseSupportEntitlement<Args extends VariabledInput<{
        input: AddEnterpriseSupportEntitlementInput,
      }>,Sel extends Selection<AddEnterpriseSupportEntitlementPayload>>(args: Args, selectorFn: (s: AddEnterpriseSupportEntitlementPayload) => [...Sel]):$Field<"addEnterpriseSupportEntitlement", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddEnterpriseSupportEntitlementInput!"
            },
        args,

        selection: selectorFn(new AddEnterpriseSupportEntitlementPayload)
      };
      return this.$_select("addEnterpriseSupportEntitlement", options) as any
    }
  

      
/**
 * Adds labels to a labelable object.
 */
      addLabelsToLabelable<Args extends VariabledInput<{
        input: AddLabelsToLabelableInput,
      }>,Sel extends Selection<AddLabelsToLabelablePayload>>(args: Args, selectorFn: (s: AddLabelsToLabelablePayload) => [...Sel]):$Field<"addLabelsToLabelable", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddLabelsToLabelableInput!"
            },
        args,

        selection: selectorFn(new AddLabelsToLabelablePayload)
      };
      return this.$_select("addLabelsToLabelable", options) as any
    }
  

      
/**
 * Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
 */
      addProjectCard<Args extends VariabledInput<{
        input: AddProjectCardInput,
      }>,Sel extends Selection<AddProjectCardPayload>>(args: Args, selectorFn: (s: AddProjectCardPayload) => [...Sel]):$Field<"addProjectCard", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddProjectCardInput!"
            },
        args,

        selection: selectorFn(new AddProjectCardPayload)
      };
      return this.$_select("addProjectCard", options) as any
    }
  

      
/**
 * Adds a column to a Project.
 */
      addProjectColumn<Args extends VariabledInput<{
        input: AddProjectColumnInput,
      }>,Sel extends Selection<AddProjectColumnPayload>>(args: Args, selectorFn: (s: AddProjectColumnPayload) => [...Sel]):$Field<"addProjectColumn", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddProjectColumnInput!"
            },
        args,

        selection: selectorFn(new AddProjectColumnPayload)
      };
      return this.$_select("addProjectColumn", options) as any
    }
  

      
/**
 * Creates a new draft issue and add it to a Project.
 */
      addProjectDraftIssue<Args extends VariabledInput<{
        input: AddProjectDraftIssueInput,
      }>,Sel extends Selection<AddProjectDraftIssuePayload>>(args: Args, selectorFn: (s: AddProjectDraftIssuePayload) => [...Sel]):$Field<"addProjectDraftIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddProjectDraftIssueInput!"
            },
        args,

        selection: selectorFn(new AddProjectDraftIssuePayload)
      };
      return this.$_select("addProjectDraftIssue", options) as any
    }
  

      
/**
 * Adds an existing item (Issue or PullRequest) to a Project.
 */
      addProjectNextItem<Args extends VariabledInput<{
        input: AddProjectNextItemInput,
      }>,Sel extends Selection<AddProjectNextItemPayload>>(args: Args, selectorFn: (s: AddProjectNextItemPayload) => [...Sel]):$Field<"addProjectNextItem", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddProjectNextItemInput!"
            },
        args,

        selection: selectorFn(new AddProjectNextItemPayload)
      };
      return this.$_select("addProjectNextItem", options) as any
    }
  

      
/**
 * Creates a new draft issue and add it to a Project.
 */
      addProjectV2DraftIssue<Args extends VariabledInput<{
        input: AddProjectV2DraftIssueInput,
      }>,Sel extends Selection<AddProjectV2DraftIssuePayload>>(args: Args, selectorFn: (s: AddProjectV2DraftIssuePayload) => [...Sel]):$Field<"addProjectV2DraftIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddProjectV2DraftIssueInput!"
            },
        args,

        selection: selectorFn(new AddProjectV2DraftIssuePayload)
      };
      return this.$_select("addProjectV2DraftIssue", options) as any
    }
  

      
/**
 * Links an existing content instance to a Project.
 */
      addProjectV2ItemById<Args extends VariabledInput<{
        input: AddProjectV2ItemByIdInput,
      }>,Sel extends Selection<AddProjectV2ItemByIdPayload>>(args: Args, selectorFn: (s: AddProjectV2ItemByIdPayload) => [...Sel]):$Field<"addProjectV2ItemById", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddProjectV2ItemByIdInput!"
            },
        args,

        selection: selectorFn(new AddProjectV2ItemByIdPayload)
      };
      return this.$_select("addProjectV2ItemById", options) as any
    }
  

      
/**
 * Adds a review to a Pull Request.
 */
      addPullRequestReview<Args extends VariabledInput<{
        input: AddPullRequestReviewInput,
      }>,Sel extends Selection<AddPullRequestReviewPayload>>(args: Args, selectorFn: (s: AddPullRequestReviewPayload) => [...Sel]):$Field<"addPullRequestReview", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddPullRequestReviewInput!"
            },
        args,

        selection: selectorFn(new AddPullRequestReviewPayload)
      };
      return this.$_select("addPullRequestReview", options) as any
    }
  

      
/**
 * Adds a comment to a review.
 */
      addPullRequestReviewComment<Args extends VariabledInput<{
        input: AddPullRequestReviewCommentInput,
      }>,Sel extends Selection<AddPullRequestReviewCommentPayload>>(args: Args, selectorFn: (s: AddPullRequestReviewCommentPayload) => [...Sel]):$Field<"addPullRequestReviewComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddPullRequestReviewCommentInput!"
            },
        args,

        selection: selectorFn(new AddPullRequestReviewCommentPayload)
      };
      return this.$_select("addPullRequestReviewComment", options) as any
    }
  

      
/**
 * Adds a new thread to a pending Pull Request Review.
 */
      addPullRequestReviewThread<Args extends VariabledInput<{
        input: AddPullRequestReviewThreadInput,
      }>,Sel extends Selection<AddPullRequestReviewThreadPayload>>(args: Args, selectorFn: (s: AddPullRequestReviewThreadPayload) => [...Sel]):$Field<"addPullRequestReviewThread", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddPullRequestReviewThreadInput!"
            },
        args,

        selection: selectorFn(new AddPullRequestReviewThreadPayload)
      };
      return this.$_select("addPullRequestReviewThread", options) as any
    }
  

      
/**
 * Adds a reaction to a subject.
 */
      addReaction<Args extends VariabledInput<{
        input: AddReactionInput,
      }>,Sel extends Selection<AddReactionPayload>>(args: Args, selectorFn: (s: AddReactionPayload) => [...Sel]):$Field<"addReaction", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddReactionInput!"
            },
        args,

        selection: selectorFn(new AddReactionPayload)
      };
      return this.$_select("addReaction", options) as any
    }
  

      
/**
 * Adds a star to a Starrable.
 */
      addStar<Args extends VariabledInput<{
        input: AddStarInput,
      }>,Sel extends Selection<AddStarPayload>>(args: Args, selectorFn: (s: AddStarPayload) => [...Sel]):$Field<"addStar", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddStarInput!"
            },
        args,

        selection: selectorFn(new AddStarPayload)
      };
      return this.$_select("addStar", options) as any
    }
  

      
/**
 * Add an upvote to a discussion or discussion comment.
 */
      addUpvote<Args extends VariabledInput<{
        input: AddUpvoteInput,
      }>,Sel extends Selection<AddUpvotePayload>>(args: Args, selectorFn: (s: AddUpvotePayload) => [...Sel]):$Field<"addUpvote", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddUpvoteInput!"
            },
        args,

        selection: selectorFn(new AddUpvotePayload)
      };
      return this.$_select("addUpvote", options) as any
    }
  

      
/**
 * Adds a verifiable domain to an owning account.
 */
      addVerifiableDomain<Args extends VariabledInput<{
        input: AddVerifiableDomainInput,
      }>,Sel extends Selection<AddVerifiableDomainPayload>>(args: Args, selectorFn: (s: AddVerifiableDomainPayload) => [...Sel]):$Field<"addVerifiableDomain", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "AddVerifiableDomainInput!"
            },
        args,

        selection: selectorFn(new AddVerifiableDomainPayload)
      };
      return this.$_select("addVerifiableDomain", options) as any
    }
  

      
/**
 * Approve all pending deployments under one or more environments
 */
      approveDeployments<Args extends VariabledInput<{
        input: ApproveDeploymentsInput,
      }>,Sel extends Selection<ApproveDeploymentsPayload>>(args: Args, selectorFn: (s: ApproveDeploymentsPayload) => [...Sel]):$Field<"approveDeployments", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "ApproveDeploymentsInput!"
            },
        args,

        selection: selectorFn(new ApproveDeploymentsPayload)
      };
      return this.$_select("approveDeployments", options) as any
    }
  

      
/**
 * Approve a verifiable domain for notification delivery.
 */
      approveVerifiableDomain<Args extends VariabledInput<{
        input: ApproveVerifiableDomainInput,
      }>,Sel extends Selection<ApproveVerifiableDomainPayload>>(args: Args, selectorFn: (s: ApproveVerifiableDomainPayload) => [...Sel]):$Field<"approveVerifiableDomain", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "ApproveVerifiableDomainInput!"
            },
        args,

        selection: selectorFn(new ApproveVerifiableDomainPayload)
      };
      return this.$_select("approveVerifiableDomain", options) as any
    }
  

      
/**
 * Marks a repository as archived.
 */
      archiveRepository<Args extends VariabledInput<{
        input: ArchiveRepositoryInput,
      }>,Sel extends Selection<ArchiveRepositoryPayload>>(args: Args, selectorFn: (s: ArchiveRepositoryPayload) => [...Sel]):$Field<"archiveRepository", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "ArchiveRepositoryInput!"
            },
        args,

        selection: selectorFn(new ArchiveRepositoryPayload)
      };
      return this.$_select("archiveRepository", options) as any
    }
  

      
/**
 * Cancels a pending invitation for an administrator to join an enterprise.
 */
      cancelEnterpriseAdminInvitation<Args extends VariabledInput<{
        input: CancelEnterpriseAdminInvitationInput,
      }>,Sel extends Selection<CancelEnterpriseAdminInvitationPayload>>(args: Args, selectorFn: (s: CancelEnterpriseAdminInvitationPayload) => [...Sel]):$Field<"cancelEnterpriseAdminInvitation", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CancelEnterpriseAdminInvitationInput!"
            },
        args,

        selection: selectorFn(new CancelEnterpriseAdminInvitationPayload)
      };
      return this.$_select("cancelEnterpriseAdminInvitation", options) as any
    }
  

      
/**
 * Cancel an active sponsorship.
 */
      cancelSponsorship<Args extends VariabledInput<{
        input: CancelSponsorshipInput,
      }>,Sel extends Selection<CancelSponsorshipPayload>>(args: Args, selectorFn: (s: CancelSponsorshipPayload) => [...Sel]):$Field<"cancelSponsorship", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CancelSponsorshipInput!"
            },
        args,

        selection: selectorFn(new CancelSponsorshipPayload)
      };
      return this.$_select("cancelSponsorship", options) as any
    }
  

      
/**
 * Update your status on GitHub.
 */
      changeUserStatus<Args extends VariabledInput<{
        input: ChangeUserStatusInput,
      }>,Sel extends Selection<ChangeUserStatusPayload>>(args: Args, selectorFn: (s: ChangeUserStatusPayload) => [...Sel]):$Field<"changeUserStatus", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "ChangeUserStatusInput!"
            },
        args,

        selection: selectorFn(new ChangeUserStatusPayload)
      };
      return this.$_select("changeUserStatus", options) as any
    }
  

      
/**
 * Clears all labels from a labelable object.
 */
      clearLabelsFromLabelable<Args extends VariabledInput<{
        input: ClearLabelsFromLabelableInput,
      }>,Sel extends Selection<ClearLabelsFromLabelablePayload>>(args: Args, selectorFn: (s: ClearLabelsFromLabelablePayload) => [...Sel]):$Field<"clearLabelsFromLabelable", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "ClearLabelsFromLabelableInput!"
            },
        args,

        selection: selectorFn(new ClearLabelsFromLabelablePayload)
      };
      return this.$_select("clearLabelsFromLabelable", options) as any
    }
  

      
/**
 * This mutation clears the value of a field for an item in a Project. Currently only text, number, date, assignees, labels, single-select, iteration and milestone fields are supported.
 */
      clearProjectV2ItemFieldValue<Args extends VariabledInput<{
        input: ClearProjectV2ItemFieldValueInput,
      }>,Sel extends Selection<ClearProjectV2ItemFieldValuePayload>>(args: Args, selectorFn: (s: ClearProjectV2ItemFieldValuePayload) => [...Sel]):$Field<"clearProjectV2ItemFieldValue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "ClearProjectV2ItemFieldValueInput!"
            },
        args,

        selection: selectorFn(new ClearProjectV2ItemFieldValuePayload)
      };
      return this.$_select("clearProjectV2ItemFieldValue", options) as any
    }
  

      
/**
 * Creates a new project by cloning configuration from an existing project.
 */
      cloneProject<Args extends VariabledInput<{
        input: CloneProjectInput,
      }>,Sel extends Selection<CloneProjectPayload>>(args: Args, selectorFn: (s: CloneProjectPayload) => [...Sel]):$Field<"cloneProject", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CloneProjectInput!"
            },
        args,

        selection: selectorFn(new CloneProjectPayload)
      };
      return this.$_select("cloneProject", options) as any
    }
  

      
/**
 * Create a new repository with the same files and directory structure as a template repository.
 */
      cloneTemplateRepository<Args extends VariabledInput<{
        input: CloneTemplateRepositoryInput,
      }>,Sel extends Selection<CloneTemplateRepositoryPayload>>(args: Args, selectorFn: (s: CloneTemplateRepositoryPayload) => [...Sel]):$Field<"cloneTemplateRepository", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CloneTemplateRepositoryInput!"
            },
        args,

        selection: selectorFn(new CloneTemplateRepositoryPayload)
      };
      return this.$_select("cloneTemplateRepository", options) as any
    }
  

      
/**
 * Close an issue.
 */
      closeIssue<Args extends VariabledInput<{
        input: CloseIssueInput,
      }>,Sel extends Selection<CloseIssuePayload>>(args: Args, selectorFn: (s: CloseIssuePayload) => [...Sel]):$Field<"closeIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CloseIssueInput!"
            },
        args,

        selection: selectorFn(new CloseIssuePayload)
      };
      return this.$_select("closeIssue", options) as any
    }
  

      
/**
 * Close a pull request.
 */
      closePullRequest<Args extends VariabledInput<{
        input: ClosePullRequestInput,
      }>,Sel extends Selection<ClosePullRequestPayload>>(args: Args, selectorFn: (s: ClosePullRequestPayload) => [...Sel]):$Field<"closePullRequest", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "ClosePullRequestInput!"
            },
        args,

        selection: selectorFn(new ClosePullRequestPayload)
      };
      return this.$_select("closePullRequest", options) as any
    }
  

      
/**
 * Convert a project note card to one associated with a newly created issue.
 */
      convertProjectCardNoteToIssue<Args extends VariabledInput<{
        input: ConvertProjectCardNoteToIssueInput,
      }>,Sel extends Selection<ConvertProjectCardNoteToIssuePayload>>(args: Args, selectorFn: (s: ConvertProjectCardNoteToIssuePayload) => [...Sel]):$Field<"convertProjectCardNoteToIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "ConvertProjectCardNoteToIssueInput!"
            },
        args,

        selection: selectorFn(new ConvertProjectCardNoteToIssuePayload)
      };
      return this.$_select("convertProjectCardNoteToIssue", options) as any
    }
  

      
/**
 * Converts a pull request to draft
 */
      convertPullRequestToDraft<Args extends VariabledInput<{
        input: ConvertPullRequestToDraftInput,
      }>,Sel extends Selection<ConvertPullRequestToDraftPayload>>(args: Args, selectorFn: (s: ConvertPullRequestToDraftPayload) => [...Sel]):$Field<"convertPullRequestToDraft", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "ConvertPullRequestToDraftInput!"
            },
        args,

        selection: selectorFn(new ConvertPullRequestToDraftPayload)
      };
      return this.$_select("convertPullRequestToDraft", options) as any
    }
  

      
/**
 * Create a new branch protection rule
 */
      createBranchProtectionRule<Args extends VariabledInput<{
        input: CreateBranchProtectionRuleInput,
      }>,Sel extends Selection<CreateBranchProtectionRulePayload>>(args: Args, selectorFn: (s: CreateBranchProtectionRulePayload) => [...Sel]):$Field<"createBranchProtectionRule", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateBranchProtectionRuleInput!"
            },
        args,

        selection: selectorFn(new CreateBranchProtectionRulePayload)
      };
      return this.$_select("createBranchProtectionRule", options) as any
    }
  

      
/**
 * Create a check run.
 */
      createCheckRun<Args extends VariabledInput<{
        input: CreateCheckRunInput,
      }>,Sel extends Selection<CreateCheckRunPayload>>(args: Args, selectorFn: (s: CreateCheckRunPayload) => [...Sel]):$Field<"createCheckRun", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateCheckRunInput!"
            },
        args,

        selection: selectorFn(new CreateCheckRunPayload)
      };
      return this.$_select("createCheckRun", options) as any
    }
  

      
/**
 * Create a check suite
 */
      createCheckSuite<Args extends VariabledInput<{
        input: CreateCheckSuiteInput,
      }>,Sel extends Selection<CreateCheckSuitePayload>>(args: Args, selectorFn: (s: CreateCheckSuitePayload) => [...Sel]):$Field<"createCheckSuite", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateCheckSuiteInput!"
            },
        args,

        selection: selectorFn(new CreateCheckSuitePayload)
      };
      return this.$_select("createCheckSuite", options) as any
    }
  

      
/**
 * Appends a commit to the given branch as the authenticated user.

This mutation creates a commit whose parent is the HEAD of the provided
branch and also updates that branch to point to the new commit.
It can be thought of as similar to `git commit`.

### Locating a Branch

Commits are appended to a `branch` of type `Ref`.
This must refer to a git branch (i.e.  the fully qualified path must
begin with `refs/heads/`, although including this prefix is optional.

Callers may specify the `branch` to commit to either by its global node
ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
more details see the documentation for `CommittableBranch`.

### Describing Changes

`fileChanges` are specified as a `FilesChanges` object describing
`FileAdditions` and `FileDeletions`.

Please see the documentation for `FileChanges` for more information on
how to use this argument to describe any set of file changes.

### Authorship

Similar to the web commit interface, this mutation does not support
specifying the author or committer of the commit and will not add
support for this in the future.

A commit created by a successful execution of this mutation will be
authored by the owner of the credential which authenticates the API
request.  The committer will be identical to that of commits authored
using the web interface.

If you need full control over author and committer information, please
use the Git Database REST API instead.

### Commit Signing

Commits made using this mutation are automatically signed by GitHub if
supported and will be marked as verified in the user interface.

 */
      createCommitOnBranch<Args extends VariabledInput<{
        input: CreateCommitOnBranchInput,
      }>,Sel extends Selection<CreateCommitOnBranchPayload>>(args: Args, selectorFn: (s: CreateCommitOnBranchPayload) => [...Sel]):$Field<"createCommitOnBranch", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateCommitOnBranchInput!"
            },
        args,

        selection: selectorFn(new CreateCommitOnBranchPayload)
      };
      return this.$_select("createCommitOnBranch", options) as any
    }
  

      
/**
 * Create a discussion.
 */
      createDiscussion<Args extends VariabledInput<{
        input: CreateDiscussionInput,
      }>,Sel extends Selection<CreateDiscussionPayload>>(args: Args, selectorFn: (s: CreateDiscussionPayload) => [...Sel]):$Field<"createDiscussion", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateDiscussionInput!"
            },
        args,

        selection: selectorFn(new CreateDiscussionPayload)
      };
      return this.$_select("createDiscussion", options) as any
    }
  

      
/**
 * Creates an organization as part of an enterprise account.
 */
      createEnterpriseOrganization<Args extends VariabledInput<{
        input: CreateEnterpriseOrganizationInput,
      }>,Sel extends Selection<CreateEnterpriseOrganizationPayload>>(args: Args, selectorFn: (s: CreateEnterpriseOrganizationPayload) => [...Sel]):$Field<"createEnterpriseOrganization", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateEnterpriseOrganizationInput!"
            },
        args,

        selection: selectorFn(new CreateEnterpriseOrganizationPayload)
      };
      return this.$_select("createEnterpriseOrganization", options) as any
    }
  

      
/**
 * Creates an environment or simply returns it if already exists.
 */
      createEnvironment<Args extends VariabledInput<{
        input: CreateEnvironmentInput,
      }>,Sel extends Selection<CreateEnvironmentPayload>>(args: Args, selectorFn: (s: CreateEnvironmentPayload) => [...Sel]):$Field<"createEnvironment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateEnvironmentInput!"
            },
        args,

        selection: selectorFn(new CreateEnvironmentPayload)
      };
      return this.$_select("createEnvironment", options) as any
    }
  

      
/**
 * Creates a new IP allow list entry.
 */
      createIpAllowListEntry<Args extends VariabledInput<{
        input: CreateIpAllowListEntryInput,
      }>,Sel extends Selection<CreateIpAllowListEntryPayload>>(args: Args, selectorFn: (s: CreateIpAllowListEntryPayload) => [...Sel]):$Field<"createIpAllowListEntry", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateIpAllowListEntryInput!"
            },
        args,

        selection: selectorFn(new CreateIpAllowListEntryPayload)
      };
      return this.$_select("createIpAllowListEntry", options) as any
    }
  

      
/**
 * Creates a new issue.
 */
      createIssue<Args extends VariabledInput<{
        input: CreateIssueInput,
      }>,Sel extends Selection<CreateIssuePayload>>(args: Args, selectorFn: (s: CreateIssuePayload) => [...Sel]):$Field<"createIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateIssueInput!"
            },
        args,

        selection: selectorFn(new CreateIssuePayload)
      };
      return this.$_select("createIssue", options) as any
    }
  

      
/**
 * Create a branch linked to an issue.
 */
      createLinkedBranch<Args extends VariabledInput<{
        input: CreateLinkedBranchInput,
      }>,Sel extends Selection<CreateLinkedBranchPayload>>(args: Args, selectorFn: (s: CreateLinkedBranchPayload) => [...Sel]):$Field<"createLinkedBranch", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateLinkedBranchInput!"
            },
        args,

        selection: selectorFn(new CreateLinkedBranchPayload)
      };
      return this.$_select("createLinkedBranch", options) as any
    }
  

      
/**
 * Creates an Octoshift migration source.
 */
      createMigrationSource<Args extends VariabledInput<{
        input: CreateMigrationSourceInput,
      }>,Sel extends Selection<CreateMigrationSourcePayload>>(args: Args, selectorFn: (s: CreateMigrationSourcePayload) => [...Sel]):$Field<"createMigrationSource", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateMigrationSourceInput!"
            },
        args,

        selection: selectorFn(new CreateMigrationSourcePayload)
      };
      return this.$_select("createMigrationSource", options) as any
    }
  

      
/**
 * Creates a new project.
 */
      createProject<Args extends VariabledInput<{
        input: CreateProjectInput,
      }>,Sel extends Selection<CreateProjectPayload>>(args: Args, selectorFn: (s: CreateProjectPayload) => [...Sel]):$Field<"createProject", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateProjectInput!"
            },
        args,

        selection: selectorFn(new CreateProjectPayload)
      };
      return this.$_select("createProject", options) as any
    }
  

      
/**
 * Creates a new project.
 */
      createProjectV2<Args extends VariabledInput<{
        input: CreateProjectV2Input,
      }>,Sel extends Selection<CreateProjectV2Payload>>(args: Args, selectorFn: (s: CreateProjectV2Payload) => [...Sel]):$Field<"createProjectV2", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateProjectV2Input!"
            },
        args,

        selection: selectorFn(new CreateProjectV2Payload)
      };
      return this.$_select("createProjectV2", options) as any
    }
  

      
/**
 * Create a new pull request
 */
      createPullRequest<Args extends VariabledInput<{
        input: CreatePullRequestInput,
      }>,Sel extends Selection<CreatePullRequestPayload>>(args: Args, selectorFn: (s: CreatePullRequestPayload) => [...Sel]):$Field<"createPullRequest", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreatePullRequestInput!"
            },
        args,

        selection: selectorFn(new CreatePullRequestPayload)
      };
      return this.$_select("createPullRequest", options) as any
    }
  

      
/**
 * Create a new Git Ref.
 */
      createRef<Args extends VariabledInput<{
        input: CreateRefInput,
      }>,Sel extends Selection<CreateRefPayload>>(args: Args, selectorFn: (s: CreateRefPayload) => [...Sel]):$Field<"createRef", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateRefInput!"
            },
        args,

        selection: selectorFn(new CreateRefPayload)
      };
      return this.$_select("createRef", options) as any
    }
  

      
/**
 * Create a new repository.
 */
      createRepository<Args extends VariabledInput<{
        input: CreateRepositoryInput,
      }>,Sel extends Selection<CreateRepositoryPayload>>(args: Args, selectorFn: (s: CreateRepositoryPayload) => [...Sel]):$Field<"createRepository", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateRepositoryInput!"
            },
        args,

        selection: selectorFn(new CreateRepositoryPayload)
      };
      return this.$_select("createRepository", options) as any
    }
  

      
/**
 * Create a new payment tier for your GitHub Sponsors profile.
 */
      createSponsorsTier<Args extends VariabledInput<{
        input: CreateSponsorsTierInput,
      }>,Sel extends Selection<CreateSponsorsTierPayload>>(args: Args, selectorFn: (s: CreateSponsorsTierPayload) => [...Sel]):$Field<"createSponsorsTier", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateSponsorsTierInput!"
            },
        args,

        selection: selectorFn(new CreateSponsorsTierPayload)
      };
      return this.$_select("createSponsorsTier", options) as any
    }
  

      
/**
 * Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship.
 */
      createSponsorship<Args extends VariabledInput<{
        input: CreateSponsorshipInput,
      }>,Sel extends Selection<CreateSponsorshipPayload>>(args: Args, selectorFn: (s: CreateSponsorshipPayload) => [...Sel]):$Field<"createSponsorship", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateSponsorshipInput!"
            },
        args,

        selection: selectorFn(new CreateSponsorshipPayload)
      };
      return this.$_select("createSponsorship", options) as any
    }
  

      
/**
 * Creates a new team discussion.
 */
      createTeamDiscussion<Args extends VariabledInput<{
        input: CreateTeamDiscussionInput,
      }>,Sel extends Selection<CreateTeamDiscussionPayload>>(args: Args, selectorFn: (s: CreateTeamDiscussionPayload) => [...Sel]):$Field<"createTeamDiscussion", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateTeamDiscussionInput!"
            },
        args,

        selection: selectorFn(new CreateTeamDiscussionPayload)
      };
      return this.$_select("createTeamDiscussion", options) as any
    }
  

      
/**
 * Creates a new team discussion comment.
 */
      createTeamDiscussionComment<Args extends VariabledInput<{
        input: CreateTeamDiscussionCommentInput,
      }>,Sel extends Selection<CreateTeamDiscussionCommentPayload>>(args: Args, selectorFn: (s: CreateTeamDiscussionCommentPayload) => [...Sel]):$Field<"createTeamDiscussionComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "CreateTeamDiscussionCommentInput!"
            },
        args,

        selection: selectorFn(new CreateTeamDiscussionCommentPayload)
      };
      return this.$_select("createTeamDiscussionComment", options) as any
    }
  

      
/**
 * Rejects a suggested topic for the repository.
 */
      declineTopicSuggestion<Args extends VariabledInput<{
        input: DeclineTopicSuggestionInput,
      }>,Sel extends Selection<DeclineTopicSuggestionPayload>>(args: Args, selectorFn: (s: DeclineTopicSuggestionPayload) => [...Sel]):$Field<"declineTopicSuggestion", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeclineTopicSuggestionInput!"
            },
        args,

        selection: selectorFn(new DeclineTopicSuggestionPayload)
      };
      return this.$_select("declineTopicSuggestion", options) as any
    }
  

      
/**
 * Delete a branch protection rule
 */
      deleteBranchProtectionRule<Args extends VariabledInput<{
        input: DeleteBranchProtectionRuleInput,
      }>,Sel extends Selection<DeleteBranchProtectionRulePayload>>(args: Args, selectorFn: (s: DeleteBranchProtectionRulePayload) => [...Sel]):$Field<"deleteBranchProtectionRule", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteBranchProtectionRuleInput!"
            },
        args,

        selection: selectorFn(new DeleteBranchProtectionRulePayload)
      };
      return this.$_select("deleteBranchProtectionRule", options) as any
    }
  

      
/**
 * Deletes a deployment.
 */
      deleteDeployment<Args extends VariabledInput<{
        input: DeleteDeploymentInput,
      }>,Sel extends Selection<DeleteDeploymentPayload>>(args: Args, selectorFn: (s: DeleteDeploymentPayload) => [...Sel]):$Field<"deleteDeployment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteDeploymentInput!"
            },
        args,

        selection: selectorFn(new DeleteDeploymentPayload)
      };
      return this.$_select("deleteDeployment", options) as any
    }
  

      
/**
 * Delete a discussion and all of its replies.
 */
      deleteDiscussion<Args extends VariabledInput<{
        input: DeleteDiscussionInput,
      }>,Sel extends Selection<DeleteDiscussionPayload>>(args: Args, selectorFn: (s: DeleteDiscussionPayload) => [...Sel]):$Field<"deleteDiscussion", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteDiscussionInput!"
            },
        args,

        selection: selectorFn(new DeleteDiscussionPayload)
      };
      return this.$_select("deleteDiscussion", options) as any
    }
  

      
/**
 * Delete a discussion comment. If it has replies, wipe it instead.
 */
      deleteDiscussionComment<Args extends VariabledInput<{
        input: DeleteDiscussionCommentInput,
      }>,Sel extends Selection<DeleteDiscussionCommentPayload>>(args: Args, selectorFn: (s: DeleteDiscussionCommentPayload) => [...Sel]):$Field<"deleteDiscussionComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteDiscussionCommentInput!"
            },
        args,

        selection: selectorFn(new DeleteDiscussionCommentPayload)
      };
      return this.$_select("deleteDiscussionComment", options) as any
    }
  

      
/**
 * Deletes an environment
 */
      deleteEnvironment<Args extends VariabledInput<{
        input: DeleteEnvironmentInput,
      }>,Sel extends Selection<DeleteEnvironmentPayload>>(args: Args, selectorFn: (s: DeleteEnvironmentPayload) => [...Sel]):$Field<"deleteEnvironment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteEnvironmentInput!"
            },
        args,

        selection: selectorFn(new DeleteEnvironmentPayload)
      };
      return this.$_select("deleteEnvironment", options) as any
    }
  

      
/**
 * Deletes an IP allow list entry.
 */
      deleteIpAllowListEntry<Args extends VariabledInput<{
        input: DeleteIpAllowListEntryInput,
      }>,Sel extends Selection<DeleteIpAllowListEntryPayload>>(args: Args, selectorFn: (s: DeleteIpAllowListEntryPayload) => [...Sel]):$Field<"deleteIpAllowListEntry", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteIpAllowListEntryInput!"
            },
        args,

        selection: selectorFn(new DeleteIpAllowListEntryPayload)
      };
      return this.$_select("deleteIpAllowListEntry", options) as any
    }
  

      
/**
 * Deletes an Issue object.
 */
      deleteIssue<Args extends VariabledInput<{
        input: DeleteIssueInput,
      }>,Sel extends Selection<DeleteIssuePayload>>(args: Args, selectorFn: (s: DeleteIssuePayload) => [...Sel]):$Field<"deleteIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteIssueInput!"
            },
        args,

        selection: selectorFn(new DeleteIssuePayload)
      };
      return this.$_select("deleteIssue", options) as any
    }
  

      
/**
 * Deletes an IssueComment object.
 */
      deleteIssueComment<Args extends VariabledInput<{
        input: DeleteIssueCommentInput,
      }>,Sel extends Selection<DeleteIssueCommentPayload>>(args: Args, selectorFn: (s: DeleteIssueCommentPayload) => [...Sel]):$Field<"deleteIssueComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteIssueCommentInput!"
            },
        args,

        selection: selectorFn(new DeleteIssueCommentPayload)
      };
      return this.$_select("deleteIssueComment", options) as any
    }
  

      
/**
 * Unlink a branch from an issue.
 */
      deleteLinkedBranch<Args extends VariabledInput<{
        input: DeleteLinkedBranchInput,
      }>,Sel extends Selection<DeleteLinkedBranchPayload>>(args: Args, selectorFn: (s: DeleteLinkedBranchPayload) => [...Sel]):$Field<"deleteLinkedBranch", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteLinkedBranchInput!"
            },
        args,

        selection: selectorFn(new DeleteLinkedBranchPayload)
      };
      return this.$_select("deleteLinkedBranch", options) as any
    }
  

      
/**
 * Deletes a project.
 */
      deleteProject<Args extends VariabledInput<{
        input: DeleteProjectInput,
      }>,Sel extends Selection<DeleteProjectPayload>>(args: Args, selectorFn: (s: DeleteProjectPayload) => [...Sel]):$Field<"deleteProject", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteProjectInput!"
            },
        args,

        selection: selectorFn(new DeleteProjectPayload)
      };
      return this.$_select("deleteProject", options) as any
    }
  

      
/**
 * Deletes a project card.
 */
      deleteProjectCard<Args extends VariabledInput<{
        input: DeleteProjectCardInput,
      }>,Sel extends Selection<DeleteProjectCardPayload>>(args: Args, selectorFn: (s: DeleteProjectCardPayload) => [...Sel]):$Field<"deleteProjectCard", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteProjectCardInput!"
            },
        args,

        selection: selectorFn(new DeleteProjectCardPayload)
      };
      return this.$_select("deleteProjectCard", options) as any
    }
  

      
/**
 * Deletes a project column.
 */
      deleteProjectColumn<Args extends VariabledInput<{
        input: DeleteProjectColumnInput,
      }>,Sel extends Selection<DeleteProjectColumnPayload>>(args: Args, selectorFn: (s: DeleteProjectColumnPayload) => [...Sel]):$Field<"deleteProjectColumn", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteProjectColumnInput!"
            },
        args,

        selection: selectorFn(new DeleteProjectColumnPayload)
      };
      return this.$_select("deleteProjectColumn", options) as any
    }
  

      
/**
 * Deletes an item from a Project.
 */
      deleteProjectNextItem<Args extends VariabledInput<{
        input: DeleteProjectNextItemInput,
      }>,Sel extends Selection<DeleteProjectNextItemPayload>>(args: Args, selectorFn: (s: DeleteProjectNextItemPayload) => [...Sel]):$Field<"deleteProjectNextItem", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteProjectNextItemInput!"
            },
        args,

        selection: selectorFn(new DeleteProjectNextItemPayload)
      };
      return this.$_select("deleteProjectNextItem", options) as any
    }
  

      
/**
 * Deletes an item from a Project.
 */
      deleteProjectV2Item<Args extends VariabledInput<{
        input: DeleteProjectV2ItemInput,
      }>,Sel extends Selection<DeleteProjectV2ItemPayload>>(args: Args, selectorFn: (s: DeleteProjectV2ItemPayload) => [...Sel]):$Field<"deleteProjectV2Item", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteProjectV2ItemInput!"
            },
        args,

        selection: selectorFn(new DeleteProjectV2ItemPayload)
      };
      return this.$_select("deleteProjectV2Item", options) as any
    }
  

      
/**
 * Deletes a pull request review.
 */
      deletePullRequestReview<Args extends VariabledInput<{
        input: DeletePullRequestReviewInput,
      }>,Sel extends Selection<DeletePullRequestReviewPayload>>(args: Args, selectorFn: (s: DeletePullRequestReviewPayload) => [...Sel]):$Field<"deletePullRequestReview", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeletePullRequestReviewInput!"
            },
        args,

        selection: selectorFn(new DeletePullRequestReviewPayload)
      };
      return this.$_select("deletePullRequestReview", options) as any
    }
  

      
/**
 * Deletes a pull request review comment.
 */
      deletePullRequestReviewComment<Args extends VariabledInput<{
        input: DeletePullRequestReviewCommentInput,
      }>,Sel extends Selection<DeletePullRequestReviewCommentPayload>>(args: Args, selectorFn: (s: DeletePullRequestReviewCommentPayload) => [...Sel]):$Field<"deletePullRequestReviewComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeletePullRequestReviewCommentInput!"
            },
        args,

        selection: selectorFn(new DeletePullRequestReviewCommentPayload)
      };
      return this.$_select("deletePullRequestReviewComment", options) as any
    }
  

      
/**
 * Delete a Git Ref.
 */
      deleteRef<Args extends VariabledInput<{
        input: DeleteRefInput,
      }>,Sel extends Selection<DeleteRefPayload>>(args: Args, selectorFn: (s: DeleteRefPayload) => [...Sel]):$Field<"deleteRef", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteRefInput!"
            },
        args,

        selection: selectorFn(new DeleteRefPayload)
      };
      return this.$_select("deleteRef", options) as any
    }
  

      
/**
 * Deletes a team discussion.
 */
      deleteTeamDiscussion<Args extends VariabledInput<{
        input: DeleteTeamDiscussionInput,
      }>,Sel extends Selection<DeleteTeamDiscussionPayload>>(args: Args, selectorFn: (s: DeleteTeamDiscussionPayload) => [...Sel]):$Field<"deleteTeamDiscussion", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteTeamDiscussionInput!"
            },
        args,

        selection: selectorFn(new DeleteTeamDiscussionPayload)
      };
      return this.$_select("deleteTeamDiscussion", options) as any
    }
  

      
/**
 * Deletes a team discussion comment.
 */
      deleteTeamDiscussionComment<Args extends VariabledInput<{
        input: DeleteTeamDiscussionCommentInput,
      }>,Sel extends Selection<DeleteTeamDiscussionCommentPayload>>(args: Args, selectorFn: (s: DeleteTeamDiscussionCommentPayload) => [...Sel]):$Field<"deleteTeamDiscussionComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteTeamDiscussionCommentInput!"
            },
        args,

        selection: selectorFn(new DeleteTeamDiscussionCommentPayload)
      };
      return this.$_select("deleteTeamDiscussionComment", options) as any
    }
  

      
/**
 * Deletes a verifiable domain.
 */
      deleteVerifiableDomain<Args extends VariabledInput<{
        input: DeleteVerifiableDomainInput,
      }>,Sel extends Selection<DeleteVerifiableDomainPayload>>(args: Args, selectorFn: (s: DeleteVerifiableDomainPayload) => [...Sel]):$Field<"deleteVerifiableDomain", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DeleteVerifiableDomainInput!"
            },
        args,

        selection: selectorFn(new DeleteVerifiableDomainPayload)
      };
      return this.$_select("deleteVerifiableDomain", options) as any
    }
  

      
/**
 * Disable auto merge on the given pull request
 */
      disablePullRequestAutoMerge<Args extends VariabledInput<{
        input: DisablePullRequestAutoMergeInput,
      }>,Sel extends Selection<DisablePullRequestAutoMergePayload>>(args: Args, selectorFn: (s: DisablePullRequestAutoMergePayload) => [...Sel]):$Field<"disablePullRequestAutoMerge", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DisablePullRequestAutoMergeInput!"
            },
        args,

        selection: selectorFn(new DisablePullRequestAutoMergePayload)
      };
      return this.$_select("disablePullRequestAutoMerge", options) as any
    }
  

      
/**
 * Dismisses an approved or rejected pull request review.
 */
      dismissPullRequestReview<Args extends VariabledInput<{
        input: DismissPullRequestReviewInput,
      }>,Sel extends Selection<DismissPullRequestReviewPayload>>(args: Args, selectorFn: (s: DismissPullRequestReviewPayload) => [...Sel]):$Field<"dismissPullRequestReview", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DismissPullRequestReviewInput!"
            },
        args,

        selection: selectorFn(new DismissPullRequestReviewPayload)
      };
      return this.$_select("dismissPullRequestReview", options) as any
    }
  

      
/**
 * Dismisses the Dependabot alert.
 */
      dismissRepositoryVulnerabilityAlert<Args extends VariabledInput<{
        input: DismissRepositoryVulnerabilityAlertInput,
      }>,Sel extends Selection<DismissRepositoryVulnerabilityAlertPayload>>(args: Args, selectorFn: (s: DismissRepositoryVulnerabilityAlertPayload) => [...Sel]):$Field<"dismissRepositoryVulnerabilityAlert", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "DismissRepositoryVulnerabilityAlertInput!"
            },
        args,

        selection: selectorFn(new DismissRepositoryVulnerabilityAlertPayload)
      };
      return this.$_select("dismissRepositoryVulnerabilityAlert", options) as any
    }
  

      
/**
 * Enable the default auto-merge on a pull request.
 */
      enablePullRequestAutoMerge<Args extends VariabledInput<{
        input: EnablePullRequestAutoMergeInput,
      }>,Sel extends Selection<EnablePullRequestAutoMergePayload>>(args: Args, selectorFn: (s: EnablePullRequestAutoMergePayload) => [...Sel]):$Field<"enablePullRequestAutoMerge", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "EnablePullRequestAutoMergeInput!"
            },
        args,

        selection: selectorFn(new EnablePullRequestAutoMergePayload)
      };
      return this.$_select("enablePullRequestAutoMerge", options) as any
    }
  

      
/**
 * Follow an organization.
 */
      followOrganization<Args extends VariabledInput<{
        input: FollowOrganizationInput,
      }>,Sel extends Selection<FollowOrganizationPayload>>(args: Args, selectorFn: (s: FollowOrganizationPayload) => [...Sel]):$Field<"followOrganization", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "FollowOrganizationInput!"
            },
        args,

        selection: selectorFn(new FollowOrganizationPayload)
      };
      return this.$_select("followOrganization", options) as any
    }
  

      
/**
 * Follow a user.
 */
      followUser<Args extends VariabledInput<{
        input: FollowUserInput,
      }>,Sel extends Selection<FollowUserPayload>>(args: Args, selectorFn: (s: FollowUserPayload) => [...Sel]):$Field<"followUser", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "FollowUserInput!"
            },
        args,

        selection: selectorFn(new FollowUserPayload)
      };
      return this.$_select("followUser", options) as any
    }
  

      
/**
 * Grant the migrator role to a user for all organizations under an enterprise account.
 */
      grantEnterpriseOrganizationsMigratorRole<Args extends VariabledInput<{
        input: GrantEnterpriseOrganizationsMigratorRoleInput,
      }>,Sel extends Selection<GrantEnterpriseOrganizationsMigratorRolePayload>>(args: Args, selectorFn: (s: GrantEnterpriseOrganizationsMigratorRolePayload) => [...Sel]):$Field<"grantEnterpriseOrganizationsMigratorRole", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "GrantEnterpriseOrganizationsMigratorRoleInput!"
            },
        args,

        selection: selectorFn(new GrantEnterpriseOrganizationsMigratorRolePayload)
      };
      return this.$_select("grantEnterpriseOrganizationsMigratorRole", options) as any
    }
  

      
/**
 * Grant the migrator role to a user or a team.
 */
      grantMigratorRole<Args extends VariabledInput<{
        input: GrantMigratorRoleInput,
      }>,Sel extends Selection<GrantMigratorRolePayload>>(args: Args, selectorFn: (s: GrantMigratorRolePayload) => [...Sel]):$Field<"grantMigratorRole", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "GrantMigratorRoleInput!"
            },
        args,

        selection: selectorFn(new GrantMigratorRolePayload)
      };
      return this.$_select("grantMigratorRole", options) as any
    }
  

      
/**
 * Invite someone to become an administrator of the enterprise.
 */
      inviteEnterpriseAdmin<Args extends VariabledInput<{
        input: InviteEnterpriseAdminInput,
      }>,Sel extends Selection<InviteEnterpriseAdminPayload>>(args: Args, selectorFn: (s: InviteEnterpriseAdminPayload) => [...Sel]):$Field<"inviteEnterpriseAdmin", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "InviteEnterpriseAdminInput!"
            },
        args,

        selection: selectorFn(new InviteEnterpriseAdminPayload)
      };
      return this.$_select("inviteEnterpriseAdmin", options) as any
    }
  

      
/**
 * Creates a repository link for a project.
 */
      linkRepositoryToProject<Args extends VariabledInput<{
        input: LinkRepositoryToProjectInput,
      }>,Sel extends Selection<LinkRepositoryToProjectPayload>>(args: Args, selectorFn: (s: LinkRepositoryToProjectPayload) => [...Sel]):$Field<"linkRepositoryToProject", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "LinkRepositoryToProjectInput!"
            },
        args,

        selection: selectorFn(new LinkRepositoryToProjectPayload)
      };
      return this.$_select("linkRepositoryToProject", options) as any
    }
  

      
/**
 * Lock a lockable object
 */
      lockLockable<Args extends VariabledInput<{
        input: LockLockableInput,
      }>,Sel extends Selection<LockLockablePayload>>(args: Args, selectorFn: (s: LockLockablePayload) => [...Sel]):$Field<"lockLockable", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "LockLockableInput!"
            },
        args,

        selection: selectorFn(new LockLockablePayload)
      };
      return this.$_select("lockLockable", options) as any
    }
  

      
/**
 * Mark a discussion comment as the chosen answer for discussions in an answerable category.
 */
      markDiscussionCommentAsAnswer<Args extends VariabledInput<{
        input: MarkDiscussionCommentAsAnswerInput,
      }>,Sel extends Selection<MarkDiscussionCommentAsAnswerPayload>>(args: Args, selectorFn: (s: MarkDiscussionCommentAsAnswerPayload) => [...Sel]):$Field<"markDiscussionCommentAsAnswer", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "MarkDiscussionCommentAsAnswerInput!"
            },
        args,

        selection: selectorFn(new MarkDiscussionCommentAsAnswerPayload)
      };
      return this.$_select("markDiscussionCommentAsAnswer", options) as any
    }
  

      
/**
 * Mark a pull request file as viewed
 */
      markFileAsViewed<Args extends VariabledInput<{
        input: MarkFileAsViewedInput,
      }>,Sel extends Selection<MarkFileAsViewedPayload>>(args: Args, selectorFn: (s: MarkFileAsViewedPayload) => [...Sel]):$Field<"markFileAsViewed", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "MarkFileAsViewedInput!"
            },
        args,

        selection: selectorFn(new MarkFileAsViewedPayload)
      };
      return this.$_select("markFileAsViewed", options) as any
    }
  

      
/**
 * Marks a pull request ready for review.
 */
      markPullRequestReadyForReview<Args extends VariabledInput<{
        input: MarkPullRequestReadyForReviewInput,
      }>,Sel extends Selection<MarkPullRequestReadyForReviewPayload>>(args: Args, selectorFn: (s: MarkPullRequestReadyForReviewPayload) => [...Sel]):$Field<"markPullRequestReadyForReview", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "MarkPullRequestReadyForReviewInput!"
            },
        args,

        selection: selectorFn(new MarkPullRequestReadyForReviewPayload)
      };
      return this.$_select("markPullRequestReadyForReview", options) as any
    }
  

      
/**
 * Merge a head into a branch.
 */
      mergeBranch<Args extends VariabledInput<{
        input: MergeBranchInput,
      }>,Sel extends Selection<MergeBranchPayload>>(args: Args, selectorFn: (s: MergeBranchPayload) => [...Sel]):$Field<"mergeBranch", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "MergeBranchInput!"
            },
        args,

        selection: selectorFn(new MergeBranchPayload)
      };
      return this.$_select("mergeBranch", options) as any
    }
  

      
/**
 * Merge a pull request.
 */
      mergePullRequest<Args extends VariabledInput<{
        input: MergePullRequestInput,
      }>,Sel extends Selection<MergePullRequestPayload>>(args: Args, selectorFn: (s: MergePullRequestPayload) => [...Sel]):$Field<"mergePullRequest", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "MergePullRequestInput!"
            },
        args,

        selection: selectorFn(new MergePullRequestPayload)
      };
      return this.$_select("mergePullRequest", options) as any
    }
  

      
/**
 * Minimizes a comment on an Issue, Commit, Pull Request, or Gist
 */
      minimizeComment<Args extends VariabledInput<{
        input: MinimizeCommentInput,
      }>,Sel extends Selection<MinimizeCommentPayload>>(args: Args, selectorFn: (s: MinimizeCommentPayload) => [...Sel]):$Field<"minimizeComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "MinimizeCommentInput!"
            },
        args,

        selection: selectorFn(new MinimizeCommentPayload)
      };
      return this.$_select("minimizeComment", options) as any
    }
  

      
/**
 * Moves a project card to another place.
 */
      moveProjectCard<Args extends VariabledInput<{
        input: MoveProjectCardInput,
      }>,Sel extends Selection<MoveProjectCardPayload>>(args: Args, selectorFn: (s: MoveProjectCardPayload) => [...Sel]):$Field<"moveProjectCard", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "MoveProjectCardInput!"
            },
        args,

        selection: selectorFn(new MoveProjectCardPayload)
      };
      return this.$_select("moveProjectCard", options) as any
    }
  

      
/**
 * Moves a project column to another place.
 */
      moveProjectColumn<Args extends VariabledInput<{
        input: MoveProjectColumnInput,
      }>,Sel extends Selection<MoveProjectColumnPayload>>(args: Args, selectorFn: (s: MoveProjectColumnPayload) => [...Sel]):$Field<"moveProjectColumn", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "MoveProjectColumnInput!"
            },
        args,

        selection: selectorFn(new MoveProjectColumnPayload)
      };
      return this.$_select("moveProjectColumn", options) as any
    }
  

      
/**
 * Pin an issue to a repository
 */
      pinIssue<Args extends VariabledInput<{
        input: PinIssueInput,
      }>,Sel extends Selection<PinIssuePayload>>(args: Args, selectorFn: (s: PinIssuePayload) => [...Sel]):$Field<"pinIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "PinIssueInput!"
            },
        args,

        selection: selectorFn(new PinIssuePayload)
      };
      return this.$_select("pinIssue", options) as any
    }
  

      
/**
 * Regenerates the identity provider recovery codes for an enterprise
 */
      regenerateEnterpriseIdentityProviderRecoveryCodes<Args extends VariabledInput<{
        input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput,
      }>,Sel extends Selection<RegenerateEnterpriseIdentityProviderRecoveryCodesPayload>>(args: Args, selectorFn: (s: RegenerateEnterpriseIdentityProviderRecoveryCodesPayload) => [...Sel]):$Field<"regenerateEnterpriseIdentityProviderRecoveryCodes", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RegenerateEnterpriseIdentityProviderRecoveryCodesInput!"
            },
        args,

        selection: selectorFn(new RegenerateEnterpriseIdentityProviderRecoveryCodesPayload)
      };
      return this.$_select("regenerateEnterpriseIdentityProviderRecoveryCodes", options) as any
    }
  

      
/**
 * Regenerates a verifiable domain's verification token.
 */
      regenerateVerifiableDomainToken<Args extends VariabledInput<{
        input: RegenerateVerifiableDomainTokenInput,
      }>,Sel extends Selection<RegenerateVerifiableDomainTokenPayload>>(args: Args, selectorFn: (s: RegenerateVerifiableDomainTokenPayload) => [...Sel]):$Field<"regenerateVerifiableDomainToken", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RegenerateVerifiableDomainTokenInput!"
            },
        args,

        selection: selectorFn(new RegenerateVerifiableDomainTokenPayload)
      };
      return this.$_select("regenerateVerifiableDomainToken", options) as any
    }
  

      
/**
 * Reject all pending deployments under one or more environments
 */
      rejectDeployments<Args extends VariabledInput<{
        input: RejectDeploymentsInput,
      }>,Sel extends Selection<RejectDeploymentsPayload>>(args: Args, selectorFn: (s: RejectDeploymentsPayload) => [...Sel]):$Field<"rejectDeployments", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RejectDeploymentsInput!"
            },
        args,

        selection: selectorFn(new RejectDeploymentsPayload)
      };
      return this.$_select("rejectDeployments", options) as any
    }
  

      
/**
 * Removes assignees from an assignable object.
 */
      removeAssigneesFromAssignable<Args extends VariabledInput<{
        input: RemoveAssigneesFromAssignableInput,
      }>,Sel extends Selection<RemoveAssigneesFromAssignablePayload>>(args: Args, selectorFn: (s: RemoveAssigneesFromAssignablePayload) => [...Sel]):$Field<"removeAssigneesFromAssignable", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RemoveAssigneesFromAssignableInput!"
            },
        args,

        selection: selectorFn(new RemoveAssigneesFromAssignablePayload)
      };
      return this.$_select("removeAssigneesFromAssignable", options) as any
    }
  

      
/**
 * Removes an administrator from the enterprise.
 */
      removeEnterpriseAdmin<Args extends VariabledInput<{
        input: RemoveEnterpriseAdminInput,
      }>,Sel extends Selection<RemoveEnterpriseAdminPayload>>(args: Args, selectorFn: (s: RemoveEnterpriseAdminPayload) => [...Sel]):$Field<"removeEnterpriseAdmin", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RemoveEnterpriseAdminInput!"
            },
        args,

        selection: selectorFn(new RemoveEnterpriseAdminPayload)
      };
      return this.$_select("removeEnterpriseAdmin", options) as any
    }
  

      
/**
 * Removes the identity provider from an enterprise
 */
      removeEnterpriseIdentityProvider<Args extends VariabledInput<{
        input: RemoveEnterpriseIdentityProviderInput,
      }>,Sel extends Selection<RemoveEnterpriseIdentityProviderPayload>>(args: Args, selectorFn: (s: RemoveEnterpriseIdentityProviderPayload) => [...Sel]):$Field<"removeEnterpriseIdentityProvider", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RemoveEnterpriseIdentityProviderInput!"
            },
        args,

        selection: selectorFn(new RemoveEnterpriseIdentityProviderPayload)
      };
      return this.$_select("removeEnterpriseIdentityProvider", options) as any
    }
  

      
/**
 * Removes an organization from the enterprise
 */
      removeEnterpriseOrganization<Args extends VariabledInput<{
        input: RemoveEnterpriseOrganizationInput,
      }>,Sel extends Selection<RemoveEnterpriseOrganizationPayload>>(args: Args, selectorFn: (s: RemoveEnterpriseOrganizationPayload) => [...Sel]):$Field<"removeEnterpriseOrganization", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RemoveEnterpriseOrganizationInput!"
            },
        args,

        selection: selectorFn(new RemoveEnterpriseOrganizationPayload)
      };
      return this.$_select("removeEnterpriseOrganization", options) as any
    }
  

      
/**
 * Removes a support entitlement from an enterprise member.
 */
      removeEnterpriseSupportEntitlement<Args extends VariabledInput<{
        input: RemoveEnterpriseSupportEntitlementInput,
      }>,Sel extends Selection<RemoveEnterpriseSupportEntitlementPayload>>(args: Args, selectorFn: (s: RemoveEnterpriseSupportEntitlementPayload) => [...Sel]):$Field<"removeEnterpriseSupportEntitlement", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RemoveEnterpriseSupportEntitlementInput!"
            },
        args,

        selection: selectorFn(new RemoveEnterpriseSupportEntitlementPayload)
      };
      return this.$_select("removeEnterpriseSupportEntitlement", options) as any
    }
  

      
/**
 * Removes labels from a Labelable object.
 */
      removeLabelsFromLabelable<Args extends VariabledInput<{
        input: RemoveLabelsFromLabelableInput,
      }>,Sel extends Selection<RemoveLabelsFromLabelablePayload>>(args: Args, selectorFn: (s: RemoveLabelsFromLabelablePayload) => [...Sel]):$Field<"removeLabelsFromLabelable", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RemoveLabelsFromLabelableInput!"
            },
        args,

        selection: selectorFn(new RemoveLabelsFromLabelablePayload)
      };
      return this.$_select("removeLabelsFromLabelable", options) as any
    }
  

      
/**
 * Removes outside collaborator from all repositories in an organization.
 */
      removeOutsideCollaborator<Args extends VariabledInput<{
        input: RemoveOutsideCollaboratorInput,
      }>,Sel extends Selection<RemoveOutsideCollaboratorPayload>>(args: Args, selectorFn: (s: RemoveOutsideCollaboratorPayload) => [...Sel]):$Field<"removeOutsideCollaborator", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RemoveOutsideCollaboratorInput!"
            },
        args,

        selection: selectorFn(new RemoveOutsideCollaboratorPayload)
      };
      return this.$_select("removeOutsideCollaborator", options) as any
    }
  

      
/**
 * Removes a reaction from a subject.
 */
      removeReaction<Args extends VariabledInput<{
        input: RemoveReactionInput,
      }>,Sel extends Selection<RemoveReactionPayload>>(args: Args, selectorFn: (s: RemoveReactionPayload) => [...Sel]):$Field<"removeReaction", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RemoveReactionInput!"
            },
        args,

        selection: selectorFn(new RemoveReactionPayload)
      };
      return this.$_select("removeReaction", options) as any
    }
  

      
/**
 * Removes a star from a Starrable.
 */
      removeStar<Args extends VariabledInput<{
        input: RemoveStarInput,
      }>,Sel extends Selection<RemoveStarPayload>>(args: Args, selectorFn: (s: RemoveStarPayload) => [...Sel]):$Field<"removeStar", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RemoveStarInput!"
            },
        args,

        selection: selectorFn(new RemoveStarPayload)
      };
      return this.$_select("removeStar", options) as any
    }
  

      
/**
 * Remove an upvote to a discussion or discussion comment.
 */
      removeUpvote<Args extends VariabledInput<{
        input: RemoveUpvoteInput,
      }>,Sel extends Selection<RemoveUpvotePayload>>(args: Args, selectorFn: (s: RemoveUpvotePayload) => [...Sel]):$Field<"removeUpvote", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RemoveUpvoteInput!"
            },
        args,

        selection: selectorFn(new RemoveUpvotePayload)
      };
      return this.$_select("removeUpvote", options) as any
    }
  

      
/**
 * Reopen a issue.
 */
      reopenIssue<Args extends VariabledInput<{
        input: ReopenIssueInput,
      }>,Sel extends Selection<ReopenIssuePayload>>(args: Args, selectorFn: (s: ReopenIssuePayload) => [...Sel]):$Field<"reopenIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "ReopenIssueInput!"
            },
        args,

        selection: selectorFn(new ReopenIssuePayload)
      };
      return this.$_select("reopenIssue", options) as any
    }
  

      
/**
 * Reopen a pull request.
 */
      reopenPullRequest<Args extends VariabledInput<{
        input: ReopenPullRequestInput,
      }>,Sel extends Selection<ReopenPullRequestPayload>>(args: Args, selectorFn: (s: ReopenPullRequestPayload) => [...Sel]):$Field<"reopenPullRequest", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "ReopenPullRequestInput!"
            },
        args,

        selection: selectorFn(new ReopenPullRequestPayload)
      };
      return this.$_select("reopenPullRequest", options) as any
    }
  

      
/**
 * Set review requests on a pull request.
 */
      requestReviews<Args extends VariabledInput<{
        input: RequestReviewsInput,
      }>,Sel extends Selection<RequestReviewsPayload>>(args: Args, selectorFn: (s: RequestReviewsPayload) => [...Sel]):$Field<"requestReviews", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RequestReviewsInput!"
            },
        args,

        selection: selectorFn(new RequestReviewsPayload)
      };
      return this.$_select("requestReviews", options) as any
    }
  

      
/**
 * Rerequests an existing check suite.
 */
      rerequestCheckSuite<Args extends VariabledInput<{
        input: RerequestCheckSuiteInput,
      }>,Sel extends Selection<RerequestCheckSuitePayload>>(args: Args, selectorFn: (s: RerequestCheckSuitePayload) => [...Sel]):$Field<"rerequestCheckSuite", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RerequestCheckSuiteInput!"
            },
        args,

        selection: selectorFn(new RerequestCheckSuitePayload)
      };
      return this.$_select("rerequestCheckSuite", options) as any
    }
  

      
/**
 * Marks a review thread as resolved.
 */
      resolveReviewThread<Args extends VariabledInput<{
        input: ResolveReviewThreadInput,
      }>,Sel extends Selection<ResolveReviewThreadPayload>>(args: Args, selectorFn: (s: ResolveReviewThreadPayload) => [...Sel]):$Field<"resolveReviewThread", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "ResolveReviewThreadInput!"
            },
        args,

        selection: selectorFn(new ResolveReviewThreadPayload)
      };
      return this.$_select("resolveReviewThread", options) as any
    }
  

      
/**
 * Revoke the migrator role to a user for all organizations under an enterprise account.
 */
      revokeEnterpriseOrganizationsMigratorRole<Args extends VariabledInput<{
        input: RevokeEnterpriseOrganizationsMigratorRoleInput,
      }>,Sel extends Selection<RevokeEnterpriseOrganizationsMigratorRolePayload>>(args: Args, selectorFn: (s: RevokeEnterpriseOrganizationsMigratorRolePayload) => [...Sel]):$Field<"revokeEnterpriseOrganizationsMigratorRole", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RevokeEnterpriseOrganizationsMigratorRoleInput!"
            },
        args,

        selection: selectorFn(new RevokeEnterpriseOrganizationsMigratorRolePayload)
      };
      return this.$_select("revokeEnterpriseOrganizationsMigratorRole", options) as any
    }
  

      
/**
 * Revoke the migrator role from a user or a team.
 */
      revokeMigratorRole<Args extends VariabledInput<{
        input: RevokeMigratorRoleInput,
      }>,Sel extends Selection<RevokeMigratorRolePayload>>(args: Args, selectorFn: (s: RevokeMigratorRolePayload) => [...Sel]):$Field<"revokeMigratorRole", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "RevokeMigratorRoleInput!"
            },
        args,

        selection: selectorFn(new RevokeMigratorRolePayload)
      };
      return this.$_select("revokeMigratorRole", options) as any
    }
  

      
/**
 * Creates or updates the identity provider for an enterprise.
 */
      setEnterpriseIdentityProvider<Args extends VariabledInput<{
        input: SetEnterpriseIdentityProviderInput,
      }>,Sel extends Selection<SetEnterpriseIdentityProviderPayload>>(args: Args, selectorFn: (s: SetEnterpriseIdentityProviderPayload) => [...Sel]):$Field<"setEnterpriseIdentityProvider", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "SetEnterpriseIdentityProviderInput!"
            },
        args,

        selection: selectorFn(new SetEnterpriseIdentityProviderPayload)
      };
      return this.$_select("setEnterpriseIdentityProvider", options) as any
    }
  

      
/**
 * Set an organization level interaction limit for an organization's public repositories.
 */
      setOrganizationInteractionLimit<Args extends VariabledInput<{
        input: SetOrganizationInteractionLimitInput,
      }>,Sel extends Selection<SetOrganizationInteractionLimitPayload>>(args: Args, selectorFn: (s: SetOrganizationInteractionLimitPayload) => [...Sel]):$Field<"setOrganizationInteractionLimit", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "SetOrganizationInteractionLimitInput!"
            },
        args,

        selection: selectorFn(new SetOrganizationInteractionLimitPayload)
      };
      return this.$_select("setOrganizationInteractionLimit", options) as any
    }
  

      
/**
 * Sets an interaction limit setting for a repository.
 */
      setRepositoryInteractionLimit<Args extends VariabledInput<{
        input: SetRepositoryInteractionLimitInput,
      }>,Sel extends Selection<SetRepositoryInteractionLimitPayload>>(args: Args, selectorFn: (s: SetRepositoryInteractionLimitPayload) => [...Sel]):$Field<"setRepositoryInteractionLimit", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "SetRepositoryInteractionLimitInput!"
            },
        args,

        selection: selectorFn(new SetRepositoryInteractionLimitPayload)
      };
      return this.$_select("setRepositoryInteractionLimit", options) as any
    }
  

      
/**
 * Set a user level interaction limit for an user's public repositories.
 */
      setUserInteractionLimit<Args extends VariabledInput<{
        input: SetUserInteractionLimitInput,
      }>,Sel extends Selection<SetUserInteractionLimitPayload>>(args: Args, selectorFn: (s: SetUserInteractionLimitPayload) => [...Sel]):$Field<"setUserInteractionLimit", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "SetUserInteractionLimitInput!"
            },
        args,

        selection: selectorFn(new SetUserInteractionLimitPayload)
      };
      return this.$_select("setUserInteractionLimit", options) as any
    }
  

      
/**
 * Start a repository migration.
 */
      startRepositoryMigration<Args extends VariabledInput<{
        input: StartRepositoryMigrationInput,
      }>,Sel extends Selection<StartRepositoryMigrationPayload>>(args: Args, selectorFn: (s: StartRepositoryMigrationPayload) => [...Sel]):$Field<"startRepositoryMigration", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "StartRepositoryMigrationInput!"
            },
        args,

        selection: selectorFn(new StartRepositoryMigrationPayload)
      };
      return this.$_select("startRepositoryMigration", options) as any
    }
  

      
/**
 * Submits a pending pull request review.
 */
      submitPullRequestReview<Args extends VariabledInput<{
        input: SubmitPullRequestReviewInput,
      }>,Sel extends Selection<SubmitPullRequestReviewPayload>>(args: Args, selectorFn: (s: SubmitPullRequestReviewPayload) => [...Sel]):$Field<"submitPullRequestReview", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "SubmitPullRequestReviewInput!"
            },
        args,

        selection: selectorFn(new SubmitPullRequestReviewPayload)
      };
      return this.$_select("submitPullRequestReview", options) as any
    }
  

      
/**
 * Transfer an issue to a different repository
 */
      transferIssue<Args extends VariabledInput<{
        input: TransferIssueInput,
      }>,Sel extends Selection<TransferIssuePayload>>(args: Args, selectorFn: (s: TransferIssuePayload) => [...Sel]):$Field<"transferIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "TransferIssueInput!"
            },
        args,

        selection: selectorFn(new TransferIssuePayload)
      };
      return this.$_select("transferIssue", options) as any
    }
  

      
/**
 * Unarchives a repository.
 */
      unarchiveRepository<Args extends VariabledInput<{
        input: UnarchiveRepositoryInput,
      }>,Sel extends Selection<UnarchiveRepositoryPayload>>(args: Args, selectorFn: (s: UnarchiveRepositoryPayload) => [...Sel]):$Field<"unarchiveRepository", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UnarchiveRepositoryInput!"
            },
        args,

        selection: selectorFn(new UnarchiveRepositoryPayload)
      };
      return this.$_select("unarchiveRepository", options) as any
    }
  

      
/**
 * Unfollow an organization.
 */
      unfollowOrganization<Args extends VariabledInput<{
        input: UnfollowOrganizationInput,
      }>,Sel extends Selection<UnfollowOrganizationPayload>>(args: Args, selectorFn: (s: UnfollowOrganizationPayload) => [...Sel]):$Field<"unfollowOrganization", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UnfollowOrganizationInput!"
            },
        args,

        selection: selectorFn(new UnfollowOrganizationPayload)
      };
      return this.$_select("unfollowOrganization", options) as any
    }
  

      
/**
 * Unfollow a user.
 */
      unfollowUser<Args extends VariabledInput<{
        input: UnfollowUserInput,
      }>,Sel extends Selection<UnfollowUserPayload>>(args: Args, selectorFn: (s: UnfollowUserPayload) => [...Sel]):$Field<"unfollowUser", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UnfollowUserInput!"
            },
        args,

        selection: selectorFn(new UnfollowUserPayload)
      };
      return this.$_select("unfollowUser", options) as any
    }
  

      
/**
 * Deletes a repository link from a project.
 */
      unlinkRepositoryFromProject<Args extends VariabledInput<{
        input: UnlinkRepositoryFromProjectInput,
      }>,Sel extends Selection<UnlinkRepositoryFromProjectPayload>>(args: Args, selectorFn: (s: UnlinkRepositoryFromProjectPayload) => [...Sel]):$Field<"unlinkRepositoryFromProject", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UnlinkRepositoryFromProjectInput!"
            },
        args,

        selection: selectorFn(new UnlinkRepositoryFromProjectPayload)
      };
      return this.$_select("unlinkRepositoryFromProject", options) as any
    }
  

      
/**
 * Unlock a lockable object
 */
      unlockLockable<Args extends VariabledInput<{
        input: UnlockLockableInput,
      }>,Sel extends Selection<UnlockLockablePayload>>(args: Args, selectorFn: (s: UnlockLockablePayload) => [...Sel]):$Field<"unlockLockable", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UnlockLockableInput!"
            },
        args,

        selection: selectorFn(new UnlockLockablePayload)
      };
      return this.$_select("unlockLockable", options) as any
    }
  

      
/**
 * Unmark a discussion comment as the chosen answer for discussions in an answerable category.
 */
      unmarkDiscussionCommentAsAnswer<Args extends VariabledInput<{
        input: UnmarkDiscussionCommentAsAnswerInput,
      }>,Sel extends Selection<UnmarkDiscussionCommentAsAnswerPayload>>(args: Args, selectorFn: (s: UnmarkDiscussionCommentAsAnswerPayload) => [...Sel]):$Field<"unmarkDiscussionCommentAsAnswer", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UnmarkDiscussionCommentAsAnswerInput!"
            },
        args,

        selection: selectorFn(new UnmarkDiscussionCommentAsAnswerPayload)
      };
      return this.$_select("unmarkDiscussionCommentAsAnswer", options) as any
    }
  

      
/**
 * Unmark a pull request file as viewed
 */
      unmarkFileAsViewed<Args extends VariabledInput<{
        input: UnmarkFileAsViewedInput,
      }>,Sel extends Selection<UnmarkFileAsViewedPayload>>(args: Args, selectorFn: (s: UnmarkFileAsViewedPayload) => [...Sel]):$Field<"unmarkFileAsViewed", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UnmarkFileAsViewedInput!"
            },
        args,

        selection: selectorFn(new UnmarkFileAsViewedPayload)
      };
      return this.$_select("unmarkFileAsViewed", options) as any
    }
  

      
/**
 * Unmark an issue as a duplicate of another issue.
 */
      unmarkIssueAsDuplicate<Args extends VariabledInput<{
        input: UnmarkIssueAsDuplicateInput,
      }>,Sel extends Selection<UnmarkIssueAsDuplicatePayload>>(args: Args, selectorFn: (s: UnmarkIssueAsDuplicatePayload) => [...Sel]):$Field<"unmarkIssueAsDuplicate", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UnmarkIssueAsDuplicateInput!"
            },
        args,

        selection: selectorFn(new UnmarkIssueAsDuplicatePayload)
      };
      return this.$_select("unmarkIssueAsDuplicate", options) as any
    }
  

      
/**
 * Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
 */
      unminimizeComment<Args extends VariabledInput<{
        input: UnminimizeCommentInput,
      }>,Sel extends Selection<UnminimizeCommentPayload>>(args: Args, selectorFn: (s: UnminimizeCommentPayload) => [...Sel]):$Field<"unminimizeComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UnminimizeCommentInput!"
            },
        args,

        selection: selectorFn(new UnminimizeCommentPayload)
      };
      return this.$_select("unminimizeComment", options) as any
    }
  

      
/**
 * Unpin a pinned issue from a repository
 */
      unpinIssue<Args extends VariabledInput<{
        input: UnpinIssueInput,
      }>,Sel extends Selection<UnpinIssuePayload>>(args: Args, selectorFn: (s: UnpinIssuePayload) => [...Sel]):$Field<"unpinIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UnpinIssueInput!"
            },
        args,

        selection: selectorFn(new UnpinIssuePayload)
      };
      return this.$_select("unpinIssue", options) as any
    }
  

      
/**
 * Marks a review thread as unresolved.
 */
      unresolveReviewThread<Args extends VariabledInput<{
        input: UnresolveReviewThreadInput,
      }>,Sel extends Selection<UnresolveReviewThreadPayload>>(args: Args, selectorFn: (s: UnresolveReviewThreadPayload) => [...Sel]):$Field<"unresolveReviewThread", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UnresolveReviewThreadInput!"
            },
        args,

        selection: selectorFn(new UnresolveReviewThreadPayload)
      };
      return this.$_select("unresolveReviewThread", options) as any
    }
  

      
/**
 * Update a branch protection rule
 */
      updateBranchProtectionRule<Args extends VariabledInput<{
        input: UpdateBranchProtectionRuleInput,
      }>,Sel extends Selection<UpdateBranchProtectionRulePayload>>(args: Args, selectorFn: (s: UpdateBranchProtectionRulePayload) => [...Sel]):$Field<"updateBranchProtectionRule", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateBranchProtectionRuleInput!"
            },
        args,

        selection: selectorFn(new UpdateBranchProtectionRulePayload)
      };
      return this.$_select("updateBranchProtectionRule", options) as any
    }
  

      
/**
 * Update a check run
 */
      updateCheckRun<Args extends VariabledInput<{
        input: UpdateCheckRunInput,
      }>,Sel extends Selection<UpdateCheckRunPayload>>(args: Args, selectorFn: (s: UpdateCheckRunPayload) => [...Sel]):$Field<"updateCheckRun", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateCheckRunInput!"
            },
        args,

        selection: selectorFn(new UpdateCheckRunPayload)
      };
      return this.$_select("updateCheckRun", options) as any
    }
  

      
/**
 * Modifies the settings of an existing check suite
 */
      updateCheckSuitePreferences<Args extends VariabledInput<{
        input: UpdateCheckSuitePreferencesInput,
      }>,Sel extends Selection<UpdateCheckSuitePreferencesPayload>>(args: Args, selectorFn: (s: UpdateCheckSuitePreferencesPayload) => [...Sel]):$Field<"updateCheckSuitePreferences", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateCheckSuitePreferencesInput!"
            },
        args,

        selection: selectorFn(new UpdateCheckSuitePreferencesPayload)
      };
      return this.$_select("updateCheckSuitePreferences", options) as any
    }
  

      
/**
 * Update a discussion
 */
      updateDiscussion<Args extends VariabledInput<{
        input: UpdateDiscussionInput,
      }>,Sel extends Selection<UpdateDiscussionPayload>>(args: Args, selectorFn: (s: UpdateDiscussionPayload) => [...Sel]):$Field<"updateDiscussion", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateDiscussionInput!"
            },
        args,

        selection: selectorFn(new UpdateDiscussionPayload)
      };
      return this.$_select("updateDiscussion", options) as any
    }
  

      
/**
 * Update the contents of a comment on a Discussion
 */
      updateDiscussionComment<Args extends VariabledInput<{
        input: UpdateDiscussionCommentInput,
      }>,Sel extends Selection<UpdateDiscussionCommentPayload>>(args: Args, selectorFn: (s: UpdateDiscussionCommentPayload) => [...Sel]):$Field<"updateDiscussionComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateDiscussionCommentInput!"
            },
        args,

        selection: selectorFn(new UpdateDiscussionCommentPayload)
      };
      return this.$_select("updateDiscussionComment", options) as any
    }
  

      
/**
 * Updates the role of an enterprise administrator.
 */
      updateEnterpriseAdministratorRole<Args extends VariabledInput<{
        input: UpdateEnterpriseAdministratorRoleInput,
      }>,Sel extends Selection<UpdateEnterpriseAdministratorRolePayload>>(args: Args, selectorFn: (s: UpdateEnterpriseAdministratorRolePayload) => [...Sel]):$Field<"updateEnterpriseAdministratorRole", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseAdministratorRoleInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseAdministratorRolePayload)
      };
      return this.$_select("updateEnterpriseAdministratorRole", options) as any
    }
  

      
/**
 * Sets whether private repository forks are enabled for an enterprise.
 */
      updateEnterpriseAllowPrivateRepositoryForkingSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload) => [...Sel]):$Field<"updateEnterpriseAllowPrivateRepositoryForkingSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload)
      };
      return this.$_select("updateEnterpriseAllowPrivateRepositoryForkingSetting", options) as any
    }
  

      
/**
 * Sets the base repository permission for organizations in an enterprise.
 */
      updateEnterpriseDefaultRepositoryPermissionSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseDefaultRepositoryPermissionSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseDefaultRepositoryPermissionSettingPayload) => [...Sel]):$Field<"updateEnterpriseDefaultRepositoryPermissionSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseDefaultRepositoryPermissionSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseDefaultRepositoryPermissionSettingPayload)
      };
      return this.$_select("updateEnterpriseDefaultRepositoryPermissionSetting", options) as any
    }
  

      
/**
 * Sets whether organization members with admin permissions on a repository can change repository visibility.
 */
      updateEnterpriseMembersCanChangeRepositoryVisibilitySetting<Args extends VariabledInput<{
        input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput,
      }>,Sel extends Selection<UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload) => [...Sel]):$Field<"updateEnterpriseMembersCanChangeRepositoryVisibilitySetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload)
      };
      return this.$_select("updateEnterpriseMembersCanChangeRepositoryVisibilitySetting", options) as any
    }
  

      
/**
 * Sets the members can create repositories setting for an enterprise.
 */
      updateEnterpriseMembersCanCreateRepositoriesSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload) => [...Sel]):$Field<"updateEnterpriseMembersCanCreateRepositoriesSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseMembersCanCreateRepositoriesSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload)
      };
      return this.$_select("updateEnterpriseMembersCanCreateRepositoriesSetting", options) as any
    }
  

      
/**
 * Sets the members can delete issues setting for an enterprise.
 */
      updateEnterpriseMembersCanDeleteIssuesSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseMembersCanDeleteIssuesSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseMembersCanDeleteIssuesSettingPayload) => [...Sel]):$Field<"updateEnterpriseMembersCanDeleteIssuesSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseMembersCanDeleteIssuesSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseMembersCanDeleteIssuesSettingPayload)
      };
      return this.$_select("updateEnterpriseMembersCanDeleteIssuesSetting", options) as any
    }
  

      
/**
 * Sets the members can delete repositories setting for an enterprise.
 */
      updateEnterpriseMembersCanDeleteRepositoriesSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload) => [...Sel]):$Field<"updateEnterpriseMembersCanDeleteRepositoriesSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload)
      };
      return this.$_select("updateEnterpriseMembersCanDeleteRepositoriesSetting", options) as any
    }
  

      
/**
 * Sets whether members can invite collaborators are enabled for an enterprise.
 */
      updateEnterpriseMembersCanInviteCollaboratorsSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload) => [...Sel]):$Field<"updateEnterpriseMembersCanInviteCollaboratorsSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload)
      };
      return this.$_select("updateEnterpriseMembersCanInviteCollaboratorsSetting", options) as any
    }
  

      
/**
 * Sets whether or not an organization admin can make purchases.
 */
      updateEnterpriseMembersCanMakePurchasesSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseMembersCanMakePurchasesSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseMembersCanMakePurchasesSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseMembersCanMakePurchasesSettingPayload) => [...Sel]):$Field<"updateEnterpriseMembersCanMakePurchasesSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseMembersCanMakePurchasesSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseMembersCanMakePurchasesSettingPayload)
      };
      return this.$_select("updateEnterpriseMembersCanMakePurchasesSetting", options) as any
    }
  

      
/**
 * Sets the members can update protected branches setting for an enterprise.
 */
      updateEnterpriseMembersCanUpdateProtectedBranchesSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload) => [...Sel]):$Field<"updateEnterpriseMembersCanUpdateProtectedBranchesSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload)
      };
      return this.$_select("updateEnterpriseMembersCanUpdateProtectedBranchesSetting", options) as any
    }
  

      
/**
 * Sets the members can view dependency insights for an enterprise.
 */
      updateEnterpriseMembersCanViewDependencyInsightsSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload) => [...Sel]):$Field<"updateEnterpriseMembersCanViewDependencyInsightsSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload)
      };
      return this.$_select("updateEnterpriseMembersCanViewDependencyInsightsSetting", options) as any
    }
  

      
/**
 * Sets whether organization projects are enabled for an enterprise.
 */
      updateEnterpriseOrganizationProjectsSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseOrganizationProjectsSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseOrganizationProjectsSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseOrganizationProjectsSettingPayload) => [...Sel]):$Field<"updateEnterpriseOrganizationProjectsSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseOrganizationProjectsSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseOrganizationProjectsSettingPayload)
      };
      return this.$_select("updateEnterpriseOrganizationProjectsSetting", options) as any
    }
  

      
/**
 * Updates the role of an enterprise owner with an organization.
 */
      updateEnterpriseOwnerOrganizationRole<Args extends VariabledInput<{
        input: UpdateEnterpriseOwnerOrganizationRoleInput,
      }>,Sel extends Selection<UpdateEnterpriseOwnerOrganizationRolePayload>>(args: Args, selectorFn: (s: UpdateEnterpriseOwnerOrganizationRolePayload) => [...Sel]):$Field<"updateEnterpriseOwnerOrganizationRole", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseOwnerOrganizationRoleInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseOwnerOrganizationRolePayload)
      };
      return this.$_select("updateEnterpriseOwnerOrganizationRole", options) as any
    }
  

      
/**
 * Updates an enterprise's profile.
 */
      updateEnterpriseProfile<Args extends VariabledInput<{
        input: UpdateEnterpriseProfileInput,
      }>,Sel extends Selection<UpdateEnterpriseProfilePayload>>(args: Args, selectorFn: (s: UpdateEnterpriseProfilePayload) => [...Sel]):$Field<"updateEnterpriseProfile", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseProfileInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseProfilePayload)
      };
      return this.$_select("updateEnterpriseProfile", options) as any
    }
  

      
/**
 * Sets whether repository projects are enabled for a enterprise.
 */
      updateEnterpriseRepositoryProjectsSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseRepositoryProjectsSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseRepositoryProjectsSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseRepositoryProjectsSettingPayload) => [...Sel]):$Field<"updateEnterpriseRepositoryProjectsSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseRepositoryProjectsSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseRepositoryProjectsSettingPayload)
      };
      return this.$_select("updateEnterpriseRepositoryProjectsSetting", options) as any
    }
  

      
/**
 * Sets whether team discussions are enabled for an enterprise.
 */
      updateEnterpriseTeamDiscussionsSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseTeamDiscussionsSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseTeamDiscussionsSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseTeamDiscussionsSettingPayload) => [...Sel]):$Field<"updateEnterpriseTeamDiscussionsSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseTeamDiscussionsSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseTeamDiscussionsSettingPayload)
      };
      return this.$_select("updateEnterpriseTeamDiscussionsSetting", options) as any
    }
  

      
/**
 * Sets whether two factor authentication is required for all users in an enterprise.
 */
      updateEnterpriseTwoFactorAuthenticationRequiredSetting<Args extends VariabledInput<{
        input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput,
      }>,Sel extends Selection<UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload>>(args: Args, selectorFn: (s: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload) => [...Sel]):$Field<"updateEnterpriseTwoFactorAuthenticationRequiredSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload)
      };
      return this.$_select("updateEnterpriseTwoFactorAuthenticationRequiredSetting", options) as any
    }
  

      
/**
 * Updates an environment.
 */
      updateEnvironment<Args extends VariabledInput<{
        input: UpdateEnvironmentInput,
      }>,Sel extends Selection<UpdateEnvironmentPayload>>(args: Args, selectorFn: (s: UpdateEnvironmentPayload) => [...Sel]):$Field<"updateEnvironment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateEnvironmentInput!"
            },
        args,

        selection: selectorFn(new UpdateEnvironmentPayload)
      };
      return this.$_select("updateEnvironment", options) as any
    }
  

      
/**
 * Sets whether an IP allow list is enabled on an owner.
 */
      updateIpAllowListEnabledSetting<Args extends VariabledInput<{
        input: UpdateIpAllowListEnabledSettingInput,
      }>,Sel extends Selection<UpdateIpAllowListEnabledSettingPayload>>(args: Args, selectorFn: (s: UpdateIpAllowListEnabledSettingPayload) => [...Sel]):$Field<"updateIpAllowListEnabledSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateIpAllowListEnabledSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateIpAllowListEnabledSettingPayload)
      };
      return this.$_select("updateIpAllowListEnabledSetting", options) as any
    }
  

      
/**
 * Updates an IP allow list entry.
 */
      updateIpAllowListEntry<Args extends VariabledInput<{
        input: UpdateIpAllowListEntryInput,
      }>,Sel extends Selection<UpdateIpAllowListEntryPayload>>(args: Args, selectorFn: (s: UpdateIpAllowListEntryPayload) => [...Sel]):$Field<"updateIpAllowListEntry", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateIpAllowListEntryInput!"
            },
        args,

        selection: selectorFn(new UpdateIpAllowListEntryPayload)
      };
      return this.$_select("updateIpAllowListEntry", options) as any
    }
  

      
/**
 * Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner.
 */
      updateIpAllowListForInstalledAppsEnabledSetting<Args extends VariabledInput<{
        input: UpdateIpAllowListForInstalledAppsEnabledSettingInput,
      }>,Sel extends Selection<UpdateIpAllowListForInstalledAppsEnabledSettingPayload>>(args: Args, selectorFn: (s: UpdateIpAllowListForInstalledAppsEnabledSettingPayload) => [...Sel]):$Field<"updateIpAllowListForInstalledAppsEnabledSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateIpAllowListForInstalledAppsEnabledSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateIpAllowListForInstalledAppsEnabledSettingPayload)
      };
      return this.$_select("updateIpAllowListForInstalledAppsEnabledSetting", options) as any
    }
  

      
/**
 * Updates an Issue.
 */
      updateIssue<Args extends VariabledInput<{
        input: UpdateIssueInput,
      }>,Sel extends Selection<UpdateIssuePayload>>(args: Args, selectorFn: (s: UpdateIssuePayload) => [...Sel]):$Field<"updateIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateIssueInput!"
            },
        args,

        selection: selectorFn(new UpdateIssuePayload)
      };
      return this.$_select("updateIssue", options) as any
    }
  

      
/**
 * Updates an IssueComment object.
 */
      updateIssueComment<Args extends VariabledInput<{
        input: UpdateIssueCommentInput,
      }>,Sel extends Selection<UpdateIssueCommentPayload>>(args: Args, selectorFn: (s: UpdateIssueCommentPayload) => [...Sel]):$Field<"updateIssueComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateIssueCommentInput!"
            },
        args,

        selection: selectorFn(new UpdateIssueCommentPayload)
      };
      return this.$_select("updateIssueComment", options) as any
    }
  

      
/**
 * Update the setting to restrict notifications to only verified or approved domains available to an owner.
 */
      updateNotificationRestrictionSetting<Args extends VariabledInput<{
        input: UpdateNotificationRestrictionSettingInput,
      }>,Sel extends Selection<UpdateNotificationRestrictionSettingPayload>>(args: Args, selectorFn: (s: UpdateNotificationRestrictionSettingPayload) => [...Sel]):$Field<"updateNotificationRestrictionSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateNotificationRestrictionSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateNotificationRestrictionSettingPayload)
      };
      return this.$_select("updateNotificationRestrictionSetting", options) as any
    }
  

      
/**
 * Sets whether private repository forks are enabled for an organization.
 */
      updateOrganizationAllowPrivateRepositoryForkingSetting<Args extends VariabledInput<{
        input: UpdateOrganizationAllowPrivateRepositoryForkingSettingInput,
      }>,Sel extends Selection<UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload>>(args: Args, selectorFn: (s: UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload) => [...Sel]):$Field<"updateOrganizationAllowPrivateRepositoryForkingSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateOrganizationAllowPrivateRepositoryForkingSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload)
      };
      return this.$_select("updateOrganizationAllowPrivateRepositoryForkingSetting", options) as any
    }
  

      
/**
 * Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
 */
      updateOrganizationWebCommitSignoffSetting<Args extends VariabledInput<{
        input: UpdateOrganizationWebCommitSignoffSettingInput,
      }>,Sel extends Selection<UpdateOrganizationWebCommitSignoffSettingPayload>>(args: Args, selectorFn: (s: UpdateOrganizationWebCommitSignoffSettingPayload) => [...Sel]):$Field<"updateOrganizationWebCommitSignoffSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateOrganizationWebCommitSignoffSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateOrganizationWebCommitSignoffSettingPayload)
      };
      return this.$_select("updateOrganizationWebCommitSignoffSetting", options) as any
    }
  

      
/**
 * Updates an existing project.
 */
      updateProject<Args extends VariabledInput<{
        input: UpdateProjectInput,
      }>,Sel extends Selection<UpdateProjectPayload>>(args: Args, selectorFn: (s: UpdateProjectPayload) => [...Sel]):$Field<"updateProject", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateProjectInput!"
            },
        args,

        selection: selectorFn(new UpdateProjectPayload)
      };
      return this.$_select("updateProject", options) as any
    }
  

      
/**
 * Updates an existing project card.
 */
      updateProjectCard<Args extends VariabledInput<{
        input: UpdateProjectCardInput,
      }>,Sel extends Selection<UpdateProjectCardPayload>>(args: Args, selectorFn: (s: UpdateProjectCardPayload) => [...Sel]):$Field<"updateProjectCard", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateProjectCardInput!"
            },
        args,

        selection: selectorFn(new UpdateProjectCardPayload)
      };
      return this.$_select("updateProjectCard", options) as any
    }
  

      
/**
 * Updates an existing project column.
 */
      updateProjectColumn<Args extends VariabledInput<{
        input: UpdateProjectColumnInput,
      }>,Sel extends Selection<UpdateProjectColumnPayload>>(args: Args, selectorFn: (s: UpdateProjectColumnPayload) => [...Sel]):$Field<"updateProjectColumn", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateProjectColumnInput!"
            },
        args,

        selection: selectorFn(new UpdateProjectColumnPayload)
      };
      return this.$_select("updateProjectColumn", options) as any
    }
  

      
/**
 * Updates a draft issue within a Project.
 */
      updateProjectDraftIssue<Args extends VariabledInput<{
        input: UpdateProjectDraftIssueInput,
      }>,Sel extends Selection<UpdateProjectDraftIssuePayload>>(args: Args, selectorFn: (s: UpdateProjectDraftIssuePayload) => [...Sel]):$Field<"updateProjectDraftIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateProjectDraftIssueInput!"
            },
        args,

        selection: selectorFn(new UpdateProjectDraftIssuePayload)
      };
      return this.$_select("updateProjectDraftIssue", options) as any
    }
  

      
/**
 * Updates an existing project (beta).
 */
      updateProjectNext<Args extends VariabledInput<{
        input: UpdateProjectNextInput,
      }>,Sel extends Selection<UpdateProjectNextPayload>>(args: Args, selectorFn: (s: UpdateProjectNextPayload) => [...Sel]):$Field<"updateProjectNext", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateProjectNextInput!"
            },
        args,

        selection: selectorFn(new UpdateProjectNextPayload)
      };
      return this.$_select("updateProjectNext", options) as any
    }
  

      
/**
 * Updates a field of an item from a Project.
 */
      updateProjectNextItemField<Args extends VariabledInput<{
        input: UpdateProjectNextItemFieldInput,
      }>,Sel extends Selection<UpdateProjectNextItemFieldPayload>>(args: Args, selectorFn: (s: UpdateProjectNextItemFieldPayload) => [...Sel]):$Field<"updateProjectNextItemField", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateProjectNextItemFieldInput!"
            },
        args,

        selection: selectorFn(new UpdateProjectNextItemFieldPayload)
      };
      return this.$_select("updateProjectNextItemField", options) as any
    }
  

      
/**
 * Updates an existing project (beta).
 */
      updateProjectV2<Args extends VariabledInput<{
        input: UpdateProjectV2Input,
      }>,Sel extends Selection<UpdateProjectV2Payload>>(args: Args, selectorFn: (s: UpdateProjectV2Payload) => [...Sel]):$Field<"updateProjectV2", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateProjectV2Input!"
            },
        args,

        selection: selectorFn(new UpdateProjectV2Payload)
      };
      return this.$_select("updateProjectV2", options) as any
    }
  

      
/**
 * Updates a draft issue within a Project.
 */
      updateProjectV2DraftIssue<Args extends VariabledInput<{
        input: UpdateProjectV2DraftIssueInput,
      }>,Sel extends Selection<UpdateProjectV2DraftIssuePayload>>(args: Args, selectorFn: (s: UpdateProjectV2DraftIssuePayload) => [...Sel]):$Field<"updateProjectV2DraftIssue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateProjectV2DraftIssueInput!"
            },
        args,

        selection: selectorFn(new UpdateProjectV2DraftIssuePayload)
      };
      return this.$_select("updateProjectV2DraftIssue", options) as any
    }
  

      
/**
 * This mutation updates the value of a field for an item in a Project. Currently only single-select, text, number, date, and iteration fields are supported.
 */
      updateProjectV2ItemFieldValue<Args extends VariabledInput<{
        input: UpdateProjectV2ItemFieldValueInput,
      }>,Sel extends Selection<UpdateProjectV2ItemFieldValuePayload>>(args: Args, selectorFn: (s: UpdateProjectV2ItemFieldValuePayload) => [...Sel]):$Field<"updateProjectV2ItemFieldValue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateProjectV2ItemFieldValueInput!"
            },
        args,

        selection: selectorFn(new UpdateProjectV2ItemFieldValuePayload)
      };
      return this.$_select("updateProjectV2ItemFieldValue", options) as any
    }
  

      
/**
 * This mutation updates the position of the item in the project, where the position represents the priority of an item.
 */
      updateProjectV2ItemPosition<Args extends VariabledInput<{
        input: UpdateProjectV2ItemPositionInput,
      }>,Sel extends Selection<UpdateProjectV2ItemPositionPayload>>(args: Args, selectorFn: (s: UpdateProjectV2ItemPositionPayload) => [...Sel]):$Field<"updateProjectV2ItemPosition", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateProjectV2ItemPositionInput!"
            },
        args,

        selection: selectorFn(new UpdateProjectV2ItemPositionPayload)
      };
      return this.$_select("updateProjectV2ItemPosition", options) as any
    }
  

      
/**
 * Update a pull request
 */
      updatePullRequest<Args extends VariabledInput<{
        input: UpdatePullRequestInput,
      }>,Sel extends Selection<UpdatePullRequestPayload>>(args: Args, selectorFn: (s: UpdatePullRequestPayload) => [...Sel]):$Field<"updatePullRequest", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdatePullRequestInput!"
            },
        args,

        selection: selectorFn(new UpdatePullRequestPayload)
      };
      return this.$_select("updatePullRequest", options) as any
    }
  

      
/**
 * Merge or Rebase HEAD from upstream branch into pull request branch
 */
      updatePullRequestBranch<Args extends VariabledInput<{
        input: UpdatePullRequestBranchInput,
      }>,Sel extends Selection<UpdatePullRequestBranchPayload>>(args: Args, selectorFn: (s: UpdatePullRequestBranchPayload) => [...Sel]):$Field<"updatePullRequestBranch", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdatePullRequestBranchInput!"
            },
        args,

        selection: selectorFn(new UpdatePullRequestBranchPayload)
      };
      return this.$_select("updatePullRequestBranch", options) as any
    }
  

      
/**
 * Updates the body of a pull request review.
 */
      updatePullRequestReview<Args extends VariabledInput<{
        input: UpdatePullRequestReviewInput,
      }>,Sel extends Selection<UpdatePullRequestReviewPayload>>(args: Args, selectorFn: (s: UpdatePullRequestReviewPayload) => [...Sel]):$Field<"updatePullRequestReview", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdatePullRequestReviewInput!"
            },
        args,

        selection: selectorFn(new UpdatePullRequestReviewPayload)
      };
      return this.$_select("updatePullRequestReview", options) as any
    }
  

      
/**
 * Updates a pull request review comment.
 */
      updatePullRequestReviewComment<Args extends VariabledInput<{
        input: UpdatePullRequestReviewCommentInput,
      }>,Sel extends Selection<UpdatePullRequestReviewCommentPayload>>(args: Args, selectorFn: (s: UpdatePullRequestReviewCommentPayload) => [...Sel]):$Field<"updatePullRequestReviewComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdatePullRequestReviewCommentInput!"
            },
        args,

        selection: selectorFn(new UpdatePullRequestReviewCommentPayload)
      };
      return this.$_select("updatePullRequestReviewComment", options) as any
    }
  

      
/**
 * Update a Git Ref.
 */
      updateRef<Args extends VariabledInput<{
        input: UpdateRefInput,
      }>,Sel extends Selection<UpdateRefPayload>>(args: Args, selectorFn: (s: UpdateRefPayload) => [...Sel]):$Field<"updateRef", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateRefInput!"
            },
        args,

        selection: selectorFn(new UpdateRefPayload)
      };
      return this.$_select("updateRef", options) as any
    }
  

      
/**
 * Update information about a repository.
 */
      updateRepository<Args extends VariabledInput<{
        input: UpdateRepositoryInput,
      }>,Sel extends Selection<UpdateRepositoryPayload>>(args: Args, selectorFn: (s: UpdateRepositoryPayload) => [...Sel]):$Field<"updateRepository", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateRepositoryInput!"
            },
        args,

        selection: selectorFn(new UpdateRepositoryPayload)
      };
      return this.$_select("updateRepository", options) as any
    }
  

      
/**
 * Sets whether contributors are required to sign off on web-based commits for a repository.
 */
      updateRepositoryWebCommitSignoffSetting<Args extends VariabledInput<{
        input: UpdateRepositoryWebCommitSignoffSettingInput,
      }>,Sel extends Selection<UpdateRepositoryWebCommitSignoffSettingPayload>>(args: Args, selectorFn: (s: UpdateRepositoryWebCommitSignoffSettingPayload) => [...Sel]):$Field<"updateRepositoryWebCommitSignoffSetting", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateRepositoryWebCommitSignoffSettingInput!"
            },
        args,

        selection: selectorFn(new UpdateRepositoryWebCommitSignoffSettingPayload)
      };
      return this.$_select("updateRepositoryWebCommitSignoffSetting", options) as any
    }
  

      
/**
 * Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
 */
      updateSponsorshipPreferences<Args extends VariabledInput<{
        input: UpdateSponsorshipPreferencesInput,
      }>,Sel extends Selection<UpdateSponsorshipPreferencesPayload>>(args: Args, selectorFn: (s: UpdateSponsorshipPreferencesPayload) => [...Sel]):$Field<"updateSponsorshipPreferences", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateSponsorshipPreferencesInput!"
            },
        args,

        selection: selectorFn(new UpdateSponsorshipPreferencesPayload)
      };
      return this.$_select("updateSponsorshipPreferences", options) as any
    }
  

      
/**
 * Updates the state for subscribable subjects.
 */
      updateSubscription<Args extends VariabledInput<{
        input: UpdateSubscriptionInput,
      }>,Sel extends Selection<UpdateSubscriptionPayload>>(args: Args, selectorFn: (s: UpdateSubscriptionPayload) => [...Sel]):$Field<"updateSubscription", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateSubscriptionInput!"
            },
        args,

        selection: selectorFn(new UpdateSubscriptionPayload)
      };
      return this.$_select("updateSubscription", options) as any
    }
  

      
/**
 * Updates a team discussion.
 */
      updateTeamDiscussion<Args extends VariabledInput<{
        input: UpdateTeamDiscussionInput,
      }>,Sel extends Selection<UpdateTeamDiscussionPayload>>(args: Args, selectorFn: (s: UpdateTeamDiscussionPayload) => [...Sel]):$Field<"updateTeamDiscussion", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateTeamDiscussionInput!"
            },
        args,

        selection: selectorFn(new UpdateTeamDiscussionPayload)
      };
      return this.$_select("updateTeamDiscussion", options) as any
    }
  

      
/**
 * Updates a discussion comment.
 */
      updateTeamDiscussionComment<Args extends VariabledInput<{
        input: UpdateTeamDiscussionCommentInput,
      }>,Sel extends Selection<UpdateTeamDiscussionCommentPayload>>(args: Args, selectorFn: (s: UpdateTeamDiscussionCommentPayload) => [...Sel]):$Field<"updateTeamDiscussionComment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateTeamDiscussionCommentInput!"
            },
        args,

        selection: selectorFn(new UpdateTeamDiscussionCommentPayload)
      };
      return this.$_select("updateTeamDiscussionComment", options) as any
    }
  

      
/**
 * Update team repository.
 */
      updateTeamsRepository<Args extends VariabledInput<{
        input: UpdateTeamsRepositoryInput,
      }>,Sel extends Selection<UpdateTeamsRepositoryPayload>>(args: Args, selectorFn: (s: UpdateTeamsRepositoryPayload) => [...Sel]):$Field<"updateTeamsRepository", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateTeamsRepositoryInput!"
            },
        args,

        selection: selectorFn(new UpdateTeamsRepositoryPayload)
      };
      return this.$_select("updateTeamsRepository", options) as any
    }
  

      
/**
 * Replaces the repository's topics with the given topics.
 */
      updateTopics<Args extends VariabledInput<{
        input: UpdateTopicsInput,
      }>,Sel extends Selection<UpdateTopicsPayload>>(args: Args, selectorFn: (s: UpdateTopicsPayload) => [...Sel]):$Field<"updateTopics", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "UpdateTopicsInput!"
            },
        args,

        selection: selectorFn(new UpdateTopicsPayload)
      };
      return this.$_select("updateTopics", options) as any
    }
  

      
/**
 * Verify that a verifiable domain has the expected DNS record.
 */
      verifyVerifiableDomain<Args extends VariabledInput<{
        input: VerifyVerifiableDomainInput,
      }>,Sel extends Selection<VerifyVerifiableDomainPayload>>(args: Args, selectorFn: (s: VerifyVerifiableDomainPayload) => [...Sel]):$Field<"verifyVerifiableDomain", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              input: "VerifyVerifiableDomainInput!"
            },
        args,

        selection: selectorFn(new VerifyVerifiableDomainPayload)
      };
      return this.$_select("verifyVerifiableDomain", options) as any
    }
  
}


/**
 * An object with an ID.
 */
export class Node extends $Interface<{AddedToProjectEvent: AddedToProjectEvent,App: App,AssignedEvent: AssignedEvent,AutoMergeDisabledEvent: AutoMergeDisabledEvent,AutoMergeEnabledEvent: AutoMergeEnabledEvent,AutoRebaseEnabledEvent: AutoRebaseEnabledEvent,AutoSquashEnabledEvent: AutoSquashEnabledEvent,AutomaticBaseChangeFailedEvent: AutomaticBaseChangeFailedEvent,AutomaticBaseChangeSucceededEvent: AutomaticBaseChangeSucceededEvent,BaseRefChangedEvent: BaseRefChangedEvent,BaseRefDeletedEvent: BaseRefDeletedEvent,BaseRefForcePushedEvent: BaseRefForcePushedEvent,Blob: Blob,Bot: Bot,BranchProtectionRule: BranchProtectionRule,BypassForcePushAllowance: BypassForcePushAllowance,BypassPullRequestAllowance: BypassPullRequestAllowance,CWE: CWE,CheckRun: CheckRun,CheckSuite: CheckSuite,ClosedEvent: ClosedEvent,CodeOfConduct: CodeOfConduct,CommentDeletedEvent: CommentDeletedEvent,Commit: Commit,CommitComment: CommitComment,CommitCommentThread: CommitCommentThread,Comparison: Comparison,ConnectedEvent: ConnectedEvent,ConvertToDraftEvent: ConvertToDraftEvent,ConvertedNoteToIssueEvent: ConvertedNoteToIssueEvent,ConvertedToDiscussionEvent: ConvertedToDiscussionEvent,CrossReferencedEvent: CrossReferencedEvent,DemilestonedEvent: DemilestonedEvent,DeployKey: DeployKey,DeployedEvent: DeployedEvent,Deployment: Deployment,DeploymentEnvironmentChangedEvent: DeploymentEnvironmentChangedEvent,DeploymentReview: DeploymentReview,DeploymentStatus: DeploymentStatus,DisconnectedEvent: DisconnectedEvent,Discussion: Discussion,DiscussionCategory: DiscussionCategory,DiscussionComment: DiscussionComment,DiscussionPoll: DiscussionPoll,DiscussionPollOption: DiscussionPollOption,DraftIssue: DraftIssue,Enterprise: Enterprise,EnterpriseAdministratorInvitation: EnterpriseAdministratorInvitation,EnterpriseIdentityProvider: EnterpriseIdentityProvider,EnterpriseRepositoryInfo: EnterpriseRepositoryInfo,EnterpriseServerInstallation: EnterpriseServerInstallation,EnterpriseServerUserAccount: EnterpriseServerUserAccount,EnterpriseServerUserAccountEmail: EnterpriseServerUserAccountEmail,EnterpriseServerUserAccountsUpload: EnterpriseServerUserAccountsUpload,EnterpriseUserAccount: EnterpriseUserAccount,Environment: Environment,ExternalIdentity: ExternalIdentity,Gist: Gist,GistComment: GistComment,HeadRefDeletedEvent: HeadRefDeletedEvent,HeadRefForcePushedEvent: HeadRefForcePushedEvent,HeadRefRestoredEvent: HeadRefRestoredEvent,IpAllowListEntry: IpAllowListEntry,Issue: Issue,IssueComment: IssueComment,Label: Label,LabeledEvent: LabeledEvent,Language: Language,License: License,LinkedBranch: LinkedBranch,LockedEvent: LockedEvent,Mannequin: Mannequin,MarkedAsDuplicateEvent: MarkedAsDuplicateEvent,MarketplaceCategory: MarketplaceCategory,MarketplaceListing: MarketplaceListing,MembersCanDeleteReposClearAuditEntry: MembersCanDeleteReposClearAuditEntry,MembersCanDeleteReposDisableAuditEntry: MembersCanDeleteReposDisableAuditEntry,MembersCanDeleteReposEnableAuditEntry: MembersCanDeleteReposEnableAuditEntry,MentionedEvent: MentionedEvent,MergedEvent: MergedEvent,MigrationSource: MigrationSource,Milestone: Milestone,MilestonedEvent: MilestonedEvent,MovedColumnsInProjectEvent: MovedColumnsInProjectEvent,OIDCProvider: OIDCProvider,OauthApplicationCreateAuditEntry: OauthApplicationCreateAuditEntry,OrgAddBillingManagerAuditEntry: OrgAddBillingManagerAuditEntry,OrgAddMemberAuditEntry: OrgAddMemberAuditEntry,OrgBlockUserAuditEntry: OrgBlockUserAuditEntry,OrgConfigDisableCollaboratorsOnlyAuditEntry: OrgConfigDisableCollaboratorsOnlyAuditEntry,OrgConfigEnableCollaboratorsOnlyAuditEntry: OrgConfigEnableCollaboratorsOnlyAuditEntry,OrgCreateAuditEntry: OrgCreateAuditEntry,OrgDisableOauthAppRestrictionsAuditEntry: OrgDisableOauthAppRestrictionsAuditEntry,OrgDisableSamlAuditEntry: OrgDisableSamlAuditEntry,OrgDisableTwoFactorRequirementAuditEntry: OrgDisableTwoFactorRequirementAuditEntry,OrgEnableOauthAppRestrictionsAuditEntry: OrgEnableOauthAppRestrictionsAuditEntry,OrgEnableSamlAuditEntry: OrgEnableSamlAuditEntry,OrgEnableTwoFactorRequirementAuditEntry: OrgEnableTwoFactorRequirementAuditEntry,OrgInviteMemberAuditEntry: OrgInviteMemberAuditEntry,OrgInviteToBusinessAuditEntry: OrgInviteToBusinessAuditEntry,OrgOauthAppAccessApprovedAuditEntry: OrgOauthAppAccessApprovedAuditEntry,OrgOauthAppAccessDeniedAuditEntry: OrgOauthAppAccessDeniedAuditEntry,OrgOauthAppAccessRequestedAuditEntry: OrgOauthAppAccessRequestedAuditEntry,OrgRemoveBillingManagerAuditEntry: OrgRemoveBillingManagerAuditEntry,OrgRemoveMemberAuditEntry: OrgRemoveMemberAuditEntry,OrgRemoveOutsideCollaboratorAuditEntry: OrgRemoveOutsideCollaboratorAuditEntry,OrgRestoreMemberAuditEntry: OrgRestoreMemberAuditEntry,OrgUnblockUserAuditEntry: OrgUnblockUserAuditEntry,OrgUpdateDefaultRepositoryPermissionAuditEntry: OrgUpdateDefaultRepositoryPermissionAuditEntry,OrgUpdateMemberAuditEntry: OrgUpdateMemberAuditEntry,OrgUpdateMemberRepositoryCreationPermissionAuditEntry: OrgUpdateMemberRepositoryCreationPermissionAuditEntry,OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,Organization: Organization,OrganizationIdentityProvider: OrganizationIdentityProvider,OrganizationInvitation: OrganizationInvitation,Package: Package,PackageFile: PackageFile,PackageTag: PackageTag,PackageVersion: PackageVersion,PinnedDiscussion: PinnedDiscussion,PinnedEvent: PinnedEvent,PinnedIssue: PinnedIssue,PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntry,PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntry,Project: Project,ProjectCard: ProjectCard,ProjectColumn: ProjectColumn,ProjectNext: ProjectNext,ProjectNextField: ProjectNextField,ProjectNextItem: ProjectNextItem,ProjectNextItemFieldValue: ProjectNextItemFieldValue,ProjectV2: ProjectV2,ProjectV2Field: ProjectV2Field,ProjectV2Item: ProjectV2Item,ProjectV2ItemFieldDateValue: ProjectV2ItemFieldDateValue,ProjectV2ItemFieldIterationValue: ProjectV2ItemFieldIterationValue,ProjectV2ItemFieldNumberValue: ProjectV2ItemFieldNumberValue,ProjectV2ItemFieldSingleSelectValue: ProjectV2ItemFieldSingleSelectValue,ProjectV2ItemFieldTextValue: ProjectV2ItemFieldTextValue,ProjectV2IterationField: ProjectV2IterationField,ProjectV2SingleSelectField: ProjectV2SingleSelectField,ProjectV2View: ProjectV2View,ProjectView: ProjectView,PublicKey: PublicKey,PullRequest: PullRequest,PullRequestCommit: PullRequestCommit,PullRequestCommitCommentThread: PullRequestCommitCommentThread,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,PullRequestReviewThread: PullRequestReviewThread,PullRequestThread: PullRequestThread,Push: Push,PushAllowance: PushAllowance,Reaction: Reaction,ReadyForReviewEvent: ReadyForReviewEvent,Ref: Ref,ReferencedEvent: ReferencedEvent,Release: Release,ReleaseAsset: ReleaseAsset,RemovedFromProjectEvent: RemovedFromProjectEvent,RenamedTitleEvent: RenamedTitleEvent,ReopenedEvent: ReopenedEvent,RepoAccessAuditEntry: RepoAccessAuditEntry,RepoAddMemberAuditEntry: RepoAddMemberAuditEntry,RepoAddTopicAuditEntry: RepoAddTopicAuditEntry,RepoArchivedAuditEntry: RepoArchivedAuditEntry,RepoChangeMergeSettingAuditEntry: RepoChangeMergeSettingAuditEntry,RepoConfigDisableAnonymousGitAccessAuditEntry: RepoConfigDisableAnonymousGitAccessAuditEntry,RepoConfigDisableCollaboratorsOnlyAuditEntry: RepoConfigDisableCollaboratorsOnlyAuditEntry,RepoConfigDisableContributorsOnlyAuditEntry: RepoConfigDisableContributorsOnlyAuditEntry,RepoConfigDisableSockpuppetDisallowedAuditEntry: RepoConfigDisableSockpuppetDisallowedAuditEntry,RepoConfigEnableAnonymousGitAccessAuditEntry: RepoConfigEnableAnonymousGitAccessAuditEntry,RepoConfigEnableCollaboratorsOnlyAuditEntry: RepoConfigEnableCollaboratorsOnlyAuditEntry,RepoConfigEnableContributorsOnlyAuditEntry: RepoConfigEnableContributorsOnlyAuditEntry,RepoConfigEnableSockpuppetDisallowedAuditEntry: RepoConfigEnableSockpuppetDisallowedAuditEntry,RepoConfigLockAnonymousGitAccessAuditEntry: RepoConfigLockAnonymousGitAccessAuditEntry,RepoConfigUnlockAnonymousGitAccessAuditEntry: RepoConfigUnlockAnonymousGitAccessAuditEntry,RepoCreateAuditEntry: RepoCreateAuditEntry,RepoDestroyAuditEntry: RepoDestroyAuditEntry,RepoRemoveMemberAuditEntry: RepoRemoveMemberAuditEntry,RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntry,Repository: Repository,RepositoryInvitation: RepositoryInvitation,RepositoryMigration: RepositoryMigration,RepositoryTopic: RepositoryTopic,RepositoryVisibilityChangeDisableAuditEntry: RepositoryVisibilityChangeDisableAuditEntry,RepositoryVisibilityChangeEnableAuditEntry: RepositoryVisibilityChangeEnableAuditEntry,RepositoryVulnerabilityAlert: RepositoryVulnerabilityAlert,ReviewDismissalAllowance: ReviewDismissalAllowance,ReviewDismissedEvent: ReviewDismissedEvent,ReviewRequest: ReviewRequest,ReviewRequestRemovedEvent: ReviewRequestRemovedEvent,ReviewRequestedEvent: ReviewRequestedEvent,SavedReply: SavedReply,SecurityAdvisory: SecurityAdvisory,SponsorsActivity: SponsorsActivity,SponsorsListing: SponsorsListing,SponsorsTier: SponsorsTier,Sponsorship: Sponsorship,SponsorshipNewsletter: SponsorshipNewsletter,Status: Status,StatusCheckRollup: StatusCheckRollup,StatusContext: StatusContext,SubscribedEvent: SubscribedEvent,Tag: Tag,Team: Team,TeamAddMemberAuditEntry: TeamAddMemberAuditEntry,TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntry,TeamChangeParentTeamAuditEntry: TeamChangeParentTeamAuditEntry,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment,TeamRemoveMemberAuditEntry: TeamRemoveMemberAuditEntry,TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntry,Topic: Topic,TransferredEvent: TransferredEvent,Tree: Tree,UnassignedEvent: UnassignedEvent,UnlabeledEvent: UnlabeledEvent,UnlockedEvent: UnlockedEvent,UnmarkedAsDuplicateEvent: UnmarkedAsDuplicateEvent,UnpinnedEvent: UnpinnedEvent,UnsubscribedEvent: UnsubscribedEvent,User: User,UserBlockedEvent: UserBlockedEvent,UserContentEdit: UserContentEdit,UserStatus: UserStatus,VerifiableDomain: VerifiableDomain,Workflow: Workflow,WorkflowRun: WorkflowRun}, "Node"> {
  constructor() {
    super({AddedToProjectEvent: AddedToProjectEvent,App: App,AssignedEvent: AssignedEvent,AutoMergeDisabledEvent: AutoMergeDisabledEvent,AutoMergeEnabledEvent: AutoMergeEnabledEvent,AutoRebaseEnabledEvent: AutoRebaseEnabledEvent,AutoSquashEnabledEvent: AutoSquashEnabledEvent,AutomaticBaseChangeFailedEvent: AutomaticBaseChangeFailedEvent,AutomaticBaseChangeSucceededEvent: AutomaticBaseChangeSucceededEvent,BaseRefChangedEvent: BaseRefChangedEvent,BaseRefDeletedEvent: BaseRefDeletedEvent,BaseRefForcePushedEvent: BaseRefForcePushedEvent,Blob: Blob,Bot: Bot,BranchProtectionRule: BranchProtectionRule,BypassForcePushAllowance: BypassForcePushAllowance,BypassPullRequestAllowance: BypassPullRequestAllowance,CWE: CWE,CheckRun: CheckRun,CheckSuite: CheckSuite,ClosedEvent: ClosedEvent,CodeOfConduct: CodeOfConduct,CommentDeletedEvent: CommentDeletedEvent,Commit: Commit,CommitComment: CommitComment,CommitCommentThread: CommitCommentThread,Comparison: Comparison,ConnectedEvent: ConnectedEvent,ConvertToDraftEvent: ConvertToDraftEvent,ConvertedNoteToIssueEvent: ConvertedNoteToIssueEvent,ConvertedToDiscussionEvent: ConvertedToDiscussionEvent,CrossReferencedEvent: CrossReferencedEvent,DemilestonedEvent: DemilestonedEvent,DeployKey: DeployKey,DeployedEvent: DeployedEvent,Deployment: Deployment,DeploymentEnvironmentChangedEvent: DeploymentEnvironmentChangedEvent,DeploymentReview: DeploymentReview,DeploymentStatus: DeploymentStatus,DisconnectedEvent: DisconnectedEvent,Discussion: Discussion,DiscussionCategory: DiscussionCategory,DiscussionComment: DiscussionComment,DiscussionPoll: DiscussionPoll,DiscussionPollOption: DiscussionPollOption,DraftIssue: DraftIssue,Enterprise: Enterprise,EnterpriseAdministratorInvitation: EnterpriseAdministratorInvitation,EnterpriseIdentityProvider: EnterpriseIdentityProvider,EnterpriseRepositoryInfo: EnterpriseRepositoryInfo,EnterpriseServerInstallation: EnterpriseServerInstallation,EnterpriseServerUserAccount: EnterpriseServerUserAccount,EnterpriseServerUserAccountEmail: EnterpriseServerUserAccountEmail,EnterpriseServerUserAccountsUpload: EnterpriseServerUserAccountsUpload,EnterpriseUserAccount: EnterpriseUserAccount,Environment: Environment,ExternalIdentity: ExternalIdentity,Gist: Gist,GistComment: GistComment,HeadRefDeletedEvent: HeadRefDeletedEvent,HeadRefForcePushedEvent: HeadRefForcePushedEvent,HeadRefRestoredEvent: HeadRefRestoredEvent,IpAllowListEntry: IpAllowListEntry,Issue: Issue,IssueComment: IssueComment,Label: Label,LabeledEvent: LabeledEvent,Language: Language,License: License,LinkedBranch: LinkedBranch,LockedEvent: LockedEvent,Mannequin: Mannequin,MarkedAsDuplicateEvent: MarkedAsDuplicateEvent,MarketplaceCategory: MarketplaceCategory,MarketplaceListing: MarketplaceListing,MembersCanDeleteReposClearAuditEntry: MembersCanDeleteReposClearAuditEntry,MembersCanDeleteReposDisableAuditEntry: MembersCanDeleteReposDisableAuditEntry,MembersCanDeleteReposEnableAuditEntry: MembersCanDeleteReposEnableAuditEntry,MentionedEvent: MentionedEvent,MergedEvent: MergedEvent,MigrationSource: MigrationSource,Milestone: Milestone,MilestonedEvent: MilestonedEvent,MovedColumnsInProjectEvent: MovedColumnsInProjectEvent,OIDCProvider: OIDCProvider,OauthApplicationCreateAuditEntry: OauthApplicationCreateAuditEntry,OrgAddBillingManagerAuditEntry: OrgAddBillingManagerAuditEntry,OrgAddMemberAuditEntry: OrgAddMemberAuditEntry,OrgBlockUserAuditEntry: OrgBlockUserAuditEntry,OrgConfigDisableCollaboratorsOnlyAuditEntry: OrgConfigDisableCollaboratorsOnlyAuditEntry,OrgConfigEnableCollaboratorsOnlyAuditEntry: OrgConfigEnableCollaboratorsOnlyAuditEntry,OrgCreateAuditEntry: OrgCreateAuditEntry,OrgDisableOauthAppRestrictionsAuditEntry: OrgDisableOauthAppRestrictionsAuditEntry,OrgDisableSamlAuditEntry: OrgDisableSamlAuditEntry,OrgDisableTwoFactorRequirementAuditEntry: OrgDisableTwoFactorRequirementAuditEntry,OrgEnableOauthAppRestrictionsAuditEntry: OrgEnableOauthAppRestrictionsAuditEntry,OrgEnableSamlAuditEntry: OrgEnableSamlAuditEntry,OrgEnableTwoFactorRequirementAuditEntry: OrgEnableTwoFactorRequirementAuditEntry,OrgInviteMemberAuditEntry: OrgInviteMemberAuditEntry,OrgInviteToBusinessAuditEntry: OrgInviteToBusinessAuditEntry,OrgOauthAppAccessApprovedAuditEntry: OrgOauthAppAccessApprovedAuditEntry,OrgOauthAppAccessDeniedAuditEntry: OrgOauthAppAccessDeniedAuditEntry,OrgOauthAppAccessRequestedAuditEntry: OrgOauthAppAccessRequestedAuditEntry,OrgRemoveBillingManagerAuditEntry: OrgRemoveBillingManagerAuditEntry,OrgRemoveMemberAuditEntry: OrgRemoveMemberAuditEntry,OrgRemoveOutsideCollaboratorAuditEntry: OrgRemoveOutsideCollaboratorAuditEntry,OrgRestoreMemberAuditEntry: OrgRestoreMemberAuditEntry,OrgUnblockUserAuditEntry: OrgUnblockUserAuditEntry,OrgUpdateDefaultRepositoryPermissionAuditEntry: OrgUpdateDefaultRepositoryPermissionAuditEntry,OrgUpdateMemberAuditEntry: OrgUpdateMemberAuditEntry,OrgUpdateMemberRepositoryCreationPermissionAuditEntry: OrgUpdateMemberRepositoryCreationPermissionAuditEntry,OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,Organization: Organization,OrganizationIdentityProvider: OrganizationIdentityProvider,OrganizationInvitation: OrganizationInvitation,Package: Package,PackageFile: PackageFile,PackageTag: PackageTag,PackageVersion: PackageVersion,PinnedDiscussion: PinnedDiscussion,PinnedEvent: PinnedEvent,PinnedIssue: PinnedIssue,PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntry,PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntry,Project: Project,ProjectCard: ProjectCard,ProjectColumn: ProjectColumn,ProjectNext: ProjectNext,ProjectNextField: ProjectNextField,ProjectNextItem: ProjectNextItem,ProjectNextItemFieldValue: ProjectNextItemFieldValue,ProjectV2: ProjectV2,ProjectV2Field: ProjectV2Field,ProjectV2Item: ProjectV2Item,ProjectV2ItemFieldDateValue: ProjectV2ItemFieldDateValue,ProjectV2ItemFieldIterationValue: ProjectV2ItemFieldIterationValue,ProjectV2ItemFieldNumberValue: ProjectV2ItemFieldNumberValue,ProjectV2ItemFieldSingleSelectValue: ProjectV2ItemFieldSingleSelectValue,ProjectV2ItemFieldTextValue: ProjectV2ItemFieldTextValue,ProjectV2IterationField: ProjectV2IterationField,ProjectV2SingleSelectField: ProjectV2SingleSelectField,ProjectV2View: ProjectV2View,ProjectView: ProjectView,PublicKey: PublicKey,PullRequest: PullRequest,PullRequestCommit: PullRequestCommit,PullRequestCommitCommentThread: PullRequestCommitCommentThread,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,PullRequestReviewThread: PullRequestReviewThread,PullRequestThread: PullRequestThread,Push: Push,PushAllowance: PushAllowance,Reaction: Reaction,ReadyForReviewEvent: ReadyForReviewEvent,Ref: Ref,ReferencedEvent: ReferencedEvent,Release: Release,ReleaseAsset: ReleaseAsset,RemovedFromProjectEvent: RemovedFromProjectEvent,RenamedTitleEvent: RenamedTitleEvent,ReopenedEvent: ReopenedEvent,RepoAccessAuditEntry: RepoAccessAuditEntry,RepoAddMemberAuditEntry: RepoAddMemberAuditEntry,RepoAddTopicAuditEntry: RepoAddTopicAuditEntry,RepoArchivedAuditEntry: RepoArchivedAuditEntry,RepoChangeMergeSettingAuditEntry: RepoChangeMergeSettingAuditEntry,RepoConfigDisableAnonymousGitAccessAuditEntry: RepoConfigDisableAnonymousGitAccessAuditEntry,RepoConfigDisableCollaboratorsOnlyAuditEntry: RepoConfigDisableCollaboratorsOnlyAuditEntry,RepoConfigDisableContributorsOnlyAuditEntry: RepoConfigDisableContributorsOnlyAuditEntry,RepoConfigDisableSockpuppetDisallowedAuditEntry: RepoConfigDisableSockpuppetDisallowedAuditEntry,RepoConfigEnableAnonymousGitAccessAuditEntry: RepoConfigEnableAnonymousGitAccessAuditEntry,RepoConfigEnableCollaboratorsOnlyAuditEntry: RepoConfigEnableCollaboratorsOnlyAuditEntry,RepoConfigEnableContributorsOnlyAuditEntry: RepoConfigEnableContributorsOnlyAuditEntry,RepoConfigEnableSockpuppetDisallowedAuditEntry: RepoConfigEnableSockpuppetDisallowedAuditEntry,RepoConfigLockAnonymousGitAccessAuditEntry: RepoConfigLockAnonymousGitAccessAuditEntry,RepoConfigUnlockAnonymousGitAccessAuditEntry: RepoConfigUnlockAnonymousGitAccessAuditEntry,RepoCreateAuditEntry: RepoCreateAuditEntry,RepoDestroyAuditEntry: RepoDestroyAuditEntry,RepoRemoveMemberAuditEntry: RepoRemoveMemberAuditEntry,RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntry,Repository: Repository,RepositoryInvitation: RepositoryInvitation,RepositoryMigration: RepositoryMigration,RepositoryTopic: RepositoryTopic,RepositoryVisibilityChangeDisableAuditEntry: RepositoryVisibilityChangeDisableAuditEntry,RepositoryVisibilityChangeEnableAuditEntry: RepositoryVisibilityChangeEnableAuditEntry,RepositoryVulnerabilityAlert: RepositoryVulnerabilityAlert,ReviewDismissalAllowance: ReviewDismissalAllowance,ReviewDismissedEvent: ReviewDismissedEvent,ReviewRequest: ReviewRequest,ReviewRequestRemovedEvent: ReviewRequestRemovedEvent,ReviewRequestedEvent: ReviewRequestedEvent,SavedReply: SavedReply,SecurityAdvisory: SecurityAdvisory,SponsorsActivity: SponsorsActivity,SponsorsListing: SponsorsListing,SponsorsTier: SponsorsTier,Sponsorship: Sponsorship,SponsorshipNewsletter: SponsorshipNewsletter,Status: Status,StatusCheckRollup: StatusCheckRollup,StatusContext: StatusContext,SubscribedEvent: SubscribedEvent,Tag: Tag,Team: Team,TeamAddMemberAuditEntry: TeamAddMemberAuditEntry,TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntry,TeamChangeParentTeamAuditEntry: TeamChangeParentTeamAuditEntry,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment,TeamRemoveMemberAuditEntry: TeamRemoveMemberAuditEntry,TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntry,Topic: Topic,TransferredEvent: TransferredEvent,Tree: Tree,UnassignedEvent: UnassignedEvent,UnlabeledEvent: UnlabeledEvent,UnlockedEvent: UnlockedEvent,UnmarkedAsDuplicateEvent: UnmarkedAsDuplicateEvent,UnpinnedEvent: UnpinnedEvent,UnsubscribedEvent: UnsubscribedEvent,User: User,UserBlockedEvent: UserBlockedEvent,UserContentEdit: UserContentEdit,UserStatus: UserStatus,VerifiableDomain: VerifiableDomain,Workflow: Workflow,WorkflowRun: WorkflowRun}, "Node")
  }
}

  
/**
 * The possible values for the notification restriction setting.
 */
export enum NotificationRestrictionSettingValue {
  
/**
 * The setting is enabled for the owner.
 */
  ENABLED = "ENABLED",

/**
 * The setting is disabled for the owner.
 */
  DISABLED = "DISABLED"
}
  


/**
 * An OIDC identity provider configured to provision identities for an enterprise.
 */
export class OIDCProvider extends $Base<"OIDCProvider"> {
  constructor() {
    super("OIDCProvider")
  }

  
      
/**
 * The enterprise this identity provider belongs to.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * ExternalIdentities provisioned by this identity provider.
 */
      externalIdentities<Args extends VariabledInput<{
        membersOnly?: boolean | null | undefined
login?: string | null | undefined
userName?: string | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ExternalIdentityConnection>>(args: Args, selectorFn: (s: ExternalIdentityConnection) => [...Sel]):$Field<"externalIdentities", GetOutput<Sel> , GetVariables<Sel, Args>>
externalIdentities<Sel extends Selection<ExternalIdentityConnection>>(selectorFn: (s: ExternalIdentityConnection) => [...Sel]):$Field<"externalIdentities", GetOutput<Sel> , GetVariables<Sel>>
externalIdentities(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              membersOnly: "Boolean",
login: "String",
userName: "String",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ExternalIdentityConnection)
      };
      return this.$_select("externalIdentities", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The OIDC identity provider type
 */
      get providerType(): $Field<"providerType", OIDCProviderType>  {
       return this.$_select("providerType") as any
      }

      
/**
 * The id of the tenant this provider is attached to
 */
      get tenantId(): $Field<"tenantId", string>  {
       return this.$_select("tenantId") as any
      }
}

  
/**
 * The OIDC identity provider type
 */
export enum OIDCProviderType {
  
/**
 * Azure Active Directory
 */
  AAD = "AAD"
}
  


/**
 * Metadata for an audit entry with action oauth_application.*
 */
export class OauthApplicationAuditEntryData extends $Interface<{OauthApplicationCreateAuditEntry: OauthApplicationCreateAuditEntry,OrgOauthAppAccessApprovedAuditEntry: OrgOauthAppAccessApprovedAuditEntry,OrgOauthAppAccessDeniedAuditEntry: OrgOauthAppAccessDeniedAuditEntry,OrgOauthAppAccessRequestedAuditEntry: OrgOauthAppAccessRequestedAuditEntry}, "OauthApplicationAuditEntryData"> {
  constructor() {
    super({OauthApplicationCreateAuditEntry: OauthApplicationCreateAuditEntry,OrgOauthAppAccessApprovedAuditEntry: OrgOauthAppAccessApprovedAuditEntry,OrgOauthAppAccessDeniedAuditEntry: OrgOauthAppAccessDeniedAuditEntry,OrgOauthAppAccessRequestedAuditEntry: OrgOauthAppAccessRequestedAuditEntry}, "OauthApplicationAuditEntryData")
  }
}


/**
 * Audit log entry for a oauth_application.create event.
 */
export class OauthApplicationCreateAuditEntry extends $Base<"OauthApplicationCreateAuditEntry"> {
  constructor() {
    super("OauthApplicationCreateAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The application URL of the OAuth Application.
 */
      get applicationUrl(): $Field<"applicationUrl", string | null | undefined>  {
       return this.$_select("applicationUrl") as any
      }

      
/**
 * The callback URL of the OAuth Application.
 */
      get callbackUrl(): $Field<"callbackUrl", string | null | undefined>  {
       return this.$_select("callbackUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The name of the OAuth Application.
 */
      get oauthApplicationName(): $Field<"oauthApplicationName", string | null | undefined>  {
       return this.$_select("oauthApplicationName") as any
      }

      
/**
 * The HTTP path for the OAuth Application
 */
      get oauthApplicationResourcePath(): $Field<"oauthApplicationResourcePath", string | null | undefined>  {
       return this.$_select("oauthApplicationResourcePath") as any
      }

      
/**
 * The HTTP URL for the OAuth Application
 */
      get oauthApplicationUrl(): $Field<"oauthApplicationUrl", string | null | undefined>  {
       return this.$_select("oauthApplicationUrl") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The rate limit of the OAuth Application.
 */
      get rateLimit(): $Field<"rateLimit", number | null | undefined>  {
       return this.$_select("rateLimit") as any
      }

      
/**
 * The state of the OAuth Application.
 */
      get state(): $Field<"state", OauthApplicationCreateAuditEntryState | null | undefined>  {
       return this.$_select("state") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}

  
/**
 * The state of an OAuth Application when it was created.
 */
export enum OauthApplicationCreateAuditEntryState {
  
/**
 * The OAuth Application was active and allowed to have OAuth Accesses.
 */
  ACTIVE = "ACTIVE",

/**
 * The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
 */
  SUSPENDED = "SUSPENDED",

/**
 * The OAuth Application was in the process of being deleted.
 */
  PENDING_DELETION = "PENDING_DELETION"
}
  

  
/**
 * The corresponding operation type for the action
 */
export enum OperationType {
  
/**
 * An existing resource was accessed
 */
  ACCESS = "ACCESS",

/**
 * A resource performed an authentication event
 */
  AUTHENTICATION = "AUTHENTICATION",

/**
 * A new resource was created
 */
  CREATE = "CREATE",

/**
 * An existing resource was modified
 */
  MODIFY = "MODIFY",

/**
 * An existing resource was removed
 */
  REMOVE = "REMOVE",

/**
 * An existing resource was restored
 */
  RESTORE = "RESTORE",

/**
 * An existing resource was transferred between multiple resources
 */
  TRANSFER = "TRANSFER"
}
  

  
/**
 * Possible directions in which to order a list of items when provided an `orderBy` argument.
 */
export enum OrderDirection {
  
/**
 * Specifies an ascending order for a given `orderBy` argument.
 */
  ASC = "ASC",

/**
 * Specifies a descending order for a given `orderBy` argument.
 */
  DESC = "DESC"
}
  


/**
 * Audit log entry for a org.add_billing_manager
 */
export class OrgAddBillingManagerAuditEntry extends $Base<"OrgAddBillingManagerAuditEntry"> {
  constructor() {
    super("OrgAddBillingManagerAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The email address used to invite a billing manager for the organization.
 */
      get invitationEmail(): $Field<"invitationEmail", string | null | undefined>  {
       return this.$_select("invitationEmail") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.add_member
 */
export class OrgAddMemberAuditEntry extends $Base<"OrgAddMemberAuditEntry"> {
  constructor() {
    super("OrgAddMemberAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The permission level of the member added to the organization.
 */
      get permission(): $Field<"permission", OrgAddMemberAuditEntryPermission | null | undefined>  {
       return this.$_select("permission") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}

  
/**
 * The permissions available to members on an Organization.
 */
export enum OrgAddMemberAuditEntryPermission {
  
/**
 * Can read and clone repositories.
 */
  READ = "READ",

/**
 * Can read, clone, push, and add collaborators to repositories.
 */
  ADMIN = "ADMIN"
}
  


/**
 * Audit log entry for a org.block_user
 */
export class OrgBlockUserAuditEntry extends $Base<"OrgBlockUserAuditEntry"> {
  constructor() {
    super("OrgBlockUserAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The blocked user.
 */
      blockedUser<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"blockedUser", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("blockedUser", options) as any
    }
  

      
/**
 * The username of the blocked user.
 */
      get blockedUserName(): $Field<"blockedUserName", string | null | undefined>  {
       return this.$_select("blockedUserName") as any
      }

      
/**
 * The HTTP path for the blocked user.
 */
      get blockedUserResourcePath(): $Field<"blockedUserResourcePath", string | null | undefined>  {
       return this.$_select("blockedUserResourcePath") as any
      }

      
/**
 * The HTTP URL for the blocked user.
 */
      get blockedUserUrl(): $Field<"blockedUserUrl", string | null | undefined>  {
       return this.$_select("blockedUserUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.config.disable_collaborators_only event.
 */
export class OrgConfigDisableCollaboratorsOnlyAuditEntry extends $Base<"OrgConfigDisableCollaboratorsOnlyAuditEntry"> {
  constructor() {
    super("OrgConfigDisableCollaboratorsOnlyAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.config.enable_collaborators_only event.
 */
export class OrgConfigEnableCollaboratorsOnlyAuditEntry extends $Base<"OrgConfigEnableCollaboratorsOnlyAuditEntry"> {
  constructor() {
    super("OrgConfigEnableCollaboratorsOnlyAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.create event.
 */
export class OrgCreateAuditEntry extends $Base<"OrgCreateAuditEntry"> {
  constructor() {
    super("OrgCreateAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The billing plan for the Organization.
 */
      get billingPlan(): $Field<"billingPlan", OrgCreateAuditEntryBillingPlan | null | undefined>  {
       return this.$_select("billingPlan") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}

  
/**
 * The billing plans available for organizations.
 */
export enum OrgCreateAuditEntryBillingPlan {
  
/**
 * Free Plan
 */
  FREE = "FREE",

/**
 * Team Plan
 */
  BUSINESS = "BUSINESS",

/**
 * Enterprise Cloud Plan
 */
  BUSINESS_PLUS = "BUSINESS_PLUS",

/**
 * Legacy Unlimited Plan
 */
  UNLIMITED = "UNLIMITED",

/**
 * Tiered Per Seat Plan
 */
  TIERED_PER_SEAT = "TIERED_PER_SEAT"
}
  


/**
 * Audit log entry for a org.disable_oauth_app_restrictions event.
 */
export class OrgDisableOauthAppRestrictionsAuditEntry extends $Base<"OrgDisableOauthAppRestrictionsAuditEntry"> {
  constructor() {
    super("OrgDisableOauthAppRestrictionsAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.disable_saml event.
 */
export class OrgDisableSamlAuditEntry extends $Base<"OrgDisableSamlAuditEntry"> {
  constructor() {
    super("OrgDisableSamlAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The SAML provider's digest algorithm URL.
 */
      get digestMethodUrl(): $Field<"digestMethodUrl", string | null | undefined>  {
       return this.$_select("digestMethodUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The SAML provider's issuer URL.
 */
      get issuerUrl(): $Field<"issuerUrl", string | null | undefined>  {
       return this.$_select("issuerUrl") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The SAML provider's signature algorithm URL.
 */
      get signatureMethodUrl(): $Field<"signatureMethodUrl", string | null | undefined>  {
       return this.$_select("signatureMethodUrl") as any
      }

      
/**
 * The SAML provider's single sign-on URL.
 */
      get singleSignOnUrl(): $Field<"singleSignOnUrl", string | null | undefined>  {
       return this.$_select("singleSignOnUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.disable_two_factor_requirement event.
 */
export class OrgDisableTwoFactorRequirementAuditEntry extends $Base<"OrgDisableTwoFactorRequirementAuditEntry"> {
  constructor() {
    super("OrgDisableTwoFactorRequirementAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.enable_oauth_app_restrictions event.
 */
export class OrgEnableOauthAppRestrictionsAuditEntry extends $Base<"OrgEnableOauthAppRestrictionsAuditEntry"> {
  constructor() {
    super("OrgEnableOauthAppRestrictionsAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.enable_saml event.
 */
export class OrgEnableSamlAuditEntry extends $Base<"OrgEnableSamlAuditEntry"> {
  constructor() {
    super("OrgEnableSamlAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The SAML provider's digest algorithm URL.
 */
      get digestMethodUrl(): $Field<"digestMethodUrl", string | null | undefined>  {
       return this.$_select("digestMethodUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The SAML provider's issuer URL.
 */
      get issuerUrl(): $Field<"issuerUrl", string | null | undefined>  {
       return this.$_select("issuerUrl") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The SAML provider's signature algorithm URL.
 */
      get signatureMethodUrl(): $Field<"signatureMethodUrl", string | null | undefined>  {
       return this.$_select("signatureMethodUrl") as any
      }

      
/**
 * The SAML provider's single sign-on URL.
 */
      get singleSignOnUrl(): $Field<"singleSignOnUrl", string | null | undefined>  {
       return this.$_select("singleSignOnUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.enable_two_factor_requirement event.
 */
export class OrgEnableTwoFactorRequirementAuditEntry extends $Base<"OrgEnableTwoFactorRequirementAuditEntry"> {
  constructor() {
    super("OrgEnableTwoFactorRequirementAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Ordering options for an organization's enterprise owner connections.
 */
export type OrgEnterpriseOwnerOrder = {
  direction: OrderDirection,
field: OrgEnterpriseOwnerOrderField
}
    

  
/**
 * Properties by which enterprise owners can be ordered.
 */
export enum OrgEnterpriseOwnerOrderField {
  
/**
 * Order enterprise owners by login.
 */
  LOGIN = "LOGIN"
}
  


/**
 * Audit log entry for a org.invite_member event.
 */
export class OrgInviteMemberAuditEntry extends $Base<"OrgInviteMemberAuditEntry"> {
  constructor() {
    super("OrgInviteMemberAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The email address of the organization invitation.
 */
      get email(): $Field<"email", string | null | undefined>  {
       return this.$_select("email") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The organization invitation.
 */
      organizationInvitation<Sel extends Selection<OrganizationInvitation>>(selectorFn: (s: OrganizationInvitation) => [...Sel]):$Field<"organizationInvitation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationInvitation)
      };
      return this.$_select("organizationInvitation", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.invite_to_business event.
 */
export class OrgInviteToBusinessAuditEntry extends $Base<"OrgInviteToBusinessAuditEntry"> {
  constructor() {
    super("OrgInviteToBusinessAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The HTTP path for this enterprise.
 */
      get enterpriseResourcePath(): $Field<"enterpriseResourcePath", string | null | undefined>  {
       return this.$_select("enterpriseResourcePath") as any
      }

      
/**
 * The slug of the enterprise.
 */
      get enterpriseSlug(): $Field<"enterpriseSlug", string | null | undefined>  {
       return this.$_select("enterpriseSlug") as any
      }

      
/**
 * The HTTP URL for this enterprise.
 */
      get enterpriseUrl(): $Field<"enterpriseUrl", string | null | undefined>  {
       return this.$_select("enterpriseUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.oauth_app_access_approved event.
 */
export class OrgOauthAppAccessApprovedAuditEntry extends $Base<"OrgOauthAppAccessApprovedAuditEntry"> {
  constructor() {
    super("OrgOauthAppAccessApprovedAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The name of the OAuth Application.
 */
      get oauthApplicationName(): $Field<"oauthApplicationName", string | null | undefined>  {
       return this.$_select("oauthApplicationName") as any
      }

      
/**
 * The HTTP path for the OAuth Application
 */
      get oauthApplicationResourcePath(): $Field<"oauthApplicationResourcePath", string | null | undefined>  {
       return this.$_select("oauthApplicationResourcePath") as any
      }

      
/**
 * The HTTP URL for the OAuth Application
 */
      get oauthApplicationUrl(): $Field<"oauthApplicationUrl", string | null | undefined>  {
       return this.$_select("oauthApplicationUrl") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.oauth_app_access_denied event.
 */
export class OrgOauthAppAccessDeniedAuditEntry extends $Base<"OrgOauthAppAccessDeniedAuditEntry"> {
  constructor() {
    super("OrgOauthAppAccessDeniedAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The name of the OAuth Application.
 */
      get oauthApplicationName(): $Field<"oauthApplicationName", string | null | undefined>  {
       return this.$_select("oauthApplicationName") as any
      }

      
/**
 * The HTTP path for the OAuth Application
 */
      get oauthApplicationResourcePath(): $Field<"oauthApplicationResourcePath", string | null | undefined>  {
       return this.$_select("oauthApplicationResourcePath") as any
      }

      
/**
 * The HTTP URL for the OAuth Application
 */
      get oauthApplicationUrl(): $Field<"oauthApplicationUrl", string | null | undefined>  {
       return this.$_select("oauthApplicationUrl") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.oauth_app_access_requested event.
 */
export class OrgOauthAppAccessRequestedAuditEntry extends $Base<"OrgOauthAppAccessRequestedAuditEntry"> {
  constructor() {
    super("OrgOauthAppAccessRequestedAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The name of the OAuth Application.
 */
      get oauthApplicationName(): $Field<"oauthApplicationName", string | null | undefined>  {
       return this.$_select("oauthApplicationName") as any
      }

      
/**
 * The HTTP path for the OAuth Application
 */
      get oauthApplicationResourcePath(): $Field<"oauthApplicationResourcePath", string | null | undefined>  {
       return this.$_select("oauthApplicationResourcePath") as any
      }

      
/**
 * The HTTP URL for the OAuth Application
 */
      get oauthApplicationUrl(): $Field<"oauthApplicationUrl", string | null | undefined>  {
       return this.$_select("oauthApplicationUrl") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.remove_billing_manager event.
 */
export class OrgRemoveBillingManagerAuditEntry extends $Base<"OrgRemoveBillingManagerAuditEntry"> {
  constructor() {
    super("OrgRemoveBillingManagerAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The reason for the billing manager being removed.
 */
      get reason(): $Field<"reason", OrgRemoveBillingManagerAuditEntryReason | null | undefined>  {
       return this.$_select("reason") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}

  
/**
 * The reason a billing manager was removed from an Organization.
 */
export enum OrgRemoveBillingManagerAuditEntryReason {
  
/**
 * The organization required 2FA of its billing managers and this user did not have 2FA enabled.
 */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",

/**
 * SAML external identity missing
 */
  SAML_EXTERNAL_IDENTITY_MISSING = "SAML_EXTERNAL_IDENTITY_MISSING",

/**
 * SAML SSO enforcement requires an external identity
 */
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY"
}
  


/**
 * Audit log entry for a org.remove_member event.
 */
export class OrgRemoveMemberAuditEntry extends $Base<"OrgRemoveMemberAuditEntry"> {
  constructor() {
    super("OrgRemoveMemberAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The types of membership the member has with the organization.
 */
      get membershipTypes(): $Field<"membershipTypes", Readonly<Array<OrgRemoveMemberAuditEntryMembershipType>> | null | undefined>  {
       return this.$_select("membershipTypes") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The reason for the member being removed.
 */
      get reason(): $Field<"reason", OrgRemoveMemberAuditEntryReason | null | undefined>  {
       return this.$_select("reason") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}

  
/**
 * The type of membership a user has with an Organization.
 */
export enum OrgRemoveMemberAuditEntryMembershipType {
  
/**
 * A suspended member.
 */
  SUSPENDED = "SUSPENDED",

/**
 * A direct member is a user that is a member of the Organization.
 */
  DIRECT_MEMBER = "DIRECT_MEMBER",

/**
 * Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories.
 */
  ADMIN = "ADMIN",

/**
 * A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
 */
  BILLING_MANAGER = "BILLING_MANAGER",

/**
 * An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization.
 */
  UNAFFILIATED = "UNAFFILIATED",

/**
 * An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
 */
  OUTSIDE_COLLABORATOR = "OUTSIDE_COLLABORATOR"
}
  

  
/**
 * The reason a member was removed from an Organization.
 */
export enum OrgRemoveMemberAuditEntryReason {
  
/**
 * The organization required 2FA of its billing managers and this user did not have 2FA enabled.
 */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",

/**
 * SAML external identity missing
 */
  SAML_EXTERNAL_IDENTITY_MISSING = "SAML_EXTERNAL_IDENTITY_MISSING",

/**
 * SAML SSO enforcement requires an external identity
 */
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY",

/**
 * User account has been deleted
 */
  USER_ACCOUNT_DELETED = "USER_ACCOUNT_DELETED",

/**
 * User was removed from organization during account recovery
 */
  TWO_FACTOR_ACCOUNT_RECOVERY = "TWO_FACTOR_ACCOUNT_RECOVERY"
}
  


/**
 * Audit log entry for a org.remove_outside_collaborator event.
 */
export class OrgRemoveOutsideCollaboratorAuditEntry extends $Base<"OrgRemoveOutsideCollaboratorAuditEntry"> {
  constructor() {
    super("OrgRemoveOutsideCollaboratorAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The types of membership the outside collaborator has with the organization.
 */
      get membershipTypes(): $Field<"membershipTypes", Readonly<Array<OrgRemoveOutsideCollaboratorAuditEntryMembershipType>> | null | undefined>  {
       return this.$_select("membershipTypes") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The reason for the outside collaborator being removed from the Organization.
 */
      get reason(): $Field<"reason", OrgRemoveOutsideCollaboratorAuditEntryReason | null | undefined>  {
       return this.$_select("reason") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}

  
/**
 * The type of membership a user has with an Organization.
 */
export enum OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  
/**
 * An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization.
 */
  OUTSIDE_COLLABORATOR = "OUTSIDE_COLLABORATOR",

/**
 * An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization.
 */
  UNAFFILIATED = "UNAFFILIATED",

/**
 * A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
 */
  BILLING_MANAGER = "BILLING_MANAGER"
}
  

  
/**
 * The reason an outside collaborator was removed from an Organization.
 */
export enum OrgRemoveOutsideCollaboratorAuditEntryReason {
  
/**
 * The organization required 2FA of its billing managers and this user did not have 2FA enabled.
 */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",

/**
 * SAML external identity missing
 */
  SAML_EXTERNAL_IDENTITY_MISSING = "SAML_EXTERNAL_IDENTITY_MISSING"
}
  


/**
 * Audit log entry for a org.restore_member event.
 */
export class OrgRestoreMemberAuditEntry extends $Base<"OrgRestoreMemberAuditEntry"> {
  constructor() {
    super("OrgRestoreMemberAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The number of custom email routings for the restored member.
 */
      get restoredCustomEmailRoutingsCount(): $Field<"restoredCustomEmailRoutingsCount", number | null | undefined>  {
       return this.$_select("restoredCustomEmailRoutingsCount") as any
      }

      
/**
 * The number of issue assignments for the restored member.
 */
      get restoredIssueAssignmentsCount(): $Field<"restoredIssueAssignmentsCount", number | null | undefined>  {
       return this.$_select("restoredIssueAssignmentsCount") as any
      }

      
/**
 * Restored organization membership objects.
 */
      restoredMemberships<Sel extends Selection<OrgRestoreMemberAuditEntryMembership>>(selectorFn: (s: OrgRestoreMemberAuditEntryMembership) => [...Sel]):$Field<"restoredMemberships", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrgRestoreMemberAuditEntryMembership)
      };
      return this.$_select("restoredMemberships", options) as any
    }
  

      
/**
 * The number of restored memberships.
 */
      get restoredMembershipsCount(): $Field<"restoredMembershipsCount", number | null | undefined>  {
       return this.$_select("restoredMembershipsCount") as any
      }

      
/**
 * The number of repositories of the restored member.
 */
      get restoredRepositoriesCount(): $Field<"restoredRepositoriesCount", number | null | undefined>  {
       return this.$_select("restoredRepositoriesCount") as any
      }

      
/**
 * The number of starred repositories for the restored member.
 */
      get restoredRepositoryStarsCount(): $Field<"restoredRepositoryStarsCount", number | null | undefined>  {
       return this.$_select("restoredRepositoryStarsCount") as any
      }

      
/**
 * The number of watched repositories for the restored member.
 */
      get restoredRepositoryWatchesCount(): $Field<"restoredRepositoryWatchesCount", number | null | undefined>  {
       return this.$_select("restoredRepositoryWatchesCount") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Types of memberships that can be restored for an Organization member.
 */
export class OrgRestoreMemberAuditEntryMembership extends $Union<{OrgRestoreMemberMembershipOrganizationAuditEntryData: OrgRestoreMemberMembershipOrganizationAuditEntryData,OrgRestoreMemberMembershipRepositoryAuditEntryData: OrgRestoreMemberMembershipRepositoryAuditEntryData,OrgRestoreMemberMembershipTeamAuditEntryData: OrgRestoreMemberMembershipTeamAuditEntryData,OrganizationAuditEntryData: OrganizationAuditEntryData,RepositoryAuditEntryData: RepositoryAuditEntryData,TeamAuditEntryData: TeamAuditEntryData}, "OrgRestoreMemberAuditEntryMembership"> {
  constructor() {
    super({OrgRestoreMemberMembershipOrganizationAuditEntryData: OrgRestoreMemberMembershipOrganizationAuditEntryData,OrgRestoreMemberMembershipRepositoryAuditEntryData: OrgRestoreMemberMembershipRepositoryAuditEntryData,OrgRestoreMemberMembershipTeamAuditEntryData: OrgRestoreMemberMembershipTeamAuditEntryData,OrganizationAuditEntryData: OrganizationAuditEntryData,RepositoryAuditEntryData: RepositoryAuditEntryData,TeamAuditEntryData: TeamAuditEntryData})
  }
}


/**
 * Metadata for an organization membership for org.restore_member actions
 */
export class OrgRestoreMemberMembershipOrganizationAuditEntryData extends $Base<"OrgRestoreMemberMembershipOrganizationAuditEntryData"> {
  constructor() {
    super("OrgRestoreMemberMembershipOrganizationAuditEntryData")
  }

  
      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }
}


/**
 * Metadata for a repository membership for org.restore_member actions
 */
export class OrgRestoreMemberMembershipRepositoryAuditEntryData extends $Base<"OrgRestoreMemberMembershipRepositoryAuditEntryData"> {
  constructor() {
    super("OrgRestoreMemberMembershipRepositoryAuditEntryData")
  }

  
      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }
}


/**
 * Metadata for a team membership for org.restore_member actions
 */
export class OrgRestoreMemberMembershipTeamAuditEntryData extends $Base<"OrgRestoreMemberMembershipTeamAuditEntryData"> {
  constructor() {
    super("OrgRestoreMemberMembershipTeamAuditEntryData")
  }

  
      
/**
 * The team associated with the action
 */
      team<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"team", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("team", options) as any
    }
  

      
/**
 * The name of the team
 */
      get teamName(): $Field<"teamName", string | null | undefined>  {
       return this.$_select("teamName") as any
      }

      
/**
 * The HTTP path for this team
 */
      get teamResourcePath(): $Field<"teamResourcePath", string | null | undefined>  {
       return this.$_select("teamResourcePath") as any
      }

      
/**
 * The HTTP URL for this team
 */
      get teamUrl(): $Field<"teamUrl", string | null | undefined>  {
       return this.$_select("teamUrl") as any
      }
}


/**
 * Audit log entry for a org.unblock_user
 */
export class OrgUnblockUserAuditEntry extends $Base<"OrgUnblockUserAuditEntry"> {
  constructor() {
    super("OrgUnblockUserAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The user being unblocked by the organization.
 */
      blockedUser<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"blockedUser", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("blockedUser", options) as any
    }
  

      
/**
 * The username of the blocked user.
 */
      get blockedUserName(): $Field<"blockedUserName", string | null | undefined>  {
       return this.$_select("blockedUserName") as any
      }

      
/**
 * The HTTP path for the blocked user.
 */
      get blockedUserResourcePath(): $Field<"blockedUserResourcePath", string | null | undefined>  {
       return this.$_select("blockedUserResourcePath") as any
      }

      
/**
 * The HTTP URL for the blocked user.
 */
      get blockedUserUrl(): $Field<"blockedUserUrl", string | null | undefined>  {
       return this.$_select("blockedUserUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a org.update_default_repository_permission
 */
export class OrgUpdateDefaultRepositoryPermissionAuditEntry extends $Base<"OrgUpdateDefaultRepositoryPermissionAuditEntry"> {
  constructor() {
    super("OrgUpdateDefaultRepositoryPermissionAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The new base repository permission level for the organization.
 */
      get permission(): $Field<"permission", OrgUpdateDefaultRepositoryPermissionAuditEntryPermission | null | undefined>  {
       return this.$_select("permission") as any
      }

      
/**
 * The former base repository permission level for the organization.
 */
      get permissionWas(): $Field<"permissionWas", OrgUpdateDefaultRepositoryPermissionAuditEntryPermission | null | undefined>  {
       return this.$_select("permissionWas") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}

  
/**
 * The default permission a repository can have in an Organization.
 */
export enum OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  
/**
 * Can read and clone repositories.
 */
  READ = "READ",

/**
 * Can read, clone and push to repositories.
 */
  WRITE = "WRITE",

/**
 * Can read, clone, push, and add collaborators to repositories.
 */
  ADMIN = "ADMIN",

/**
 * No default permission value.
 */
  NONE = "NONE"
}
  


/**
 * Audit log entry for a org.update_member event.
 */
export class OrgUpdateMemberAuditEntry extends $Base<"OrgUpdateMemberAuditEntry"> {
  constructor() {
    super("OrgUpdateMemberAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The new member permission level for the organization.
 */
      get permission(): $Field<"permission", OrgUpdateMemberAuditEntryPermission | null | undefined>  {
       return this.$_select("permission") as any
      }

      
/**
 * The former member permission level for the organization.
 */
      get permissionWas(): $Field<"permissionWas", OrgUpdateMemberAuditEntryPermission | null | undefined>  {
       return this.$_select("permissionWas") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}

  
/**
 * The permissions available to members on an Organization.
 */
export enum OrgUpdateMemberAuditEntryPermission {
  
/**
 * Can read and clone repositories.
 */
  READ = "READ",

/**
 * Can read, clone, push, and add collaborators to repositories.
 */
  ADMIN = "ADMIN"
}
  


/**
 * Audit log entry for a org.update_member_repository_creation_permission event.
 */
export class OrgUpdateMemberRepositoryCreationPermissionAuditEntry extends $Base<"OrgUpdateMemberRepositoryCreationPermissionAuditEntry"> {
  constructor() {
    super("OrgUpdateMemberRepositoryCreationPermissionAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * Can members create repositories in the organization.
 */
      get canCreateRepositories(): $Field<"canCreateRepositories", boolean | null | undefined>  {
       return this.$_select("canCreateRepositories") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }

      
/**
 * The permission for visibility level of repositories for this organization.
 */
      get visibility(): $Field<"visibility", OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility | null | undefined>  {
       return this.$_select("visibility") as any
      }
}

  
/**
 * The permissions available for repository creation on an Organization.
 */
export enum OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  
/**
 * All organization members are restricted from creating any repositories.
 */
  ALL = "ALL",

/**
 * All organization members are restricted from creating public repositories.
 */
  PUBLIC = "PUBLIC",

/**
 * All organization members are allowed to create any repositories.
 */
  NONE = "NONE",

/**
 * All organization members are restricted from creating private repositories.
 */
  PRIVATE = "PRIVATE",

/**
 * All organization members are restricted from creating internal repositories.
 */
  INTERNAL = "INTERNAL",

/**
 * All organization members are restricted from creating public or internal repositories.
 */
  PUBLIC_INTERNAL = "PUBLIC_INTERNAL",

/**
 * All organization members are restricted from creating private or internal repositories.
 */
  PRIVATE_INTERNAL = "PRIVATE_INTERNAL",

/**
 * All organization members are restricted from creating public or private repositories.
 */
  PUBLIC_PRIVATE = "PUBLIC_PRIVATE"
}
  


/**
 * Audit log entry for a org.update_member_repository_invitation_permission event.
 */
export class OrgUpdateMemberRepositoryInvitationPermissionAuditEntry extends $Base<"OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"> {
  constructor() {
    super("OrgUpdateMemberRepositoryInvitationPermissionAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * Can outside collaborators be invited to repositories in the organization.
 */
      get canInviteOutsideCollaboratorsToRepositories(): $Field<"canInviteOutsideCollaboratorsToRepositories", boolean | null | undefined>  {
       return this.$_select("canInviteOutsideCollaboratorsToRepositories") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * An account on GitHub, with one or more owners, that has repositories, members and teams.
 */
export class Organization extends $Base<"Organization"> {
  constructor() {
    super("Organization")
  }

  
      
/**
 * Determine if this repository owner has any items that can be pinned to their profile.
 */
      anyPinnableItems<Args extends VariabledInput<{
        type?: PinnableItemType | null | undefined,
      }>>(args: Args):$Field<"anyPinnableItems", boolean , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              type: "PinnableItemType"
            },
        args,

        
      };
      return this.$_select("anyPinnableItems", options) as any
    }
  

      
/**
 * Audit log entries of the organization
 */
      auditLog<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
query?: string | null | undefined
orderBy?: AuditLogOrder | null | undefined,
      }>,Sel extends Selection<OrganizationAuditEntryConnection>>(args: Args, selectorFn: (s: OrganizationAuditEntryConnection) => [...Sel]):$Field<"auditLog", GetOutput<Sel> , GetVariables<Sel, Args>>
auditLog<Sel extends Selection<OrganizationAuditEntryConnection>>(selectorFn: (s: OrganizationAuditEntryConnection) => [...Sel]):$Field<"auditLog", GetOutput<Sel> , GetVariables<Sel>>
auditLog(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
query: "String",
orderBy: "AuditLogOrder"
            },
        args,

        selection: selectorFn(new OrganizationAuditEntryConnection)
      };
      return this.$_select("auditLog", options) as any
    }
  

      
/**
 * A URL pointing to the organization's public avatar.
 */
      avatarUrl<Args extends VariabledInput<{
        size?: number | null | undefined,
      }>>(args: Args):$Field<"avatarUrl", string , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              size: "Int"
            },
        args,

        
      };
      return this.$_select("avatarUrl", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The organization's public profile description.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * The organization's public profile description rendered to HTML.
 */
      get descriptionHTML(): $Field<"descriptionHTML", string | null | undefined>  {
       return this.$_select("descriptionHTML") as any
      }

      
/**
 * A list of domains owned by the organization.
 */
      domains<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
isVerified?: boolean | null | undefined
isApproved?: boolean | null | undefined
orderBy?: VerifiableDomainOrder | null | undefined,
      }>,Sel extends Selection<VerifiableDomainConnection>>(args: Args, selectorFn: (s: VerifiableDomainConnection) => [...Sel]):$Field<"domains", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
domains<Sel extends Selection<VerifiableDomainConnection>>(selectorFn: (s: VerifiableDomainConnection) => [...Sel]):$Field<"domains", GetOutput<Sel> | undefined , GetVariables<Sel>>
domains(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
isVerified: "Boolean",
isApproved: "Boolean",
orderBy: "VerifiableDomainOrder"
            },
        args,

        selection: selectorFn(new VerifiableDomainConnection)
      };
      return this.$_select("domains", options) as any
    }
  

      
/**
 * The organization's public email.
 */
      get email(): $Field<"email", string | null | undefined>  {
       return this.$_select("email") as any
      }

      
/**
 * A list of owners of the organization's enterprise account.
 */
      enterpriseOwners<Args extends VariabledInput<{
        query?: string | null | undefined
organizationRole?: RoleInOrganization | null | undefined
orderBy?: OrgEnterpriseOwnerOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<OrganizationEnterpriseOwnerConnection>>(args: Args, selectorFn: (s: OrganizationEnterpriseOwnerConnection) => [...Sel]):$Field<"enterpriseOwners", GetOutput<Sel> , GetVariables<Sel, Args>>
enterpriseOwners<Sel extends Selection<OrganizationEnterpriseOwnerConnection>>(selectorFn: (s: OrganizationEnterpriseOwnerConnection) => [...Sel]):$Field<"enterpriseOwners", GetOutput<Sel> , GetVariables<Sel>>
enterpriseOwners(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
organizationRole: "RoleInOrganization",
orderBy: "OrgEnterpriseOwnerOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new OrganizationEnterpriseOwnerConnection)
      };
      return this.$_select("enterpriseOwners", options) as any
    }
  

      
/**
 * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
 */
      get estimatedNextSponsorsPayoutInCents(): $Field<"estimatedNextSponsorsPayoutInCents", number>  {
       return this.$_select("estimatedNextSponsorsPayoutInCents") as any
      }

      
/**
 * True if this user/organization has a GitHub Sponsors listing.
 */
      get hasSponsorsListing(): $Field<"hasSponsorsListing", boolean>  {
       return this.$_select("hasSponsorsListing") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The interaction ability settings for this organization.
 */
      interactionAbility<Sel extends Selection<RepositoryInteractionAbility>>(selectorFn: (s: RepositoryInteractionAbility) => [...Sel]):$Field<"interactionAbility", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryInteractionAbility)
      };
      return this.$_select("interactionAbility", options) as any
    }
  

      
/**
 * The setting value for whether the organization has an IP allow list enabled.
 */
      get ipAllowListEnabledSetting(): $Field<"ipAllowListEnabledSetting", IpAllowListEnabledSettingValue>  {
       return this.$_select("ipAllowListEnabledSetting") as any
      }

      
/**
 * The IP addresses that are allowed to access resources owned by the organization.
 */
      ipAllowListEntries<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: IpAllowListEntryOrder | null | undefined,
      }>,Sel extends Selection<IpAllowListEntryConnection>>(args: Args, selectorFn: (s: IpAllowListEntryConnection) => [...Sel]):$Field<"ipAllowListEntries", GetOutput<Sel> , GetVariables<Sel, Args>>
ipAllowListEntries<Sel extends Selection<IpAllowListEntryConnection>>(selectorFn: (s: IpAllowListEntryConnection) => [...Sel]):$Field<"ipAllowListEntries", GetOutput<Sel> , GetVariables<Sel>>
ipAllowListEntries(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "IpAllowListEntryOrder"
            },
        args,

        selection: selectorFn(new IpAllowListEntryConnection)
      };
      return this.$_select("ipAllowListEntries", options) as any
    }
  

      
/**
 * The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.
 */
      get ipAllowListForInstalledAppsEnabledSetting(): $Field<"ipAllowListForInstalledAppsEnabledSetting", IpAllowListForInstalledAppsEnabledSettingValue>  {
       return this.$_select("ipAllowListForInstalledAppsEnabledSetting") as any
      }

      
/**
 * Check if the given account is sponsoring this user/organization.
 */
      isSponsoredBy<Args extends VariabledInput<{
        accountLogin: string,
      }>>(args: Args):$Field<"isSponsoredBy", boolean , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              accountLogin: "String!"
            },
        args,

        
      };
      return this.$_select("isSponsoredBy", options) as any
    }
  

      
/**
 * True if the viewer is sponsored by this user/organization.
 */
      get isSponsoringViewer(): $Field<"isSponsoringViewer", boolean>  {
       return this.$_select("isSponsoringViewer") as any
      }

      
/**
 * Whether the organization has verified its profile email and website.
 */
      get isVerified(): $Field<"isVerified", boolean>  {
       return this.$_select("isVerified") as any
      }

      
/**
 * Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
 */
      itemShowcase<Sel extends Selection<ProfileItemShowcase>>(selectorFn: (s: ProfileItemShowcase) => [...Sel]):$Field<"itemShowcase", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProfileItemShowcase)
      };
      return this.$_select("itemShowcase", options) as any
    }
  

      
/**
 * The organization's public profile location.
 */
      get location(): $Field<"location", string | null | undefined>  {
       return this.$_select("location") as any
      }

      
/**
 * The organization's login name.
 */
      get login(): $Field<"login", string>  {
       return this.$_select("login") as any
      }

      
/**
 * Get the status messages members of this entity have set that are either public or visible only to the organization.
 */
      memberStatuses<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: UserStatusOrder | null | undefined,
      }>,Sel extends Selection<UserStatusConnection>>(args: Args, selectorFn: (s: UserStatusConnection) => [...Sel]):$Field<"memberStatuses", GetOutput<Sel> , GetVariables<Sel, Args>>
memberStatuses<Sel extends Selection<UserStatusConnection>>(selectorFn: (s: UserStatusConnection) => [...Sel]):$Field<"memberStatuses", GetOutput<Sel> , GetVariables<Sel>>
memberStatuses(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "UserStatusOrder"
            },
        args,

        selection: selectorFn(new UserStatusConnection)
      };
      return this.$_select("memberStatuses", options) as any
    }
  

      
/**
 * Members can fork private repositories in this organization
 */
      get membersCanForkPrivateRepositories(): $Field<"membersCanForkPrivateRepositories", boolean>  {
       return this.$_select("membersCanForkPrivateRepositories") as any
      }

      
/**
 * A list of users who are members of this organization.
 */
      membersWithRole<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<OrganizationMemberConnection>>(args: Args, selectorFn: (s: OrganizationMemberConnection) => [...Sel]):$Field<"membersWithRole", GetOutput<Sel> , GetVariables<Sel, Args>>
membersWithRole<Sel extends Selection<OrganizationMemberConnection>>(selectorFn: (s: OrganizationMemberConnection) => [...Sel]):$Field<"membersWithRole", GetOutput<Sel> , GetVariables<Sel>>
membersWithRole(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new OrganizationMemberConnection)
      };
      return this.$_select("membersWithRole", options) as any
    }
  

      
/**
 * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
 */
      get monthlyEstimatedSponsorsIncomeInCents(): $Field<"monthlyEstimatedSponsorsIncomeInCents", number>  {
       return this.$_select("monthlyEstimatedSponsorsIncomeInCents") as any
      }

      
/**
 * The organization's public profile name.
 */
      get name(): $Field<"name", string | null | undefined>  {
       return this.$_select("name") as any
      }

      
/**
 * The HTTP path creating a new team
 */
      get newTeamResourcePath(): $Field<"newTeamResourcePath", string>  {
       return this.$_select("newTeamResourcePath") as any
      }

      
/**
 * The HTTP URL creating a new team
 */
      get newTeamUrl(): $Field<"newTeamUrl", string>  {
       return this.$_select("newTeamUrl") as any
      }

      
/**
 * Indicates if email notification delivery for this organization is restricted to verified or approved domains.
 */
      get notificationDeliveryRestrictionEnabledSetting(): $Field<"notificationDeliveryRestrictionEnabledSetting", NotificationRestrictionSettingValue>  {
       return this.$_select("notificationDeliveryRestrictionEnabledSetting") as any
      }

      
/**
 * The billing email for the organization.
 */
      get organizationBillingEmail(): $Field<"organizationBillingEmail", string | null | undefined>  {
       return this.$_select("organizationBillingEmail") as any
      }

      
/**
 * A list of packages under the owner.
 */
      packages<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
names?: Readonly<Array<string | null | undefined>> | null | undefined
repositoryId?: string | null | undefined
packageType?: PackageType | null | undefined
orderBy?: PackageOrder | null | undefined,
      }>,Sel extends Selection<PackageConnection>>(args: Args, selectorFn: (s: PackageConnection) => [...Sel]):$Field<"packages", GetOutput<Sel> , GetVariables<Sel, Args>>
packages<Sel extends Selection<PackageConnection>>(selectorFn: (s: PackageConnection) => [...Sel]):$Field<"packages", GetOutput<Sel> , GetVariables<Sel>>
packages(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
names: "[String]",
repositoryId: "ID",
packageType: "PackageType",
orderBy: "PackageOrder"
            },
        args,

        selection: selectorFn(new PackageConnection)
      };
      return this.$_select("packages", options) as any
    }
  

      
/**
 * A list of users who have been invited to join this organization.
 */
      pendingMembers<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserConnection>>(args: Args, selectorFn: (s: UserConnection) => [...Sel]):$Field<"pendingMembers", GetOutput<Sel> , GetVariables<Sel, Args>>
pendingMembers<Sel extends Selection<UserConnection>>(selectorFn: (s: UserConnection) => [...Sel]):$Field<"pendingMembers", GetOutput<Sel> , GetVariables<Sel>>
pendingMembers(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserConnection)
      };
      return this.$_select("pendingMembers", options) as any
    }
  

      
/**
 * A list of repositories and gists this profile owner can pin to their profile.
 */
      pinnableItems<Args extends VariabledInput<{
        types?: Readonly<Array<PinnableItemType>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PinnableItemConnection>>(args: Args, selectorFn: (s: PinnableItemConnection) => [...Sel]):$Field<"pinnableItems", GetOutput<Sel> , GetVariables<Sel, Args>>
pinnableItems<Sel extends Selection<PinnableItemConnection>>(selectorFn: (s: PinnableItemConnection) => [...Sel]):$Field<"pinnableItems", GetOutput<Sel> , GetVariables<Sel>>
pinnableItems(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              types: "[PinnableItemType!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PinnableItemConnection)
      };
      return this.$_select("pinnableItems", options) as any
    }
  

      
/**
 * A list of repositories and gists this profile owner has pinned to their profile
 */
      pinnedItems<Args extends VariabledInput<{
        types?: Readonly<Array<PinnableItemType>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PinnableItemConnection>>(args: Args, selectorFn: (s: PinnableItemConnection) => [...Sel]):$Field<"pinnedItems", GetOutput<Sel> , GetVariables<Sel, Args>>
pinnedItems<Sel extends Selection<PinnableItemConnection>>(selectorFn: (s: PinnableItemConnection) => [...Sel]):$Field<"pinnedItems", GetOutput<Sel> , GetVariables<Sel>>
pinnedItems(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              types: "[PinnableItemType!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PinnableItemConnection)
      };
      return this.$_select("pinnedItems", options) as any
    }
  

      
/**
 * Returns how many more items this profile owner can pin to their profile.
 */
      get pinnedItemsRemaining(): $Field<"pinnedItemsRemaining", number>  {
       return this.$_select("pinnedItemsRemaining") as any
      }

      
/**
 * Find project by number.
 */
      project<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<Project>>(args: Args, selectorFn: (s: Project) => [...Sel]):$Field<"project", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new Project)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * Find a project by project (beta) number.
 */
      projectNext<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<ProjectNext>>(args: Args, selectorFn: (s: ProjectNext) => [...Sel]):$Field<"projectNext", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new ProjectNext)
      };
      return this.$_select("projectNext", options) as any
    }
  

      
/**
 * Find a project by number.
 */
      projectV2<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<ProjectV2>>(args: Args, selectorFn: (s: ProjectV2) => [...Sel]):$Field<"projectV2", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("projectV2", options) as any
    }
  

      
/**
 * A list of projects under the owner.
 */
      projects<Args extends VariabledInput<{
        orderBy?: ProjectOrder | null | undefined
search?: string | null | undefined
states?: Readonly<Array<ProjectState>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectConnection>>(args: Args, selectorFn: (s: ProjectConnection) => [...Sel]):$Field<"projects", GetOutput<Sel> , GetVariables<Sel, Args>>
projects<Sel extends Selection<ProjectConnection>>(selectorFn: (s: ProjectConnection) => [...Sel]):$Field<"projects", GetOutput<Sel> , GetVariables<Sel>>
projects(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "ProjectOrder",
search: "String",
states: "[ProjectState!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectConnection)
      };
      return this.$_select("projects", options) as any
    }
  

      
/**
 * A list of projects (beta) under the owner.
 */
      projectsNext<Args extends VariabledInput<{
        query?: string | null | undefined
sortBy?: ProjectNextOrderField | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectNextConnection>>(args: Args, selectorFn: (s: ProjectNextConnection) => [...Sel]):$Field<"projectsNext", GetOutput<Sel> , GetVariables<Sel, Args>>
projectsNext<Sel extends Selection<ProjectNextConnection>>(selectorFn: (s: ProjectNextConnection) => [...Sel]):$Field<"projectsNext", GetOutput<Sel> , GetVariables<Sel>>
projectsNext(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
sortBy: "ProjectNextOrderField",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectNextConnection)
      };
      return this.$_select("projectsNext", options) as any
    }
  

      
/**
 * The HTTP path listing organization's projects
 */
      get projectsResourcePath(): $Field<"projectsResourcePath", string>  {
       return this.$_select("projectsResourcePath") as any
      }

      
/**
 * The HTTP URL listing organization's projects
 */
      get projectsUrl(): $Field<"projectsUrl", string>  {
       return this.$_select("projectsUrl") as any
      }

      
/**
 * A list of projects under the owner.
 */
      projectsV2<Args extends VariabledInput<{
        query?: string | null | undefined
orderBy?: ProjectV2Order | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2Connection>>(args: Args, selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel, Args>>
projectsV2<Sel extends Selection<ProjectV2Connection>>(selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel>>
projectsV2(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
orderBy: "ProjectV2Order",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2Connection)
      };
      return this.$_select("projectsV2", options) as any
    }
  

      
/**
 * Recent projects that this user has modified in the context of the owner.
 */
      recentProjects<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2Connection>>(args: Args, selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"recentProjects", GetOutput<Sel> , GetVariables<Sel, Args>>
recentProjects<Sel extends Selection<ProjectV2Connection>>(selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"recentProjects", GetOutput<Sel> , GetVariables<Sel>>
recentProjects(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2Connection)
      };
      return this.$_select("recentProjects", options) as any
    }
  

      
/**
 * A list of repositories that the user owns.
 */
      repositories<Args extends VariabledInput<{
        privacy?: RepositoryPrivacy | null | undefined
orderBy?: RepositoryOrder | null | undefined
affiliations?: Readonly<Array<RepositoryAffiliation | null | undefined>> | null | undefined
ownerAffiliations?: Readonly<Array<RepositoryAffiliation | null | undefined>> | null | undefined
isLocked?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
isFork?: boolean | null | undefined,
      }>,Sel extends Selection<RepositoryConnection>>(args: Args, selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel, Args>>
repositories<Sel extends Selection<RepositoryConnection>>(selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel>>
repositories(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              privacy: "RepositoryPrivacy",
orderBy: "RepositoryOrder",
affiliations: "[RepositoryAffiliation]",
ownerAffiliations: "[RepositoryAffiliation]",
isLocked: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int",
isFork: "Boolean"
            },
        args,

        selection: selectorFn(new RepositoryConnection)
      };
      return this.$_select("repositories", options) as any
    }
  

      
/**
 * Find Repository.
 */
      repository<Args extends VariabledInput<{
        name: string
followRenames?: boolean | null | undefined,
      }>,Sel extends Selection<Repository>>(args: Args, selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              name: "String!",
followRenames: "Boolean"
            },
        args,

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * Discussion comments this user has authored.
 */
      repositoryDiscussionComments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
repositoryId?: string | null | undefined
onlyAnswers?: boolean | null | undefined,
      }>,Sel extends Selection<DiscussionCommentConnection>>(args: Args, selectorFn: (s: DiscussionCommentConnection) => [...Sel]):$Field<"repositoryDiscussionComments", GetOutput<Sel> , GetVariables<Sel, Args>>
repositoryDiscussionComments<Sel extends Selection<DiscussionCommentConnection>>(selectorFn: (s: DiscussionCommentConnection) => [...Sel]):$Field<"repositoryDiscussionComments", GetOutput<Sel> , GetVariables<Sel>>
repositoryDiscussionComments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
repositoryId: "ID",
onlyAnswers: "Boolean"
            },
        args,

        selection: selectorFn(new DiscussionCommentConnection)
      };
      return this.$_select("repositoryDiscussionComments", options) as any
    }
  

      
/**
 * Discussions this user has started.
 */
      repositoryDiscussions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: DiscussionOrder | null | undefined
repositoryId?: string | null | undefined
answered?: boolean | null | undefined,
      }>,Sel extends Selection<DiscussionConnection>>(args: Args, selectorFn: (s: DiscussionConnection) => [...Sel]):$Field<"repositoryDiscussions", GetOutput<Sel> , GetVariables<Sel, Args>>
repositoryDiscussions<Sel extends Selection<DiscussionConnection>>(selectorFn: (s: DiscussionConnection) => [...Sel]):$Field<"repositoryDiscussions", GetOutput<Sel> , GetVariables<Sel>>
repositoryDiscussions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "DiscussionOrder",
repositoryId: "ID",
answered: "Boolean"
            },
        args,

        selection: selectorFn(new DiscussionConnection)
      };
      return this.$_select("repositoryDiscussions", options) as any
    }
  

      
/**
 * A list of all repository migrations for this organization.
 */
      repositoryMigrations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
state?: MigrationState | null | undefined
repositoryName?: string | null | undefined
orderBy?: RepositoryMigrationOrder | null | undefined,
      }>,Sel extends Selection<RepositoryMigrationConnection>>(args: Args, selectorFn: (s: RepositoryMigrationConnection) => [...Sel]):$Field<"repositoryMigrations", GetOutput<Sel> , GetVariables<Sel, Args>>
repositoryMigrations<Sel extends Selection<RepositoryMigrationConnection>>(selectorFn: (s: RepositoryMigrationConnection) => [...Sel]):$Field<"repositoryMigrations", GetOutput<Sel> , GetVariables<Sel>>
repositoryMigrations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
state: "MigrationState",
repositoryName: "String",
orderBy: "RepositoryMigrationOrder"
            },
        args,

        selection: selectorFn(new RepositoryMigrationConnection)
      };
      return this.$_select("repositoryMigrations", options) as any
    }
  

      
/**
 * When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication.
 */
      get requiresTwoFactorAuthentication(): $Field<"requiresTwoFactorAuthentication", boolean | null | undefined>  {
       return this.$_select("requiresTwoFactorAuthentication") as any
      }

      
/**
 * The HTTP path for this organization.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The Organization's SAML identity providers
 */
      samlIdentityProvider<Sel extends Selection<OrganizationIdentityProvider>>(selectorFn: (s: OrganizationIdentityProvider) => [...Sel]):$Field<"samlIdentityProvider", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationIdentityProvider)
      };
      return this.$_select("samlIdentityProvider", options) as any
    }
  

      
/**
 * List of users and organizations this entity is sponsoring.
 */
      sponsoring<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: SponsorOrder | null | undefined,
      }>,Sel extends Selection<SponsorConnection>>(args: Args, selectorFn: (s: SponsorConnection) => [...Sel]):$Field<"sponsoring", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsoring<Sel extends Selection<SponsorConnection>>(selectorFn: (s: SponsorConnection) => [...Sel]):$Field<"sponsoring", GetOutput<Sel> , GetVariables<Sel>>
sponsoring(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "SponsorOrder"
            },
        args,

        selection: selectorFn(new SponsorConnection)
      };
      return this.$_select("sponsoring", options) as any
    }
  

      
/**
 * List of sponsors for this user or organization.
 */
      sponsors<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
tierId?: string | null | undefined
orderBy?: SponsorOrder | null | undefined,
      }>,Sel extends Selection<SponsorConnection>>(args: Args, selectorFn: (s: SponsorConnection) => [...Sel]):$Field<"sponsors", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsors<Sel extends Selection<SponsorConnection>>(selectorFn: (s: SponsorConnection) => [...Sel]):$Field<"sponsors", GetOutput<Sel> , GetVariables<Sel>>
sponsors(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
tierId: "ID",
orderBy: "SponsorOrder"
            },
        args,

        selection: selectorFn(new SponsorConnection)
      };
      return this.$_select("sponsors", options) as any
    }
  

      
/**
 * Events involving this sponsorable, such as new sponsorships.
 */
      sponsorsActivities<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
period?: SponsorsActivityPeriod | null | undefined
orderBy?: SponsorsActivityOrder | null | undefined
actions?: Readonly<Array<SponsorsActivityAction>> | null | undefined,
      }>,Sel extends Selection<SponsorsActivityConnection>>(args: Args, selectorFn: (s: SponsorsActivityConnection) => [...Sel]):$Field<"sponsorsActivities", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsorsActivities<Sel extends Selection<SponsorsActivityConnection>>(selectorFn: (s: SponsorsActivityConnection) => [...Sel]):$Field<"sponsorsActivities", GetOutput<Sel> , GetVariables<Sel>>
sponsorsActivities(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
period: "SponsorsActivityPeriod",
orderBy: "SponsorsActivityOrder",
actions: "[SponsorsActivityAction!]"
            },
        args,

        selection: selectorFn(new SponsorsActivityConnection)
      };
      return this.$_select("sponsorsActivities", options) as any
    }
  

      
/**
 * The GitHub Sponsors listing for this user or organization.
 */
      sponsorsListing<Sel extends Selection<SponsorsListing>>(selectorFn: (s: SponsorsListing) => [...Sel]):$Field<"sponsorsListing", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsListing)
      };
      return this.$_select("sponsorsListing", options) as any
    }
  

      
/**
 * The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active.
 */
      sponsorshipForViewerAsSponsor<Sel extends Selection<Sponsorship>>(selectorFn: (s: Sponsorship) => [...Sel]):$Field<"sponsorshipForViewerAsSponsor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsorship)
      };
      return this.$_select("sponsorshipForViewerAsSponsor", options) as any
    }
  

      
/**
 * The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active.
 */
      sponsorshipForViewerAsSponsorable<Sel extends Selection<Sponsorship>>(selectorFn: (s: Sponsorship) => [...Sel]):$Field<"sponsorshipForViewerAsSponsorable", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsorship)
      };
      return this.$_select("sponsorshipForViewerAsSponsorable", options) as any
    }
  

      
/**
 * List of sponsorship updates sent from this sponsorable to sponsors.
 */
      sponsorshipNewsletters<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: SponsorshipNewsletterOrder | null | undefined,
      }>,Sel extends Selection<SponsorshipNewsletterConnection>>(args: Args, selectorFn: (s: SponsorshipNewsletterConnection) => [...Sel]):$Field<"sponsorshipNewsletters", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsorshipNewsletters<Sel extends Selection<SponsorshipNewsletterConnection>>(selectorFn: (s: SponsorshipNewsletterConnection) => [...Sel]):$Field<"sponsorshipNewsletters", GetOutput<Sel> , GetVariables<Sel>>
sponsorshipNewsletters(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "SponsorshipNewsletterOrder"
            },
        args,

        selection: selectorFn(new SponsorshipNewsletterConnection)
      };
      return this.$_select("sponsorshipNewsletters", options) as any
    }
  

      
/**
 * This object's sponsorships as the maintainer.
 */
      sponsorshipsAsMaintainer<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
includePrivate?: boolean | null | undefined
orderBy?: SponsorshipOrder | null | undefined,
      }>,Sel extends Selection<SponsorshipConnection>>(args: Args, selectorFn: (s: SponsorshipConnection) => [...Sel]):$Field<"sponsorshipsAsMaintainer", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsorshipsAsMaintainer<Sel extends Selection<SponsorshipConnection>>(selectorFn: (s: SponsorshipConnection) => [...Sel]):$Field<"sponsorshipsAsMaintainer", GetOutput<Sel> , GetVariables<Sel>>
sponsorshipsAsMaintainer(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
includePrivate: "Boolean",
orderBy: "SponsorshipOrder"
            },
        args,

        selection: selectorFn(new SponsorshipConnection)
      };
      return this.$_select("sponsorshipsAsMaintainer", options) as any
    }
  

      
/**
 * This object's sponsorships as the sponsor.
 */
      sponsorshipsAsSponsor<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: SponsorshipOrder | null | undefined,
      }>,Sel extends Selection<SponsorshipConnection>>(args: Args, selectorFn: (s: SponsorshipConnection) => [...Sel]):$Field<"sponsorshipsAsSponsor", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsorshipsAsSponsor<Sel extends Selection<SponsorshipConnection>>(selectorFn: (s: SponsorshipConnection) => [...Sel]):$Field<"sponsorshipsAsSponsor", GetOutput<Sel> , GetVariables<Sel>>
sponsorshipsAsSponsor(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "SponsorshipOrder"
            },
        args,

        selection: selectorFn(new SponsorshipConnection)
      };
      return this.$_select("sponsorshipsAsSponsor", options) as any
    }
  

      
/**
 * Find an organization's team by its slug.
 */
      team<Args extends VariabledInput<{
        slug: string,
      }>,Sel extends Selection<Team>>(args: Args, selectorFn: (s: Team) => [...Sel]):$Field<"team", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              slug: "String!"
            },
        args,

        selection: selectorFn(new Team)
      };
      return this.$_select("team", options) as any
    }
  

      
/**
 * A list of teams in this organization.
 */
      teams<Args extends VariabledInput<{
        privacy?: TeamPrivacy | null | undefined
role?: TeamRole | null | undefined
query?: string | null | undefined
userLogins?: Readonly<Array<string>> | null | undefined
orderBy?: TeamOrder | null | undefined
ldapMapped?: boolean | null | undefined
rootTeamsOnly?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<TeamConnection>>(args: Args, selectorFn: (s: TeamConnection) => [...Sel]):$Field<"teams", GetOutput<Sel> , GetVariables<Sel, Args>>
teams<Sel extends Selection<TeamConnection>>(selectorFn: (s: TeamConnection) => [...Sel]):$Field<"teams", GetOutput<Sel> , GetVariables<Sel>>
teams(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              privacy: "TeamPrivacy",
role: "TeamRole",
query: "String",
userLogins: "[String!]",
orderBy: "TeamOrder",
ldapMapped: "Boolean",
rootTeamsOnly: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new TeamConnection)
      };
      return this.$_select("teams", options) as any
    }
  

      
/**
 * The HTTP path listing organization's teams
 */
      get teamsResourcePath(): $Field<"teamsResourcePath", string>  {
       return this.$_select("teamsResourcePath") as any
      }

      
/**
 * The HTTP URL listing organization's teams
 */
      get teamsUrl(): $Field<"teamsUrl", string>  {
       return this.$_select("teamsUrl") as any
      }

      
/**
 * The organization's Twitter username.
 */
      get twitterUsername(): $Field<"twitterUsername", string | null | undefined>  {
       return this.$_select("twitterUsername") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this organization.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * Organization is adminable by the viewer.
 */
      get viewerCanAdminister(): $Field<"viewerCanAdminister", boolean>  {
       return this.$_select("viewerCanAdminister") as any
      }

      
/**
 * Can the viewer pin repositories and gists to the profile?
 */
      get viewerCanChangePinnedItems(): $Field<"viewerCanChangePinnedItems", boolean>  {
       return this.$_select("viewerCanChangePinnedItems") as any
      }

      
/**
 * Can the current viewer create new projects on this owner.
 */
      get viewerCanCreateProjects(): $Field<"viewerCanCreateProjects", boolean>  {
       return this.$_select("viewerCanCreateProjects") as any
      }

      
/**
 * Viewer can create repositories on this organization
 */
      get viewerCanCreateRepositories(): $Field<"viewerCanCreateRepositories", boolean>  {
       return this.$_select("viewerCanCreateRepositories") as any
      }

      
/**
 * Viewer can create teams on this organization.
 */
      get viewerCanCreateTeams(): $Field<"viewerCanCreateTeams", boolean>  {
       return this.$_select("viewerCanCreateTeams") as any
      }

      
/**
 * Whether or not the viewer is able to sponsor this user/organization.
 */
      get viewerCanSponsor(): $Field<"viewerCanSponsor", boolean>  {
       return this.$_select("viewerCanSponsor") as any
      }

      
/**
 * Viewer is an active member of this organization.
 */
      get viewerIsAMember(): $Field<"viewerIsAMember", boolean>  {
       return this.$_select("viewerIsAMember") as any
      }

      
/**
 * Whether or not this Organization is followed by the viewer.
 */
      get viewerIsFollowing(): $Field<"viewerIsFollowing", boolean>  {
       return this.$_select("viewerIsFollowing") as any
      }

      
/**
 * True if the viewer is sponsoring this user/organization.
 */
      get viewerIsSponsoring(): $Field<"viewerIsSponsoring", boolean>  {
       return this.$_select("viewerIsSponsoring") as any
      }

      
/**
 * Whether contributors are required to sign off on web-based commits for repositories in this organization.
 */
      get webCommitSignoffRequired(): $Field<"webCommitSignoffRequired", boolean>  {
       return this.$_select("webCommitSignoffRequired") as any
      }

      
/**
 * The organization's public profile URL.
 */
      get websiteUrl(): $Field<"websiteUrl", string | null | undefined>  {
       return this.$_select("websiteUrl") as any
      }
}


/**
 * An audit entry in an organization audit log.
 */
export class OrganizationAuditEntry extends $Union<{MembersCanDeleteReposClearAuditEntry: MembersCanDeleteReposClearAuditEntry,MembersCanDeleteReposDisableAuditEntry: MembersCanDeleteReposDisableAuditEntry,MembersCanDeleteReposEnableAuditEntry: MembersCanDeleteReposEnableAuditEntry,OauthApplicationCreateAuditEntry: OauthApplicationCreateAuditEntry,OrgAddBillingManagerAuditEntry: OrgAddBillingManagerAuditEntry,OrgAddMemberAuditEntry: OrgAddMemberAuditEntry,OrgBlockUserAuditEntry: OrgBlockUserAuditEntry,OrgConfigDisableCollaboratorsOnlyAuditEntry: OrgConfigDisableCollaboratorsOnlyAuditEntry,OrgConfigEnableCollaboratorsOnlyAuditEntry: OrgConfigEnableCollaboratorsOnlyAuditEntry,OrgCreateAuditEntry: OrgCreateAuditEntry,OrgDisableOauthAppRestrictionsAuditEntry: OrgDisableOauthAppRestrictionsAuditEntry,OrgDisableSamlAuditEntry: OrgDisableSamlAuditEntry,OrgDisableTwoFactorRequirementAuditEntry: OrgDisableTwoFactorRequirementAuditEntry,OrgEnableOauthAppRestrictionsAuditEntry: OrgEnableOauthAppRestrictionsAuditEntry,OrgEnableSamlAuditEntry: OrgEnableSamlAuditEntry,OrgEnableTwoFactorRequirementAuditEntry: OrgEnableTwoFactorRequirementAuditEntry,OrgInviteMemberAuditEntry: OrgInviteMemberAuditEntry,OrgInviteToBusinessAuditEntry: OrgInviteToBusinessAuditEntry,OrgOauthAppAccessApprovedAuditEntry: OrgOauthAppAccessApprovedAuditEntry,OrgOauthAppAccessDeniedAuditEntry: OrgOauthAppAccessDeniedAuditEntry,OrgOauthAppAccessRequestedAuditEntry: OrgOauthAppAccessRequestedAuditEntry,OrgRemoveBillingManagerAuditEntry: OrgRemoveBillingManagerAuditEntry,OrgRemoveMemberAuditEntry: OrgRemoveMemberAuditEntry,OrgRemoveOutsideCollaboratorAuditEntry: OrgRemoveOutsideCollaboratorAuditEntry,OrgRestoreMemberAuditEntry: OrgRestoreMemberAuditEntry,OrgUnblockUserAuditEntry: OrgUnblockUserAuditEntry,OrgUpdateDefaultRepositoryPermissionAuditEntry: OrgUpdateDefaultRepositoryPermissionAuditEntry,OrgUpdateMemberAuditEntry: OrgUpdateMemberAuditEntry,OrgUpdateMemberRepositoryCreationPermissionAuditEntry: OrgUpdateMemberRepositoryCreationPermissionAuditEntry,OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntry,PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntry,RepoAccessAuditEntry: RepoAccessAuditEntry,RepoAddMemberAuditEntry: RepoAddMemberAuditEntry,RepoAddTopicAuditEntry: RepoAddTopicAuditEntry,RepoArchivedAuditEntry: RepoArchivedAuditEntry,RepoChangeMergeSettingAuditEntry: RepoChangeMergeSettingAuditEntry,RepoConfigDisableAnonymousGitAccessAuditEntry: RepoConfigDisableAnonymousGitAccessAuditEntry,RepoConfigDisableCollaboratorsOnlyAuditEntry: RepoConfigDisableCollaboratorsOnlyAuditEntry,RepoConfigDisableContributorsOnlyAuditEntry: RepoConfigDisableContributorsOnlyAuditEntry,RepoConfigDisableSockpuppetDisallowedAuditEntry: RepoConfigDisableSockpuppetDisallowedAuditEntry,RepoConfigEnableAnonymousGitAccessAuditEntry: RepoConfigEnableAnonymousGitAccessAuditEntry,RepoConfigEnableCollaboratorsOnlyAuditEntry: RepoConfigEnableCollaboratorsOnlyAuditEntry,RepoConfigEnableContributorsOnlyAuditEntry: RepoConfigEnableContributorsOnlyAuditEntry,RepoConfigEnableSockpuppetDisallowedAuditEntry: RepoConfigEnableSockpuppetDisallowedAuditEntry,RepoConfigLockAnonymousGitAccessAuditEntry: RepoConfigLockAnonymousGitAccessAuditEntry,RepoConfigUnlockAnonymousGitAccessAuditEntry: RepoConfigUnlockAnonymousGitAccessAuditEntry,RepoCreateAuditEntry: RepoCreateAuditEntry,RepoDestroyAuditEntry: RepoDestroyAuditEntry,RepoRemoveMemberAuditEntry: RepoRemoveMemberAuditEntry,RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntry,RepositoryVisibilityChangeDisableAuditEntry: RepositoryVisibilityChangeDisableAuditEntry,RepositoryVisibilityChangeEnableAuditEntry: RepositoryVisibilityChangeEnableAuditEntry,TeamAddMemberAuditEntry: TeamAddMemberAuditEntry,TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntry,TeamChangeParentTeamAuditEntry: TeamChangeParentTeamAuditEntry,TeamRemoveMemberAuditEntry: TeamRemoveMemberAuditEntry,TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntry,Node: Node,AuditEntry: AuditEntry,EnterpriseAuditEntryData: EnterpriseAuditEntryData,OrganizationAuditEntryData: OrganizationAuditEntryData,OauthApplicationAuditEntryData: OauthApplicationAuditEntryData,RepositoryAuditEntryData: RepositoryAuditEntryData,TopicAuditEntryData: TopicAuditEntryData,TeamAuditEntryData: TeamAuditEntryData}, "OrganizationAuditEntry"> {
  constructor() {
    super({MembersCanDeleteReposClearAuditEntry: MembersCanDeleteReposClearAuditEntry,MembersCanDeleteReposDisableAuditEntry: MembersCanDeleteReposDisableAuditEntry,MembersCanDeleteReposEnableAuditEntry: MembersCanDeleteReposEnableAuditEntry,OauthApplicationCreateAuditEntry: OauthApplicationCreateAuditEntry,OrgAddBillingManagerAuditEntry: OrgAddBillingManagerAuditEntry,OrgAddMemberAuditEntry: OrgAddMemberAuditEntry,OrgBlockUserAuditEntry: OrgBlockUserAuditEntry,OrgConfigDisableCollaboratorsOnlyAuditEntry: OrgConfigDisableCollaboratorsOnlyAuditEntry,OrgConfigEnableCollaboratorsOnlyAuditEntry: OrgConfigEnableCollaboratorsOnlyAuditEntry,OrgCreateAuditEntry: OrgCreateAuditEntry,OrgDisableOauthAppRestrictionsAuditEntry: OrgDisableOauthAppRestrictionsAuditEntry,OrgDisableSamlAuditEntry: OrgDisableSamlAuditEntry,OrgDisableTwoFactorRequirementAuditEntry: OrgDisableTwoFactorRequirementAuditEntry,OrgEnableOauthAppRestrictionsAuditEntry: OrgEnableOauthAppRestrictionsAuditEntry,OrgEnableSamlAuditEntry: OrgEnableSamlAuditEntry,OrgEnableTwoFactorRequirementAuditEntry: OrgEnableTwoFactorRequirementAuditEntry,OrgInviteMemberAuditEntry: OrgInviteMemberAuditEntry,OrgInviteToBusinessAuditEntry: OrgInviteToBusinessAuditEntry,OrgOauthAppAccessApprovedAuditEntry: OrgOauthAppAccessApprovedAuditEntry,OrgOauthAppAccessDeniedAuditEntry: OrgOauthAppAccessDeniedAuditEntry,OrgOauthAppAccessRequestedAuditEntry: OrgOauthAppAccessRequestedAuditEntry,OrgRemoveBillingManagerAuditEntry: OrgRemoveBillingManagerAuditEntry,OrgRemoveMemberAuditEntry: OrgRemoveMemberAuditEntry,OrgRemoveOutsideCollaboratorAuditEntry: OrgRemoveOutsideCollaboratorAuditEntry,OrgRestoreMemberAuditEntry: OrgRestoreMemberAuditEntry,OrgUnblockUserAuditEntry: OrgUnblockUserAuditEntry,OrgUpdateDefaultRepositoryPermissionAuditEntry: OrgUpdateDefaultRepositoryPermissionAuditEntry,OrgUpdateMemberAuditEntry: OrgUpdateMemberAuditEntry,OrgUpdateMemberRepositoryCreationPermissionAuditEntry: OrgUpdateMemberRepositoryCreationPermissionAuditEntry,OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntry,PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntry,RepoAccessAuditEntry: RepoAccessAuditEntry,RepoAddMemberAuditEntry: RepoAddMemberAuditEntry,RepoAddTopicAuditEntry: RepoAddTopicAuditEntry,RepoArchivedAuditEntry: RepoArchivedAuditEntry,RepoChangeMergeSettingAuditEntry: RepoChangeMergeSettingAuditEntry,RepoConfigDisableAnonymousGitAccessAuditEntry: RepoConfigDisableAnonymousGitAccessAuditEntry,RepoConfigDisableCollaboratorsOnlyAuditEntry: RepoConfigDisableCollaboratorsOnlyAuditEntry,RepoConfigDisableContributorsOnlyAuditEntry: RepoConfigDisableContributorsOnlyAuditEntry,RepoConfigDisableSockpuppetDisallowedAuditEntry: RepoConfigDisableSockpuppetDisallowedAuditEntry,RepoConfigEnableAnonymousGitAccessAuditEntry: RepoConfigEnableAnonymousGitAccessAuditEntry,RepoConfigEnableCollaboratorsOnlyAuditEntry: RepoConfigEnableCollaboratorsOnlyAuditEntry,RepoConfigEnableContributorsOnlyAuditEntry: RepoConfigEnableContributorsOnlyAuditEntry,RepoConfigEnableSockpuppetDisallowedAuditEntry: RepoConfigEnableSockpuppetDisallowedAuditEntry,RepoConfigLockAnonymousGitAccessAuditEntry: RepoConfigLockAnonymousGitAccessAuditEntry,RepoConfigUnlockAnonymousGitAccessAuditEntry: RepoConfigUnlockAnonymousGitAccessAuditEntry,RepoCreateAuditEntry: RepoCreateAuditEntry,RepoDestroyAuditEntry: RepoDestroyAuditEntry,RepoRemoveMemberAuditEntry: RepoRemoveMemberAuditEntry,RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntry,RepositoryVisibilityChangeDisableAuditEntry: RepositoryVisibilityChangeDisableAuditEntry,RepositoryVisibilityChangeEnableAuditEntry: RepositoryVisibilityChangeEnableAuditEntry,TeamAddMemberAuditEntry: TeamAddMemberAuditEntry,TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntry,TeamChangeParentTeamAuditEntry: TeamChangeParentTeamAuditEntry,TeamRemoveMemberAuditEntry: TeamRemoveMemberAuditEntry,TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntry,Node: Node,AuditEntry: AuditEntry,EnterpriseAuditEntryData: EnterpriseAuditEntryData,OrganizationAuditEntryData: OrganizationAuditEntryData,OauthApplicationAuditEntryData: OauthApplicationAuditEntryData,RepositoryAuditEntryData: RepositoryAuditEntryData,TopicAuditEntryData: TopicAuditEntryData,TeamAuditEntryData: TeamAuditEntryData})
  }
}


/**
 * The connection type for OrganizationAuditEntry.
 */
export class OrganizationAuditEntryConnection extends $Base<"OrganizationAuditEntryConnection"> {
  constructor() {
    super("OrganizationAuditEntryConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<OrganizationAuditEntryEdge>>(selectorFn: (s: OrganizationAuditEntryEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationAuditEntryEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<OrganizationAuditEntry>>(selectorFn: (s: OrganizationAuditEntry) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationAuditEntry)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Metadata for an audit entry with action org.*
 */
export class OrganizationAuditEntryData extends $Interface<{MembersCanDeleteReposClearAuditEntry: MembersCanDeleteReposClearAuditEntry,MembersCanDeleteReposDisableAuditEntry: MembersCanDeleteReposDisableAuditEntry,MembersCanDeleteReposEnableAuditEntry: MembersCanDeleteReposEnableAuditEntry,OauthApplicationCreateAuditEntry: OauthApplicationCreateAuditEntry,OrgAddBillingManagerAuditEntry: OrgAddBillingManagerAuditEntry,OrgAddMemberAuditEntry: OrgAddMemberAuditEntry,OrgBlockUserAuditEntry: OrgBlockUserAuditEntry,OrgConfigDisableCollaboratorsOnlyAuditEntry: OrgConfigDisableCollaboratorsOnlyAuditEntry,OrgConfigEnableCollaboratorsOnlyAuditEntry: OrgConfigEnableCollaboratorsOnlyAuditEntry,OrgCreateAuditEntry: OrgCreateAuditEntry,OrgDisableOauthAppRestrictionsAuditEntry: OrgDisableOauthAppRestrictionsAuditEntry,OrgDisableSamlAuditEntry: OrgDisableSamlAuditEntry,OrgDisableTwoFactorRequirementAuditEntry: OrgDisableTwoFactorRequirementAuditEntry,OrgEnableOauthAppRestrictionsAuditEntry: OrgEnableOauthAppRestrictionsAuditEntry,OrgEnableSamlAuditEntry: OrgEnableSamlAuditEntry,OrgEnableTwoFactorRequirementAuditEntry: OrgEnableTwoFactorRequirementAuditEntry,OrgInviteMemberAuditEntry: OrgInviteMemberAuditEntry,OrgInviteToBusinessAuditEntry: OrgInviteToBusinessAuditEntry,OrgOauthAppAccessApprovedAuditEntry: OrgOauthAppAccessApprovedAuditEntry,OrgOauthAppAccessDeniedAuditEntry: OrgOauthAppAccessDeniedAuditEntry,OrgOauthAppAccessRequestedAuditEntry: OrgOauthAppAccessRequestedAuditEntry,OrgRemoveBillingManagerAuditEntry: OrgRemoveBillingManagerAuditEntry,OrgRemoveMemberAuditEntry: OrgRemoveMemberAuditEntry,OrgRemoveOutsideCollaboratorAuditEntry: OrgRemoveOutsideCollaboratorAuditEntry,OrgRestoreMemberAuditEntry: OrgRestoreMemberAuditEntry,OrgRestoreMemberMembershipOrganizationAuditEntryData: OrgRestoreMemberMembershipOrganizationAuditEntryData,OrgUnblockUserAuditEntry: OrgUnblockUserAuditEntry,OrgUpdateDefaultRepositoryPermissionAuditEntry: OrgUpdateDefaultRepositoryPermissionAuditEntry,OrgUpdateMemberAuditEntry: OrgUpdateMemberAuditEntry,OrgUpdateMemberRepositoryCreationPermissionAuditEntry: OrgUpdateMemberRepositoryCreationPermissionAuditEntry,OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntry,PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntry,RepoAccessAuditEntry: RepoAccessAuditEntry,RepoAddMemberAuditEntry: RepoAddMemberAuditEntry,RepoAddTopicAuditEntry: RepoAddTopicAuditEntry,RepoArchivedAuditEntry: RepoArchivedAuditEntry,RepoChangeMergeSettingAuditEntry: RepoChangeMergeSettingAuditEntry,RepoConfigDisableAnonymousGitAccessAuditEntry: RepoConfigDisableAnonymousGitAccessAuditEntry,RepoConfigDisableCollaboratorsOnlyAuditEntry: RepoConfigDisableCollaboratorsOnlyAuditEntry,RepoConfigDisableContributorsOnlyAuditEntry: RepoConfigDisableContributorsOnlyAuditEntry,RepoConfigDisableSockpuppetDisallowedAuditEntry: RepoConfigDisableSockpuppetDisallowedAuditEntry,RepoConfigEnableAnonymousGitAccessAuditEntry: RepoConfigEnableAnonymousGitAccessAuditEntry,RepoConfigEnableCollaboratorsOnlyAuditEntry: RepoConfigEnableCollaboratorsOnlyAuditEntry,RepoConfigEnableContributorsOnlyAuditEntry: RepoConfigEnableContributorsOnlyAuditEntry,RepoConfigEnableSockpuppetDisallowedAuditEntry: RepoConfigEnableSockpuppetDisallowedAuditEntry,RepoConfigLockAnonymousGitAccessAuditEntry: RepoConfigLockAnonymousGitAccessAuditEntry,RepoConfigUnlockAnonymousGitAccessAuditEntry: RepoConfigUnlockAnonymousGitAccessAuditEntry,RepoCreateAuditEntry: RepoCreateAuditEntry,RepoDestroyAuditEntry: RepoDestroyAuditEntry,RepoRemoveMemberAuditEntry: RepoRemoveMemberAuditEntry,RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntry,RepositoryVisibilityChangeDisableAuditEntry: RepositoryVisibilityChangeDisableAuditEntry,RepositoryVisibilityChangeEnableAuditEntry: RepositoryVisibilityChangeEnableAuditEntry,TeamAddMemberAuditEntry: TeamAddMemberAuditEntry,TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntry,TeamChangeParentTeamAuditEntry: TeamChangeParentTeamAuditEntry,TeamRemoveMemberAuditEntry: TeamRemoveMemberAuditEntry,TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntry}, "OrganizationAuditEntryData"> {
  constructor() {
    super({MembersCanDeleteReposClearAuditEntry: MembersCanDeleteReposClearAuditEntry,MembersCanDeleteReposDisableAuditEntry: MembersCanDeleteReposDisableAuditEntry,MembersCanDeleteReposEnableAuditEntry: MembersCanDeleteReposEnableAuditEntry,OauthApplicationCreateAuditEntry: OauthApplicationCreateAuditEntry,OrgAddBillingManagerAuditEntry: OrgAddBillingManagerAuditEntry,OrgAddMemberAuditEntry: OrgAddMemberAuditEntry,OrgBlockUserAuditEntry: OrgBlockUserAuditEntry,OrgConfigDisableCollaboratorsOnlyAuditEntry: OrgConfigDisableCollaboratorsOnlyAuditEntry,OrgConfigEnableCollaboratorsOnlyAuditEntry: OrgConfigEnableCollaboratorsOnlyAuditEntry,OrgCreateAuditEntry: OrgCreateAuditEntry,OrgDisableOauthAppRestrictionsAuditEntry: OrgDisableOauthAppRestrictionsAuditEntry,OrgDisableSamlAuditEntry: OrgDisableSamlAuditEntry,OrgDisableTwoFactorRequirementAuditEntry: OrgDisableTwoFactorRequirementAuditEntry,OrgEnableOauthAppRestrictionsAuditEntry: OrgEnableOauthAppRestrictionsAuditEntry,OrgEnableSamlAuditEntry: OrgEnableSamlAuditEntry,OrgEnableTwoFactorRequirementAuditEntry: OrgEnableTwoFactorRequirementAuditEntry,OrgInviteMemberAuditEntry: OrgInviteMemberAuditEntry,OrgInviteToBusinessAuditEntry: OrgInviteToBusinessAuditEntry,OrgOauthAppAccessApprovedAuditEntry: OrgOauthAppAccessApprovedAuditEntry,OrgOauthAppAccessDeniedAuditEntry: OrgOauthAppAccessDeniedAuditEntry,OrgOauthAppAccessRequestedAuditEntry: OrgOauthAppAccessRequestedAuditEntry,OrgRemoveBillingManagerAuditEntry: OrgRemoveBillingManagerAuditEntry,OrgRemoveMemberAuditEntry: OrgRemoveMemberAuditEntry,OrgRemoveOutsideCollaboratorAuditEntry: OrgRemoveOutsideCollaboratorAuditEntry,OrgRestoreMemberAuditEntry: OrgRestoreMemberAuditEntry,OrgRestoreMemberMembershipOrganizationAuditEntryData: OrgRestoreMemberMembershipOrganizationAuditEntryData,OrgUnblockUserAuditEntry: OrgUnblockUserAuditEntry,OrgUpdateDefaultRepositoryPermissionAuditEntry: OrgUpdateDefaultRepositoryPermissionAuditEntry,OrgUpdateMemberAuditEntry: OrgUpdateMemberAuditEntry,OrgUpdateMemberRepositoryCreationPermissionAuditEntry: OrgUpdateMemberRepositoryCreationPermissionAuditEntry,OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntry,PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntry,RepoAccessAuditEntry: RepoAccessAuditEntry,RepoAddMemberAuditEntry: RepoAddMemberAuditEntry,RepoAddTopicAuditEntry: RepoAddTopicAuditEntry,RepoArchivedAuditEntry: RepoArchivedAuditEntry,RepoChangeMergeSettingAuditEntry: RepoChangeMergeSettingAuditEntry,RepoConfigDisableAnonymousGitAccessAuditEntry: RepoConfigDisableAnonymousGitAccessAuditEntry,RepoConfigDisableCollaboratorsOnlyAuditEntry: RepoConfigDisableCollaboratorsOnlyAuditEntry,RepoConfigDisableContributorsOnlyAuditEntry: RepoConfigDisableContributorsOnlyAuditEntry,RepoConfigDisableSockpuppetDisallowedAuditEntry: RepoConfigDisableSockpuppetDisallowedAuditEntry,RepoConfigEnableAnonymousGitAccessAuditEntry: RepoConfigEnableAnonymousGitAccessAuditEntry,RepoConfigEnableCollaboratorsOnlyAuditEntry: RepoConfigEnableCollaboratorsOnlyAuditEntry,RepoConfigEnableContributorsOnlyAuditEntry: RepoConfigEnableContributorsOnlyAuditEntry,RepoConfigEnableSockpuppetDisallowedAuditEntry: RepoConfigEnableSockpuppetDisallowedAuditEntry,RepoConfigLockAnonymousGitAccessAuditEntry: RepoConfigLockAnonymousGitAccessAuditEntry,RepoConfigUnlockAnonymousGitAccessAuditEntry: RepoConfigUnlockAnonymousGitAccessAuditEntry,RepoCreateAuditEntry: RepoCreateAuditEntry,RepoDestroyAuditEntry: RepoDestroyAuditEntry,RepoRemoveMemberAuditEntry: RepoRemoveMemberAuditEntry,RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntry,RepositoryVisibilityChangeDisableAuditEntry: RepositoryVisibilityChangeDisableAuditEntry,RepositoryVisibilityChangeEnableAuditEntry: RepositoryVisibilityChangeEnableAuditEntry,TeamAddMemberAuditEntry: TeamAddMemberAuditEntry,TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntry,TeamChangeParentTeamAuditEntry: TeamChangeParentTeamAuditEntry,TeamRemoveMemberAuditEntry: TeamRemoveMemberAuditEntry,TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntry}, "OrganizationAuditEntryData")
  }
}


/**
 * An edge in a connection.
 */
export class OrganizationAuditEntryEdge extends $Base<"OrganizationAuditEntryEdge"> {
  constructor() {
    super("OrganizationAuditEntryEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<OrganizationAuditEntry>>(selectorFn: (s: OrganizationAuditEntry) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationAuditEntry)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A list of organizations managed by an enterprise.
 */
export class OrganizationConnection extends $Base<"OrganizationConnection"> {
  constructor() {
    super("OrganizationConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<OrganizationEdge>>(selectorFn: (s: OrganizationEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class OrganizationEdge extends $Base<"OrganizationEdge"> {
  constructor() {
    super("OrganizationEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The connection type for User.
 */
export class OrganizationEnterpriseOwnerConnection extends $Base<"OrganizationEnterpriseOwnerConnection"> {
  constructor() {
    super("OrganizationEnterpriseOwnerConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<OrganizationEnterpriseOwnerEdge>>(selectorFn: (s: OrganizationEnterpriseOwnerEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationEnterpriseOwnerEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An enterprise owner in the context of an organization that is part of the enterprise.
 */
export class OrganizationEnterpriseOwnerEdge extends $Base<"OrganizationEnterpriseOwnerEdge"> {
  constructor() {
    super("OrganizationEnterpriseOwnerEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * The role of the owner with respect to the organization.
 */
      get organizationRole(): $Field<"organizationRole", RoleInOrganization>  {
       return this.$_select("organizationRole") as any
      }
}


/**
 * An Identity Provider configured to provision SAML and SCIM identities for Organizations
 */
export class OrganizationIdentityProvider extends $Base<"OrganizationIdentityProvider"> {
  constructor() {
    super("OrganizationIdentityProvider")
  }

  
      
/**
 * The digest algorithm used to sign SAML requests for the Identity Provider.
 */
      get digestMethod(): $Field<"digestMethod", string | null | undefined>  {
       return this.$_select("digestMethod") as any
      }

      
/**
 * External Identities provisioned by this Identity Provider
 */
      externalIdentities<Args extends VariabledInput<{
        membersOnly?: boolean | null | undefined
login?: string | null | undefined
userName?: string | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ExternalIdentityConnection>>(args: Args, selectorFn: (s: ExternalIdentityConnection) => [...Sel]):$Field<"externalIdentities", GetOutput<Sel> , GetVariables<Sel, Args>>
externalIdentities<Sel extends Selection<ExternalIdentityConnection>>(selectorFn: (s: ExternalIdentityConnection) => [...Sel]):$Field<"externalIdentities", GetOutput<Sel> , GetVariables<Sel>>
externalIdentities(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              membersOnly: "Boolean",
login: "String",
userName: "String",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ExternalIdentityConnection)
      };
      return this.$_select("externalIdentities", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The x509 certificate used by the Identity Provider to sign assertions and responses.
 */
      get idpCertificate(): $Field<"idpCertificate", string | null | undefined>  {
       return this.$_select("idpCertificate") as any
      }

      
/**
 * The Issuer Entity ID for the SAML Identity Provider
 */
      get issuer(): $Field<"issuer", string | null | undefined>  {
       return this.$_select("issuer") as any
      }

      
/**
 * Organization this Identity Provider belongs to
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The signature algorithm used to sign SAML requests for the Identity Provider.
 */
      get signatureMethod(): $Field<"signatureMethod", string | null | undefined>  {
       return this.$_select("signatureMethod") as any
      }

      
/**
 * The URL endpoint for the Identity Provider's SAML SSO.
 */
      get ssoUrl(): $Field<"ssoUrl", string | null | undefined>  {
       return this.$_select("ssoUrl") as any
      }
}


/**
 * An Invitation for a user to an organization.
 */
export class OrganizationInvitation extends $Base<"OrganizationInvitation"> {
  constructor() {
    super("OrganizationInvitation")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The email address of the user invited to the organization.
 */
      get email(): $Field<"email", string | null | undefined>  {
       return this.$_select("email") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The type of invitation that was sent (e.g. email, user).
 */
      get invitationType(): $Field<"invitationType", OrganizationInvitationType>  {
       return this.$_select("invitationType") as any
      }

      
/**
 * The user who was invited to the organization.
 */
      invitee<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"invitee", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("invitee", options) as any
    }
  

      
/**
 * The user who created the invitation.
 */
      inviter<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"inviter", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("inviter", options) as any
    }
  

      
/**
 * The organization the invite is for
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The user's pending role in the organization (e.g. member, owner).
 */
      get role(): $Field<"role", OrganizationInvitationRole>  {
       return this.$_select("role") as any
      }
}


/**
 * The connection type for OrganizationInvitation.
 */
export class OrganizationInvitationConnection extends $Base<"OrganizationInvitationConnection"> {
  constructor() {
    super("OrganizationInvitationConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<OrganizationInvitationEdge>>(selectorFn: (s: OrganizationInvitationEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationInvitationEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<OrganizationInvitation>>(selectorFn: (s: OrganizationInvitation) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationInvitation)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class OrganizationInvitationEdge extends $Base<"OrganizationInvitationEdge"> {
  constructor() {
    super("OrganizationInvitationEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<OrganizationInvitation>>(selectorFn: (s: OrganizationInvitation) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationInvitation)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The possible organization invitation roles.
 */
export enum OrganizationInvitationRole {
  
/**
 * The user is invited to be a direct member of the organization.
 */
  DIRECT_MEMBER = "DIRECT_MEMBER",

/**
 * The user is invited to be an admin of the organization.
 */
  ADMIN = "ADMIN",

/**
 * The user is invited to be a billing manager of the organization.
 */
  BILLING_MANAGER = "BILLING_MANAGER",

/**
 * The user's previous role will be reinstated.
 */
  REINSTATE = "REINSTATE"
}
  

  
/**
 * The possible organization invitation types.
 */
export enum OrganizationInvitationType {
  
/**
 * The invitation was to an existing user.
 */
  USER = "USER",

/**
 * The invitation was to an email address.
 */
  EMAIL = "EMAIL"
}
  


/**
 * The connection type for User.
 */
export class OrganizationMemberConnection extends $Base<"OrganizationMemberConnection"> {
  constructor() {
    super("OrganizationMemberConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<OrganizationMemberEdge>>(selectorFn: (s: OrganizationMemberEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new OrganizationMemberEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Represents a user within an organization.
 */
export class OrganizationMemberEdge extends $Base<"OrganizationMemberEdge"> {
  constructor() {
    super("OrganizationMemberEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
 */
      get hasTwoFactorEnabled(): $Field<"hasTwoFactorEnabled", boolean | null | undefined>  {
       return this.$_select("hasTwoFactorEnabled") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * The role this user has in the organization.
 */
      get role(): $Field<"role", OrganizationMemberRole | null | undefined>  {
       return this.$_select("role") as any
      }
}

  
/**
 * The possible roles within an organization for its members.
 */
export enum OrganizationMemberRole {
  
/**
 * The user is a member of the organization.
 */
  MEMBER = "MEMBER",

/**
 * The user is an administrator of the organization.
 */
  ADMIN = "ADMIN"
}
  

  
/**
 * The possible values for the members can create repositories setting on an organization.
 */
export enum OrganizationMembersCanCreateRepositoriesSettingValue {
  
/**
 * Members will be able to create public and private repositories.
 */
  ALL = "ALL",

/**
 * Members will be able to create only private repositories.
 */
  PRIVATE = "PRIVATE",

/**
 * Members will be able to create only internal repositories.
 */
  INTERNAL = "INTERNAL",

/**
 * Members will not be able to create public or private repositories.
 */
  DISABLED = "DISABLED"
}
  


/**
 * Used for argument of CreateProjectV2 mutation.
 */
export class OrganizationOrUser extends $Union<{Organization: Organization,User: User,Node: Node,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "OrganizationOrUser"> {
  constructor() {
    super({Organization: Organization,User: User,Node: Node,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * Ordering options for organization connections.
 */
export type OrganizationOrder = {
  direction: OrderDirection,
field: OrganizationOrderField
}
    

  
/**
 * Properties by which organization connections can be ordered.
 */
export enum OrganizationOrderField {
  
/**
 * Order organizations by creation time
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order organizations by login
 */
  LOGIN = "LOGIN"
}
  


/**
 * An organization teams hovercard context
 */
export class OrganizationTeamsHovercardContext extends $Base<"OrganizationTeamsHovercardContext"> {
  constructor() {
    super("OrganizationTeamsHovercardContext")
  }

  
      
/**
 * A string describing this context
 */
      get message(): $Field<"message", string>  {
       return this.$_select("message") as any
      }

      
/**
 * An octicon to accompany this context
 */
      get octicon(): $Field<"octicon", string>  {
       return this.$_select("octicon") as any
      }

      
/**
 * Teams in this organization the user is a member of that are relevant
 */
      relevantTeams<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<TeamConnection>>(args: Args, selectorFn: (s: TeamConnection) => [...Sel]):$Field<"relevantTeams", GetOutput<Sel> , GetVariables<Sel, Args>>
relevantTeams<Sel extends Selection<TeamConnection>>(selectorFn: (s: TeamConnection) => [...Sel]):$Field<"relevantTeams", GetOutput<Sel> , GetVariables<Sel>>
relevantTeams(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new TeamConnection)
      };
      return this.$_select("relevantTeams", options) as any
    }
  

      
/**
 * The path for the full team list for this user
 */
      get teamsResourcePath(): $Field<"teamsResourcePath", string>  {
       return this.$_select("teamsResourcePath") as any
      }

      
/**
 * The URL for the full team list for this user
 */
      get teamsUrl(): $Field<"teamsUrl", string>  {
       return this.$_select("teamsUrl") as any
      }

      
/**
 * The total number of teams the user is on in the organization
 */
      get totalTeamCount(): $Field<"totalTeamCount", number>  {
       return this.$_select("totalTeamCount") as any
      }
}


/**
 * An organization list hovercard context
 */
export class OrganizationsHovercardContext extends $Base<"OrganizationsHovercardContext"> {
  constructor() {
    super("OrganizationsHovercardContext")
  }

  
      
/**
 * A string describing this context
 */
      get message(): $Field<"message", string>  {
       return this.$_select("message") as any
      }

      
/**
 * An octicon to accompany this context
 */
      get octicon(): $Field<"octicon", string>  {
       return this.$_select("octicon") as any
      }

      
/**
 * Organizations this user is a member of that are relevant
 */
      relevantOrganizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"relevantOrganizations", GetOutput<Sel> , GetVariables<Sel, Args>>
relevantOrganizations<Sel extends Selection<OrganizationConnection>>(selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"relevantOrganizations", GetOutput<Sel> , GetVariables<Sel>>
relevantOrganizations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("relevantOrganizations", options) as any
    }
  

      
/**
 * The total number of organizations this user is in
 */
      get totalOrganizationCount(): $Field<"totalOrganizationCount", number>  {
       return this.$_select("totalOrganizationCount") as any
      }
}


/**
 * Information for an uploaded package.
 */
export class Package extends $Base<"Package"> {
  constructor() {
    super("Package")
  }

  
      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Find the latest version for the package.
 */
      latestVersion<Sel extends Selection<PackageVersion>>(selectorFn: (s: PackageVersion) => [...Sel]):$Field<"latestVersion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PackageVersion)
      };
      return this.$_select("latestVersion", options) as any
    }
  

      
/**
 * Identifies the name of the package.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * Identifies the type of the package.
 */
      get packageType(): $Field<"packageType", PackageType>  {
       return this.$_select("packageType") as any
      }

      
/**
 * The repository this package belongs to.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * Statistics about package activity.
 */
      statistics<Sel extends Selection<PackageStatistics>>(selectorFn: (s: PackageStatistics) => [...Sel]):$Field<"statistics", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PackageStatistics)
      };
      return this.$_select("statistics", options) as any
    }
  

      
/**
 * Find package version by version string.
 */
      version<Args extends VariabledInput<{
        version: string,
      }>,Sel extends Selection<PackageVersion>>(args: Args, selectorFn: (s: PackageVersion) => [...Sel]):$Field<"version", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              version: "String!"
            },
        args,

        selection: selectorFn(new PackageVersion)
      };
      return this.$_select("version", options) as any
    }
  

      
/**
 * list of versions for this package
 */
      versions<Args extends VariabledInput<{
        orderBy?: PackageVersionOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PackageVersionConnection>>(args: Args, selectorFn: (s: PackageVersionConnection) => [...Sel]):$Field<"versions", GetOutput<Sel> , GetVariables<Sel, Args>>
versions<Sel extends Selection<PackageVersionConnection>>(selectorFn: (s: PackageVersionConnection) => [...Sel]):$Field<"versions", GetOutput<Sel> , GetVariables<Sel>>
versions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "PackageVersionOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PackageVersionConnection)
      };
      return this.$_select("versions", options) as any
    }
  
}


/**
 * The connection type for Package.
 */
export class PackageConnection extends $Base<"PackageConnection"> {
  constructor() {
    super("PackageConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PackageEdge>>(selectorFn: (s: PackageEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PackageEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Package>>(selectorFn: (s: Package) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Package)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class PackageEdge extends $Base<"PackageEdge"> {
  constructor() {
    super("PackageEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Package>>(selectorFn: (s: Package) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Package)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A file in a package version.
 */
export class PackageFile extends $Base<"PackageFile"> {
  constructor() {
    super("PackageFile")
  }

  
      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * MD5 hash of the file.
 */
      get md5(): $Field<"md5", string | null | undefined>  {
       return this.$_select("md5") as any
      }

      
/**
 * Name of the file.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The package version this file belongs to.
 */
      packageVersion<Sel extends Selection<PackageVersion>>(selectorFn: (s: PackageVersion) => [...Sel]):$Field<"packageVersion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PackageVersion)
      };
      return this.$_select("packageVersion", options) as any
    }
  

      
/**
 * SHA1 hash of the file.
 */
      get sha1(): $Field<"sha1", string | null | undefined>  {
       return this.$_select("sha1") as any
      }

      
/**
 * SHA256 hash of the file.
 */
      get sha256(): $Field<"sha256", string | null | undefined>  {
       return this.$_select("sha256") as any
      }

      
/**
 * Size of the file in bytes.
 */
      get size(): $Field<"size", number | null | undefined>  {
       return this.$_select("size") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * URL to download the asset.
 */
      get url(): $Field<"url", string | null | undefined>  {
       return this.$_select("url") as any
      }
}


/**
 * The connection type for PackageFile.
 */
export class PackageFileConnection extends $Base<"PackageFileConnection"> {
  constructor() {
    super("PackageFileConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PackageFileEdge>>(selectorFn: (s: PackageFileEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PackageFileEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PackageFile>>(selectorFn: (s: PackageFile) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PackageFile)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class PackageFileEdge extends $Base<"PackageFileEdge"> {
  constructor() {
    super("PackageFileEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PackageFile>>(selectorFn: (s: PackageFile) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PackageFile)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ways in which lists of package files can be ordered upon return.
 */
export type PackageFileOrder = {
  direction?: OrderDirection | null | undefined,
field?: PackageFileOrderField | null | undefined
}
    

  
/**
 * Properties by which package file connections can be ordered.
 */
export enum PackageFileOrderField {
  
/**
 * Order package files by creation time
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * Ways in which lists of packages can be ordered upon return.
 */
export type PackageOrder = {
  direction?: OrderDirection | null | undefined,
field?: PackageOrderField | null | undefined
}
    

  
/**
 * Properties by which package connections can be ordered.
 */
export enum PackageOrderField {
  
/**
 * Order packages by creation time
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * Represents an owner of a package.
 */
export class PackageOwner extends $Interface<{Organization: Organization,Repository: Repository,User: User}, "PackageOwner"> {
  constructor() {
    super({Organization: Organization,Repository: Repository,User: User}, "PackageOwner")
  }
}


/**
 * Represents a object that contains package activity statistics such as downloads.
 */
export class PackageStatistics extends $Base<"PackageStatistics"> {
  constructor() {
    super("PackageStatistics")
  }

  
      
/**
 * Number of times the package was downloaded since it was created.
 */
      get downloadsTotalCount(): $Field<"downloadsTotalCount", number>  {
       return this.$_select("downloadsTotalCount") as any
      }
}


/**
 * A version tag contains the mapping between a tag name and a version.
 */
export class PackageTag extends $Base<"PackageTag"> {
  constructor() {
    super("PackageTag")
  }

  
      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the tag name of the version.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * Version that the tag is associated with.
 */
      version<Sel extends Selection<PackageVersion>>(selectorFn: (s: PackageVersion) => [...Sel]):$Field<"version", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PackageVersion)
      };
      return this.$_select("version", options) as any
    }
  
}

  
/**
 * The possible types of a package.
 */
export enum PackageType {
  
/**
 * An npm package.
 */
  NPM = "NPM",

/**
 * A rubygems package.
 */
  RUBYGEMS = "RUBYGEMS",

/**
 * A maven package.
 */
  MAVEN = "MAVEN",

/**
 * A docker image.
 */
  DOCKER = "DOCKER",

/**
 * A debian package.
 */
  DEBIAN = "DEBIAN",

/**
 * A nuget package.
 */
  NUGET = "NUGET",

/**
 * A python package.
 */
  PYPI = "PYPI"
}
  


/**
 * Information about a specific package version.
 */
export class PackageVersion extends $Base<"PackageVersion"> {
  constructor() {
    super("PackageVersion")
  }

  
      
/**
 * List of files associated with this package version
 */
      files<Args extends VariabledInput<{
        orderBy?: PackageFileOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PackageFileConnection>>(args: Args, selectorFn: (s: PackageFileConnection) => [...Sel]):$Field<"files", GetOutput<Sel> , GetVariables<Sel, Args>>
files<Sel extends Selection<PackageFileConnection>>(selectorFn: (s: PackageFileConnection) => [...Sel]):$Field<"files", GetOutput<Sel> , GetVariables<Sel>>
files(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "PackageFileOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PackageFileConnection)
      };
      return this.$_select("files", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The package associated with this version.
 */
      package<Sel extends Selection<Package>>(selectorFn: (s: Package) => [...Sel]):$Field<"package", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Package)
      };
      return this.$_select("package", options) as any
    }
  

      
/**
 * The platform this version was built for.
 */
      get platform(): $Field<"platform", string | null | undefined>  {
       return this.$_select("platform") as any
      }

      
/**
 * Whether or not this version is a pre-release.
 */
      get preRelease(): $Field<"preRelease", boolean>  {
       return this.$_select("preRelease") as any
      }

      
/**
 * The README of this package version.
 */
      get readme(): $Field<"readme", string | null | undefined>  {
       return this.$_select("readme") as any
      }

      
/**
 * The release associated with this package version.
 */
      release<Sel extends Selection<Release>>(selectorFn: (s: Release) => [...Sel]):$Field<"release", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Release)
      };
      return this.$_select("release", options) as any
    }
  

      
/**
 * Statistics about package activity.
 */
      statistics<Sel extends Selection<PackageVersionStatistics>>(selectorFn: (s: PackageVersionStatistics) => [...Sel]):$Field<"statistics", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PackageVersionStatistics)
      };
      return this.$_select("statistics", options) as any
    }
  

      
/**
 * The package version summary.
 */
      get summary(): $Field<"summary", string | null | undefined>  {
       return this.$_select("summary") as any
      }

      
/**
 * The version string.
 */
      get version(): $Field<"version", string>  {
       return this.$_select("version") as any
      }
}


/**
 * The connection type for PackageVersion.
 */
export class PackageVersionConnection extends $Base<"PackageVersionConnection"> {
  constructor() {
    super("PackageVersionConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PackageVersionEdge>>(selectorFn: (s: PackageVersionEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PackageVersionEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PackageVersion>>(selectorFn: (s: PackageVersion) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PackageVersion)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class PackageVersionEdge extends $Base<"PackageVersionEdge"> {
  constructor() {
    super("PackageVersionEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PackageVersion>>(selectorFn: (s: PackageVersion) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PackageVersion)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ways in which lists of package versions can be ordered upon return.
 */
export type PackageVersionOrder = {
  direction?: OrderDirection | null | undefined,
field?: PackageVersionOrderField | null | undefined
}
    

  
/**
 * Properties by which package version connections can be ordered.
 */
export enum PackageVersionOrderField {
  
/**
 * Order package versions by creation time
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * Represents a object that contains package version activity statistics such as downloads.
 */
export class PackageVersionStatistics extends $Base<"PackageVersionStatistics"> {
  constructor() {
    super("PackageVersionStatistics")
  }

  
      
/**
 * Number of times the package was downloaded since it was created.
 */
      get downloadsTotalCount(): $Field<"downloadsTotalCount", number>  {
       return this.$_select("downloadsTotalCount") as any
      }
}


/**
 * Information about pagination in a connection.
 */
export class PageInfo extends $Base<"PageInfo"> {
  constructor() {
    super("PageInfo")
  }

  
      
/**
 * When paginating forwards, the cursor to continue.
 */
      get endCursor(): $Field<"endCursor", string | null | undefined>  {
       return this.$_select("endCursor") as any
      }

      
/**
 * When paginating forwards, are there more items?
 */
      get hasNextPage(): $Field<"hasNextPage", boolean>  {
       return this.$_select("hasNextPage") as any
      }

      
/**
 * When paginating backwards, are there more items?
 */
      get hasPreviousPage(): $Field<"hasPreviousPage", boolean>  {
       return this.$_select("hasPreviousPage") as any
      }

      
/**
 * When paginating backwards, the cursor to continue.
 */
      get startCursor(): $Field<"startCursor", string | null | undefined>  {
       return this.$_select("startCursor") as any
      }
}

  
/**
 * The possible types of patch statuses.
 */
export enum PatchStatus {
  
/**
 * The file was added. Git status 'A'.
 */
  ADDED = "ADDED",

/**
 * The file was deleted. Git status 'D'.
 */
  DELETED = "DELETED",

/**
 * The file was renamed. Git status 'R'.
 */
  RENAMED = "RENAMED",

/**
 * The file was copied. Git status 'C'.
 */
  COPIED = "COPIED",

/**
 * The file's contents were changed. Git status 'M'.
 */
  MODIFIED = "MODIFIED",

/**
 * The file's type was changed. Git status 'T'.
 */
  CHANGED = "CHANGED"
}
  


/**
 * Types that can grant permissions on a repository to a user
 */
export class PermissionGranter extends $Union<{Organization: Organization,Repository: Repository,Team: Team,Node: Node,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable,Subscribable: Subscribable,Starrable: Starrable,RepositoryInfo: RepositoryInfo}, "PermissionGranter"> {
  constructor() {
    super({Organization: Organization,Repository: Repository,Team: Team,Node: Node,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable,Subscribable: Subscribable,Starrable: Starrable,RepositoryInfo: RepositoryInfo})
  }
}


/**
 * A level of permission and source for a user's access to a repository.
 */
export class PermissionSource extends $Base<"PermissionSource"> {
  constructor() {
    super("PermissionSource")
  }

  
      
/**
 * The organization the repository belongs to.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The level of access this source has granted to the user.
 */
      get permission(): $Field<"permission", DefaultRepositoryPermissionField>  {
       return this.$_select("permission") as any
      }

      
/**
 * The source of this permission.
 */
      source<Sel extends Selection<PermissionGranter>>(selectorFn: (s: PermissionGranter) => [...Sel]):$Field<"source", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PermissionGranter)
      };
      return this.$_select("source", options) as any
    }
  
}


/**
 * Autogenerated input type of PinIssue
 */
export type PinIssueInput = {
  clientMutationId?: string | null | undefined,
issueId: string
}
    


/**
 * Autogenerated return type of PinIssue
 */
export class PinIssuePayload extends $Base<"PinIssuePayload"> {
  constructor() {
    super("PinIssuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The issue that was pinned
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  
}


/**
 * Types that can be pinned to a profile page.
 */
export class PinnableItem extends $Union<{Gist: Gist,Repository: Repository,Node: Node,Starrable: Starrable,UniformResourceLocatable: UniformResourceLocatable,ProjectV2Recent: ProjectV2Recent,ProjectOwner: ProjectOwner,PackageOwner: PackageOwner,Subscribable: Subscribable,RepositoryInfo: RepositoryInfo}, "PinnableItem"> {
  constructor() {
    super({Gist: Gist,Repository: Repository,Node: Node,Starrable: Starrable,UniformResourceLocatable: UniformResourceLocatable,ProjectV2Recent: ProjectV2Recent,ProjectOwner: ProjectOwner,PackageOwner: PackageOwner,Subscribable: Subscribable,RepositoryInfo: RepositoryInfo})
  }
}


/**
 * The connection type for PinnableItem.
 */
export class PinnableItemConnection extends $Base<"PinnableItemConnection"> {
  constructor() {
    super("PinnableItemConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PinnableItemEdge>>(selectorFn: (s: PinnableItemEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PinnableItemEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PinnableItem>>(selectorFn: (s: PinnableItem) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PinnableItem)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class PinnableItemEdge extends $Base<"PinnableItemEdge"> {
  constructor() {
    super("PinnableItemEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PinnableItem>>(selectorFn: (s: PinnableItem) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PinnableItem)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * Represents items that can be pinned to a profile page or dashboard.
 */
export enum PinnableItemType {
  
/**
 * A repository.
 */
  REPOSITORY = "REPOSITORY",

/**
 * A gist.
 */
  GIST = "GIST",

/**
 * An issue.
 */
  ISSUE = "ISSUE",

/**
 * A project.
 */
  PROJECT = "PROJECT",

/**
 * A pull request.
 */
  PULL_REQUEST = "PULL_REQUEST",

/**
 * A user.
 */
  USER = "USER",

/**
 * An organization.
 */
  ORGANIZATION = "ORGANIZATION",

/**
 * A team.
 */
  TEAM = "TEAM"
}
  


/**
 * A Pinned Discussion is a discussion pinned to a repository's index page.
 */
export class PinnedDiscussion extends $Base<"PinnedDiscussion"> {
  constructor() {
    super("PinnedDiscussion")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The discussion that was pinned.
 */
      discussion<Sel extends Selection<Discussion>>(selectorFn: (s: Discussion) => [...Sel]):$Field<"discussion", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Discussion)
      };
      return this.$_select("discussion", options) as any
    }
  

      
/**
 * Color stops of the chosen gradient
 */
      get gradientStopColors(): $Field<"gradientStopColors", Readonly<Array<string>>>  {
       return this.$_select("gradientStopColors") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Background texture pattern
 */
      get pattern(): $Field<"pattern", PinnedDiscussionPattern>  {
       return this.$_select("pattern") as any
      }

      
/**
 * The actor that pinned this discussion.
 */
      pinnedBy<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"pinnedBy", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("pinnedBy", options) as any
    }
  

      
/**
 * Preconfigured background gradient option
 */
      get preconfiguredGradient(): $Field<"preconfiguredGradient", PinnedDiscussionGradient | null | undefined>  {
       return this.$_select("preconfiguredGradient") as any
      }

      
/**
 * The repository associated with this node.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The connection type for PinnedDiscussion.
 */
export class PinnedDiscussionConnection extends $Base<"PinnedDiscussionConnection"> {
  constructor() {
    super("PinnedDiscussionConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PinnedDiscussionEdge>>(selectorFn: (s: PinnedDiscussionEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PinnedDiscussionEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PinnedDiscussion>>(selectorFn: (s: PinnedDiscussion) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PinnedDiscussion)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class PinnedDiscussionEdge extends $Base<"PinnedDiscussionEdge"> {
  constructor() {
    super("PinnedDiscussionEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PinnedDiscussion>>(selectorFn: (s: PinnedDiscussion) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PinnedDiscussion)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * Preconfigured gradients that may be used to style discussions pinned within a repository.
 */
export enum PinnedDiscussionGradient {
  
/**
 * A gradient of red to orange
 */
  RED_ORANGE = "RED_ORANGE",

/**
 * A gradient of blue to mint
 */
  BLUE_MINT = "BLUE_MINT",

/**
 * A gradient of blue to purple
 */
  BLUE_PURPLE = "BLUE_PURPLE",

/**
 * A gradient of pink to blue
 */
  PINK_BLUE = "PINK_BLUE",

/**
 * A gradient of purple to coral
 */
  PURPLE_CORAL = "PURPLE_CORAL"
}
  

  
/**
 * Preconfigured background patterns that may be used to style discussions pinned within a repository.
 */
export enum PinnedDiscussionPattern {
  
/**
 * A solid dot pattern
 */
  DOT_FILL = "DOT_FILL",

/**
 * A plus sign pattern
 */
  PLUS = "PLUS",

/**
 * A lightning bolt pattern
 */
  ZAP = "ZAP",

/**
 * An upward-facing chevron pattern
 */
  CHEVRON_UP = "CHEVRON_UP",

/**
 * A hollow dot pattern
 */
  DOT = "DOT",

/**
 * A heart pattern
 */
  HEART_FILL = "HEART_FILL"
}
  


/**
 * Represents a 'pinned' event on a given issue or pull request.
 */
export class PinnedEvent extends $Base<"PinnedEvent"> {
  constructor() {
    super("PinnedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the issue associated with the event.
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  
}


/**
 * A Pinned Issue is a issue pinned to a repository's index page.
 */
export class PinnedIssue extends $Base<"PinnedIssue"> {
  constructor() {
    super("PinnedIssue")
  }

  
      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The issue that was pinned.
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  

      
/**
 * The actor that pinned this issue.
 */
      pinnedBy<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"pinnedBy", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("pinnedBy", options) as any
    }
  

      
/**
 * The repository that this issue was pinned to.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * The connection type for PinnedIssue.
 */
export class PinnedIssueConnection extends $Base<"PinnedIssueConnection"> {
  constructor() {
    super("PinnedIssueConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PinnedIssueEdge>>(selectorFn: (s: PinnedIssueEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PinnedIssueEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PinnedIssue>>(selectorFn: (s: PinnedIssue) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PinnedIssue)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class PinnedIssueEdge extends $Base<"PinnedIssueEdge"> {
  constructor() {
    super("PinnedIssueEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PinnedIssue>>(selectorFn: (s: PinnedIssue) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PinnedIssue)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * An ISO-8601 encoded UTC date string with millisecond precision.
 */
export type PreciseDateTime = string



/**
 * Audit log entry for a private_repository_forking.disable event.
 */
export class PrivateRepositoryForkingDisableAuditEntry extends $Base<"PrivateRepositoryForkingDisableAuditEntry"> {
  constructor() {
    super("PrivateRepositoryForkingDisableAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The HTTP path for this enterprise.
 */
      get enterpriseResourcePath(): $Field<"enterpriseResourcePath", string | null | undefined>  {
       return this.$_select("enterpriseResourcePath") as any
      }

      
/**
 * The slug of the enterprise.
 */
      get enterpriseSlug(): $Field<"enterpriseSlug", string | null | undefined>  {
       return this.$_select("enterpriseSlug") as any
      }

      
/**
 * The HTTP URL for this enterprise.
 */
      get enterpriseUrl(): $Field<"enterpriseUrl", string | null | undefined>  {
       return this.$_select("enterpriseUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a private_repository_forking.enable event.
 */
export class PrivateRepositoryForkingEnableAuditEntry extends $Base<"PrivateRepositoryForkingEnableAuditEntry"> {
  constructor() {
    super("PrivateRepositoryForkingEnableAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The HTTP path for this enterprise.
 */
      get enterpriseResourcePath(): $Field<"enterpriseResourcePath", string | null | undefined>  {
       return this.$_select("enterpriseResourcePath") as any
      }

      
/**
 * The slug of the enterprise.
 */
      get enterpriseSlug(): $Field<"enterpriseSlug", string | null | undefined>  {
       return this.$_select("enterpriseSlug") as any
      }

      
/**
 * The HTTP URL for this enterprise.
 */
      get enterpriseUrl(): $Field<"enterpriseUrl", string | null | undefined>  {
       return this.$_select("enterpriseUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own.
 */
export class ProfileItemShowcase extends $Base<"ProfileItemShowcase"> {
  constructor() {
    super("ProfileItemShowcase")
  }

  
      
/**
 * Whether or not the owner has pinned any repositories or gists.
 */
      get hasPinnedItems(): $Field<"hasPinnedItems", boolean>  {
       return this.$_select("hasPinnedItems") as any
      }

      
/**
 * The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned.
 */
      items<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PinnableItemConnection>>(args: Args, selectorFn: (s: PinnableItemConnection) => [...Sel]):$Field<"items", GetOutput<Sel> , GetVariables<Sel, Args>>
items<Sel extends Selection<PinnableItemConnection>>(selectorFn: (s: PinnableItemConnection) => [...Sel]):$Field<"items", GetOutput<Sel> , GetVariables<Sel>>
items(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PinnableItemConnection)
      };
      return this.$_select("items", options) as any
    }
  
}


/**
 * Represents any entity on GitHub that has a profile page.
 */
export class ProfileOwner extends $Interface<{Organization: Organization,User: User}, "ProfileOwner"> {
  constructor() {
    super({Organization: Organization,User: User}, "ProfileOwner")
  }
}


/**
 * Projects manage issues, pull requests and notes within a project owner.
 */
export class Project extends $Base<"Project"> {
  constructor() {
    super("Project")
  }

  
      
/**
 * The project's description body.
 */
      get body(): $Field<"body", string | null | undefined>  {
       return this.$_select("body") as any
      }

      
/**
 * The projects description body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * `true` if the object is closed (definition of closed may depend on type)
 */
      get closed(): $Field<"closed", boolean>  {
       return this.$_select("closed") as any
      }

      
/**
 * Identifies the date and time when the object was closed.
 */
      get closedAt(): $Field<"closedAt", string | null | undefined>  {
       return this.$_select("closedAt") as any
      }

      
/**
 * List of columns in the project
 */
      columns<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectColumnConnection>>(args: Args, selectorFn: (s: ProjectColumnConnection) => [...Sel]):$Field<"columns", GetOutput<Sel> , GetVariables<Sel, Args>>
columns<Sel extends Selection<ProjectColumnConnection>>(selectorFn: (s: ProjectColumnConnection) => [...Sel]):$Field<"columns", GetOutput<Sel> , GetVariables<Sel>>
columns(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectColumnConnection)
      };
      return this.$_select("columns", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who originally created the project.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The project's number.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * The project's owner. Currently limited to repositories, organizations, and users.
 */
      owner<Sel extends Selection<ProjectOwner>>(selectorFn: (s: ProjectOwner) => [...Sel]):$Field<"owner", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectOwner)
      };
      return this.$_select("owner", options) as any
    }
  

      
/**
 * List of pending cards in this project
 */
      pendingCards<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
archivedStates?: Readonly<Array<ProjectCardArchivedState | null | undefined>> | null | undefined,
      }>,Sel extends Selection<ProjectCardConnection>>(args: Args, selectorFn: (s: ProjectCardConnection) => [...Sel]):$Field<"pendingCards", GetOutput<Sel> , GetVariables<Sel, Args>>
pendingCards<Sel extends Selection<ProjectCardConnection>>(selectorFn: (s: ProjectCardConnection) => [...Sel]):$Field<"pendingCards", GetOutput<Sel> , GetVariables<Sel>>
pendingCards(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
archivedStates: "[ProjectCardArchivedState]"
            },
        args,

        selection: selectorFn(new ProjectCardConnection)
      };
      return this.$_select("pendingCards", options) as any
    }
  

      
/**
 * Project progress details.
 */
      progress<Sel extends Selection<ProjectProgress>>(selectorFn: (s: ProjectProgress) => [...Sel]):$Field<"progress", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectProgress)
      };
      return this.$_select("progress", options) as any
    }
  

      
/**
 * The HTTP path for this project
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Whether the project is open or closed.
 */
      get state(): $Field<"state", ProjectState>  {
       return this.$_select("state") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this project
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }
}


/**
 * A card in a project.
 */
export class ProjectCard extends $Base<"ProjectCard"> {
  constructor() {
    super("ProjectCard")
  }

  
      
/**
 * The project column this card is associated under. A card may only belong to one
project column at a time. The column field will be null if the card is created
in a pending state and has yet to be associated with a column. Once cards are
associated with a column, they will not become pending in the future.

 */
      column<Sel extends Selection<ProjectColumn>>(selectorFn: (s: ProjectColumn) => [...Sel]):$Field<"column", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectColumn)
      };
      return this.$_select("column", options) as any
    }
  

      
/**
 * The card content item
 */
      content<Sel extends Selection<ProjectCardItem>>(selectorFn: (s: ProjectCardItem) => [...Sel]):$Field<"content", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectCardItem)
      };
      return this.$_select("content", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who created this card
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether the card is archived
 */
      get isArchived(): $Field<"isArchived", boolean>  {
       return this.$_select("isArchived") as any
      }

      
/**
 * The card note
 */
      get note(): $Field<"note", string | null | undefined>  {
       return this.$_select("note") as any
      }

      
/**
 * The project that contains this card.
 */
      project<Sel extends Selection<Project>>(selectorFn: (s: Project) => [...Sel]):$Field<"project", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Project)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * The HTTP path for this card
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The state of ProjectCard
 */
      get state(): $Field<"state", ProjectCardState | null | undefined>  {
       return this.$_select("state") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this card
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}

  
/**
 * The possible archived states of a project card.
 */
export enum ProjectCardArchivedState {
  
/**
 * A project card that is archived
 */
  ARCHIVED = "ARCHIVED",

/**
 * A project card that is not archived
 */
  NOT_ARCHIVED = "NOT_ARCHIVED"
}
  


/**
 * The connection type for ProjectCard.
 */
export class ProjectCardConnection extends $Base<"ProjectCardConnection"> {
  constructor() {
    super("ProjectCardConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectCardEdge>>(selectorFn: (s: ProjectCardEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectCardEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectCard>>(selectorFn: (s: ProjectCard) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectCard)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectCardEdge extends $Base<"ProjectCardEdge"> {
  constructor() {
    super("ProjectCardEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectCard>>(selectorFn: (s: ProjectCard) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectCard)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Types that can be inside Project Cards.
 */
export class ProjectCardItem extends $Union<{Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner}, "ProjectCardItem"> {
  constructor() {
    super({Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner})
  }
}

  
/**
 * Various content states of a ProjectCard
 */
export enum ProjectCardState {
  
/**
 * The card has content only.
 */
  CONTENT_ONLY = "CONTENT_ONLY",

/**
 * The card has a note only.
 */
  NOTE_ONLY = "NOTE_ONLY",

/**
 * The card is redacted.
 */
  REDACTED = "REDACTED"
}
  


/**
 * A column inside a project.
 */
export class ProjectColumn extends $Base<"ProjectColumn"> {
  constructor() {
    super("ProjectColumn")
  }

  
      
/**
 * List of cards in the column
 */
      cards<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
archivedStates?: Readonly<Array<ProjectCardArchivedState | null | undefined>> | null | undefined,
      }>,Sel extends Selection<ProjectCardConnection>>(args: Args, selectorFn: (s: ProjectCardConnection) => [...Sel]):$Field<"cards", GetOutput<Sel> , GetVariables<Sel, Args>>
cards<Sel extends Selection<ProjectCardConnection>>(selectorFn: (s: ProjectCardConnection) => [...Sel]):$Field<"cards", GetOutput<Sel> , GetVariables<Sel>>
cards(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
archivedStates: "[ProjectCardArchivedState]"
            },
        args,

        selection: selectorFn(new ProjectCardConnection)
      };
      return this.$_select("cards", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project column's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The project that contains this column.
 */
      project<Sel extends Selection<Project>>(selectorFn: (s: Project) => [...Sel]):$Field<"project", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Project)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * The semantic purpose of the column
 */
      get purpose(): $Field<"purpose", ProjectColumnPurpose | null | undefined>  {
       return this.$_select("purpose") as any
      }

      
/**
 * The HTTP path for this project column
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this project column
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * The connection type for ProjectColumn.
 */
export class ProjectColumnConnection extends $Base<"ProjectColumnConnection"> {
  constructor() {
    super("ProjectColumnConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectColumnEdge>>(selectorFn: (s: ProjectColumnEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectColumnEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectColumn>>(selectorFn: (s: ProjectColumn) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectColumn)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectColumnEdge extends $Base<"ProjectColumnEdge"> {
  constructor() {
    super("ProjectColumnEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectColumn>>(selectorFn: (s: ProjectColumn) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectColumn)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The semantic purpose of the column - todo, in progress, or done.
 */
export enum ProjectColumnPurpose {
  
/**
 * The column contains cards still to be worked on
 */
  TODO = "TODO",

/**
 * The column contains cards which are currently being worked on
 */
  IN_PROGRESS = "IN_PROGRESS",

/**
 * The column contains cards which are complete
 */
  DONE = "DONE"
}
  


/**
 * A list of projects associated with the owner.
 */
export class ProjectConnection extends $Base<"ProjectConnection"> {
  constructor() {
    super("ProjectConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectEdge>>(selectorFn: (s: ProjectEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Project>>(selectorFn: (s: Project) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Project)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectEdge extends $Base<"ProjectEdge"> {
  constructor() {
    super("ProjectEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Project>>(selectorFn: (s: Project) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Project)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The type of a project item.
 */
export enum ProjectItemType {
  
/**
 * Issue
 */
  ISSUE = "ISSUE",

/**
 * Pull Request
 */
  PULL_REQUEST = "PULL_REQUEST",

/**
 * Draft Issue
 */
  DRAFT_ISSUE = "DRAFT_ISSUE",

/**
 * Redacted Item
 */
  REDACTED = "REDACTED"
}
  


/**
 * New projects that manage issues, pull requests and drafts using tables and boards.
 */
export class ProjectNext extends $Base<"ProjectNext"> {
  constructor() {
    super("ProjectNext")
  }

  
      
/**
 * Returns true if the project is closed.
 */
      get closed(): $Field<"closed", boolean>  {
       return this.$_select("closed") as any
      }

      
/**
 * Identifies the date and time when the object was closed.
 */
      get closedAt(): $Field<"closedAt", string | null | undefined>  {
       return this.$_select("closedAt") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who originally created the project.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The project's description.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * List of fields in the project
 */
      fields<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectNextFieldConnection>>(args: Args, selectorFn: (s: ProjectNextFieldConnection) => [...Sel]):$Field<"fields", GetOutput<Sel> , GetVariables<Sel, Args>>
fields<Sel extends Selection<ProjectNextFieldConnection>>(selectorFn: (s: ProjectNextFieldConnection) => [...Sel]):$Field<"fields", GetOutput<Sel> , GetVariables<Sel>>
fields(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectNextFieldConnection)
      };
      return this.$_select("fields", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * List of items in the project
 */
      items<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectNextItemConnection>>(args: Args, selectorFn: (s: ProjectNextItemConnection) => [...Sel]):$Field<"items", GetOutput<Sel> , GetVariables<Sel, Args>>
items<Sel extends Selection<ProjectNextItemConnection>>(selectorFn: (s: ProjectNextItemConnection) => [...Sel]):$Field<"items", GetOutput<Sel> , GetVariables<Sel>>
items(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectNextItemConnection)
      };
      return this.$_select("items", options) as any
    }
  

      
/**
 * The project's number.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * The project's owner. Currently limited to organizations and users.
 */
      owner<Sel extends Selection<ProjectNextOwner>>(selectorFn: (s: ProjectNextOwner) => [...Sel]):$Field<"owner", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextOwner)
      };
      return this.$_select("owner", options) as any
    }
  

      
/**
 * Returns true if the project is public.
 */
      get public(): $Field<"public", boolean>  {
       return this.$_select("public") as any
      }

      
/**
 * The repositories the project is linked to.
 */
      repositories<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<RepositoryConnection>>(args: Args, selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel, Args>>
repositories<Sel extends Selection<RepositoryConnection>>(selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel>>
repositories(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new RepositoryConnection)
      };
      return this.$_select("repositories", options) as any
    }
  

      
/**
 * The HTTP path for this project
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The project's short description.
 */
      get shortDescription(): $Field<"shortDescription", string | null | undefined>  {
       return this.$_select("shortDescription") as any
      }

      
/**
 * The project's name.
 */
      get title(): $Field<"title", string | null | undefined>  {
       return this.$_select("title") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this project
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * List of views in the project
 */
      views<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectViewConnection>>(args: Args, selectorFn: (s: ProjectViewConnection) => [...Sel]):$Field<"views", GetOutput<Sel> , GetVariables<Sel, Args>>
views<Sel extends Selection<ProjectViewConnection>>(selectorFn: (s: ProjectViewConnection) => [...Sel]):$Field<"views", GetOutput<Sel> , GetVariables<Sel>>
views(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectViewConnection)
      };
      return this.$_select("views", options) as any
    }
  
}


/**
 * The connection type for ProjectNext.
 */
export class ProjectNextConnection extends $Base<"ProjectNextConnection"> {
  constructor() {
    super("ProjectNextConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectNextEdge>>(selectorFn: (s: ProjectNextEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectNext>>(selectorFn: (s: ProjectNext) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNext)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectNextEdge extends $Base<"ProjectNextEdge"> {
  constructor() {
    super("ProjectNextEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectNext>>(selectorFn: (s: ProjectNext) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNext)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A field inside a project.
 */
export class ProjectNextField extends $Base<"ProjectNextField"> {
  constructor() {
    super("ProjectNextField")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The field's type.
 */
      get dataType(): $Field<"dataType", ProjectNextFieldType>  {
       return this.$_select("dataType") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project field's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The project that contains this field.
 */
      project<Sel extends Selection<ProjectNext>>(selectorFn: (s: ProjectNext) => [...Sel]):$Field<"project", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNext)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * The field's settings.
 */
      get settings(): $Field<"settings", string | null | undefined>  {
       return this.$_select("settings") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * Common fields across different field types
 */
export class ProjectNextFieldCommon extends $Interface<{ProjectNextField: ProjectNextField}, "ProjectNextFieldCommon"> {
  constructor() {
    super({ProjectNextField: ProjectNextField}, "ProjectNextFieldCommon")
  }
}


/**
 * The connection type for ProjectNextField.
 */
export class ProjectNextFieldConnection extends $Base<"ProjectNextFieldConnection"> {
  constructor() {
    super("ProjectNextFieldConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectNextFieldEdge>>(selectorFn: (s: ProjectNextFieldEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextFieldEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectNextField>>(selectorFn: (s: ProjectNextField) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextField)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectNextFieldEdge extends $Base<"ProjectNextFieldEdge"> {
  constructor() {
    super("ProjectNextFieldEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectNextField>>(selectorFn: (s: ProjectNextField) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextField)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The type of a project next field.
 */
export enum ProjectNextFieldType {
  
/**
 * Assignees
 */
  ASSIGNEES = "ASSIGNEES",

/**
 * Linked Pull Requests
 */
  LINKED_PULL_REQUESTS = "LINKED_PULL_REQUESTS",

/**
 * Reviewers
 */
  REVIEWERS = "REVIEWERS",

/**
 * Labels
 */
  LABELS = "LABELS",

/**
 * Milestone
 */
  MILESTONE = "MILESTONE",

/**
 * Repository
 */
  REPOSITORY = "REPOSITORY",

/**
 * Title
 */
  TITLE = "TITLE",

/**
 * Text
 */
  TEXT = "TEXT",

/**
 * Single Select
 */
  SINGLE_SELECT = "SINGLE_SELECT",

/**
 * Number
 */
  NUMBER = "NUMBER",

/**
 * Date
 */
  DATE = "DATE",

/**
 * Iteration
 */
  ITERATION = "ITERATION",

/**
 * Tracks
 */
  TRACKS = "TRACKS"
}
  


/**
 * An item within a new Project.
 */
export class ProjectNextItem extends $Base<"ProjectNextItem"> {
  constructor() {
    super("ProjectNextItem")
  }

  
      
/**
 * The content of the referenced draft issue, issue, or pull request
 */
      content<Sel extends Selection<ProjectNextItemContent>>(selectorFn: (s: ProjectNextItemContent) => [...Sel]):$Field<"content", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextItemContent)
      };
      return this.$_select("content", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who created the item.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * List of field values
 */
      fieldValues<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectNextItemFieldValueConnection>>(args: Args, selectorFn: (s: ProjectNextItemFieldValueConnection) => [...Sel]):$Field<"fieldValues", GetOutput<Sel> , GetVariables<Sel, Args>>
fieldValues<Sel extends Selection<ProjectNextItemFieldValueConnection>>(selectorFn: (s: ProjectNextItemFieldValueConnection) => [...Sel]):$Field<"fieldValues", GetOutput<Sel> , GetVariables<Sel>>
fieldValues(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectNextItemFieldValueConnection)
      };
      return this.$_select("fieldValues", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether the item is archived.
 */
      get isArchived(): $Field<"isArchived", boolean>  {
       return this.$_select("isArchived") as any
      }

      
/**
 * The project that contains this item.
 */
      project<Sel extends Selection<ProjectNext>>(selectorFn: (s: ProjectNext) => [...Sel]):$Field<"project", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNext)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * The title of the item
 */
      get title(): $Field<"title", string | null | undefined>  {
       return this.$_select("title") as any
      }

      
/**
 * The type of the item.
 */
      get type(): $Field<"type", ProjectItemType>  {
       return this.$_select("type") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The connection type for ProjectNextItem.
 */
export class ProjectNextItemConnection extends $Base<"ProjectNextItemConnection"> {
  constructor() {
    super("ProjectNextItemConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectNextItemEdge>>(selectorFn: (s: ProjectNextItemEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextItemEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectNextItem>>(selectorFn: (s: ProjectNextItem) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextItem)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Types that can be inside Project Items.
 */
export class ProjectNextItemContent extends $Union<{DraftIssue: DraftIssue,Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner}, "ProjectNextItemContent"> {
  constructor() {
    super({DraftIssue: DraftIssue,Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner})
  }
}


/**
 * An edge in a connection.
 */
export class ProjectNextItemEdge extends $Base<"ProjectNextItemEdge"> {
  constructor() {
    super("ProjectNextItemEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectNextItem>>(selectorFn: (s: ProjectNextItem) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextItem)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * An value of a field in an item of a new Project.
 */
export class ProjectNextItemFieldValue extends $Base<"ProjectNextItemFieldValue"> {
  constructor() {
    super("ProjectNextItemFieldValue")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who created the item.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project field that contains this value.
 */
      projectField<Sel extends Selection<ProjectNextField>>(selectorFn: (s: ProjectNextField) => [...Sel]):$Field<"projectField", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextField)
      };
      return this.$_select("projectField", options) as any
    }
  

      
/**
 * The project item that contains this value.
 */
      projectItem<Sel extends Selection<ProjectNextItem>>(selectorFn: (s: ProjectNextItem) => [...Sel]):$Field<"projectItem", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextItem)
      };
      return this.$_select("projectItem", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The value of a field
 */
      get value(): $Field<"value", string | null | undefined>  {
       return this.$_select("value") as any
      }
}


/**
 * The connection type for ProjectNextItemFieldValue.
 */
export class ProjectNextItemFieldValueConnection extends $Base<"ProjectNextItemFieldValueConnection"> {
  constructor() {
    super("ProjectNextItemFieldValueConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectNextItemFieldValueEdge>>(selectorFn: (s: ProjectNextItemFieldValueEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextItemFieldValueEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectNextItemFieldValue>>(selectorFn: (s: ProjectNextItemFieldValue) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextItemFieldValue)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectNextItemFieldValueEdge extends $Base<"ProjectNextItemFieldValueEdge"> {
  constructor() {
    super("ProjectNextItemFieldValueEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectNextItemFieldValue>>(selectorFn: (s: ProjectNextItemFieldValue) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextItemFieldValue)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * Properties by which the return project can be ordered.
 */
export enum ProjectNextOrderField {
  
/**
 * The project's title
 */
  TITLE = "TITLE",

/**
 * The project's number
 */
  NUMBER = "NUMBER",

/**
 * The project's date and time of update
 */
  UPDATED_AT = "UPDATED_AT",

/**
 * The project's date and time of creation
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * Represents an owner of a project (beta).
 */
export class ProjectNextOwner extends $Interface<{Issue: Issue,Organization: Organization,PullRequest: PullRequest,User: User}, "ProjectNextOwner"> {
  constructor() {
    super({Issue: Issue,Organization: Organization,PullRequest: PullRequest,User: User}, "ProjectNextOwner")
  }
}


/**
 * Ways in which lists of projects can be ordered upon return.
 */
export type ProjectOrder = {
  direction: OrderDirection,
field: ProjectOrderField
}
    

  
/**
 * Properties by which project connections can be ordered.
 */
export enum ProjectOrderField {
  
/**
 * Order projects by creation time
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order projects by update time
 */
  UPDATED_AT = "UPDATED_AT",

/**
 * Order projects by name
 */
  NAME = "NAME"
}
  


/**
 * Represents an owner of a Project.
 */
export class ProjectOwner extends $Interface<{Organization: Organization,Repository: Repository,User: User}, "ProjectOwner"> {
  constructor() {
    super({Organization: Organization,Repository: Repository,User: User}, "ProjectOwner")
  }
}


/**
 * Project progress stats.
 */
export class ProjectProgress extends $Base<"ProjectProgress"> {
  constructor() {
    super("ProjectProgress")
  }

  
      
/**
 * The number of done cards.
 */
      get doneCount(): $Field<"doneCount", number>  {
       return this.$_select("doneCount") as any
      }

      
/**
 * The percentage of done cards.
 */
      get donePercentage(): $Field<"donePercentage", number>  {
       return this.$_select("donePercentage") as any
      }

      
/**
 * Whether progress tracking is enabled and cards with purpose exist for this project
 */
      get enabled(): $Field<"enabled", boolean>  {
       return this.$_select("enabled") as any
      }

      
/**
 * The number of in-progress cards.
 */
      get inProgressCount(): $Field<"inProgressCount", number>  {
       return this.$_select("inProgressCount") as any
      }

      
/**
 * The percentage of in-progress cards.
 */
      get inProgressPercentage(): $Field<"inProgressPercentage", number>  {
       return this.$_select("inProgressPercentage") as any
      }

      
/**
 * The number of to do cards.
 */
      get todoCount(): $Field<"todoCount", number>  {
       return this.$_select("todoCount") as any
      }

      
/**
 * The percentage of to do cards.
 */
      get todoPercentage(): $Field<"todoPercentage", number>  {
       return this.$_select("todoPercentage") as any
      }
}

  
/**
 * State of the project; either 'open' or 'closed'
 */
export enum ProjectState {
  
/**
 * The project is open.
 */
  OPEN = "OPEN",

/**
 * The project is closed.
 */
  CLOSED = "CLOSED"
}
  

  
/**
 * GitHub-provided templates for Projects
 */
export enum ProjectTemplate {
  
/**
 * Create a board with columns for To do, In progress and Done.
 */
  BASIC_KANBAN = "BASIC_KANBAN",

/**
 * Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
 */
  AUTOMATED_KANBAN_V2 = "AUTOMATED_KANBAN_V2",

/**
 * Create a board with triggers to automatically move cards across columns with review automation.
 */
  AUTOMATED_REVIEWS_KANBAN = "AUTOMATED_REVIEWS_KANBAN",

/**
 * Create a board to triage and prioritize bugs with To do, priority, and Done columns.
 */
  BUG_TRIAGE = "BUG_TRIAGE"
}
  


/**
 * New projects that manage issues, pull requests and drafts using tables and boards.
 */
export class ProjectV2 extends $Base<"ProjectV2"> {
  constructor() {
    super("ProjectV2")
  }

  
      
/**
 * Returns true if the project is closed.
 */
      get closed(): $Field<"closed", boolean>  {
       return this.$_select("closed") as any
      }

      
/**
 * Identifies the date and time when the object was closed.
 */
      get closedAt(): $Field<"closedAt", string | null | undefined>  {
       return this.$_select("closedAt") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who originally created the project.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * A field of the project
 */
      field<Args extends VariabledInput<{
        name: string,
      }>,Sel extends Selection<ProjectV2FieldConfiguration>>(args: Args, selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              name: "String!"
            },
        args,

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  

      
/**
 * List of fields and their constraints in the project
 */
      fields<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ProjectV2FieldOrder | null | undefined,
      }>,Sel extends Selection<ProjectV2FieldConfigurationConnection>>(args: Args, selectorFn: (s: ProjectV2FieldConfigurationConnection) => [...Sel]):$Field<"fields", GetOutput<Sel> , GetVariables<Sel, Args>>
fields<Sel extends Selection<ProjectV2FieldConfigurationConnection>>(selectorFn: (s: ProjectV2FieldConfigurationConnection) => [...Sel]):$Field<"fields", GetOutput<Sel> , GetVariables<Sel>>
fields(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ProjectV2FieldOrder"
            },
        args,

        selection: selectorFn(new ProjectV2FieldConfigurationConnection)
      };
      return this.$_select("fields", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * List of items in the project
 */
      items<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ProjectV2ItemOrder | null | undefined,
      }>,Sel extends Selection<ProjectV2ItemConnection>>(args: Args, selectorFn: (s: ProjectV2ItemConnection) => [...Sel]):$Field<"items", GetOutput<Sel> , GetVariables<Sel, Args>>
items<Sel extends Selection<ProjectV2ItemConnection>>(selectorFn: (s: ProjectV2ItemConnection) => [...Sel]):$Field<"items", GetOutput<Sel> , GetVariables<Sel>>
items(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ProjectV2ItemOrder"
            },
        args,

        selection: selectorFn(new ProjectV2ItemConnection)
      };
      return this.$_select("items", options) as any
    }
  

      
/**
 * The project's number.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * The project's owner. Currently limited to organizations and users.
 */
      owner<Sel extends Selection<ProjectV2Owner>>(selectorFn: (s: ProjectV2Owner) => [...Sel]):$Field<"owner", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Owner)
      };
      return this.$_select("owner", options) as any
    }
  

      
/**
 * Returns true if the project is public.
 */
      get public(): $Field<"public", boolean>  {
       return this.$_select("public") as any
      }

      
/**
 * The project's readme.
 */
      get readme(): $Field<"readme", string | null | undefined>  {
       return this.$_select("readme") as any
      }

      
/**
 * The repositories the project is linked to.
 */
      repositories<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: RepositoryOrder | null | undefined,
      }>,Sel extends Selection<RepositoryConnection>>(args: Args, selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel, Args>>
repositories<Sel extends Selection<RepositoryConnection>>(selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel>>
repositories(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "RepositoryOrder"
            },
        args,

        selection: selectorFn(new RepositoryConnection)
      };
      return this.$_select("repositories", options) as any
    }
  

      
/**
 * The HTTP path for this project
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The project's short description.
 */
      get shortDescription(): $Field<"shortDescription", string | null | undefined>  {
       return this.$_select("shortDescription") as any
      }

      
/**
 * The teams the project is linked to.
 */
      teams<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: TeamOrder | null | undefined,
      }>,Sel extends Selection<TeamConnection>>(args: Args, selectorFn: (s: TeamConnection) => [...Sel]):$Field<"teams", GetOutput<Sel> , GetVariables<Sel, Args>>
teams<Sel extends Selection<TeamConnection>>(selectorFn: (s: TeamConnection) => [...Sel]):$Field<"teams", GetOutput<Sel> , GetVariables<Sel>>
teams(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "TeamOrder"
            },
        args,

        selection: selectorFn(new TeamConnection)
      };
      return this.$_select("teams", options) as any
    }
  

      
/**
 * The project's name.
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this project
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * A view of the project
 */
      view<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<ProjectV2View>>(args: Args, selectorFn: (s: ProjectV2View) => [...Sel]):$Field<"view", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new ProjectV2View)
      };
      return this.$_select("view", options) as any
    }
  

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * List of views in the project
 */
      views<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ProjectV2ViewOrder | null | undefined,
      }>,Sel extends Selection<ProjectV2ViewConnection>>(args: Args, selectorFn: (s: ProjectV2ViewConnection) => [...Sel]):$Field<"views", GetOutput<Sel> , GetVariables<Sel, Args>>
views<Sel extends Selection<ProjectV2ViewConnection>>(selectorFn: (s: ProjectV2ViewConnection) => [...Sel]):$Field<"views", GetOutput<Sel> , GetVariables<Sel>>
views(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ProjectV2ViewOrder"
            },
        args,

        selection: selectorFn(new ProjectV2ViewConnection)
      };
      return this.$_select("views", options) as any
    }
  
}


/**
 * The connection type for ProjectV2.
 */
export class ProjectV2Connection extends $Base<"ProjectV2Connection"> {
  constructor() {
    super("ProjectV2Connection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectV2Edge>>(selectorFn: (s: ProjectV2Edge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Edge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectV2>>(selectorFn: (s: ProjectV2) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectV2Edge extends $Base<"ProjectV2Edge"> {
  constructor() {
    super("ProjectV2Edge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectV2>>(selectorFn: (s: ProjectV2) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A field inside a project.
 */
export class ProjectV2Field extends $Base<"ProjectV2Field"> {
  constructor() {
    super("ProjectV2Field")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The field's type.
 */
      get dataType(): $Field<"dataType", ProjectV2FieldType>  {
       return this.$_select("dataType") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project field's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The project that contains this field.
 */
      project<Sel extends Selection<ProjectV2>>(selectorFn: (s: ProjectV2) => [...Sel]):$Field<"project", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * Common fields across different project field types
 */
export class ProjectV2FieldCommon extends $Interface<{ProjectV2Field: ProjectV2Field,ProjectV2IterationField: ProjectV2IterationField,ProjectV2SingleSelectField: ProjectV2SingleSelectField}, "ProjectV2FieldCommon"> {
  constructor() {
    super({ProjectV2Field: ProjectV2Field,ProjectV2IterationField: ProjectV2IterationField,ProjectV2SingleSelectField: ProjectV2SingleSelectField}, "ProjectV2FieldCommon")
  }
}


/**
 * Configurations for project fields.
 */
export class ProjectV2FieldConfiguration extends $Union<{ProjectV2Field: ProjectV2Field,ProjectV2IterationField: ProjectV2IterationField,ProjectV2SingleSelectField: ProjectV2SingleSelectField,ProjectV2FieldCommon: ProjectV2FieldCommon,Node: Node}, "ProjectV2FieldConfiguration"> {
  constructor() {
    super({ProjectV2Field: ProjectV2Field,ProjectV2IterationField: ProjectV2IterationField,ProjectV2SingleSelectField: ProjectV2SingleSelectField,ProjectV2FieldCommon: ProjectV2FieldCommon,Node: Node})
  }
}


/**
 * The connection type for ProjectV2FieldConfiguration.
 */
export class ProjectV2FieldConfigurationConnection extends $Base<"ProjectV2FieldConfigurationConnection"> {
  constructor() {
    super("ProjectV2FieldConfigurationConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectV2FieldConfigurationEdge>>(selectorFn: (s: ProjectV2FieldConfigurationEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfigurationEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectV2FieldConfigurationEdge extends $Base<"ProjectV2FieldConfigurationEdge"> {
  constructor() {
    super("ProjectV2FieldConfigurationEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The connection type for ProjectV2Field.
 */
export class ProjectV2FieldConnection extends $Base<"ProjectV2FieldConnection"> {
  constructor() {
    super("ProjectV2FieldConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectV2FieldEdge>>(selectorFn: (s: ProjectV2FieldEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectV2Field>>(selectorFn: (s: ProjectV2Field) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Field)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectV2FieldEdge extends $Base<"ProjectV2FieldEdge"> {
  constructor() {
    super("ProjectV2FieldEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectV2Field>>(selectorFn: (s: ProjectV2Field) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Field)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for project v2 field connections
 */
export type ProjectV2FieldOrder = {
  direction: OrderDirection,
field: ProjectV2FieldOrderField
}
    

  
/**
 * Properties by which project v2 field connections can be ordered.
 */
export enum ProjectV2FieldOrderField {
  
/**
 * Order project v2 fields by position
 */
  POSITION = "POSITION",

/**
 * Order project v2 fields by creation time
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order project v2 fields by name
 */
  NAME = "NAME"
}
  

  
/**
 * The type of a project field.
 */
export enum ProjectV2FieldType {
  
/**
 * Assignees
 */
  ASSIGNEES = "ASSIGNEES",

/**
 * Linked Pull Requests
 */
  LINKED_PULL_REQUESTS = "LINKED_PULL_REQUESTS",

/**
 * Reviewers
 */
  REVIEWERS = "REVIEWERS",

/**
 * Labels
 */
  LABELS = "LABELS",

/**
 * Milestone
 */
  MILESTONE = "MILESTONE",

/**
 * Repository
 */
  REPOSITORY = "REPOSITORY",

/**
 * Title
 */
  TITLE = "TITLE",

/**
 * Text
 */
  TEXT = "TEXT",

/**
 * Single Select
 */
  SINGLE_SELECT = "SINGLE_SELECT",

/**
 * Number
 */
  NUMBER = "NUMBER",

/**
 * Date
 */
  DATE = "DATE",

/**
 * Iteration
 */
  ITERATION = "ITERATION",

/**
 * Tracks
 */
  TRACKS = "TRACKS",

/**
 * Tracked by
 */
  TRACKED_BY = "TRACKED_BY"
}
  


/**
 * The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time.
 */
export type ProjectV2FieldValue = {
  date?: string | null | undefined,
iterationId?: string | null | undefined,
number?: number | null | undefined,
singleSelectOptionId?: string | null | undefined,
text?: string | null | undefined
}
    


/**
 * An item within a Project.
 */
export class ProjectV2Item extends $Base<"ProjectV2Item"> {
  constructor() {
    super("ProjectV2Item")
  }

  
      
/**
 * The content of the referenced draft issue, issue, or pull request
 */
      content<Sel extends Selection<ProjectV2ItemContent>>(selectorFn: (s: ProjectV2ItemContent) => [...Sel]):$Field<"content", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2ItemContent)
      };
      return this.$_select("content", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who created the item.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * A specific field value given a field name
 */
      fieldValueByName<Args extends VariabledInput<{
        name: string,
      }>,Sel extends Selection<ProjectV2ItemFieldValue>>(args: Args, selectorFn: (s: ProjectV2ItemFieldValue) => [...Sel]):$Field<"fieldValueByName", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              name: "String!"
            },
        args,

        selection: selectorFn(new ProjectV2ItemFieldValue)
      };
      return this.$_select("fieldValueByName", options) as any
    }
  

      
/**
 * List of field values
 */
      fieldValues<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ProjectV2ItemFieldValueOrder | null | undefined,
      }>,Sel extends Selection<ProjectV2ItemFieldValueConnection>>(args: Args, selectorFn: (s: ProjectV2ItemFieldValueConnection) => [...Sel]):$Field<"fieldValues", GetOutput<Sel> , GetVariables<Sel, Args>>
fieldValues<Sel extends Selection<ProjectV2ItemFieldValueConnection>>(selectorFn: (s: ProjectV2ItemFieldValueConnection) => [...Sel]):$Field<"fieldValues", GetOutput<Sel> , GetVariables<Sel>>
fieldValues(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ProjectV2ItemFieldValueOrder"
            },
        args,

        selection: selectorFn(new ProjectV2ItemFieldValueConnection)
      };
      return this.$_select("fieldValues", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether the item is archived.
 */
      get isArchived(): $Field<"isArchived", boolean>  {
       return this.$_select("isArchived") as any
      }

      
/**
 * The project that contains this item.
 */
      project<Sel extends Selection<ProjectV2>>(selectorFn: (s: ProjectV2) => [...Sel]):$Field<"project", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * The type of the item.
 */
      get type(): $Field<"type", ProjectV2ItemType>  {
       return this.$_select("type") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The connection type for ProjectV2Item.
 */
export class ProjectV2ItemConnection extends $Base<"ProjectV2ItemConnection"> {
  constructor() {
    super("ProjectV2ItemConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectV2ItemEdge>>(selectorFn: (s: ProjectV2ItemEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2ItemEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectV2Item>>(selectorFn: (s: ProjectV2Item) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Item)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Types that can be inside Project Items.
 */
export class ProjectV2ItemContent extends $Union<{DraftIssue: DraftIssue,Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner}, "ProjectV2ItemContent"> {
  constructor() {
    super({DraftIssue: DraftIssue,Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner})
  }
}


/**
 * An edge in a connection.
 */
export class ProjectV2ItemEdge extends $Base<"ProjectV2ItemEdge"> {
  constructor() {
    super("ProjectV2ItemEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectV2Item>>(selectorFn: (s: ProjectV2Item) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Item)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The value of a date field in a Project item.
 */
export class ProjectV2ItemFieldDateValue extends $Base<"ProjectV2ItemFieldDateValue"> {
  constructor() {
    super("ProjectV2ItemFieldDateValue")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who created the item.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * Date value for the field
 */
      get date(): $Field<"date", string | null | undefined>  {
       return this.$_select("date") as any
      }

      
/**
 * The project field that contains this value.
 */
      field<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project item that contains this value.
 */
      item<Sel extends Selection<ProjectV2Item>>(selectorFn: (s: ProjectV2Item) => [...Sel]):$Field<"item", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Item)
      };
      return this.$_select("item", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The value of an iteration field in a Project item.
 */
export class ProjectV2ItemFieldIterationValue extends $Base<"ProjectV2ItemFieldIterationValue"> {
  constructor() {
    super("ProjectV2ItemFieldIterationValue")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who created the item.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The duration of the iteration in days.
 */
      get duration(): $Field<"duration", number>  {
       return this.$_select("duration") as any
      }

      
/**
 * The project field that contains this value.
 */
      field<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project item that contains this value.
 */
      item<Sel extends Selection<ProjectV2Item>>(selectorFn: (s: ProjectV2Item) => [...Sel]):$Field<"item", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Item)
      };
      return this.$_select("item", options) as any
    }
  

      
/**
 * The ID of the iteration.
 */
      get iterationId(): $Field<"iterationId", string>  {
       return this.$_select("iterationId") as any
      }

      
/**
 * The start date of the iteration.
 */
      get startDate(): $Field<"startDate", string>  {
       return this.$_select("startDate") as any
      }

      
/**
 * The title of the iteration.
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }

      
/**
 * The title of the iteration, with HTML.
 */
      get titleHTML(): $Field<"titleHTML", string>  {
       return this.$_select("titleHTML") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The value of the labels field in a Project item.
 */
export class ProjectV2ItemFieldLabelValue extends $Base<"ProjectV2ItemFieldLabelValue"> {
  constructor() {
    super("ProjectV2ItemFieldLabelValue")
  }

  
      
/**
 * The field that contains this value.
 */
      field<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  

      
/**
 * Labels value of a field
 */
      labels<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<LabelConnection>>(args: Args, selectorFn: (s: LabelConnection) => [...Sel]):$Field<"labels", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
labels<Sel extends Selection<LabelConnection>>(selectorFn: (s: LabelConnection) => [...Sel]):$Field<"labels", GetOutput<Sel> | undefined , GetVariables<Sel>>
labels(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new LabelConnection)
      };
      return this.$_select("labels", options) as any
    }
  
}


/**
 * The value of a milestone field in a Project item.
 */
export class ProjectV2ItemFieldMilestoneValue extends $Base<"ProjectV2ItemFieldMilestoneValue"> {
  constructor() {
    super("ProjectV2ItemFieldMilestoneValue")
  }

  
      
/**
 * The field that contains this value.
 */
      field<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  

      
/**
 * Milestone value of a field
 */
      milestone<Sel extends Selection<Milestone>>(selectorFn: (s: Milestone) => [...Sel]):$Field<"milestone", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Milestone)
      };
      return this.$_select("milestone", options) as any
    }
  
}


/**
 * The value of a number field in a Project item.
 */
export class ProjectV2ItemFieldNumberValue extends $Base<"ProjectV2ItemFieldNumberValue"> {
  constructor() {
    super("ProjectV2ItemFieldNumberValue")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who created the item.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The project field that contains this value.
 */
      field<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project item that contains this value.
 */
      item<Sel extends Selection<ProjectV2Item>>(selectorFn: (s: ProjectV2Item) => [...Sel]):$Field<"item", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Item)
      };
      return this.$_select("item", options) as any
    }
  

      
/**
 * Number as a float(8)
 */
      get number(): $Field<"number", number | null | undefined>  {
       return this.$_select("number") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The value of a pull request field in a Project item.
 */
export class ProjectV2ItemFieldPullRequestValue extends $Base<"ProjectV2ItemFieldPullRequestValue"> {
  constructor() {
    super("ProjectV2ItemFieldPullRequestValue")
  }

  
      
/**
 * The field that contains this value.
 */
      field<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  

      
/**
 * The pull requests for this field
 */
      pullRequests<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: PullRequestOrder | null | undefined,
      }>,Sel extends Selection<PullRequestConnection>>(args: Args, selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"pullRequests", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
pullRequests<Sel extends Selection<PullRequestConnection>>(selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"pullRequests", GetOutput<Sel> | undefined , GetVariables<Sel>>
pullRequests(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "PullRequestOrder"
            },
        args,

        selection: selectorFn(new PullRequestConnection)
      };
      return this.$_select("pullRequests", options) as any
    }
  
}


/**
 * The value of a repository field in a Project item.
 */
export class ProjectV2ItemFieldRepositoryValue extends $Base<"ProjectV2ItemFieldRepositoryValue"> {
  constructor() {
    super("ProjectV2ItemFieldRepositoryValue")
  }

  
      
/**
 * The field that contains this value.
 */
      field<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  

      
/**
 * The repository for this field.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * The value of a reviewers field in a Project item.
 */
export class ProjectV2ItemFieldReviewerValue extends $Base<"ProjectV2ItemFieldReviewerValue"> {
  constructor() {
    super("ProjectV2ItemFieldReviewerValue")
  }

  
      
/**
 * The field that contains this value.
 */
      field<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  

      
/**
 * The reviewers for this field.
 */
      reviewers<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<RequestedReviewerConnection>>(args: Args, selectorFn: (s: RequestedReviewerConnection) => [...Sel]):$Field<"reviewers", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
reviewers<Sel extends Selection<RequestedReviewerConnection>>(selectorFn: (s: RequestedReviewerConnection) => [...Sel]):$Field<"reviewers", GetOutput<Sel> | undefined , GetVariables<Sel>>
reviewers(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new RequestedReviewerConnection)
      };
      return this.$_select("reviewers", options) as any
    }
  
}


/**
 * The value of a single select field in a Project item.
 */
export class ProjectV2ItemFieldSingleSelectValue extends $Base<"ProjectV2ItemFieldSingleSelectValue"> {
  constructor() {
    super("ProjectV2ItemFieldSingleSelectValue")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who created the item.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The project field that contains this value.
 */
      field<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project item that contains this value.
 */
      item<Sel extends Selection<ProjectV2Item>>(selectorFn: (s: ProjectV2Item) => [...Sel]):$Field<"item", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Item)
      };
      return this.$_select("item", options) as any
    }
  

      
/**
 * The name of the selected single select option.
 */
      get name(): $Field<"name", string | null | undefined>  {
       return this.$_select("name") as any
      }

      
/**
 * The html name of the selected single select option.
 */
      get nameHTML(): $Field<"nameHTML", string | null | undefined>  {
       return this.$_select("nameHTML") as any
      }

      
/**
 * The id of the selected single select option.
 */
      get optionId(): $Field<"optionId", string | null | undefined>  {
       return this.$_select("optionId") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The value of a text field in a Project item.
 */
export class ProjectV2ItemFieldTextValue extends $Base<"ProjectV2ItemFieldTextValue"> {
  constructor() {
    super("ProjectV2ItemFieldTextValue")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who created the item.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The project field that contains this value.
 */
      field<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project item that contains this value.
 */
      item<Sel extends Selection<ProjectV2Item>>(selectorFn: (s: ProjectV2Item) => [...Sel]):$Field<"item", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Item)
      };
      return this.$_select("item", options) as any
    }
  

      
/**
 * Text value of a field
 */
      get text(): $Field<"text", string | null | undefined>  {
       return this.$_select("text") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The value of a user field in a Project item.
 */
export class ProjectV2ItemFieldUserValue extends $Base<"ProjectV2ItemFieldUserValue"> {
  constructor() {
    super("ProjectV2ItemFieldUserValue")
  }

  
      
/**
 * The field that contains this value.
 */
      field<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  

      
/**
 * The users for this field
 */
      users<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserConnection>>(args: Args, selectorFn: (s: UserConnection) => [...Sel]):$Field<"users", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
users<Sel extends Selection<UserConnection>>(selectorFn: (s: UserConnection) => [...Sel]):$Field<"users", GetOutput<Sel> | undefined , GetVariables<Sel>>
users(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserConnection)
      };
      return this.$_select("users", options) as any
    }
  
}


/**
 * Project field values
 */
export class ProjectV2ItemFieldValue extends $Union<{ProjectV2ItemFieldDateValue: ProjectV2ItemFieldDateValue,ProjectV2ItemFieldIterationValue: ProjectV2ItemFieldIterationValue,ProjectV2ItemFieldLabelValue: ProjectV2ItemFieldLabelValue,ProjectV2ItemFieldMilestoneValue: ProjectV2ItemFieldMilestoneValue,ProjectV2ItemFieldNumberValue: ProjectV2ItemFieldNumberValue,ProjectV2ItemFieldPullRequestValue: ProjectV2ItemFieldPullRequestValue,ProjectV2ItemFieldRepositoryValue: ProjectV2ItemFieldRepositoryValue,ProjectV2ItemFieldReviewerValue: ProjectV2ItemFieldReviewerValue,ProjectV2ItemFieldSingleSelectValue: ProjectV2ItemFieldSingleSelectValue,ProjectV2ItemFieldTextValue: ProjectV2ItemFieldTextValue,ProjectV2ItemFieldUserValue: ProjectV2ItemFieldUserValue,ProjectV2ItemFieldValueCommon: ProjectV2ItemFieldValueCommon,Node: Node}, "ProjectV2ItemFieldValue"> {
  constructor() {
    super({ProjectV2ItemFieldDateValue: ProjectV2ItemFieldDateValue,ProjectV2ItemFieldIterationValue: ProjectV2ItemFieldIterationValue,ProjectV2ItemFieldLabelValue: ProjectV2ItemFieldLabelValue,ProjectV2ItemFieldMilestoneValue: ProjectV2ItemFieldMilestoneValue,ProjectV2ItemFieldNumberValue: ProjectV2ItemFieldNumberValue,ProjectV2ItemFieldPullRequestValue: ProjectV2ItemFieldPullRequestValue,ProjectV2ItemFieldRepositoryValue: ProjectV2ItemFieldRepositoryValue,ProjectV2ItemFieldReviewerValue: ProjectV2ItemFieldReviewerValue,ProjectV2ItemFieldSingleSelectValue: ProjectV2ItemFieldSingleSelectValue,ProjectV2ItemFieldTextValue: ProjectV2ItemFieldTextValue,ProjectV2ItemFieldUserValue: ProjectV2ItemFieldUserValue,ProjectV2ItemFieldValueCommon: ProjectV2ItemFieldValueCommon,Node: Node})
  }
}


/**
 * Common fields across different project field value types
 */
export class ProjectV2ItemFieldValueCommon extends $Interface<{ProjectV2ItemFieldDateValue: ProjectV2ItemFieldDateValue,ProjectV2ItemFieldIterationValue: ProjectV2ItemFieldIterationValue,ProjectV2ItemFieldNumberValue: ProjectV2ItemFieldNumberValue,ProjectV2ItemFieldSingleSelectValue: ProjectV2ItemFieldSingleSelectValue,ProjectV2ItemFieldTextValue: ProjectV2ItemFieldTextValue}, "ProjectV2ItemFieldValueCommon"> {
  constructor() {
    super({ProjectV2ItemFieldDateValue: ProjectV2ItemFieldDateValue,ProjectV2ItemFieldIterationValue: ProjectV2ItemFieldIterationValue,ProjectV2ItemFieldNumberValue: ProjectV2ItemFieldNumberValue,ProjectV2ItemFieldSingleSelectValue: ProjectV2ItemFieldSingleSelectValue,ProjectV2ItemFieldTextValue: ProjectV2ItemFieldTextValue}, "ProjectV2ItemFieldValueCommon")
  }
}


/**
 * The connection type for ProjectV2ItemFieldValue.
 */
export class ProjectV2ItemFieldValueConnection extends $Base<"ProjectV2ItemFieldValueConnection"> {
  constructor() {
    super("ProjectV2ItemFieldValueConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectV2ItemFieldValueEdge>>(selectorFn: (s: ProjectV2ItemFieldValueEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2ItemFieldValueEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectV2ItemFieldValue>>(selectorFn: (s: ProjectV2ItemFieldValue) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2ItemFieldValue)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectV2ItemFieldValueEdge extends $Base<"ProjectV2ItemFieldValueEdge"> {
  constructor() {
    super("ProjectV2ItemFieldValueEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectV2ItemFieldValue>>(selectorFn: (s: ProjectV2ItemFieldValue) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2ItemFieldValue)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for project v2 item field value connections
 */
export type ProjectV2ItemFieldValueOrder = {
  direction: OrderDirection,
field: ProjectV2ItemFieldValueOrderField
}
    

  
/**
 * Properties by which project v2 item field value connections can be ordered.
 */
export enum ProjectV2ItemFieldValueOrderField {
  
/**
 * Order project v2 item field values by the their position in the project
 */
  POSITION = "POSITION"
}
  


/**
 * Ordering options for project v2 item connections
 */
export type ProjectV2ItemOrder = {
  direction: OrderDirection,
field: ProjectV2ItemOrderField
}
    

  
/**
 * Properties by which project v2 item connections can be ordered.
 */
export enum ProjectV2ItemOrderField {
  
/**
 * Order project v2 items by the their position in the project
 */
  POSITION = "POSITION"
}
  

  
/**
 * The type of a project item.
 */
export enum ProjectV2ItemType {
  
/**
 * Issue
 */
  ISSUE = "ISSUE",

/**
 * Pull Request
 */
  PULL_REQUEST = "PULL_REQUEST",

/**
 * Draft Issue
 */
  DRAFT_ISSUE = "DRAFT_ISSUE",

/**
 * Redacted Item
 */
  REDACTED = "REDACTED"
}
  


/**
 * An iteration field inside a project.
 */
export class ProjectV2IterationField extends $Base<"ProjectV2IterationField"> {
  constructor() {
    super("ProjectV2IterationField")
  }

  
      
/**
 * Iteration configuration settings
 */
      configuration<Sel extends Selection<ProjectV2IterationFieldConfiguration>>(selectorFn: (s: ProjectV2IterationFieldConfiguration) => [...Sel]):$Field<"configuration", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2IterationFieldConfiguration)
      };
      return this.$_select("configuration", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The field's type.
 */
      get dataType(): $Field<"dataType", ProjectV2FieldType>  {
       return this.$_select("dataType") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project field's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The project that contains this field.
 */
      project<Sel extends Selection<ProjectV2>>(selectorFn: (s: ProjectV2) => [...Sel]):$Field<"project", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * Iteration field configuration for a project.
 */
export class ProjectV2IterationFieldConfiguration extends $Base<"ProjectV2IterationFieldConfiguration"> {
  constructor() {
    super("ProjectV2IterationFieldConfiguration")
  }

  
      
/**
 * The iteration's completed iterations
 */
      completedIterations<Sel extends Selection<ProjectV2IterationFieldIteration>>(selectorFn: (s: ProjectV2IterationFieldIteration) => [...Sel]):$Field<"completedIterations", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2IterationFieldIteration)
      };
      return this.$_select("completedIterations", options) as any
    }
  

      
/**
 * The iteration's duration in days
 */
      get duration(): $Field<"duration", number>  {
       return this.$_select("duration") as any
      }

      
/**
 * The iteration's iterations
 */
      iterations<Sel extends Selection<ProjectV2IterationFieldIteration>>(selectorFn: (s: ProjectV2IterationFieldIteration) => [...Sel]):$Field<"iterations", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2IterationFieldIteration)
      };
      return this.$_select("iterations", options) as any
    }
  

      
/**
 * The iteration's start day of the week
 */
      get startDay(): $Field<"startDay", number>  {
       return this.$_select("startDay") as any
      }
}


/**
 * Iteration field iteration settings for a project.
 */
export class ProjectV2IterationFieldIteration extends $Base<"ProjectV2IterationFieldIteration"> {
  constructor() {
    super("ProjectV2IterationFieldIteration")
  }

  
      
/**
 * The iteration's duration in days
 */
      get duration(): $Field<"duration", number>  {
       return this.$_select("duration") as any
      }

      
/**
 * The iteration's ID.
 */
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The iteration's start date
 */
      get startDate(): $Field<"startDate", string>  {
       return this.$_select("startDate") as any
      }

      
/**
 * The iteration's title.
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }

      
/**
 * The iteration's html title.
 */
      get titleHTML(): $Field<"titleHTML", string>  {
       return this.$_select("titleHTML") as any
      }
}


/**
 * Ways in which lists of projects can be ordered upon return.
 */
export type ProjectV2Order = {
  direction: OrderDirection,
field: ProjectV2OrderField
}
    

  
/**
 * Properties by which projects can be ordered.
 */
export enum ProjectV2OrderField {
  
/**
 * The project's title
 */
  TITLE = "TITLE",

/**
 * The project's number
 */
  NUMBER = "NUMBER",

/**
 * The project's date and time of update
 */
  UPDATED_AT = "UPDATED_AT",

/**
 * The project's date and time of creation
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * Represents an owner of a project (beta).
 */
export class ProjectV2Owner extends $Interface<{Issue: Issue,Organization: Organization,PullRequest: PullRequest,User: User}, "ProjectV2Owner"> {
  constructor() {
    super({Issue: Issue,Organization: Organization,PullRequest: PullRequest,User: User}, "ProjectV2Owner")
  }
}


/**
 * Recent projects for the owner.
 */
export class ProjectV2Recent extends $Interface<{Organization: Organization,Repository: Repository,User: User}, "ProjectV2Recent"> {
  constructor() {
    super({Organization: Organization,Repository: Repository,User: User}, "ProjectV2Recent")
  }
}


/**
 * A single select field inside a project.
 */
export class ProjectV2SingleSelectField extends $Base<"ProjectV2SingleSelectField"> {
  constructor() {
    super("ProjectV2SingleSelectField")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The field's type.
 */
      get dataType(): $Field<"dataType", ProjectV2FieldType>  {
       return this.$_select("dataType") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project field's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * Options for the single select field
 */
      options<Sel extends Selection<ProjectV2SingleSelectFieldOption>>(selectorFn: (s: ProjectV2SingleSelectFieldOption) => [...Sel]):$Field<"options", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2SingleSelectFieldOption)
      };
      return this.$_select("options", options) as any
    }
  

      
/**
 * The project that contains this field.
 */
      project<Sel extends Selection<ProjectV2>>(selectorFn: (s: ProjectV2) => [...Sel]):$Field<"project", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * Single select field option for a configuration for a project.
 */
export class ProjectV2SingleSelectFieldOption extends $Base<"ProjectV2SingleSelectFieldOption"> {
  constructor() {
    super("ProjectV2SingleSelectFieldOption")
  }

  
      
/**
 * The option's ID.
 */
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The option's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The option's html name.
 */
      get nameHTML(): $Field<"nameHTML", string>  {
       return this.$_select("nameHTML") as any
      }
}


/**
 * Represents a sort by field and direction.
 */
export class ProjectV2SortBy extends $Base<"ProjectV2SortBy"> {
  constructor() {
    super("ProjectV2SortBy")
  }

  
      
/**
 * The direction of the sorting. Possible values are ASC and DESC.
 */
      get direction(): $Field<"direction", OrderDirection>  {
       return this.$_select("direction") as any
      }

      
/**
 * The field by which items are sorted.
 */
      field<Sel extends Selection<ProjectV2Field>>(selectorFn: (s: ProjectV2Field) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Field)
      };
      return this.$_select("field", options) as any
    }
  
}


/**
 * The connection type for ProjectV2SortBy.
 */
export class ProjectV2SortByConnection extends $Base<"ProjectV2SortByConnection"> {
  constructor() {
    super("ProjectV2SortByConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectV2SortByEdge>>(selectorFn: (s: ProjectV2SortByEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2SortByEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectV2SortBy>>(selectorFn: (s: ProjectV2SortBy) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2SortBy)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectV2SortByEdge extends $Base<"ProjectV2SortByEdge"> {
  constructor() {
    super("ProjectV2SortByEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectV2SortBy>>(selectorFn: (s: ProjectV2SortBy) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2SortBy)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents a sort by field and direction.
 */
export class ProjectV2SortByField extends $Base<"ProjectV2SortByField"> {
  constructor() {
    super("ProjectV2SortByField")
  }

  
      
/**
 * The direction of the sorting. Possible values are ASC and DESC.
 */
      get direction(): $Field<"direction", OrderDirection>  {
       return this.$_select("direction") as any
      }

      
/**
 * The field by which items are sorted.
 */
      field<Sel extends Selection<ProjectV2FieldConfiguration>>(selectorFn: (s: ProjectV2FieldConfiguration) => [...Sel]):$Field<"field", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2FieldConfiguration)
      };
      return this.$_select("field", options) as any
    }
  
}


/**
 * The connection type for ProjectV2SortByField.
 */
export class ProjectV2SortByFieldConnection extends $Base<"ProjectV2SortByFieldConnection"> {
  constructor() {
    super("ProjectV2SortByFieldConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectV2SortByFieldEdge>>(selectorFn: (s: ProjectV2SortByFieldEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2SortByFieldEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectV2SortByField>>(selectorFn: (s: ProjectV2SortByField) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2SortByField)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectV2SortByFieldEdge extends $Base<"ProjectV2SortByFieldEdge"> {
  constructor() {
    super("ProjectV2SortByFieldEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectV2SortByField>>(selectorFn: (s: ProjectV2SortByField) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2SortByField)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A view within a ProjectV2.
 */
export class ProjectV2View extends $Base<"ProjectV2View"> {
  constructor() {
    super("ProjectV2View")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The view's visible fields.
 */
      fields<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ProjectV2FieldOrder | null | undefined,
      }>,Sel extends Selection<ProjectV2FieldConfigurationConnection>>(args: Args, selectorFn: (s: ProjectV2FieldConfigurationConnection) => [...Sel]):$Field<"fields", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
fields<Sel extends Selection<ProjectV2FieldConfigurationConnection>>(selectorFn: (s: ProjectV2FieldConfigurationConnection) => [...Sel]):$Field<"fields", GetOutput<Sel> | undefined , GetVariables<Sel>>
fields(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ProjectV2FieldOrder"
            },
        args,

        selection: selectorFn(new ProjectV2FieldConfigurationConnection)
      };
      return this.$_select("fields", options) as any
    }
  

      
/**
 * The project view's filter.
 */
      get filter(): $Field<"filter", string | null | undefined>  {
       return this.$_select("filter") as any
      }

      
/**
 * The view's group-by field.
 */
      groupBy<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ProjectV2FieldOrder | null | undefined,
      }>,Sel extends Selection<ProjectV2FieldConnection>>(args: Args, selectorFn: (s: ProjectV2FieldConnection) => [...Sel]):$Field<"groupBy", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
groupBy<Sel extends Selection<ProjectV2FieldConnection>>(selectorFn: (s: ProjectV2FieldConnection) => [...Sel]):$Field<"groupBy", GetOutput<Sel> | undefined , GetVariables<Sel>>
groupBy(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ProjectV2FieldOrder"
            },
        args,

        selection: selectorFn(new ProjectV2FieldConnection)
      };
      return this.$_select("groupBy", options) as any
    }
  

      
/**
 * The view's group-by field.
 */
      groupByFields<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ProjectV2FieldOrder | null | undefined,
      }>,Sel extends Selection<ProjectV2FieldConfigurationConnection>>(args: Args, selectorFn: (s: ProjectV2FieldConfigurationConnection) => [...Sel]):$Field<"groupByFields", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
groupByFields<Sel extends Selection<ProjectV2FieldConfigurationConnection>>(selectorFn: (s: ProjectV2FieldConfigurationConnection) => [...Sel]):$Field<"groupByFields", GetOutput<Sel> | undefined , GetVariables<Sel>>
groupByFields(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ProjectV2FieldOrder"
            },
        args,

        selection: selectorFn(new ProjectV2FieldConfigurationConnection)
      };
      return this.$_select("groupByFields", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project view's layout.
 */
      get layout(): $Field<"layout", ProjectV2ViewLayout>  {
       return this.$_select("layout") as any
      }

      
/**
 * The project view's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The project view's number.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * The project that contains this view.
 */
      project<Sel extends Selection<ProjectV2>>(selectorFn: (s: ProjectV2) => [...Sel]):$Field<"project", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * The view's sort-by config.
 */
      sortBy<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2SortByConnection>>(args: Args, selectorFn: (s: ProjectV2SortByConnection) => [...Sel]):$Field<"sortBy", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
sortBy<Sel extends Selection<ProjectV2SortByConnection>>(selectorFn: (s: ProjectV2SortByConnection) => [...Sel]):$Field<"sortBy", GetOutput<Sel> | undefined , GetVariables<Sel>>
sortBy(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2SortByConnection)
      };
      return this.$_select("sortBy", options) as any
    }
  

      
/**
 * The view's sort-by config.
 */
      sortByFields<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2SortByFieldConnection>>(args: Args, selectorFn: (s: ProjectV2SortByFieldConnection) => [...Sel]):$Field<"sortByFields", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
sortByFields<Sel extends Selection<ProjectV2SortByFieldConnection>>(selectorFn: (s: ProjectV2SortByFieldConnection) => [...Sel]):$Field<"sortByFields", GetOutput<Sel> | undefined , GetVariables<Sel>>
sortByFields(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2SortByFieldConnection)
      };
      return this.$_select("sortByFields", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The view's vertical-group-by field.
 */
      verticalGroupBy<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ProjectV2FieldOrder | null | undefined,
      }>,Sel extends Selection<ProjectV2FieldConnection>>(args: Args, selectorFn: (s: ProjectV2FieldConnection) => [...Sel]):$Field<"verticalGroupBy", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
verticalGroupBy<Sel extends Selection<ProjectV2FieldConnection>>(selectorFn: (s: ProjectV2FieldConnection) => [...Sel]):$Field<"verticalGroupBy", GetOutput<Sel> | undefined , GetVariables<Sel>>
verticalGroupBy(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ProjectV2FieldOrder"
            },
        args,

        selection: selectorFn(new ProjectV2FieldConnection)
      };
      return this.$_select("verticalGroupBy", options) as any
    }
  

      
/**
 * The view's vertical-group-by field.
 */
      verticalGroupByFields<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ProjectV2FieldOrder | null | undefined,
      }>,Sel extends Selection<ProjectV2FieldConfigurationConnection>>(args: Args, selectorFn: (s: ProjectV2FieldConfigurationConnection) => [...Sel]):$Field<"verticalGroupByFields", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
verticalGroupByFields<Sel extends Selection<ProjectV2FieldConfigurationConnection>>(selectorFn: (s: ProjectV2FieldConfigurationConnection) => [...Sel]):$Field<"verticalGroupByFields", GetOutput<Sel> | undefined , GetVariables<Sel>>
verticalGroupByFields(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ProjectV2FieldOrder"
            },
        args,

        selection: selectorFn(new ProjectV2FieldConfigurationConnection)
      };
      return this.$_select("verticalGroupByFields", options) as any
    }
  

      
/**
 * The view's visible fields.
 */
      visibleFields<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ProjectV2FieldOrder | null | undefined,
      }>,Sel extends Selection<ProjectV2FieldConnection>>(args: Args, selectorFn: (s: ProjectV2FieldConnection) => [...Sel]):$Field<"visibleFields", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
visibleFields<Sel extends Selection<ProjectV2FieldConnection>>(selectorFn: (s: ProjectV2FieldConnection) => [...Sel]):$Field<"visibleFields", GetOutput<Sel> | undefined , GetVariables<Sel>>
visibleFields(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ProjectV2FieldOrder"
            },
        args,

        selection: selectorFn(new ProjectV2FieldConnection)
      };
      return this.$_select("visibleFields", options) as any
    }
  
}


/**
 * The connection type for ProjectV2View.
 */
export class ProjectV2ViewConnection extends $Base<"ProjectV2ViewConnection"> {
  constructor() {
    super("ProjectV2ViewConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectV2ViewEdge>>(selectorFn: (s: ProjectV2ViewEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2ViewEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectV2View>>(selectorFn: (s: ProjectV2View) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2View)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectV2ViewEdge extends $Base<"ProjectV2ViewEdge"> {
  constructor() {
    super("ProjectV2ViewEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectV2View>>(selectorFn: (s: ProjectV2View) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2View)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The layout of a project v2 view.
 */
export enum ProjectV2ViewLayout {
  
/**
 * Board layout
 */
  BOARD_LAYOUT = "BOARD_LAYOUT",

/**
 * Table layout
 */
  TABLE_LAYOUT = "TABLE_LAYOUT"
}
  


/**
 * Ordering options for project v2 view connections
 */
export type ProjectV2ViewOrder = {
  direction: OrderDirection,
field: ProjectV2ViewOrderField
}
    

  
/**
 * Properties by which project v2 view connections can be ordered.
 */
export enum ProjectV2ViewOrderField {
  
/**
 * Order project v2 views by position
 */
  POSITION = "POSITION",

/**
 * Order project v2 views by creation time
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order project v2 views by name
 */
  NAME = "NAME"
}
  


/**
 * A view within a Project.
 */
export class ProjectView extends $Base<"ProjectView"> {
  constructor() {
    super("ProjectView")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The project view's filter.
 */
      get filter(): $Field<"filter", string | null | undefined>  {
       return this.$_select("filter") as any
      }

      
/**
 * The view's group-by field.
 */
      get groupBy(): $Field<"groupBy", Readonly<Array<number>> | null | undefined>  {
       return this.$_select("groupBy") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The project view's layout.
 */
      get layout(): $Field<"layout", ProjectViewLayout>  {
       return this.$_select("layout") as any
      }

      
/**
 * The project view's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The project view's number.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * The project that contains this view.
 */
      project<Sel extends Selection<ProjectNext>>(selectorFn: (s: ProjectNext) => [...Sel]):$Field<"project", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNext)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * The view's sort-by config.
 */
      sortBy<Sel extends Selection<SortBy>>(selectorFn: (s: SortBy) => [...Sel]):$Field<"sortBy", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SortBy)
      };
      return this.$_select("sortBy", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The view's vertical-group-by field.
 */
      get verticalGroupBy(): $Field<"verticalGroupBy", Readonly<Array<number>> | null | undefined>  {
       return this.$_select("verticalGroupBy") as any
      }

      
/**
 * The view's visible fields.
 */
      get visibleFields(): $Field<"visibleFields", Readonly<Array<number>> | null | undefined>  {
       return this.$_select("visibleFields") as any
      }
}


/**
 * The connection type for ProjectView.
 */
export class ProjectViewConnection extends $Base<"ProjectViewConnection"> {
  constructor() {
    super("ProjectViewConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ProjectViewEdge>>(selectorFn: (s: ProjectViewEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectViewEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ProjectView>>(selectorFn: (s: ProjectView) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectView)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ProjectViewEdge extends $Base<"ProjectViewEdge"> {
  constructor() {
    super("ProjectViewEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ProjectView>>(selectorFn: (s: ProjectView) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectView)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The layout of a project view.
 */
export enum ProjectViewLayout {
  
/**
 * Board layout
 */
  BOARD_LAYOUT = "BOARD_LAYOUT",

/**
 * Table layout
 */
  TABLE_LAYOUT = "TABLE_LAYOUT"
}
  


/**
 * A user's public key.
 */
export class PublicKey extends $Base<"PublicKey"> {
  constructor() {
    super("PublicKey")
  }

  
      
/**
 * The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
 */
      get accessedAt(): $Field<"accessedAt", string | null | undefined>  {
       return this.$_select("accessedAt") as any
      }

      
/**
 * Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
 */
      get createdAt(): $Field<"createdAt", string | null | undefined>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The fingerprint for this PublicKey.
 */
      get fingerprint(): $Field<"fingerprint", string>  {
       return this.$_select("fingerprint") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
 */
      get isReadOnly(): $Field<"isReadOnly", boolean | null | undefined>  {
       return this.$_select("isReadOnly") as any
      }

      
/**
 * The public key string.
 */
      get key(): $Field<"key", string>  {
       return this.$_select("key") as any
      }

      
/**
 * Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user.
 */
      get updatedAt(): $Field<"updatedAt", string | null | undefined>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The connection type for PublicKey.
 */
export class PublicKeyConnection extends $Base<"PublicKeyConnection"> {
  constructor() {
    super("PublicKeyConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PublicKeyEdge>>(selectorFn: (s: PublicKeyEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PublicKeyEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PublicKey>>(selectorFn: (s: PublicKey) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PublicKey)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class PublicKeyEdge extends $Base<"PublicKeyEdge"> {
  constructor() {
    super("PublicKeyEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PublicKey>>(selectorFn: (s: PublicKey) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PublicKey)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A repository pull request.
 */
export class PullRequest extends $Base<"PullRequest"> {
  constructor() {
    super("PullRequest")
  }

  
      
/**
 * Reason that the conversation was locked.
 */
      get activeLockReason(): $Field<"activeLockReason", LockReason | null | undefined>  {
       return this.$_select("activeLockReason") as any
      }

      
/**
 * The number of additions in this pull request.
 */
      get additions(): $Field<"additions", number>  {
       return this.$_select("additions") as any
      }

      
/**
 * A list of Users assigned to this object.
 */
      assignees<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserConnection>>(args: Args, selectorFn: (s: UserConnection) => [...Sel]):$Field<"assignees", GetOutput<Sel> , GetVariables<Sel, Args>>
assignees<Sel extends Selection<UserConnection>>(selectorFn: (s: UserConnection) => [...Sel]):$Field<"assignees", GetOutput<Sel> , GetVariables<Sel>>
assignees(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserConnection)
      };
      return this.$_select("assignees", options) as any
    }
  

      
/**
 * The actor who authored the comment.
 */
      author<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Author's association with the subject of the comment.
 */
      get authorAssociation(): $Field<"authorAssociation", CommentAuthorAssociation>  {
       return this.$_select("authorAssociation") as any
      }

      
/**
 * Returns the auto-merge request object if one exists for this pull request.
 */
      autoMergeRequest<Sel extends Selection<AutoMergeRequest>>(selectorFn: (s: AutoMergeRequest) => [...Sel]):$Field<"autoMergeRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AutoMergeRequest)
      };
      return this.$_select("autoMergeRequest", options) as any
    }
  

      
/**
 * Identifies the base Ref associated with the pull request.
 */
      baseRef<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"baseRef", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("baseRef", options) as any
    }
  

      
/**
 * Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
 */
      get baseRefName(): $Field<"baseRefName", string>  {
       return this.$_select("baseRefName") as any
      }

      
/**
 * Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
 */
      get baseRefOid(): $Field<"baseRefOid", string>  {
       return this.$_select("baseRefOid") as any
      }

      
/**
 * The repository associated with this pull request's base Ref.
 */
      baseRepository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"baseRepository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("baseRepository", options) as any
    }
  

      
/**
 * The body as Markdown.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * The body rendered to text.
 */
      get bodyText(): $Field<"bodyText", string>  {
       return this.$_select("bodyText") as any
      }

      
/**
 * The number of changed files in this pull request.
 */
      get changedFiles(): $Field<"changedFiles", number>  {
       return this.$_select("changedFiles") as any
      }

      
/**
 * The HTTP path for the checks of this pull request.
 */
      get checksResourcePath(): $Field<"checksResourcePath", string>  {
       return this.$_select("checksResourcePath") as any
      }

      
/**
 * The HTTP URL for the checks of this pull request.
 */
      get checksUrl(): $Field<"checksUrl", string>  {
       return this.$_select("checksUrl") as any
      }

      
/**
 * `true` if the pull request is closed
 */
      get closed(): $Field<"closed", boolean>  {
       return this.$_select("closed") as any
      }

      
/**
 * Identifies the date and time when the object was closed.
 */
      get closedAt(): $Field<"closedAt", string | null | undefined>  {
       return this.$_select("closedAt") as any
      }

      
/**
 * List of issues that were may be closed by this pull request
 */
      closingIssuesReferences<Args extends VariabledInput<{
        userLinkedOnly?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: IssueOrder | null | undefined,
      }>,Sel extends Selection<IssueConnection>>(args: Args, selectorFn: (s: IssueConnection) => [...Sel]):$Field<"closingIssuesReferences", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
closingIssuesReferences<Sel extends Selection<IssueConnection>>(selectorFn: (s: IssueConnection) => [...Sel]):$Field<"closingIssuesReferences", GetOutput<Sel> | undefined , GetVariables<Sel>>
closingIssuesReferences(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              userLinkedOnly: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "IssueOrder"
            },
        args,

        selection: selectorFn(new IssueConnection)
      };
      return this.$_select("closingIssuesReferences", options) as any
    }
  

      
/**
 * A list of comments associated with the pull request.
 */
      comments<Args extends VariabledInput<{
        orderBy?: IssueCommentOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<IssueCommentConnection>>(args: Args, selectorFn: (s: IssueCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel, Args>>
comments<Sel extends Selection<IssueCommentConnection>>(selectorFn: (s: IssueCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel>>
comments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "IssueCommentOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new IssueCommentConnection)
      };
      return this.$_select("comments", options) as any
    }
  

      
/**
 * A list of commits present in this pull request's head branch not present in the base branch.
 */
      commits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestCommitConnection>>(args: Args, selectorFn: (s: PullRequestCommitConnection) => [...Sel]):$Field<"commits", GetOutput<Sel> , GetVariables<Sel, Args>>
commits<Sel extends Selection<PullRequestCommitConnection>>(selectorFn: (s: PullRequestCommitConnection) => [...Sel]):$Field<"commits", GetOutput<Sel> , GetVariables<Sel>>
commits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestCommitConnection)
      };
      return this.$_select("commits", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Check if this comment was created via an email reply.
 */
      get createdViaEmail(): $Field<"createdViaEmail", boolean>  {
       return this.$_select("createdViaEmail") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The number of deletions in this pull request.
 */
      get deletions(): $Field<"deletions", number>  {
       return this.$_select("deletions") as any
      }

      
/**
 * The actor who edited this pull request's body.
 */
      editor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"editor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("editor", options) as any
    }
  

      
/**
 * Lists the files changed within this pull request.
 */
      files<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestChangedFileConnection>>(args: Args, selectorFn: (s: PullRequestChangedFileConnection) => [...Sel]):$Field<"files", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
files<Sel extends Selection<PullRequestChangedFileConnection>>(selectorFn: (s: PullRequestChangedFileConnection) => [...Sel]):$Field<"files", GetOutput<Sel> | undefined , GetVariables<Sel>>
files(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestChangedFileConnection)
      };
      return this.$_select("files", options) as any
    }
  

      
/**
 * Identifies the head Ref associated with the pull request.
 */
      headRef<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"headRef", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("headRef", options) as any
    }
  

      
/**
 * Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
 */
      get headRefName(): $Field<"headRefName", string>  {
       return this.$_select("headRefName") as any
      }

      
/**
 * Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
 */
      get headRefOid(): $Field<"headRefOid", string>  {
       return this.$_select("headRefOid") as any
      }

      
/**
 * The repository associated with this pull request's head Ref.
 */
      headRepository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"headRepository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("headRepository", options) as any
    }
  

      
/**
 * The owner of the repository associated with this pull request's head Ref.
 */
      headRepositoryOwner<Sel extends Selection<RepositoryOwner>>(selectorFn: (s: RepositoryOwner) => [...Sel]):$Field<"headRepositoryOwner", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryOwner)
      };
      return this.$_select("headRepositoryOwner", options) as any
    }
  

      
/**
 * The hovercard information for this issue
 */
      hovercard<Args extends VariabledInput<{
        includeNotificationContexts?: boolean | null | undefined,
      }>,Sel extends Selection<Hovercard>>(args: Args, selectorFn: (s: Hovercard) => [...Sel]):$Field<"hovercard", GetOutput<Sel> , GetVariables<Sel, Args>>
hovercard<Sel extends Selection<Hovercard>>(selectorFn: (s: Hovercard) => [...Sel]):$Field<"hovercard", GetOutput<Sel> , GetVariables<Sel>>
hovercard(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              includeNotificationContexts: "Boolean"
            },
        args,

        selection: selectorFn(new Hovercard)
      };
      return this.$_select("hovercard", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Check if this comment was edited and includes an edit with the creation data
 */
      get includesCreatedEdit(): $Field<"includesCreatedEdit", boolean>  {
       return this.$_select("includesCreatedEdit") as any
      }

      
/**
 * The head and base repositories are different.
 */
      get isCrossRepository(): $Field<"isCrossRepository", boolean>  {
       return this.$_select("isCrossRepository") as any
      }

      
/**
 * Identifies if the pull request is a draft.
 */
      get isDraft(): $Field<"isDraft", boolean>  {
       return this.$_select("isDraft") as any
      }

      
/**
 * Is this pull request read by the viewer
 */
      get isReadByViewer(): $Field<"isReadByViewer", boolean | null | undefined>  {
       return this.$_select("isReadByViewer") as any
      }

      
/**
 * A list of labels associated with the object.
 */
      labels<Args extends VariabledInput<{
        orderBy?: LabelOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<LabelConnection>>(args: Args, selectorFn: (s: LabelConnection) => [...Sel]):$Field<"labels", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
labels<Sel extends Selection<LabelConnection>>(selectorFn: (s: LabelConnection) => [...Sel]):$Field<"labels", GetOutput<Sel> | undefined , GetVariables<Sel>>
labels(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "LabelOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new LabelConnection)
      };
      return this.$_select("labels", options) as any
    }
  

      
/**
 * The moment the editor made the last edit
 */
      get lastEditedAt(): $Field<"lastEditedAt", string | null | undefined>  {
       return this.$_select("lastEditedAt") as any
      }

      
/**
 * A list of latest reviews per user associated with the pull request.
 */
      latestOpinionatedReviews<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
writersOnly?: boolean | null | undefined,
      }>,Sel extends Selection<PullRequestReviewConnection>>(args: Args, selectorFn: (s: PullRequestReviewConnection) => [...Sel]):$Field<"latestOpinionatedReviews", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
latestOpinionatedReviews<Sel extends Selection<PullRequestReviewConnection>>(selectorFn: (s: PullRequestReviewConnection) => [...Sel]):$Field<"latestOpinionatedReviews", GetOutput<Sel> | undefined , GetVariables<Sel>>
latestOpinionatedReviews(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
writersOnly: "Boolean"
            },
        args,

        selection: selectorFn(new PullRequestReviewConnection)
      };
      return this.$_select("latestOpinionatedReviews", options) as any
    }
  

      
/**
 * A list of latest reviews per user associated with the pull request that are not also pending review.
 */
      latestReviews<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestReviewConnection>>(args: Args, selectorFn: (s: PullRequestReviewConnection) => [...Sel]):$Field<"latestReviews", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
latestReviews<Sel extends Selection<PullRequestReviewConnection>>(selectorFn: (s: PullRequestReviewConnection) => [...Sel]):$Field<"latestReviews", GetOutput<Sel> | undefined , GetVariables<Sel>>
latestReviews(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestReviewConnection)
      };
      return this.$_select("latestReviews", options) as any
    }
  

      
/**
 * `true` if the pull request is locked
 */
      get locked(): $Field<"locked", boolean>  {
       return this.$_select("locked") as any
      }

      
/**
 * Indicates whether maintainers can modify the pull request.
 */
      get maintainerCanModify(): $Field<"maintainerCanModify", boolean>  {
       return this.$_select("maintainerCanModify") as any
      }

      
/**
 * The commit that was created when this pull request was merged.
 */
      mergeCommit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"mergeCommit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("mergeCommit", options) as any
    }
  

      
/**
 * Whether or not the pull request can be merged based on the existence of merge conflicts.
 */
      get mergeable(): $Field<"mergeable", MergeableState>  {
       return this.$_select("mergeable") as any
      }

      
/**
 * Whether or not the pull request was merged.
 */
      get merged(): $Field<"merged", boolean>  {
       return this.$_select("merged") as any
      }

      
/**
 * The date and time that the pull request was merged.
 */
      get mergedAt(): $Field<"mergedAt", string | null | undefined>  {
       return this.$_select("mergedAt") as any
      }

      
/**
 * The actor who merged the pull request.
 */
      mergedBy<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"mergedBy", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("mergedBy", options) as any
    }
  

      
/**
 * Identifies the milestone associated with the pull request.
 */
      milestone<Sel extends Selection<Milestone>>(selectorFn: (s: Milestone) => [...Sel]):$Field<"milestone", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Milestone)
      };
      return this.$_select("milestone", options) as any
    }
  

      
/**
 * Identifies the pull request number.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * A list of Users that are participating in the Pull Request conversation.
 */
      participants<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserConnection>>(args: Args, selectorFn: (s: UserConnection) => [...Sel]):$Field<"participants", GetOutput<Sel> , GetVariables<Sel, Args>>
participants<Sel extends Selection<UserConnection>>(selectorFn: (s: UserConnection) => [...Sel]):$Field<"participants", GetOutput<Sel> , GetVariables<Sel>>
participants(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserConnection)
      };
      return this.$_select("participants", options) as any
    }
  

      
/**
 * The permalink to the pull request.
 */
      get permalink(): $Field<"permalink", string>  {
       return this.$_select("permalink") as any
      }

      
/**
 * The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request.
 */
      potentialMergeCommit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"potentialMergeCommit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("potentialMergeCommit", options) as any
    }
  

      
/**
 * List of project cards associated with this pull request.
 */
      projectCards<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
archivedStates?: Readonly<Array<ProjectCardArchivedState | null | undefined>> | null | undefined,
      }>,Sel extends Selection<ProjectCardConnection>>(args: Args, selectorFn: (s: ProjectCardConnection) => [...Sel]):$Field<"projectCards", GetOutput<Sel> , GetVariables<Sel, Args>>
projectCards<Sel extends Selection<ProjectCardConnection>>(selectorFn: (s: ProjectCardConnection) => [...Sel]):$Field<"projectCards", GetOutput<Sel> , GetVariables<Sel>>
projectCards(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
archivedStates: "[ProjectCardArchivedState]"
            },
        args,

        selection: selectorFn(new ProjectCardConnection)
      };
      return this.$_select("projectCards", options) as any
    }
  

      
/**
 * List of project items associated with this pull request.
 */
      projectItems<Args extends VariabledInput<{
        includeArchived?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2ItemConnection>>(args: Args, selectorFn: (s: ProjectV2ItemConnection) => [...Sel]):$Field<"projectItems", GetOutput<Sel> , GetVariables<Sel, Args>>
projectItems<Sel extends Selection<ProjectV2ItemConnection>>(selectorFn: (s: ProjectV2ItemConnection) => [...Sel]):$Field<"projectItems", GetOutput<Sel> , GetVariables<Sel>>
projectItems(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              includeArchived: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2ItemConnection)
      };
      return this.$_select("projectItems", options) as any
    }
  

      
/**
 * Find a project by project (beta) number.
 */
      projectNext<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<ProjectNext>>(args: Args, selectorFn: (s: ProjectNext) => [...Sel]):$Field<"projectNext", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new ProjectNext)
      };
      return this.$_select("projectNext", options) as any
    }
  

      
/**
 * List of project (beta) items associated with this pull request.
 */
      projectNextItems<Args extends VariabledInput<{
        includeArchived?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectNextItemConnection>>(args: Args, selectorFn: (s: ProjectNextItemConnection) => [...Sel]):$Field<"projectNextItems", GetOutput<Sel> , GetVariables<Sel, Args>>
projectNextItems<Sel extends Selection<ProjectNextItemConnection>>(selectorFn: (s: ProjectNextItemConnection) => [...Sel]):$Field<"projectNextItems", GetOutput<Sel> , GetVariables<Sel>>
projectNextItems(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              includeArchived: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectNextItemConnection)
      };
      return this.$_select("projectNextItems", options) as any
    }
  

      
/**
 * Find a project by number.
 */
      projectV2<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<ProjectV2>>(args: Args, selectorFn: (s: ProjectV2) => [...Sel]):$Field<"projectV2", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("projectV2", options) as any
    }
  

      
/**
 * A list of projects (beta) under the owner.
 */
      projectsNext<Args extends VariabledInput<{
        query?: string | null | undefined
sortBy?: ProjectNextOrderField | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectNextConnection>>(args: Args, selectorFn: (s: ProjectNextConnection) => [...Sel]):$Field<"projectsNext", GetOutput<Sel> , GetVariables<Sel, Args>>
projectsNext<Sel extends Selection<ProjectNextConnection>>(selectorFn: (s: ProjectNextConnection) => [...Sel]):$Field<"projectsNext", GetOutput<Sel> , GetVariables<Sel>>
projectsNext(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
sortBy: "ProjectNextOrderField",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectNextConnection)
      };
      return this.$_select("projectsNext", options) as any
    }
  

      
/**
 * A list of projects under the owner.
 */
      projectsV2<Args extends VariabledInput<{
        query?: string | null | undefined
orderBy?: ProjectV2Order | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2Connection>>(args: Args, selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel, Args>>
projectsV2<Sel extends Selection<ProjectV2Connection>>(selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel>>
projectsV2(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
orderBy: "ProjectV2Order",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2Connection)
      };
      return this.$_select("projectsV2", options) as any
    }
  

      
/**
 * Identifies when the comment was published at.
 */
      get publishedAt(): $Field<"publishedAt", string | null | undefined>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * A list of reactions grouped by content left on the subject.
 */
      reactionGroups<Sel extends Selection<ReactionGroup>>(selectorFn: (s: ReactionGroup) => [...Sel]):$Field<"reactionGroups", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactionGroup)
      };
      return this.$_select("reactionGroups", options) as any
    }
  

      
/**
 * A list of Reactions left on the Issue.
 */
      reactions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
content?: ReactionContent | null | undefined
orderBy?: ReactionOrder | null | undefined,
      }>,Sel extends Selection<ReactionConnection>>(args: Args, selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel, Args>>
reactions<Sel extends Selection<ReactionConnection>>(selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel>>
reactions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
content: "ReactionContent",
orderBy: "ReactionOrder"
            },
        args,

        selection: selectorFn(new ReactionConnection)
      };
      return this.$_select("reactions", options) as any
    }
  

      
/**
 * The repository associated with this node.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for this pull request.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP path for reverting this pull request.
 */
      get revertResourcePath(): $Field<"revertResourcePath", string>  {
       return this.$_select("revertResourcePath") as any
      }

      
/**
 * The HTTP URL for reverting this pull request.
 */
      get revertUrl(): $Field<"revertUrl", string>  {
       return this.$_select("revertUrl") as any
      }

      
/**
 * The current status of this pull request with respect to code review.
 */
      get reviewDecision(): $Field<"reviewDecision", PullRequestReviewDecision | null | undefined>  {
       return this.$_select("reviewDecision") as any
      }

      
/**
 * A list of review requests associated with the pull request.
 */
      reviewRequests<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ReviewRequestConnection>>(args: Args, selectorFn: (s: ReviewRequestConnection) => [...Sel]):$Field<"reviewRequests", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
reviewRequests<Sel extends Selection<ReviewRequestConnection>>(selectorFn: (s: ReviewRequestConnection) => [...Sel]):$Field<"reviewRequests", GetOutput<Sel> | undefined , GetVariables<Sel>>
reviewRequests(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ReviewRequestConnection)
      };
      return this.$_select("reviewRequests", options) as any
    }
  

      
/**
 * The list of all review threads for this pull request.
 */
      reviewThreads<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestReviewThreadConnection>>(args: Args, selectorFn: (s: PullRequestReviewThreadConnection) => [...Sel]):$Field<"reviewThreads", GetOutput<Sel> , GetVariables<Sel, Args>>
reviewThreads<Sel extends Selection<PullRequestReviewThreadConnection>>(selectorFn: (s: PullRequestReviewThreadConnection) => [...Sel]):$Field<"reviewThreads", GetOutput<Sel> , GetVariables<Sel>>
reviewThreads(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestReviewThreadConnection)
      };
      return this.$_select("reviewThreads", options) as any
    }
  

      
/**
 * A list of reviews associated with the pull request.
 */
      reviews<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
states?: Readonly<Array<PullRequestReviewState>> | null | undefined
author?: string | null | undefined,
      }>,Sel extends Selection<PullRequestReviewConnection>>(args: Args, selectorFn: (s: PullRequestReviewConnection) => [...Sel]):$Field<"reviews", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
reviews<Sel extends Selection<PullRequestReviewConnection>>(selectorFn: (s: PullRequestReviewConnection) => [...Sel]):$Field<"reviews", GetOutput<Sel> | undefined , GetVariables<Sel>>
reviews(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
states: "[PullRequestReviewState!]",
author: "String"
            },
        args,

        selection: selectorFn(new PullRequestReviewConnection)
      };
      return this.$_select("reviews", options) as any
    }
  

      
/**
 * Identifies the state of the pull request.
 */
      get state(): $Field<"state", PullRequestState>  {
       return this.$_select("state") as any
      }

      
/**
 * A list of reviewer suggestions based on commit history and past review comments.
 */
      suggestedReviewers<Sel extends Selection<SuggestedReviewer>>(selectorFn: (s: SuggestedReviewer) => [...Sel]):$Field<"suggestedReviewers", Array<GetOutput<Sel> | undefined> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SuggestedReviewer)
      };
      return this.$_select("suggestedReviewers", options) as any
    }
  

      
/**
 * A list of events, comments, commits, etc. associated with the pull request.
 */
      timeline<Args extends VariabledInput<{
        since?: string | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestTimelineConnection>>(args: Args, selectorFn: (s: PullRequestTimelineConnection) => [...Sel]):$Field<"timeline", GetOutput<Sel> , GetVariables<Sel, Args>>
timeline<Sel extends Selection<PullRequestTimelineConnection>>(selectorFn: (s: PullRequestTimelineConnection) => [...Sel]):$Field<"timeline", GetOutput<Sel> , GetVariables<Sel>>
timeline(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              since: "DateTime",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestTimelineConnection)
      };
      return this.$_select("timeline", options) as any
    }
  

      
/**
 * A list of events, comments, commits, etc. associated with the pull request.
 */
      timelineItems<Args extends VariabledInput<{
        since?: string | null | undefined
skip?: number | null | undefined
itemTypes?: Readonly<Array<PullRequestTimelineItemsItemType>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestTimelineItemsConnection>>(args: Args, selectorFn: (s: PullRequestTimelineItemsConnection) => [...Sel]):$Field<"timelineItems", GetOutput<Sel> , GetVariables<Sel, Args>>
timelineItems<Sel extends Selection<PullRequestTimelineItemsConnection>>(selectorFn: (s: PullRequestTimelineItemsConnection) => [...Sel]):$Field<"timelineItems", GetOutput<Sel> , GetVariables<Sel>>
timelineItems(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              since: "DateTime",
skip: "Int",
itemTypes: "[PullRequestTimelineItemsItemType!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestTimelineItemsConnection)
      };
      return this.$_select("timelineItems", options) as any
    }
  

      
/**
 * Identifies the pull request title.
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }

      
/**
 * Identifies the pull request title rendered to HTML.
 */
      get titleHTML(): $Field<"titleHTML", string>  {
       return this.$_select("titleHTML") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this pull request.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * A list of edits to this content.
 */
      userContentEdits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserContentEditConnection>>(args: Args, selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
userContentEdits<Sel extends Selection<UserContentEditConnection>>(selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel>>
userContentEdits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserContentEditConnection)
      };
      return this.$_select("userContentEdits", options) as any
    }
  

      
/**
 * Whether or not the viewer can apply suggestion.
 */
      get viewerCanApplySuggestion(): $Field<"viewerCanApplySuggestion", boolean>  {
       return this.$_select("viewerCanApplySuggestion") as any
      }

      
/**
 * Check if the viewer can restore the deleted head ref.
 */
      get viewerCanDeleteHeadRef(): $Field<"viewerCanDeleteHeadRef", boolean>  {
       return this.$_select("viewerCanDeleteHeadRef") as any
      }

      
/**
 * Whether or not the viewer can disable auto-merge
 */
      get viewerCanDisableAutoMerge(): $Field<"viewerCanDisableAutoMerge", boolean>  {
       return this.$_select("viewerCanDisableAutoMerge") as any
      }

      
/**
 * Can the viewer edit files within this pull request.
 */
      get viewerCanEditFiles(): $Field<"viewerCanEditFiles", boolean>  {
       return this.$_select("viewerCanEditFiles") as any
      }

      
/**
 * Whether or not the viewer can enable auto-merge
 */
      get viewerCanEnableAutoMerge(): $Field<"viewerCanEnableAutoMerge", boolean>  {
       return this.$_select("viewerCanEnableAutoMerge") as any
      }

      
/**
 * Indicates whether the viewer can bypass branch protections and merge the pull request immediately
 */
      get viewerCanMergeAsAdmin(): $Field<"viewerCanMergeAsAdmin", boolean>  {
       return this.$_select("viewerCanMergeAsAdmin") as any
      }

      
/**
 * Can user react to this subject
 */
      get viewerCanReact(): $Field<"viewerCanReact", boolean>  {
       return this.$_select("viewerCanReact") as any
      }

      
/**
 * Check if the viewer is able to change their subscription status for the repository.
 */
      get viewerCanSubscribe(): $Field<"viewerCanSubscribe", boolean>  {
       return this.$_select("viewerCanSubscribe") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * Reasons why the current viewer can not update this comment.
 */
      get viewerCannotUpdateReasons(): $Field<"viewerCannotUpdateReasons", Readonly<Array<CommentCannotUpdateReason>>>  {
       return this.$_select("viewerCannotUpdateReasons") as any
      }

      
/**
 * Did the viewer author this comment.
 */
      get viewerDidAuthor(): $Field<"viewerDidAuthor", boolean>  {
       return this.$_select("viewerDidAuthor") as any
      }

      
/**
 * The latest review given from the viewer.
 */
      viewerLatestReview<Sel extends Selection<PullRequestReview>>(selectorFn: (s: PullRequestReview) => [...Sel]):$Field<"viewerLatestReview", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReview)
      };
      return this.$_select("viewerLatestReview", options) as any
    }
  

      
/**
 * The person who has requested the viewer for review on this pull request.
 */
      viewerLatestReviewRequest<Sel extends Selection<ReviewRequest>>(selectorFn: (s: ReviewRequest) => [...Sel]):$Field<"viewerLatestReviewRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReviewRequest)
      };
      return this.$_select("viewerLatestReviewRequest", options) as any
    }
  

      
/**
 * The merge body text for the viewer and method.
 */
      viewerMergeBodyText<Args extends VariabledInput<{
        mergeType?: PullRequestMergeMethod | null | undefined,
      }>>(args: Args):$Field<"viewerMergeBodyText", string , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              mergeType: "PullRequestMergeMethod"
            },
        args,

        
      };
      return this.$_select("viewerMergeBodyText", options) as any
    }
  

      
/**
 * The merge headline text for the viewer and method.
 */
      viewerMergeHeadlineText<Args extends VariabledInput<{
        mergeType?: PullRequestMergeMethod | null | undefined,
      }>>(args: Args):$Field<"viewerMergeHeadlineText", string , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              mergeType: "PullRequestMergeMethod"
            },
        args,

        
      };
      return this.$_select("viewerMergeHeadlineText", options) as any
    }
  

      
/**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
      get viewerSubscription(): $Field<"viewerSubscription", SubscriptionState | null | undefined>  {
       return this.$_select("viewerSubscription") as any
      }
}


/**
 * A file changed in a pull request.
 */
export class PullRequestChangedFile extends $Base<"PullRequestChangedFile"> {
  constructor() {
    super("PullRequestChangedFile")
  }

  
      
/**
 * The number of additions to the file.
 */
      get additions(): $Field<"additions", number>  {
       return this.$_select("additions") as any
      }

      
/**
 * How the file was changed in this PullRequest
 */
      get changeType(): $Field<"changeType", PatchStatus>  {
       return this.$_select("changeType") as any
      }

      
/**
 * The number of deletions to the file.
 */
      get deletions(): $Field<"deletions", number>  {
       return this.$_select("deletions") as any
      }

      
/**
 * The path of the file.
 */
      get path(): $Field<"path", string>  {
       return this.$_select("path") as any
      }

      
/**
 * The state of the file for the viewer.
 */
      get viewerViewedState(): $Field<"viewerViewedState", FileViewedState>  {
       return this.$_select("viewerViewedState") as any
      }
}


/**
 * The connection type for PullRequestChangedFile.
 */
export class PullRequestChangedFileConnection extends $Base<"PullRequestChangedFileConnection"> {
  constructor() {
    super("PullRequestChangedFileConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PullRequestChangedFileEdge>>(selectorFn: (s: PullRequestChangedFileEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestChangedFileEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PullRequestChangedFile>>(selectorFn: (s: PullRequestChangedFile) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestChangedFile)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class PullRequestChangedFileEdge extends $Base<"PullRequestChangedFileEdge"> {
  constructor() {
    super("PullRequestChangedFileEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PullRequestChangedFile>>(selectorFn: (s: PullRequestChangedFile) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestChangedFile)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents a Git commit part of a pull request.
 */
export class PullRequestCommit extends $Base<"PullRequestCommit"> {
  constructor() {
    super("PullRequestCommit")
  }

  
      
/**
 * The Git commit object
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The pull request this commit belongs to
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The HTTP path for this pull request commit
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for this pull request commit
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * Represents a commit comment thread part of a pull request.
 */
export class PullRequestCommitCommentThread extends $Base<"PullRequestCommitCommentThread"> {
  constructor() {
    super("PullRequestCommitCommentThread")
  }

  
      
/**
 * The comments that exist in this thread.
 */
      comments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<CommitCommentConnection>>(args: Args, selectorFn: (s: CommitCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel, Args>>
comments<Sel extends Selection<CommitCommentConnection>>(selectorFn: (s: CommitCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel>>
comments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new CommitCommentConnection)
      };
      return this.$_select("comments", options) as any
    }
  

      
/**
 * The commit the comments were made on.
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The file the comments were made on.
 */
      get path(): $Field<"path", string | null | undefined>  {
       return this.$_select("path") as any
      }

      
/**
 * The position in the diff for the commit that the comment was made on.
 */
      get position(): $Field<"position", number | null | undefined>  {
       return this.$_select("position") as any
      }

      
/**
 * The pull request this commit comment thread belongs to
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The repository associated with this node.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * The connection type for PullRequestCommit.
 */
export class PullRequestCommitConnection extends $Base<"PullRequestCommitConnection"> {
  constructor() {
    super("PullRequestCommitConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PullRequestCommitEdge>>(selectorFn: (s: PullRequestCommitEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestCommitEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PullRequestCommit>>(selectorFn: (s: PullRequestCommit) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestCommit)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class PullRequestCommitEdge extends $Base<"PullRequestCommitEdge"> {
  constructor() {
    super("PullRequestCommitEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PullRequestCommit>>(selectorFn: (s: PullRequestCommit) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestCommit)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The connection type for PullRequest.
 */
export class PullRequestConnection extends $Base<"PullRequestConnection"> {
  constructor() {
    super("PullRequestConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PullRequestEdge>>(selectorFn: (s: PullRequestEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * This aggregates pull requests opened by a user within one repository.
 */
export class PullRequestContributionsByRepository extends $Base<"PullRequestContributionsByRepository"> {
  constructor() {
    super("PullRequestContributionsByRepository")
  }

  
      
/**
 * The pull request contributions.
 */
      contributions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ContributionOrder | null | undefined,
      }>,Sel extends Selection<CreatedPullRequestContributionConnection>>(args: Args, selectorFn: (s: CreatedPullRequestContributionConnection) => [...Sel]):$Field<"contributions", GetOutput<Sel> , GetVariables<Sel, Args>>
contributions<Sel extends Selection<CreatedPullRequestContributionConnection>>(selectorFn: (s: CreatedPullRequestContributionConnection) => [...Sel]):$Field<"contributions", GetOutput<Sel> , GetVariables<Sel>>
contributions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ContributionOrder"
            },
        args,

        selection: selectorFn(new CreatedPullRequestContributionConnection)
      };
      return this.$_select("contributions", options) as any
    }
  

      
/**
 * The repository in which the pull requests were opened.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * An edge in a connection.
 */
export class PullRequestEdge extends $Base<"PullRequestEdge"> {
  constructor() {
    super("PullRequestEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * Represents available types of methods to use when merging a pull request.
 */
export enum PullRequestMergeMethod {
  
/**
 * Add all commits from the head branch to the base branch with a merge commit.
 */
  MERGE = "MERGE",

/**
 * Combine all commits from the head branch into a single commit in the base branch.
 */
  SQUASH = "SQUASH",

/**
 * Add all commits from the head branch onto the base branch individually.
 */
  REBASE = "REBASE"
}
  


/**
 * Ways in which lists of issues can be ordered upon return.
 */
export type PullRequestOrder = {
  direction: OrderDirection,
field: PullRequestOrderField
}
    

  
/**
 * Properties by which pull_requests connections can be ordered.
 */
export enum PullRequestOrderField {
  
/**
 * Order pull_requests by creation time
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order pull_requests by update time
 */
  UPDATED_AT = "UPDATED_AT"
}
  


/**
 * A review object for a given pull request.
 */
export class PullRequestReview extends $Base<"PullRequestReview"> {
  constructor() {
    super("PullRequestReview")
  }

  
      
/**
 * The actor who authored the comment.
 */
      author<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Author's association with the subject of the comment.
 */
      get authorAssociation(): $Field<"authorAssociation", CommentAuthorAssociation>  {
       return this.$_select("authorAssociation") as any
      }

      
/**
 * Indicates whether the author of this review has push access to the repository.
 */
      get authorCanPushToRepository(): $Field<"authorCanPushToRepository", boolean>  {
       return this.$_select("authorCanPushToRepository") as any
      }

      
/**
 * Identifies the pull request review body.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * The body of this review rendered as plain text.
 */
      get bodyText(): $Field<"bodyText", string>  {
       return this.$_select("bodyText") as any
      }

      
/**
 * A list of review comments for the current pull request review.
 */
      comments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestReviewCommentConnection>>(args: Args, selectorFn: (s: PullRequestReviewCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel, Args>>
comments<Sel extends Selection<PullRequestReviewCommentConnection>>(selectorFn: (s: PullRequestReviewCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel>>
comments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestReviewCommentConnection)
      };
      return this.$_select("comments", options) as any
    }
  

      
/**
 * Identifies the commit associated with this pull request review.
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Check if this comment was created via an email reply.
 */
      get createdViaEmail(): $Field<"createdViaEmail", boolean>  {
       return this.$_select("createdViaEmail") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The actor who edited the comment.
 */
      editor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"editor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("editor", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Check if this comment was edited and includes an edit with the creation data
 */
      get includesCreatedEdit(): $Field<"includesCreatedEdit", boolean>  {
       return this.$_select("includesCreatedEdit") as any
      }

      
/**
 * The moment the editor made the last edit
 */
      get lastEditedAt(): $Field<"lastEditedAt", string | null | undefined>  {
       return this.$_select("lastEditedAt") as any
      }

      
/**
 * A list of teams that this review was made on behalf of.
 */
      onBehalfOf<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<TeamConnection>>(args: Args, selectorFn: (s: TeamConnection) => [...Sel]):$Field<"onBehalfOf", GetOutput<Sel> , GetVariables<Sel, Args>>
onBehalfOf<Sel extends Selection<TeamConnection>>(selectorFn: (s: TeamConnection) => [...Sel]):$Field<"onBehalfOf", GetOutput<Sel> , GetVariables<Sel>>
onBehalfOf(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new TeamConnection)
      };
      return this.$_select("onBehalfOf", options) as any
    }
  

      
/**
 * Identifies when the comment was published at.
 */
      get publishedAt(): $Field<"publishedAt", string | null | undefined>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * Identifies the pull request associated with this pull request review.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * A list of reactions grouped by content left on the subject.
 */
      reactionGroups<Sel extends Selection<ReactionGroup>>(selectorFn: (s: ReactionGroup) => [...Sel]):$Field<"reactionGroups", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactionGroup)
      };
      return this.$_select("reactionGroups", options) as any
    }
  

      
/**
 * A list of Reactions left on the Issue.
 */
      reactions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
content?: ReactionContent | null | undefined
orderBy?: ReactionOrder | null | undefined,
      }>,Sel extends Selection<ReactionConnection>>(args: Args, selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel, Args>>
reactions<Sel extends Selection<ReactionConnection>>(selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel>>
reactions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
content: "ReactionContent",
orderBy: "ReactionOrder"
            },
        args,

        selection: selectorFn(new ReactionConnection)
      };
      return this.$_select("reactions", options) as any
    }
  

      
/**
 * The repository associated with this node.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path permalink for this PullRequestReview.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the current state of the pull request review.
 */
      get state(): $Field<"state", PullRequestReviewState>  {
       return this.$_select("state") as any
      }

      
/**
 * Identifies when the Pull Request Review was submitted
 */
      get submittedAt(): $Field<"submittedAt", string | null | undefined>  {
       return this.$_select("submittedAt") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL permalink for this PullRequestReview.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * A list of edits to this content.
 */
      userContentEdits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserContentEditConnection>>(args: Args, selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
userContentEdits<Sel extends Selection<UserContentEditConnection>>(selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel>>
userContentEdits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserContentEditConnection)
      };
      return this.$_select("userContentEdits", options) as any
    }
  

      
/**
 * Check if the current viewer can delete this object.
 */
      get viewerCanDelete(): $Field<"viewerCanDelete", boolean>  {
       return this.$_select("viewerCanDelete") as any
      }

      
/**
 * Can user react to this subject
 */
      get viewerCanReact(): $Field<"viewerCanReact", boolean>  {
       return this.$_select("viewerCanReact") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * Reasons why the current viewer can not update this comment.
 */
      get viewerCannotUpdateReasons(): $Field<"viewerCannotUpdateReasons", Readonly<Array<CommentCannotUpdateReason>>>  {
       return this.$_select("viewerCannotUpdateReasons") as any
      }

      
/**
 * Did the viewer author this comment.
 */
      get viewerDidAuthor(): $Field<"viewerDidAuthor", boolean>  {
       return this.$_select("viewerDidAuthor") as any
      }
}


/**
 * A review comment associated with a given repository pull request.
 */
export class PullRequestReviewComment extends $Base<"PullRequestReviewComment"> {
  constructor() {
    super("PullRequestReviewComment")
  }

  
      
/**
 * The actor who authored the comment.
 */
      author<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Author's association with the subject of the comment.
 */
      get authorAssociation(): $Field<"authorAssociation", CommentAuthorAssociation>  {
       return this.$_select("authorAssociation") as any
      }

      
/**
 * The comment body of this review comment.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * The comment body of this review comment rendered as plain text.
 */
      get bodyText(): $Field<"bodyText", string>  {
       return this.$_select("bodyText") as any
      }

      
/**
 * Identifies the commit associated with the comment.
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
/**
 * Identifies when the comment was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Check if this comment was created via an email reply.
 */
      get createdViaEmail(): $Field<"createdViaEmail", boolean>  {
       return this.$_select("createdViaEmail") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The diff hunk to which the comment applies.
 */
      get diffHunk(): $Field<"diffHunk", string>  {
       return this.$_select("diffHunk") as any
      }

      
/**
 * Identifies when the comment was created in a draft state.
 */
      get draftedAt(): $Field<"draftedAt", string>  {
       return this.$_select("draftedAt") as any
      }

      
/**
 * The actor who edited the comment.
 */
      editor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"editor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("editor", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Check if this comment was edited and includes an edit with the creation data
 */
      get includesCreatedEdit(): $Field<"includesCreatedEdit", boolean>  {
       return this.$_select("includesCreatedEdit") as any
      }

      
/**
 * Returns whether or not a comment has been minimized.
 */
      get isMinimized(): $Field<"isMinimized", boolean>  {
       return this.$_select("isMinimized") as any
      }

      
/**
 * The moment the editor made the last edit
 */
      get lastEditedAt(): $Field<"lastEditedAt", string | null | undefined>  {
       return this.$_select("lastEditedAt") as any
      }

      
/**
 * Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
 */
      get minimizedReason(): $Field<"minimizedReason", string | null | undefined>  {
       return this.$_select("minimizedReason") as any
      }

      
/**
 * Identifies the original commit associated with the comment.
 */
      originalCommit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"originalCommit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("originalCommit", options) as any
    }
  

      
/**
 * The original line index in the diff to which the comment applies.
 */
      get originalPosition(): $Field<"originalPosition", number>  {
       return this.$_select("originalPosition") as any
      }

      
/**
 * Identifies when the comment body is outdated
 */
      get outdated(): $Field<"outdated", boolean>  {
       return this.$_select("outdated") as any
      }

      
/**
 * The path to which the comment applies.
 */
      get path(): $Field<"path", string>  {
       return this.$_select("path") as any
      }

      
/**
 * The line index in the diff to which the comment applies.
 */
      get position(): $Field<"position", number | null | undefined>  {
       return this.$_select("position") as any
      }

      
/**
 * Identifies when the comment was published at.
 */
      get publishedAt(): $Field<"publishedAt", string | null | undefined>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * The pull request associated with this review comment.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The pull request review associated with this review comment.
 */
      pullRequestReview<Sel extends Selection<PullRequestReview>>(selectorFn: (s: PullRequestReview) => [...Sel]):$Field<"pullRequestReview", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReview)
      };
      return this.$_select("pullRequestReview", options) as any
    }
  

      
/**
 * A list of reactions grouped by content left on the subject.
 */
      reactionGroups<Sel extends Selection<ReactionGroup>>(selectorFn: (s: ReactionGroup) => [...Sel]):$Field<"reactionGroups", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactionGroup)
      };
      return this.$_select("reactionGroups", options) as any
    }
  

      
/**
 * A list of Reactions left on the Issue.
 */
      reactions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
content?: ReactionContent | null | undefined
orderBy?: ReactionOrder | null | undefined,
      }>,Sel extends Selection<ReactionConnection>>(args: Args, selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel, Args>>
reactions<Sel extends Selection<ReactionConnection>>(selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel>>
reactions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
content: "ReactionContent",
orderBy: "ReactionOrder"
            },
        args,

        selection: selectorFn(new ReactionConnection)
      };
      return this.$_select("reactions", options) as any
    }
  

      
/**
 * The comment this is a reply to.
 */
      replyTo<Sel extends Selection<PullRequestReviewComment>>(selectorFn: (s: PullRequestReviewComment) => [...Sel]):$Field<"replyTo", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewComment)
      };
      return this.$_select("replyTo", options) as any
    }
  

      
/**
 * The repository associated with this node.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path permalink for this review comment.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the state of the comment.
 */
      get state(): $Field<"state", PullRequestReviewCommentState>  {
       return this.$_select("state") as any
      }

      
/**
 * Identifies when the comment was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL permalink for this review comment.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * A list of edits to this content.
 */
      userContentEdits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserContentEditConnection>>(args: Args, selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
userContentEdits<Sel extends Selection<UserContentEditConnection>>(selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel>>
userContentEdits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserContentEditConnection)
      };
      return this.$_select("userContentEdits", options) as any
    }
  

      
/**
 * Check if the current viewer can delete this object.
 */
      get viewerCanDelete(): $Field<"viewerCanDelete", boolean>  {
       return this.$_select("viewerCanDelete") as any
      }

      
/**
 * Check if the current viewer can minimize this object.
 */
      get viewerCanMinimize(): $Field<"viewerCanMinimize", boolean>  {
       return this.$_select("viewerCanMinimize") as any
      }

      
/**
 * Can user react to this subject
 */
      get viewerCanReact(): $Field<"viewerCanReact", boolean>  {
       return this.$_select("viewerCanReact") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * Reasons why the current viewer can not update this comment.
 */
      get viewerCannotUpdateReasons(): $Field<"viewerCannotUpdateReasons", Readonly<Array<CommentCannotUpdateReason>>>  {
       return this.$_select("viewerCannotUpdateReasons") as any
      }

      
/**
 * Did the viewer author this comment.
 */
      get viewerDidAuthor(): $Field<"viewerDidAuthor", boolean>  {
       return this.$_select("viewerDidAuthor") as any
      }
}


/**
 * The connection type for PullRequestReviewComment.
 */
export class PullRequestReviewCommentConnection extends $Base<"PullRequestReviewCommentConnection"> {
  constructor() {
    super("PullRequestReviewCommentConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PullRequestReviewCommentEdge>>(selectorFn: (s: PullRequestReviewCommentEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewCommentEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PullRequestReviewComment>>(selectorFn: (s: PullRequestReviewComment) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewComment)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class PullRequestReviewCommentEdge extends $Base<"PullRequestReviewCommentEdge"> {
  constructor() {
    super("PullRequestReviewCommentEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PullRequestReviewComment>>(selectorFn: (s: PullRequestReviewComment) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewComment)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The possible states of a pull request review comment.
 */
export enum PullRequestReviewCommentState {
  
/**
 * A comment that is part of a pending review
 */
  PENDING = "PENDING",

/**
 * A comment that is part of a submitted review
 */
  SUBMITTED = "SUBMITTED"
}
  


/**
 * The connection type for PullRequestReview.
 */
export class PullRequestReviewConnection extends $Base<"PullRequestReviewConnection"> {
  constructor() {
    super("PullRequestReviewConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PullRequestReviewEdge>>(selectorFn: (s: PullRequestReviewEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PullRequestReview>>(selectorFn: (s: PullRequestReview) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReview)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * This aggregates pull request reviews made by a user within one repository.
 */
export class PullRequestReviewContributionsByRepository extends $Base<"PullRequestReviewContributionsByRepository"> {
  constructor() {
    super("PullRequestReviewContributionsByRepository")
  }

  
      
/**
 * The pull request review contributions.
 */
      contributions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ContributionOrder | null | undefined,
      }>,Sel extends Selection<CreatedPullRequestReviewContributionConnection>>(args: Args, selectorFn: (s: CreatedPullRequestReviewContributionConnection) => [...Sel]):$Field<"contributions", GetOutput<Sel> , GetVariables<Sel, Args>>
contributions<Sel extends Selection<CreatedPullRequestReviewContributionConnection>>(selectorFn: (s: CreatedPullRequestReviewContributionConnection) => [...Sel]):$Field<"contributions", GetOutput<Sel> , GetVariables<Sel>>
contributions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ContributionOrder"
            },
        args,

        selection: selectorFn(new CreatedPullRequestReviewContributionConnection)
      };
      return this.$_select("contributions", options) as any
    }
  

      
/**
 * The repository in which the pull request reviews were made.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}

  
/**
 * The review status of a pull request.
 */
export enum PullRequestReviewDecision {
  
/**
 * Changes have been requested on the pull request.
 */
  CHANGES_REQUESTED = "CHANGES_REQUESTED",

/**
 * The pull request has received an approving review.
 */
  APPROVED = "APPROVED",

/**
 * A review is required before the pull request can be merged.
 */
  REVIEW_REQUIRED = "REVIEW_REQUIRED"
}
  


/**
 * An edge in a connection.
 */
export class PullRequestReviewEdge extends $Base<"PullRequestReviewEdge"> {
  constructor() {
    super("PullRequestReviewEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PullRequestReview>>(selectorFn: (s: PullRequestReview) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReview)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The possible events to perform on a pull request review.
 */
export enum PullRequestReviewEvent {
  
/**
 * Submit general feedback without explicit approval.
 */
  COMMENT = "COMMENT",

/**
 * Submit feedback and approve merging these changes.
 */
  APPROVE = "APPROVE",

/**
 * Submit feedback that must be addressed before merging.
 */
  REQUEST_CHANGES = "REQUEST_CHANGES",

/**
 * Dismiss review so it now longer effects merging.
 */
  DISMISS = "DISMISS"
}
  

  
/**
 * The possible states of a pull request review.
 */
export enum PullRequestReviewState {
  
/**
 * A review that has not yet been submitted.
 */
  PENDING = "PENDING",

/**
 * An informational review.
 */
  COMMENTED = "COMMENTED",

/**
 * A review allowing the pull request to merge.
 */
  APPROVED = "APPROVED",

/**
 * A review blocking the pull request from merging.
 */
  CHANGES_REQUESTED = "CHANGES_REQUESTED",

/**
 * A review that has been dismissed.
 */
  DISMISSED = "DISMISSED"
}
  


/**
 * A threaded list of comments for a given pull request.
 */
export class PullRequestReviewThread extends $Base<"PullRequestReviewThread"> {
  constructor() {
    super("PullRequestReviewThread")
  }

  
      
/**
 * A list of pull request comments associated with the thread.
 */
      comments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
skip?: number | null | undefined,
      }>,Sel extends Selection<PullRequestReviewCommentConnection>>(args: Args, selectorFn: (s: PullRequestReviewCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel, Args>>
comments<Sel extends Selection<PullRequestReviewCommentConnection>>(selectorFn: (s: PullRequestReviewCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel>>
comments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
skip: "Int"
            },
        args,

        selection: selectorFn(new PullRequestReviewCommentConnection)
      };
      return this.$_select("comments", options) as any
    }
  

      
/**
 * The side of the diff on which this thread was placed.
 */
      get diffSide(): $Field<"diffSide", DiffSide>  {
       return this.$_select("diffSide") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether or not the thread has been collapsed (resolved)
 */
      get isCollapsed(): $Field<"isCollapsed", boolean>  {
       return this.$_select("isCollapsed") as any
      }

      
/**
 * Indicates whether this thread was outdated by newer changes.
 */
      get isOutdated(): $Field<"isOutdated", boolean>  {
       return this.$_select("isOutdated") as any
      }

      
/**
 * Whether this thread has been resolved
 */
      get isResolved(): $Field<"isResolved", boolean>  {
       return this.$_select("isResolved") as any
      }

      
/**
 * The line in the file to which this thread refers
 */
      get line(): $Field<"line", number | null | undefined>  {
       return this.$_select("line") as any
      }

      
/**
 * The original line in the file to which this thread refers.
 */
      get originalLine(): $Field<"originalLine", number | null | undefined>  {
       return this.$_select("originalLine") as any
      }

      
/**
 * The original start line in the file to which this thread refers (multi-line only).
 */
      get originalStartLine(): $Field<"originalStartLine", number | null | undefined>  {
       return this.$_select("originalStartLine") as any
      }

      
/**
 * Identifies the file path of this thread.
 */
      get path(): $Field<"path", string>  {
       return this.$_select("path") as any
      }

      
/**
 * Identifies the pull request associated with this thread.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * Identifies the repository associated with this thread.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The user who resolved this thread
 */
      resolvedBy<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"resolvedBy", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("resolvedBy", options) as any
    }
  

      
/**
 * The side of the diff that the first line of the thread starts on (multi-line only)
 */
      get startDiffSide(): $Field<"startDiffSide", DiffSide | null | undefined>  {
       return this.$_select("startDiffSide") as any
      }

      
/**
 * The start line in the file to which this thread refers (multi-line only)
 */
      get startLine(): $Field<"startLine", number | null | undefined>  {
       return this.$_select("startLine") as any
      }

      
/**
 * Indicates whether the current viewer can reply to this thread.
 */
      get viewerCanReply(): $Field<"viewerCanReply", boolean>  {
       return this.$_select("viewerCanReply") as any
      }

      
/**
 * Whether or not the viewer can resolve this thread
 */
      get viewerCanResolve(): $Field<"viewerCanResolve", boolean>  {
       return this.$_select("viewerCanResolve") as any
      }

      
/**
 * Whether or not the viewer can unresolve this thread
 */
      get viewerCanUnresolve(): $Field<"viewerCanUnresolve", boolean>  {
       return this.$_select("viewerCanUnresolve") as any
      }
}


/**
 * Review comment threads for a pull request review.
 */
export class PullRequestReviewThreadConnection extends $Base<"PullRequestReviewThreadConnection"> {
  constructor() {
    super("PullRequestReviewThreadConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PullRequestReviewThreadEdge>>(selectorFn: (s: PullRequestReviewThreadEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewThreadEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PullRequestReviewThread>>(selectorFn: (s: PullRequestReviewThread) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewThread)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class PullRequestReviewThreadEdge extends $Base<"PullRequestReviewThreadEdge"> {
  constructor() {
    super("PullRequestReviewThreadEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PullRequestReviewThread>>(selectorFn: (s: PullRequestReviewThread) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewThread)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
 */
export class PullRequestRevisionMarker extends $Base<"PullRequestRevisionMarker"> {
  constructor() {
    super("PullRequestRevisionMarker")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The last commit the viewer has seen.
 */
      lastSeenCommit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"lastSeenCommit", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("lastSeenCommit", options) as any
    }
  

      
/**
 * The pull request to which the marker belongs.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}

  
/**
 * The possible states of a pull request.
 */
export enum PullRequestState {
  
/**
 * A pull request that is still open.
 */
  OPEN = "OPEN",

/**
 * A pull request that has been closed without being merged.
 */
  CLOSED = "CLOSED",

/**
 * A pull request that has been closed by being merged.
 */
  MERGED = "MERGED"
}
  


/**
 * A repository pull request template.
 */
export class PullRequestTemplate extends $Base<"PullRequestTemplate"> {
  constructor() {
    super("PullRequestTemplate")
  }

  
      
/**
 * The body of the template
 */
      get body(): $Field<"body", string | null | undefined>  {
       return this.$_select("body") as any
      }

      
/**
 * The filename of the template
 */
      get filename(): $Field<"filename", string | null | undefined>  {
       return this.$_select("filename") as any
      }

      
/**
 * The repository the template belongs to
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * A threaded list of comments for a given pull request.
 */
export class PullRequestThread extends $Base<"PullRequestThread"> {
  constructor() {
    super("PullRequestThread")
  }

  
      
/**
 * A list of pull request comments associated with the thread.
 */
      comments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
skip?: number | null | undefined,
      }>,Sel extends Selection<PullRequestReviewCommentConnection>>(args: Args, selectorFn: (s: PullRequestReviewCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel, Args>>
comments<Sel extends Selection<PullRequestReviewCommentConnection>>(selectorFn: (s: PullRequestReviewCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel>>
comments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
skip: "Int"
            },
        args,

        selection: selectorFn(new PullRequestReviewCommentConnection)
      };
      return this.$_select("comments", options) as any
    }
  

      
/**
 * The side of the diff on which this thread was placed.
 */
      get diffSide(): $Field<"diffSide", DiffSide>  {
       return this.$_select("diffSide") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether or not the thread has been collapsed (resolved)
 */
      get isCollapsed(): $Field<"isCollapsed", boolean>  {
       return this.$_select("isCollapsed") as any
      }

      
/**
 * Indicates whether this thread was outdated by newer changes.
 */
      get isOutdated(): $Field<"isOutdated", boolean>  {
       return this.$_select("isOutdated") as any
      }

      
/**
 * Whether this thread has been resolved
 */
      get isResolved(): $Field<"isResolved", boolean>  {
       return this.$_select("isResolved") as any
      }

      
/**
 * The line in the file to which this thread refers
 */
      get line(): $Field<"line", number | null | undefined>  {
       return this.$_select("line") as any
      }

      
/**
 * Identifies the pull request associated with this thread.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * Identifies the repository associated with this thread.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The user who resolved this thread
 */
      resolvedBy<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"resolvedBy", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("resolvedBy", options) as any
    }
  

      
/**
 * The side of the diff that the first line of the thread starts on (multi-line only)
 */
      get startDiffSide(): $Field<"startDiffSide", DiffSide | null | undefined>  {
       return this.$_select("startDiffSide") as any
      }

      
/**
 * The line of the first file diff in the thread.
 */
      get startLine(): $Field<"startLine", number | null | undefined>  {
       return this.$_select("startLine") as any
      }

      
/**
 * Indicates whether the current viewer can reply to this thread.
 */
      get viewerCanReply(): $Field<"viewerCanReply", boolean>  {
       return this.$_select("viewerCanReply") as any
      }

      
/**
 * Whether or not the viewer can resolve this thread
 */
      get viewerCanResolve(): $Field<"viewerCanResolve", boolean>  {
       return this.$_select("viewerCanResolve") as any
      }

      
/**
 * Whether or not the viewer can unresolve this thread
 */
      get viewerCanUnresolve(): $Field<"viewerCanUnresolve", boolean>  {
       return this.$_select("viewerCanUnresolve") as any
      }
}


/**
 * The connection type for PullRequestTimelineItem.
 */
export class PullRequestTimelineConnection extends $Base<"PullRequestTimelineConnection"> {
  constructor() {
    super("PullRequestTimelineConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PullRequestTimelineItemEdge>>(selectorFn: (s: PullRequestTimelineItemEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestTimelineItemEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PullRequestTimelineItem>>(selectorFn: (s: PullRequestTimelineItem) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestTimelineItem)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An item in a pull request timeline
 */
export class PullRequestTimelineItem extends $Union<{AssignedEvent: AssignedEvent,BaseRefDeletedEvent: BaseRefDeletedEvent,BaseRefForcePushedEvent: BaseRefForcePushedEvent,ClosedEvent: ClosedEvent,Commit: Commit,CommitCommentThread: CommitCommentThread,CrossReferencedEvent: CrossReferencedEvent,DemilestonedEvent: DemilestonedEvent,DeployedEvent: DeployedEvent,DeploymentEnvironmentChangedEvent: DeploymentEnvironmentChangedEvent,HeadRefDeletedEvent: HeadRefDeletedEvent,HeadRefForcePushedEvent: HeadRefForcePushedEvent,HeadRefRestoredEvent: HeadRefRestoredEvent,IssueComment: IssueComment,LabeledEvent: LabeledEvent,LockedEvent: LockedEvent,MergedEvent: MergedEvent,MilestonedEvent: MilestonedEvent,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,PullRequestReviewThread: PullRequestReviewThread,ReferencedEvent: ReferencedEvent,RenamedTitleEvent: RenamedTitleEvent,ReopenedEvent: ReopenedEvent,ReviewDismissedEvent: ReviewDismissedEvent,ReviewRequestRemovedEvent: ReviewRequestRemovedEvent,ReviewRequestedEvent: ReviewRequestedEvent,SubscribedEvent: SubscribedEvent,UnassignedEvent: UnassignedEvent,UnlabeledEvent: UnlabeledEvent,UnlockedEvent: UnlockedEvent,UnsubscribedEvent: UnsubscribedEvent,UserBlockedEvent: UserBlockedEvent,Node: Node,UniformResourceLocatable: UniformResourceLocatable,GitObject: GitObject,Subscribable: Subscribable,RepositoryNode: RepositoryNode,Comment: Comment,Deletable: Deletable,Minimizable: Minimizable,Updatable: Updatable,UpdatableComment: UpdatableComment,Reactable: Reactable}, "PullRequestTimelineItem"> {
  constructor() {
    super({AssignedEvent: AssignedEvent,BaseRefDeletedEvent: BaseRefDeletedEvent,BaseRefForcePushedEvent: BaseRefForcePushedEvent,ClosedEvent: ClosedEvent,Commit: Commit,CommitCommentThread: CommitCommentThread,CrossReferencedEvent: CrossReferencedEvent,DemilestonedEvent: DemilestonedEvent,DeployedEvent: DeployedEvent,DeploymentEnvironmentChangedEvent: DeploymentEnvironmentChangedEvent,HeadRefDeletedEvent: HeadRefDeletedEvent,HeadRefForcePushedEvent: HeadRefForcePushedEvent,HeadRefRestoredEvent: HeadRefRestoredEvent,IssueComment: IssueComment,LabeledEvent: LabeledEvent,LockedEvent: LockedEvent,MergedEvent: MergedEvent,MilestonedEvent: MilestonedEvent,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,PullRequestReviewThread: PullRequestReviewThread,ReferencedEvent: ReferencedEvent,RenamedTitleEvent: RenamedTitleEvent,ReopenedEvent: ReopenedEvent,ReviewDismissedEvent: ReviewDismissedEvent,ReviewRequestRemovedEvent: ReviewRequestRemovedEvent,ReviewRequestedEvent: ReviewRequestedEvent,SubscribedEvent: SubscribedEvent,UnassignedEvent: UnassignedEvent,UnlabeledEvent: UnlabeledEvent,UnlockedEvent: UnlockedEvent,UnsubscribedEvent: UnsubscribedEvent,UserBlockedEvent: UserBlockedEvent,Node: Node,UniformResourceLocatable: UniformResourceLocatable,GitObject: GitObject,Subscribable: Subscribable,RepositoryNode: RepositoryNode,Comment: Comment,Deletable: Deletable,Minimizable: Minimizable,Updatable: Updatable,UpdatableComment: UpdatableComment,Reactable: Reactable})
  }
}


/**
 * An edge in a connection.
 */
export class PullRequestTimelineItemEdge extends $Base<"PullRequestTimelineItemEdge"> {
  constructor() {
    super("PullRequestTimelineItemEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PullRequestTimelineItem>>(selectorFn: (s: PullRequestTimelineItem) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestTimelineItem)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * An item in a pull request timeline
 */
export class PullRequestTimelineItems extends $Union<{AddedToProjectEvent: AddedToProjectEvent,AssignedEvent: AssignedEvent,AutoMergeDisabledEvent: AutoMergeDisabledEvent,AutoMergeEnabledEvent: AutoMergeEnabledEvent,AutoRebaseEnabledEvent: AutoRebaseEnabledEvent,AutoSquashEnabledEvent: AutoSquashEnabledEvent,AutomaticBaseChangeFailedEvent: AutomaticBaseChangeFailedEvent,AutomaticBaseChangeSucceededEvent: AutomaticBaseChangeSucceededEvent,BaseRefChangedEvent: BaseRefChangedEvent,BaseRefDeletedEvent: BaseRefDeletedEvent,BaseRefForcePushedEvent: BaseRefForcePushedEvent,ClosedEvent: ClosedEvent,CommentDeletedEvent: CommentDeletedEvent,ConnectedEvent: ConnectedEvent,ConvertToDraftEvent: ConvertToDraftEvent,ConvertedNoteToIssueEvent: ConvertedNoteToIssueEvent,ConvertedToDiscussionEvent: ConvertedToDiscussionEvent,CrossReferencedEvent: CrossReferencedEvent,DemilestonedEvent: DemilestonedEvent,DeployedEvent: DeployedEvent,DeploymentEnvironmentChangedEvent: DeploymentEnvironmentChangedEvent,DisconnectedEvent: DisconnectedEvent,HeadRefDeletedEvent: HeadRefDeletedEvent,HeadRefForcePushedEvent: HeadRefForcePushedEvent,HeadRefRestoredEvent: HeadRefRestoredEvent,IssueComment: IssueComment,LabeledEvent: LabeledEvent,LockedEvent: LockedEvent,MarkedAsDuplicateEvent: MarkedAsDuplicateEvent,MentionedEvent: MentionedEvent,MergedEvent: MergedEvent,MilestonedEvent: MilestonedEvent,MovedColumnsInProjectEvent: MovedColumnsInProjectEvent,PinnedEvent: PinnedEvent,PullRequestCommit: PullRequestCommit,PullRequestCommitCommentThread: PullRequestCommitCommentThread,PullRequestReview: PullRequestReview,PullRequestReviewThread: PullRequestReviewThread,PullRequestRevisionMarker: PullRequestRevisionMarker,ReadyForReviewEvent: ReadyForReviewEvent,ReferencedEvent: ReferencedEvent,RemovedFromProjectEvent: RemovedFromProjectEvent,RenamedTitleEvent: RenamedTitleEvent,ReopenedEvent: ReopenedEvent,ReviewDismissedEvent: ReviewDismissedEvent,ReviewRequestRemovedEvent: ReviewRequestRemovedEvent,ReviewRequestedEvent: ReviewRequestedEvent,SubscribedEvent: SubscribedEvent,TransferredEvent: TransferredEvent,UnassignedEvent: UnassignedEvent,UnlabeledEvent: UnlabeledEvent,UnlockedEvent: UnlockedEvent,UnmarkedAsDuplicateEvent: UnmarkedAsDuplicateEvent,UnpinnedEvent: UnpinnedEvent,UnsubscribedEvent: UnsubscribedEvent,UserBlockedEvent: UserBlockedEvent,Node: Node,UniformResourceLocatable: UniformResourceLocatable,Comment: Comment,Deletable: Deletable,Minimizable: Minimizable,Updatable: Updatable,UpdatableComment: UpdatableComment,Reactable: Reactable,RepositoryNode: RepositoryNode}, "PullRequestTimelineItems"> {
  constructor() {
    super({AddedToProjectEvent: AddedToProjectEvent,AssignedEvent: AssignedEvent,AutoMergeDisabledEvent: AutoMergeDisabledEvent,AutoMergeEnabledEvent: AutoMergeEnabledEvent,AutoRebaseEnabledEvent: AutoRebaseEnabledEvent,AutoSquashEnabledEvent: AutoSquashEnabledEvent,AutomaticBaseChangeFailedEvent: AutomaticBaseChangeFailedEvent,AutomaticBaseChangeSucceededEvent: AutomaticBaseChangeSucceededEvent,BaseRefChangedEvent: BaseRefChangedEvent,BaseRefDeletedEvent: BaseRefDeletedEvent,BaseRefForcePushedEvent: BaseRefForcePushedEvent,ClosedEvent: ClosedEvent,CommentDeletedEvent: CommentDeletedEvent,ConnectedEvent: ConnectedEvent,ConvertToDraftEvent: ConvertToDraftEvent,ConvertedNoteToIssueEvent: ConvertedNoteToIssueEvent,ConvertedToDiscussionEvent: ConvertedToDiscussionEvent,CrossReferencedEvent: CrossReferencedEvent,DemilestonedEvent: DemilestonedEvent,DeployedEvent: DeployedEvent,DeploymentEnvironmentChangedEvent: DeploymentEnvironmentChangedEvent,DisconnectedEvent: DisconnectedEvent,HeadRefDeletedEvent: HeadRefDeletedEvent,HeadRefForcePushedEvent: HeadRefForcePushedEvent,HeadRefRestoredEvent: HeadRefRestoredEvent,IssueComment: IssueComment,LabeledEvent: LabeledEvent,LockedEvent: LockedEvent,MarkedAsDuplicateEvent: MarkedAsDuplicateEvent,MentionedEvent: MentionedEvent,MergedEvent: MergedEvent,MilestonedEvent: MilestonedEvent,MovedColumnsInProjectEvent: MovedColumnsInProjectEvent,PinnedEvent: PinnedEvent,PullRequestCommit: PullRequestCommit,PullRequestCommitCommentThread: PullRequestCommitCommentThread,PullRequestReview: PullRequestReview,PullRequestReviewThread: PullRequestReviewThread,PullRequestRevisionMarker: PullRequestRevisionMarker,ReadyForReviewEvent: ReadyForReviewEvent,ReferencedEvent: ReferencedEvent,RemovedFromProjectEvent: RemovedFromProjectEvent,RenamedTitleEvent: RenamedTitleEvent,ReopenedEvent: ReopenedEvent,ReviewDismissedEvent: ReviewDismissedEvent,ReviewRequestRemovedEvent: ReviewRequestRemovedEvent,ReviewRequestedEvent: ReviewRequestedEvent,SubscribedEvent: SubscribedEvent,TransferredEvent: TransferredEvent,UnassignedEvent: UnassignedEvent,UnlabeledEvent: UnlabeledEvent,UnlockedEvent: UnlockedEvent,UnmarkedAsDuplicateEvent: UnmarkedAsDuplicateEvent,UnpinnedEvent: UnpinnedEvent,UnsubscribedEvent: UnsubscribedEvent,UserBlockedEvent: UserBlockedEvent,Node: Node,UniformResourceLocatable: UniformResourceLocatable,Comment: Comment,Deletable: Deletable,Minimizable: Minimizable,Updatable: Updatable,UpdatableComment: UpdatableComment,Reactable: Reactable,RepositoryNode: RepositoryNode})
  }
}


/**
 * The connection type for PullRequestTimelineItems.
 */
export class PullRequestTimelineItemsConnection extends $Base<"PullRequestTimelineItemsConnection"> {
  constructor() {
    super("PullRequestTimelineItemsConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PullRequestTimelineItemsEdge>>(selectorFn: (s: PullRequestTimelineItemsEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestTimelineItemsEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * Identifies the count of items after applying `before` and `after` filters.
 */
      get filteredCount(): $Field<"filteredCount", number>  {
       return this.$_select("filteredCount") as any
      }

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PullRequestTimelineItems>>(selectorFn: (s: PullRequestTimelineItems) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestTimelineItems)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
 */
      get pageCount(): $Field<"pageCount", number>  {
       return this.$_select("pageCount") as any
      }

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }

      
/**
 * Identifies the date and time when the timeline was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * An edge in a connection.
 */
export class PullRequestTimelineItemsEdge extends $Base<"PullRequestTimelineItemsEdge"> {
  constructor() {
    super("PullRequestTimelineItemsEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PullRequestTimelineItems>>(selectorFn: (s: PullRequestTimelineItems) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestTimelineItems)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The possible item types found in a timeline.
 */
export enum PullRequestTimelineItemsItemType {
  
/**
 * Represents a Git commit part of a pull request.
 */
  PULL_REQUEST_COMMIT = "PULL_REQUEST_COMMIT",

/**
 * Represents a commit comment thread part of a pull request.
 */
  PULL_REQUEST_COMMIT_COMMENT_THREAD = "PULL_REQUEST_COMMIT_COMMENT_THREAD",

/**
 * A review object for a given pull request.
 */
  PULL_REQUEST_REVIEW = "PULL_REQUEST_REVIEW",

/**
 * A threaded list of comments for a given pull request.
 */
  PULL_REQUEST_REVIEW_THREAD = "PULL_REQUEST_REVIEW_THREAD",

/**
 * Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
 */
  PULL_REQUEST_REVISION_MARKER = "PULL_REQUEST_REVISION_MARKER",

/**
 * Represents a 'automatic_base_change_failed' event on a given pull request.
 */
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT = "AUTOMATIC_BASE_CHANGE_FAILED_EVENT",

/**
 * Represents a 'automatic_base_change_succeeded' event on a given pull request.
 */
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT = "AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT",

/**
 * Represents a 'auto_merge_disabled' event on a given pull request.
 */
  AUTO_MERGE_DISABLED_EVENT = "AUTO_MERGE_DISABLED_EVENT",

/**
 * Represents a 'auto_merge_enabled' event on a given pull request.
 */
  AUTO_MERGE_ENABLED_EVENT = "AUTO_MERGE_ENABLED_EVENT",

/**
 * Represents a 'auto_rebase_enabled' event on a given pull request.
 */
  AUTO_REBASE_ENABLED_EVENT = "AUTO_REBASE_ENABLED_EVENT",

/**
 * Represents a 'auto_squash_enabled' event on a given pull request.
 */
  AUTO_SQUASH_ENABLED_EVENT = "AUTO_SQUASH_ENABLED_EVENT",

/**
 * Represents a 'base_ref_changed' event on a given issue or pull request.
 */
  BASE_REF_CHANGED_EVENT = "BASE_REF_CHANGED_EVENT",

/**
 * Represents a 'base_ref_force_pushed' event on a given pull request.
 */
  BASE_REF_FORCE_PUSHED_EVENT = "BASE_REF_FORCE_PUSHED_EVENT",

/**
 * Represents a 'base_ref_deleted' event on a given pull request.
 */
  BASE_REF_DELETED_EVENT = "BASE_REF_DELETED_EVENT",

/**
 * Represents a 'deployed' event on a given pull request.
 */
  DEPLOYED_EVENT = "DEPLOYED_EVENT",

/**
 * Represents a 'deployment_environment_changed' event on a given pull request.
 */
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT = "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT",

/**
 * Represents a 'head_ref_deleted' event on a given pull request.
 */
  HEAD_REF_DELETED_EVENT = "HEAD_REF_DELETED_EVENT",

/**
 * Represents a 'head_ref_force_pushed' event on a given pull request.
 */
  HEAD_REF_FORCE_PUSHED_EVENT = "HEAD_REF_FORCE_PUSHED_EVENT",

/**
 * Represents a 'head_ref_restored' event on a given pull request.
 */
  HEAD_REF_RESTORED_EVENT = "HEAD_REF_RESTORED_EVENT",

/**
 * Represents a 'merged' event on a given pull request.
 */
  MERGED_EVENT = "MERGED_EVENT",

/**
 * Represents a 'review_dismissed' event on a given issue or pull request.
 */
  REVIEW_DISMISSED_EVENT = "REVIEW_DISMISSED_EVENT",

/**
 * Represents an 'review_requested' event on a given pull request.
 */
  REVIEW_REQUESTED_EVENT = "REVIEW_REQUESTED_EVENT",

/**
 * Represents an 'review_request_removed' event on a given pull request.
 */
  REVIEW_REQUEST_REMOVED_EVENT = "REVIEW_REQUEST_REMOVED_EVENT",

/**
 * Represents a 'ready_for_review' event on a given pull request.
 */
  READY_FOR_REVIEW_EVENT = "READY_FOR_REVIEW_EVENT",

/**
 * Represents a 'convert_to_draft' event on a given pull request.
 */
  CONVERT_TO_DRAFT_EVENT = "CONVERT_TO_DRAFT_EVENT",

/**
 * Represents an 'added_to_merge_queue' event on a given pull request.
 */
  ADDED_TO_MERGE_QUEUE_EVENT = "ADDED_TO_MERGE_QUEUE_EVENT",

/**
 * Represents a 'removed_from_merge_queue' event on a given pull request.
 */
  REMOVED_FROM_MERGE_QUEUE_EVENT = "REMOVED_FROM_MERGE_QUEUE_EVENT",

/**
 * Represents a comment on an Issue.
 */
  ISSUE_COMMENT = "ISSUE_COMMENT",

/**
 * Represents a mention made by one issue or pull request to another.
 */
  CROSS_REFERENCED_EVENT = "CROSS_REFERENCED_EVENT",

/**
 * Represents a 'added_to_project' event on a given issue or pull request.
 */
  ADDED_TO_PROJECT_EVENT = "ADDED_TO_PROJECT_EVENT",

/**
 * Represents an 'assigned' event on any assignable object.
 */
  ASSIGNED_EVENT = "ASSIGNED_EVENT",

/**
 * Represents a 'closed' event on any `Closable`.
 */
  CLOSED_EVENT = "CLOSED_EVENT",

/**
 * Represents a 'comment_deleted' event on a given issue or pull request.
 */
  COMMENT_DELETED_EVENT = "COMMENT_DELETED_EVENT",

/**
 * Represents a 'connected' event on a given issue or pull request.
 */
  CONNECTED_EVENT = "CONNECTED_EVENT",

/**
 * Represents a 'converted_note_to_issue' event on a given issue or pull request.
 */
  CONVERTED_NOTE_TO_ISSUE_EVENT = "CONVERTED_NOTE_TO_ISSUE_EVENT",

/**
 * Represents a 'converted_to_discussion' event on a given issue.
 */
  CONVERTED_TO_DISCUSSION_EVENT = "CONVERTED_TO_DISCUSSION_EVENT",

/**
 * Represents a 'demilestoned' event on a given issue or pull request.
 */
  DEMILESTONED_EVENT = "DEMILESTONED_EVENT",

/**
 * Represents a 'disconnected' event on a given issue or pull request.
 */
  DISCONNECTED_EVENT = "DISCONNECTED_EVENT",

/**
 * Represents a 'labeled' event on a given issue or pull request.
 */
  LABELED_EVENT = "LABELED_EVENT",

/**
 * Represents a 'locked' event on a given issue or pull request.
 */
  LOCKED_EVENT = "LOCKED_EVENT",

/**
 * Represents a 'marked_as_duplicate' event on a given issue or pull request.
 */
  MARKED_AS_DUPLICATE_EVENT = "MARKED_AS_DUPLICATE_EVENT",

/**
 * Represents a 'mentioned' event on a given issue or pull request.
 */
  MENTIONED_EVENT = "MENTIONED_EVENT",

/**
 * Represents a 'milestoned' event on a given issue or pull request.
 */
  MILESTONED_EVENT = "MILESTONED_EVENT",

/**
 * Represents a 'moved_columns_in_project' event on a given issue or pull request.
 */
  MOVED_COLUMNS_IN_PROJECT_EVENT = "MOVED_COLUMNS_IN_PROJECT_EVENT",

/**
 * Represents a 'pinned' event on a given issue or pull request.
 */
  PINNED_EVENT = "PINNED_EVENT",

/**
 * Represents a 'referenced' event on a given `ReferencedSubject`.
 */
  REFERENCED_EVENT = "REFERENCED_EVENT",

/**
 * Represents a 'removed_from_project' event on a given issue or pull request.
 */
  REMOVED_FROM_PROJECT_EVENT = "REMOVED_FROM_PROJECT_EVENT",

/**
 * Represents a 'renamed' event on a given issue or pull request
 */
  RENAMED_TITLE_EVENT = "RENAMED_TITLE_EVENT",

/**
 * Represents a 'reopened' event on any `Closable`.
 */
  REOPENED_EVENT = "REOPENED_EVENT",

/**
 * Represents a 'subscribed' event on a given `Subscribable`.
 */
  SUBSCRIBED_EVENT = "SUBSCRIBED_EVENT",

/**
 * Represents a 'transferred' event on a given issue or pull request.
 */
  TRANSFERRED_EVENT = "TRANSFERRED_EVENT",

/**
 * Represents an 'unassigned' event on any assignable object.
 */
  UNASSIGNED_EVENT = "UNASSIGNED_EVENT",

/**
 * Represents an 'unlabeled' event on a given issue or pull request.
 */
  UNLABELED_EVENT = "UNLABELED_EVENT",

/**
 * Represents an 'unlocked' event on a given issue or pull request.
 */
  UNLOCKED_EVENT = "UNLOCKED_EVENT",

/**
 * Represents a 'user_blocked' event on a given user.
 */
  USER_BLOCKED_EVENT = "USER_BLOCKED_EVENT",

/**
 * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
 */
  UNMARKED_AS_DUPLICATE_EVENT = "UNMARKED_AS_DUPLICATE_EVENT",

/**
 * Represents an 'unpinned' event on a given issue or pull request.
 */
  UNPINNED_EVENT = "UNPINNED_EVENT",

/**
 * Represents an 'unsubscribed' event on a given `Subscribable`.
 */
  UNSUBSCRIBED_EVENT = "UNSUBSCRIBED_EVENT"
}
  

  
/**
 * The possible target states when updating a pull request.
 */
export enum PullRequestUpdateState {
  
/**
 * A pull request that is still open.
 */
  OPEN = "OPEN",

/**
 * A pull request that has been closed without being merged.
 */
  CLOSED = "CLOSED"
}
  


/**
 * A Git push.
 */
export class Push extends $Base<"Push"> {
  constructor() {
    super("Push")
  }

  
      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The SHA after the push
 */
      get nextSha(): $Field<"nextSha", string | null | undefined>  {
       return this.$_select("nextSha") as any
      }

      
/**
 * The permalink for this push.
 */
      get permalink(): $Field<"permalink", string>  {
       return this.$_select("permalink") as any
      }

      
/**
 * The SHA before the push
 */
      get previousSha(): $Field<"previousSha", string | null | undefined>  {
       return this.$_select("previousSha") as any
      }

      
/**
 * The actor who pushed
 */
      pusher<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"pusher", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("pusher", options) as any
    }
  

      
/**
 * The repository that was pushed to
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * A team, user, or app who has the ability to push to a protected branch.
 */
export class PushAllowance extends $Base<"PushAllowance"> {
  constructor() {
    super("PushAllowance")
  }

  
      
/**
 * The actor that can push.
 */
      actor<Sel extends Selection<PushAllowanceActor>>(selectorFn: (s: PushAllowanceActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PushAllowanceActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the branch protection rule associated with the allowed user, team, or app.
 */
      branchProtectionRule<Sel extends Selection<BranchProtectionRule>>(selectorFn: (s: BranchProtectionRule) => [...Sel]):$Field<"branchProtectionRule", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRule)
      };
      return this.$_select("branchProtectionRule", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }
}


/**
 * Types that can be an actor.
 */
export class PushAllowanceActor extends $Union<{App: App,Team: Team,User: User,Node: Node,Subscribable: Subscribable,MemberStatusable: MemberStatusable,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "PushAllowanceActor"> {
  constructor() {
    super({App: App,Team: Team,User: User,Node: Node,Subscribable: Subscribable,MemberStatusable: MemberStatusable,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * The connection type for PushAllowance.
 */
export class PushAllowanceConnection extends $Base<"PushAllowanceConnection"> {
  constructor() {
    super("PushAllowanceConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<PushAllowanceEdge>>(selectorFn: (s: PushAllowanceEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PushAllowanceEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<PushAllowance>>(selectorFn: (s: PushAllowance) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PushAllowance)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class PushAllowanceEdge extends $Base<"PushAllowanceEdge"> {
  constructor() {
    super("PushAllowanceEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<PushAllowance>>(selectorFn: (s: PushAllowance) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PushAllowance)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The query root of GitHub's GraphQL interface.
 */
export class Query extends $Base<"Query"> {
  constructor() {
    super("Query")
  }

  
      
/**
 * Look up a code of conduct by its key
 */
      codeOfConduct<Args extends VariabledInput<{
        key: string,
      }>,Sel extends Selection<CodeOfConduct>>(args: Args, selectorFn: (s: CodeOfConduct) => [...Sel]):$Field<"codeOfConduct", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              key: "String!"
            },
        args,

        selection: selectorFn(new CodeOfConduct)
      };
      return this.$_select("codeOfConduct", options) as any
    }
  

      
/**
 * Look up a code of conduct by its key
 */
      codesOfConduct<Sel extends Selection<CodeOfConduct>>(selectorFn: (s: CodeOfConduct) => [...Sel]):$Field<"codesOfConduct", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CodeOfConduct)
      };
      return this.$_select("codesOfConduct", options) as any
    }
  

      
/**
 * Look up an enterprise by URL slug.
 */
      enterprise<Args extends VariabledInput<{
        slug: string
invitationToken?: string | null | undefined,
      }>,Sel extends Selection<Enterprise>>(args: Args, selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              slug: "String!",
invitationToken: "String"
            },
        args,

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * Look up a pending enterprise administrator invitation by invitee, enterprise and role.
 */
      enterpriseAdministratorInvitation<Args extends VariabledInput<{
        userLogin: string
enterpriseSlug: string
role: EnterpriseAdministratorRole,
      }>,Sel extends Selection<EnterpriseAdministratorInvitation>>(args: Args, selectorFn: (s: EnterpriseAdministratorInvitation) => [...Sel]):$Field<"enterpriseAdministratorInvitation", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              userLogin: "String!",
enterpriseSlug: "String!",
role: "EnterpriseAdministratorRole!"
            },
        args,

        selection: selectorFn(new EnterpriseAdministratorInvitation)
      };
      return this.$_select("enterpriseAdministratorInvitation", options) as any
    }
  

      
/**
 * Look up a pending enterprise administrator invitation by invitation token.
 */
      enterpriseAdministratorInvitationByToken<Args extends VariabledInput<{
        invitationToken: string,
      }>,Sel extends Selection<EnterpriseAdministratorInvitation>>(args: Args, selectorFn: (s: EnterpriseAdministratorInvitation) => [...Sel]):$Field<"enterpriseAdministratorInvitationByToken", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              invitationToken: "String!"
            },
        args,

        selection: selectorFn(new EnterpriseAdministratorInvitation)
      };
      return this.$_select("enterpriseAdministratorInvitationByToken", options) as any
    }
  

      
/**
 * Look up an open source license by its key
 */
      license<Args extends VariabledInput<{
        key: string,
      }>,Sel extends Selection<License>>(args: Args, selectorFn: (s: License) => [...Sel]):$Field<"license", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              key: "String!"
            },
        args,

        selection: selectorFn(new License)
      };
      return this.$_select("license", options) as any
    }
  

      
/**
 * Return a list of known open source licenses
 */
      licenses<Sel extends Selection<License>>(selectorFn: (s: License) => [...Sel]):$Field<"licenses", Array<GetOutput<Sel> | undefined> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new License)
      };
      return this.$_select("licenses", options) as any
    }
  

      
/**
 * Get alphabetically sorted list of Marketplace categories
 */
      marketplaceCategories<Args extends VariabledInput<{
        includeCategories?: Readonly<Array<string>> | null | undefined
excludeEmpty?: boolean | null | undefined
excludeSubcategories?: boolean | null | undefined,
      }>,Sel extends Selection<MarketplaceCategory>>(args: Args, selectorFn: (s: MarketplaceCategory) => [...Sel]):$Field<"marketplaceCategories", Array<GetOutput<Sel>> , GetVariables<Sel, Args>>
marketplaceCategories<Sel extends Selection<MarketplaceCategory>>(selectorFn: (s: MarketplaceCategory) => [...Sel]):$Field<"marketplaceCategories", Array<GetOutput<Sel>> , GetVariables<Sel>>
marketplaceCategories(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              includeCategories: "[String!]",
excludeEmpty: "Boolean",
excludeSubcategories: "Boolean"
            },
        args,

        selection: selectorFn(new MarketplaceCategory)
      };
      return this.$_select("marketplaceCategories", options) as any
    }
  

      
/**
 * Look up a Marketplace category by its slug.
 */
      marketplaceCategory<Args extends VariabledInput<{
        slug: string
useTopicAliases?: boolean | null | undefined,
      }>,Sel extends Selection<MarketplaceCategory>>(args: Args, selectorFn: (s: MarketplaceCategory) => [...Sel]):$Field<"marketplaceCategory", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              slug: "String!",
useTopicAliases: "Boolean"
            },
        args,

        selection: selectorFn(new MarketplaceCategory)
      };
      return this.$_select("marketplaceCategory", options) as any
    }
  

      
/**
 * Look up a single Marketplace listing
 */
      marketplaceListing<Args extends VariabledInput<{
        slug: string,
      }>,Sel extends Selection<MarketplaceListing>>(args: Args, selectorFn: (s: MarketplaceListing) => [...Sel]):$Field<"marketplaceListing", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              slug: "String!"
            },
        args,

        selection: selectorFn(new MarketplaceListing)
      };
      return this.$_select("marketplaceListing", options) as any
    }
  

      
/**
 * Look up Marketplace listings
 */
      marketplaceListings<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
categorySlug?: string | null | undefined
useTopicAliases?: boolean | null | undefined
viewerCanAdmin?: boolean | null | undefined
adminId?: string | null | undefined
organizationId?: string | null | undefined
allStates?: boolean | null | undefined
slugs?: Readonly<Array<string | null | undefined>> | null | undefined
primaryCategoryOnly?: boolean | null | undefined
withFreeTrialsOnly?: boolean | null | undefined,
      }>,Sel extends Selection<MarketplaceListingConnection>>(args: Args, selectorFn: (s: MarketplaceListingConnection) => [...Sel]):$Field<"marketplaceListings", GetOutput<Sel> , GetVariables<Sel, Args>>
marketplaceListings<Sel extends Selection<MarketplaceListingConnection>>(selectorFn: (s: MarketplaceListingConnection) => [...Sel]):$Field<"marketplaceListings", GetOutput<Sel> , GetVariables<Sel>>
marketplaceListings(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
categorySlug: "String",
useTopicAliases: "Boolean",
viewerCanAdmin: "Boolean",
adminId: "ID",
organizationId: "ID",
allStates: "Boolean",
slugs: "[String]",
primaryCategoryOnly: "Boolean",
withFreeTrialsOnly: "Boolean"
            },
        args,

        selection: selectorFn(new MarketplaceListingConnection)
      };
      return this.$_select("marketplaceListings", options) as any
    }
  

      
/**
 * Return information about the GitHub instance
 */
      meta<Sel extends Selection<GitHubMetadata>>(selectorFn: (s: GitHubMetadata) => [...Sel]):$Field<"meta", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitHubMetadata)
      };
      return this.$_select("meta", options) as any
    }
  

      
/**
 * Fetches an object given its ID.
 */
      node<Args extends VariabledInput<{
        id: string,
      }>,Sel extends Selection<Node>>(args: Args, selectorFn: (s: Node) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              id: "ID!"
            },
        args,

        selection: selectorFn(new Node)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * Lookup nodes by a list of IDs.
 */
      nodes<Args extends VariabledInput<{
        ids: Readonly<Array<string>>,
      }>,Sel extends Selection<Node>>(args: Args, selectorFn: (s: Node) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              ids: "[ID!]!"
            },
        args,

        selection: selectorFn(new Node)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Lookup a organization by login.
 */
      organization<Args extends VariabledInput<{
        login: string,
      }>,Sel extends Selection<Organization>>(args: Args, selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              login: "String!"
            },
        args,

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The client's rate limit information.
 */
      rateLimit<Args extends VariabledInput<{
        dryRun?: boolean | null | undefined,
      }>,Sel extends Selection<RateLimit>>(args: Args, selectorFn: (s: RateLimit) => [...Sel]):$Field<"rateLimit", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
rateLimit<Sel extends Selection<RateLimit>>(selectorFn: (s: RateLimit) => [...Sel]):$Field<"rateLimit", GetOutput<Sel> | undefined , GetVariables<Sel>>
rateLimit(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              dryRun: "Boolean"
            },
        args,

        selection: selectorFn(new RateLimit)
      };
      return this.$_select("rateLimit", options) as any
    }
  

      
/**
 * Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object
 */
      relay<Sel extends Selection<Query>>(selectorFn: (s: Query) => [...Sel]):$Field<"relay", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Query)
      };
      return this.$_select("relay", options) as any
    }
  

      
/**
 * Lookup a given repository by the owner and repository name.
 */
      repository<Args extends VariabledInput<{
        owner: string
name: string
followRenames?: boolean | null | undefined,
      }>,Sel extends Selection<Repository>>(args: Args, selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              owner: "String!",
name: "String!",
followRenames: "Boolean"
            },
        args,

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * Lookup a repository owner (ie. either a User or an Organization) by login.
 */
      repositoryOwner<Args extends VariabledInput<{
        login: string,
      }>,Sel extends Selection<RepositoryOwner>>(args: Args, selectorFn: (s: RepositoryOwner) => [...Sel]):$Field<"repositoryOwner", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              login: "String!"
            },
        args,

        selection: selectorFn(new RepositoryOwner)
      };
      return this.$_select("repositoryOwner", options) as any
    }
  

      
/**
 * Lookup resource by a URL.
 */
      resource<Args extends VariabledInput<{
        url: string,
      }>,Sel extends Selection<UniformResourceLocatable>>(args: Args, selectorFn: (s: UniformResourceLocatable) => [...Sel]):$Field<"resource", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              url: "URI!"
            },
        args,

        selection: selectorFn(new UniformResourceLocatable)
      };
      return this.$_select("resource", options) as any
    }
  

      
/**
 * Perform a search across resources, returning a maximum of 1,000 results.
 */
      search<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
query: string
type: SearchType,
      }>,Sel extends Selection<SearchResultItemConnection>>(args: Args, selectorFn: (s: SearchResultItemConnection) => [...Sel]):$Field<"search", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
query: "String!",
type: "SearchType!"
            },
        args,

        selection: selectorFn(new SearchResultItemConnection)
      };
      return this.$_select("search", options) as any
    }
  

      
/**
 * GitHub Security Advisories
 */
      securityAdvisories<Args extends VariabledInput<{
        orderBy?: SecurityAdvisoryOrder | null | undefined
identifier?: SecurityAdvisoryIdentifierFilter | null | undefined
publishedSince?: string | null | undefined
updatedSince?: string | null | undefined
classifications?: Readonly<Array<SecurityAdvisoryClassification>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<SecurityAdvisoryConnection>>(args: Args, selectorFn: (s: SecurityAdvisoryConnection) => [...Sel]):$Field<"securityAdvisories", GetOutput<Sel> , GetVariables<Sel, Args>>
securityAdvisories<Sel extends Selection<SecurityAdvisoryConnection>>(selectorFn: (s: SecurityAdvisoryConnection) => [...Sel]):$Field<"securityAdvisories", GetOutput<Sel> , GetVariables<Sel>>
securityAdvisories(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "SecurityAdvisoryOrder",
identifier: "SecurityAdvisoryIdentifierFilter",
publishedSince: "DateTime",
updatedSince: "DateTime",
classifications: "[SecurityAdvisoryClassification!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new SecurityAdvisoryConnection)
      };
      return this.$_select("securityAdvisories", options) as any
    }
  

      
/**
 * Fetch a Security Advisory by its GHSA ID
 */
      securityAdvisory<Args extends VariabledInput<{
        ghsaId: string,
      }>,Sel extends Selection<SecurityAdvisory>>(args: Args, selectorFn: (s: SecurityAdvisory) => [...Sel]):$Field<"securityAdvisory", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              ghsaId: "String!"
            },
        args,

        selection: selectorFn(new SecurityAdvisory)
      };
      return this.$_select("securityAdvisory", options) as any
    }
  

      
/**
 * Software Vulnerabilities documented by GitHub Security Advisories
 */
      securityVulnerabilities<Args extends VariabledInput<{
        orderBy?: SecurityVulnerabilityOrder | null | undefined
ecosystem?: SecurityAdvisoryEcosystem | null | undefined
package?: string | null | undefined
severities?: Readonly<Array<SecurityAdvisorySeverity>> | null | undefined
classifications?: Readonly<Array<SecurityAdvisoryClassification>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<SecurityVulnerabilityConnection>>(args: Args, selectorFn: (s: SecurityVulnerabilityConnection) => [...Sel]):$Field<"securityVulnerabilities", GetOutput<Sel> , GetVariables<Sel, Args>>
securityVulnerabilities<Sel extends Selection<SecurityVulnerabilityConnection>>(selectorFn: (s: SecurityVulnerabilityConnection) => [...Sel]):$Field<"securityVulnerabilities", GetOutput<Sel> , GetVariables<Sel>>
securityVulnerabilities(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "SecurityVulnerabilityOrder",
ecosystem: "SecurityAdvisoryEcosystem",
package: "String",
severities: "[SecurityAdvisorySeverity!]",
classifications: "[SecurityAdvisoryClassification!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new SecurityVulnerabilityConnection)
      };
      return this.$_select("securityVulnerabilities", options) as any
    }
  

      
/**
 * Users and organizations who can be sponsored via GitHub Sponsors.
 */
      sponsorables<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: SponsorableOrder | null | undefined
onlyDependencies?: boolean | null | undefined
orgLoginForDependencies?: string | null | undefined
dependencyEcosystem?: SecurityAdvisoryEcosystem | null | undefined
ecosystem?: DependencyGraphEcosystem | null | undefined,
      }>,Sel extends Selection<SponsorableItemConnection>>(args: Args, selectorFn: (s: SponsorableItemConnection) => [...Sel]):$Field<"sponsorables", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsorables<Sel extends Selection<SponsorableItemConnection>>(selectorFn: (s: SponsorableItemConnection) => [...Sel]):$Field<"sponsorables", GetOutput<Sel> , GetVariables<Sel>>
sponsorables(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "SponsorableOrder",
onlyDependencies: "Boolean",
orgLoginForDependencies: "String",
dependencyEcosystem: "SecurityAdvisoryEcosystem",
ecosystem: "DependencyGraphEcosystem"
            },
        args,

        selection: selectorFn(new SponsorableItemConnection)
      };
      return this.$_select("sponsorables", options) as any
    }
  

      
/**
 * Look up a topic by name.
 */
      topic<Args extends VariabledInput<{
        name: string,
      }>,Sel extends Selection<Topic>>(args: Args, selectorFn: (s: Topic) => [...Sel]):$Field<"topic", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              name: "String!"
            },
        args,

        selection: selectorFn(new Topic)
      };
      return this.$_select("topic", options) as any
    }
  

      
/**
 * Lookup a user by login.
 */
      user<Args extends VariabledInput<{
        login: string,
      }>,Sel extends Selection<User>>(args: Args, selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              login: "String!"
            },
        args,

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * The currently authenticated user.
 */
      viewer<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"viewer", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("viewer", options) as any
    }
  
}


/**
 * Represents the client's rate limit.
 */
export class RateLimit extends $Base<"RateLimit"> {
  constructor() {
    super("RateLimit")
  }

  
      
/**
 * The point cost for the current query counting against the rate limit.
 */
      get cost(): $Field<"cost", number>  {
       return this.$_select("cost") as any
      }

      
/**
 * The maximum number of points the client is permitted to consume in a 60 minute window.
 */
      get limit(): $Field<"limit", number>  {
       return this.$_select("limit") as any
      }

      
/**
 * The maximum number of nodes this query may return
 */
      get nodeCount(): $Field<"nodeCount", number>  {
       return this.$_select("nodeCount") as any
      }

      
/**
 * The number of points remaining in the current rate limit window.
 */
      get remaining(): $Field<"remaining", number>  {
       return this.$_select("remaining") as any
      }

      
/**
 * The time at which the current rate limit window resets in UTC epoch seconds.
 */
      get resetAt(): $Field<"resetAt", string>  {
       return this.$_select("resetAt") as any
      }

      
/**
 * The number of points used in the current rate limit window.
 */
      get used(): $Field<"used", number>  {
       return this.$_select("used") as any
      }
}


/**
 * Represents a subject that can be reacted on.
 */
export class Reactable extends $Interface<{CommitComment: CommitComment,Discussion: Discussion,DiscussionComment: DiscussionComment,Issue: Issue,IssueComment: IssueComment,PullRequest: PullRequest,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,Release: Release,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment}, "Reactable"> {
  constructor() {
    super({CommitComment: CommitComment,Discussion: Discussion,DiscussionComment: DiscussionComment,Issue: Issue,IssueComment: IssueComment,PullRequest: PullRequest,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,Release: Release,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment}, "Reactable")
  }
}


/**
 * The connection type for User.
 */
export class ReactingUserConnection extends $Base<"ReactingUserConnection"> {
  constructor() {
    super("ReactingUserConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ReactingUserEdge>>(selectorFn: (s: ReactingUserEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactingUserEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Represents a user that's made a reaction.
 */
export class ReactingUserEdge extends $Base<"ReactingUserEdge"> {
  constructor() {
    super("ReactingUserEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
      node<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"node", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * The moment when the user made the reaction.
 */
      get reactedAt(): $Field<"reactedAt", string>  {
       return this.$_select("reactedAt") as any
      }
}


/**
 * An emoji reaction to a particular piece of content.
 */
export class Reaction extends $Base<"Reaction"> {
  constructor() {
    super("Reaction")
  }

  
      
/**
 * Identifies the emoji reaction.
 */
      get content(): $Field<"content", ReactionContent>  {
       return this.$_select("content") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The reactable piece of content
 */
      reactable<Sel extends Selection<Reactable>>(selectorFn: (s: Reactable) => [...Sel]):$Field<"reactable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Reactable)
      };
      return this.$_select("reactable", options) as any
    }
  

      
/**
 * Identifies the user who created this reaction.
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * A list of reactions that have been left on the subject.
 */
export class ReactionConnection extends $Base<"ReactionConnection"> {
  constructor() {
    super("ReactionConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ReactionEdge>>(selectorFn: (s: ReactionEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactionEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Reaction>>(selectorFn: (s: Reaction) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Reaction)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }

      
/**
 * Whether or not the authenticated user has left a reaction on the subject.
 */
      get viewerHasReacted(): $Field<"viewerHasReacted", boolean>  {
       return this.$_select("viewerHasReacted") as any
      }
}

  
/**
 * Emojis that can be attached to Issues, Pull Requests and Comments.
 */
export enum ReactionContent {
  
/**
 * Represents the `:+1:` emoji.
 */
  THUMBS_UP = "THUMBS_UP",

/**
 * Represents the `:-1:` emoji.
 */
  THUMBS_DOWN = "THUMBS_DOWN",

/**
 * Represents the `:laugh:` emoji.
 */
  LAUGH = "LAUGH",

/**
 * Represents the `:hooray:` emoji.
 */
  HOORAY = "HOORAY",

/**
 * Represents the `:confused:` emoji.
 */
  CONFUSED = "CONFUSED",

/**
 * Represents the `:heart:` emoji.
 */
  HEART = "HEART",

/**
 * Represents the `:rocket:` emoji.
 */
  ROCKET = "ROCKET",

/**
 * Represents the `:eyes:` emoji.
 */
  EYES = "EYES"
}
  


/**
 * An edge in a connection.
 */
export class ReactionEdge extends $Base<"ReactionEdge"> {
  constructor() {
    super("ReactionEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Reaction>>(selectorFn: (s: Reaction) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Reaction)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A group of emoji reactions to a particular piece of content.
 */
export class ReactionGroup extends $Base<"ReactionGroup"> {
  constructor() {
    super("ReactionGroup")
  }

  
      
/**
 * Identifies the emoji reaction.
 */
      get content(): $Field<"content", ReactionContent>  {
       return this.$_select("content") as any
      }

      
/**
 * Identifies when the reaction was created.
 */
      get createdAt(): $Field<"createdAt", string | null | undefined>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Reactors to the reaction subject with the emotion represented by this reaction group.
 */
      reactors<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ReactorConnection>>(args: Args, selectorFn: (s: ReactorConnection) => [...Sel]):$Field<"reactors", GetOutput<Sel> , GetVariables<Sel, Args>>
reactors<Sel extends Selection<ReactorConnection>>(selectorFn: (s: ReactorConnection) => [...Sel]):$Field<"reactors", GetOutput<Sel> , GetVariables<Sel>>
reactors(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ReactorConnection)
      };
      return this.$_select("reactors", options) as any
    }
  

      
/**
 * The subject that was reacted to.
 */
      subject<Sel extends Selection<Reactable>>(selectorFn: (s: Reactable) => [...Sel]):$Field<"subject", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Reactable)
      };
      return this.$_select("subject", options) as any
    }
  

      
/**
 * Users who have reacted to the reaction subject with the emotion represented by this reaction group
 */
      users<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ReactingUserConnection>>(args: Args, selectorFn: (s: ReactingUserConnection) => [...Sel]):$Field<"users", GetOutput<Sel> , GetVariables<Sel, Args>>
users<Sel extends Selection<ReactingUserConnection>>(selectorFn: (s: ReactingUserConnection) => [...Sel]):$Field<"users", GetOutput<Sel> , GetVariables<Sel>>
users(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ReactingUserConnection)
      };
      return this.$_select("users", options) as any
    }
  

      
/**
 * Whether or not the authenticated user has left a reaction on the subject.
 */
      get viewerHasReacted(): $Field<"viewerHasReacted", boolean>  {
       return this.$_select("viewerHasReacted") as any
      }
}


/**
 * Ways in which lists of reactions can be ordered upon return.
 */
export type ReactionOrder = {
  direction: OrderDirection,
field: ReactionOrderField
}
    

  
/**
 * A list of fields that reactions can be ordered by.
 */
export enum ReactionOrderField {
  
/**
 * Allows ordering a list of reactions by when they were created.
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * Types that can be assigned to reactions.
 */
export class Reactor extends $Union<{Bot: Bot,Mannequin: Mannequin,Organization: Organization,User: User,Node: Node,Actor: Actor,UniformResourceLocatable: UniformResourceLocatable,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "Reactor"> {
  constructor() {
    super({Bot: Bot,Mannequin: Mannequin,Organization: Organization,User: User,Node: Node,Actor: Actor,UniformResourceLocatable: UniformResourceLocatable,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * The connection type for Reactor.
 */
export class ReactorConnection extends $Base<"ReactorConnection"> {
  constructor() {
    super("ReactorConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ReactorEdge>>(selectorFn: (s: ReactorEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactorEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Reactor>>(selectorFn: (s: Reactor) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Reactor)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Represents an author of a reaction.
 */
export class ReactorEdge extends $Base<"ReactorEdge"> {
  constructor() {
    super("ReactorEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The author of the reaction.
 */
      node<Sel extends Selection<Reactor>>(selectorFn: (s: Reactor) => [...Sel]):$Field<"node", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Reactor)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * The moment when the user made the reaction.
 */
      get reactedAt(): $Field<"reactedAt", string>  {
       return this.$_select("reactedAt") as any
      }
}


/**
 * Represents a 'ready_for_review' event on a given pull request.
 */
export class ReadyForReviewEvent extends $Base<"ReadyForReviewEvent"> {
  constructor() {
    super("ReadyForReviewEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The HTTP path for this ready for review event.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for this ready for review event.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * Represents a Git reference.
 */
export class Ref extends $Base<"Ref"> {
  constructor() {
    super("Ref")
  }

  
      
/**
 * A list of pull requests with this ref as the head ref.
 */
      associatedPullRequests<Args extends VariabledInput<{
        states?: Readonly<Array<PullRequestState>> | null | undefined
labels?: Readonly<Array<string>> | null | undefined
headRefName?: string | null | undefined
baseRefName?: string | null | undefined
orderBy?: IssueOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestConnection>>(args: Args, selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"associatedPullRequests", GetOutput<Sel> , GetVariables<Sel, Args>>
associatedPullRequests<Sel extends Selection<PullRequestConnection>>(selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"associatedPullRequests", GetOutput<Sel> , GetVariables<Sel>>
associatedPullRequests(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              states: "[PullRequestState!]",
labels: "[String!]",
headRefName: "String",
baseRefName: "String",
orderBy: "IssueOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestConnection)
      };
      return this.$_select("associatedPullRequests", options) as any
    }
  

      
/**
 * Branch protection rules for this ref
 */
      branchProtectionRule<Sel extends Selection<BranchProtectionRule>>(selectorFn: (s: BranchProtectionRule) => [...Sel]):$Field<"branchProtectionRule", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRule)
      };
      return this.$_select("branchProtectionRule", options) as any
    }
  

      
/**
 * Compares the current ref as a base ref to another head ref, if the comparison can be made.
 */
      compare<Args extends VariabledInput<{
        headRef: string,
      }>,Sel extends Selection<Comparison>>(args: Args, selectorFn: (s: Comparison) => [...Sel]):$Field<"compare", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              headRef: "String!"
            },
        args,

        selection: selectorFn(new Comparison)
      };
      return this.$_select("compare", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The ref name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The ref's prefix, such as `refs/heads/` or `refs/tags/`.
 */
      get prefix(): $Field<"prefix", string>  {
       return this.$_select("prefix") as any
      }

      
/**
 * Branch protection rules that are viewable by non-admins
 */
      refUpdateRule<Sel extends Selection<RefUpdateRule>>(selectorFn: (s: RefUpdateRule) => [...Sel]):$Field<"refUpdateRule", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RefUpdateRule)
      };
      return this.$_select("refUpdateRule", options) as any
    }
  

      
/**
 * The repository the ref belongs to.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The object the ref points to. Returns null when object does not exist.
 */
      target<Sel extends Selection<GitObject>>(selectorFn: (s: GitObject) => [...Sel]):$Field<"target", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitObject)
      };
      return this.$_select("target", options) as any
    }
  
}


/**
 * The connection type for Ref.
 */
export class RefConnection extends $Base<"RefConnection"> {
  constructor() {
    super("RefConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<RefEdge>>(selectorFn: (s: RefEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RefEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class RefEdge extends $Base<"RefEdge"> {
  constructor() {
    super("RefEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ways in which lists of git refs can be ordered upon return.
 */
export type RefOrder = {
  direction: OrderDirection,
field: RefOrderField
}
    

  
/**
 * Properties by which ref connections can be ordered.
 */
export enum RefOrderField {
  
/**
 * Order refs by underlying commit date if the ref prefix is refs/tags/
 */
  TAG_COMMIT_DATE = "TAG_COMMIT_DATE",

/**
 * Order refs by their alphanumeric name
 */
  ALPHABETICAL = "ALPHABETICAL"
}
  


/**
 * A ref update rules for a viewer.
 */
export class RefUpdateRule extends $Base<"RefUpdateRule"> {
  constructor() {
    super("RefUpdateRule")
  }

  
      
/**
 * Can this branch be deleted.
 */
      get allowsDeletions(): $Field<"allowsDeletions", boolean>  {
       return this.$_select("allowsDeletions") as any
      }

      
/**
 * Are force pushes allowed on this branch.
 */
      get allowsForcePushes(): $Field<"allowsForcePushes", boolean>  {
       return this.$_select("allowsForcePushes") as any
      }

      
/**
 * Can matching branches be created.
 */
      get blocksCreations(): $Field<"blocksCreations", boolean>  {
       return this.$_select("blocksCreations") as any
      }

      
/**
 * Identifies the protection rule pattern.
 */
      get pattern(): $Field<"pattern", string>  {
       return this.$_select("pattern") as any
      }

      
/**
 * Number of approving reviews required to update matching branches.
 */
      get requiredApprovingReviewCount(): $Field<"requiredApprovingReviewCount", number | null | undefined>  {
       return this.$_select("requiredApprovingReviewCount") as any
      }

      
/**
 * List of required status check contexts that must pass for commits to be accepted to matching branches.
 */
      get requiredStatusCheckContexts(): $Field<"requiredStatusCheckContexts", Readonly<Array<string | null | undefined>> | null | undefined>  {
       return this.$_select("requiredStatusCheckContexts") as any
      }

      
/**
 * Are reviews from code owners required to update matching branches.
 */
      get requiresCodeOwnerReviews(): $Field<"requiresCodeOwnerReviews", boolean>  {
       return this.$_select("requiresCodeOwnerReviews") as any
      }

      
/**
 * Are conversations required to be resolved before merging.
 */
      get requiresConversationResolution(): $Field<"requiresConversationResolution", boolean>  {
       return this.$_select("requiresConversationResolution") as any
      }

      
/**
 * Are merge commits prohibited from being pushed to this branch.
 */
      get requiresLinearHistory(): $Field<"requiresLinearHistory", boolean>  {
       return this.$_select("requiresLinearHistory") as any
      }

      
/**
 * Are commits required to be signed.
 */
      get requiresSignatures(): $Field<"requiresSignatures", boolean>  {
       return this.$_select("requiresSignatures") as any
      }

      
/**
 * Is the viewer allowed to dismiss reviews.
 */
      get viewerAllowedToDismissReviews(): $Field<"viewerAllowedToDismissReviews", boolean>  {
       return this.$_select("viewerAllowedToDismissReviews") as any
      }

      
/**
 * Can the viewer push to the branch
 */
      get viewerCanPush(): $Field<"viewerCanPush", boolean>  {
       return this.$_select("viewerCanPush") as any
      }
}


/**
 * Represents a 'referenced' event on a given `ReferencedSubject`.
 */
export class ReferencedEvent extends $Base<"ReferencedEvent"> {
  constructor() {
    super("ReferencedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the commit associated with the 'referenced' event.
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
/**
 * Identifies the repository associated with the 'referenced' event.
 */
      commitRepository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"commitRepository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("commitRepository", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Reference originated in a different repository.
 */
      get isCrossRepository(): $Field<"isCrossRepository", boolean>  {
       return this.$_select("isCrossRepository") as any
      }

      
/**
 * Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
 */
      get isDirectReference(): $Field<"isDirectReference", boolean>  {
       return this.$_select("isDirectReference") as any
      }

      
/**
 * Object referenced by event.
 */
      subject<Sel extends Selection<ReferencedSubject>>(selectorFn: (s: ReferencedSubject) => [...Sel]):$Field<"subject", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReferencedSubject)
      };
      return this.$_select("subject", options) as any
    }
  
}


/**
 * Any referencable object
 */
export class ReferencedSubject extends $Union<{Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner}, "ReferencedSubject"> {
  constructor() {
    super({Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner})
  }
}


/**
 * Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
 */
export type RegenerateEnterpriseIdentityProviderRecoveryCodesInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string
}
    


/**
 * Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
 */
export class RegenerateEnterpriseIdentityProviderRecoveryCodesPayload extends $Base<"RegenerateEnterpriseIdentityProviderRecoveryCodesPayload"> {
  constructor() {
    super("RegenerateEnterpriseIdentityProviderRecoveryCodesPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The identity provider for the enterprise.
 */
      identityProvider<Sel extends Selection<EnterpriseIdentityProvider>>(selectorFn: (s: EnterpriseIdentityProvider) => [...Sel]):$Field<"identityProvider", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseIdentityProvider)
      };
      return this.$_select("identityProvider", options) as any
    }
  
}


/**
 * Autogenerated input type of RegenerateVerifiableDomainToken
 */
export type RegenerateVerifiableDomainTokenInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of RegenerateVerifiableDomainToken
 */
export class RegenerateVerifiableDomainTokenPayload extends $Base<"RegenerateVerifiableDomainTokenPayload"> {
  constructor() {
    super("RegenerateVerifiableDomainTokenPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The verification token that was generated.
 */
      get verificationToken(): $Field<"verificationToken", string | null | undefined>  {
       return this.$_select("verificationToken") as any
      }
}


/**
 * Autogenerated input type of RejectDeployments
 */
export type RejectDeploymentsInput = {
  clientMutationId?: string | null | undefined,
comment?: string | null | undefined,
environmentIds: Readonly<Array<string>>,
workflowRunId: string
}
    


/**
 * Autogenerated return type of RejectDeployments
 */
export class RejectDeploymentsPayload extends $Base<"RejectDeploymentsPayload"> {
  constructor() {
    super("RejectDeploymentsPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The affected deployments.
 */
      deployments<Sel extends Selection<Deployment>>(selectorFn: (s: Deployment) => [...Sel]):$Field<"deployments", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Deployment)
      };
      return this.$_select("deployments", options) as any
    }
  
}


/**
 * A release contains the content for a release.
 */
export class Release extends $Base<"Release"> {
  constructor() {
    super("Release")
  }

  
      
/**
 * The author of the release
 */
      author<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The description of the release.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * The description of this release rendered to HTML.
 */
      get descriptionHTML(): $Field<"descriptionHTML", string | null | undefined>  {
       return this.$_select("descriptionHTML") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether or not the release is a draft
 */
      get isDraft(): $Field<"isDraft", boolean>  {
       return this.$_select("isDraft") as any
      }

      
/**
 * Whether or not the release is the latest releast
 */
      get isLatest(): $Field<"isLatest", boolean>  {
       return this.$_select("isLatest") as any
      }

      
/**
 * Whether or not the release is a prerelease
 */
      get isPrerelease(): $Field<"isPrerelease", boolean>  {
       return this.$_select("isPrerelease") as any
      }

      
/**
 * A list of users mentioned in the release description
 */
      mentions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserConnection>>(args: Args, selectorFn: (s: UserConnection) => [...Sel]):$Field<"mentions", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
mentions<Sel extends Selection<UserConnection>>(selectorFn: (s: UserConnection) => [...Sel]):$Field<"mentions", GetOutput<Sel> | undefined , GetVariables<Sel>>
mentions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserConnection)
      };
      return this.$_select("mentions", options) as any
    }
  

      
/**
 * The title of the release.
 */
      get name(): $Field<"name", string | null | undefined>  {
       return this.$_select("name") as any
      }

      
/**
 * Identifies the date and time when the release was created.
 */
      get publishedAt(): $Field<"publishedAt", string | null | undefined>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * A list of reactions grouped by content left on the subject.
 */
      reactionGroups<Sel extends Selection<ReactionGroup>>(selectorFn: (s: ReactionGroup) => [...Sel]):$Field<"reactionGroups", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactionGroup)
      };
      return this.$_select("reactionGroups", options) as any
    }
  

      
/**
 * A list of Reactions left on the Issue.
 */
      reactions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
content?: ReactionContent | null | undefined
orderBy?: ReactionOrder | null | undefined,
      }>,Sel extends Selection<ReactionConnection>>(args: Args, selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel, Args>>
reactions<Sel extends Selection<ReactionConnection>>(selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel>>
reactions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
content: "ReactionContent",
orderBy: "ReactionOrder"
            },
        args,

        selection: selectorFn(new ReactionConnection)
      };
      return this.$_select("reactions", options) as any
    }
  

      
/**
 * List of releases assets which are dependent on this release.
 */
      releaseAssets<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
name?: string | null | undefined,
      }>,Sel extends Selection<ReleaseAssetConnection>>(args: Args, selectorFn: (s: ReleaseAssetConnection) => [...Sel]):$Field<"releaseAssets", GetOutput<Sel> , GetVariables<Sel, Args>>
releaseAssets<Sel extends Selection<ReleaseAssetConnection>>(selectorFn: (s: ReleaseAssetConnection) => [...Sel]):$Field<"releaseAssets", GetOutput<Sel> , GetVariables<Sel>>
releaseAssets(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
name: "String"
            },
        args,

        selection: selectorFn(new ReleaseAssetConnection)
      };
      return this.$_select("releaseAssets", options) as any
    }
  

      
/**
 * The repository that the release belongs to.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The HTTP path for this issue
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * A description of the release, rendered to HTML without any links in it.
 */
      shortDescriptionHTML<Args extends VariabledInput<{
        limit?: number | null | undefined,
      }>>(args: Args):$Field<"shortDescriptionHTML", string | null | undefined , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              limit: "Int"
            },
        args,

        
      };
      return this.$_select("shortDescriptionHTML", options) as any
    }
  

      
/**
 * The Git tag the release points to
 */
      tag<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"tag", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("tag", options) as any
    }
  

      
/**
 * The tag commit for this release.
 */
      tagCommit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"tagCommit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("tagCommit", options) as any
    }
  

      
/**
 * The name of the release's Git tag
 */
      get tagName(): $Field<"tagName", string>  {
       return this.$_select("tagName") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this issue
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * Can user react to this subject
 */
      get viewerCanReact(): $Field<"viewerCanReact", boolean>  {
       return this.$_select("viewerCanReact") as any
      }
}


/**
 * A release asset contains the content for a release asset.
 */
export class ReleaseAsset extends $Base<"ReleaseAsset"> {
  constructor() {
    super("ReleaseAsset")
  }

  
      
/**
 * The asset's content-type
 */
      get contentType(): $Field<"contentType", string>  {
       return this.$_select("contentType") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The number of times this asset was downloaded
 */
      get downloadCount(): $Field<"downloadCount", number>  {
       return this.$_select("downloadCount") as any
      }

      
/**
 * Identifies the URL where you can download the release asset via the browser.
 */
      get downloadUrl(): $Field<"downloadUrl", string>  {
       return this.$_select("downloadUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the title of the release asset.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * Release that the asset is associated with
 */
      release<Sel extends Selection<Release>>(selectorFn: (s: Release) => [...Sel]):$Field<"release", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Release)
      };
      return this.$_select("release", options) as any
    }
  

      
/**
 * The size (in bytes) of the asset
 */
      get size(): $Field<"size", number>  {
       return this.$_select("size") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The user that performed the upload
 */
      uploadedBy<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"uploadedBy", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("uploadedBy", options) as any
    }
  

      
/**
 * Identifies the URL of the release asset.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * The connection type for ReleaseAsset.
 */
export class ReleaseAssetConnection extends $Base<"ReleaseAssetConnection"> {
  constructor() {
    super("ReleaseAssetConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ReleaseAssetEdge>>(selectorFn: (s: ReleaseAssetEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReleaseAssetEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ReleaseAsset>>(selectorFn: (s: ReleaseAsset) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReleaseAsset)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ReleaseAssetEdge extends $Base<"ReleaseAssetEdge"> {
  constructor() {
    super("ReleaseAssetEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ReleaseAsset>>(selectorFn: (s: ReleaseAsset) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReleaseAsset)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The connection type for Release.
 */
export class ReleaseConnection extends $Base<"ReleaseConnection"> {
  constructor() {
    super("ReleaseConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ReleaseEdge>>(selectorFn: (s: ReleaseEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReleaseEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Release>>(selectorFn: (s: Release) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Release)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ReleaseEdge extends $Base<"ReleaseEdge"> {
  constructor() {
    super("ReleaseEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Release>>(selectorFn: (s: Release) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Release)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ways in which lists of releases can be ordered upon return.
 */
export type ReleaseOrder = {
  direction: OrderDirection,
field: ReleaseOrderField
}
    

  
/**
 * Properties by which release connections can be ordered.
 */
export enum ReleaseOrderField {
  
/**
 * Order releases by creation time
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order releases alphabetically by name
 */
  NAME = "NAME"
}
  


/**
 * Autogenerated input type of RemoveAssigneesFromAssignable
 */
export type RemoveAssigneesFromAssignableInput = {
  assignableId: string,
assigneeIds: Readonly<Array<string>>,
clientMutationId?: string | null | undefined
}
    


/**
 * Autogenerated return type of RemoveAssigneesFromAssignable
 */
export class RemoveAssigneesFromAssignablePayload extends $Base<"RemoveAssigneesFromAssignablePayload"> {
  constructor() {
    super("RemoveAssigneesFromAssignablePayload")
  }

  
      
/**
 * The item that was unassigned.
 */
      assignable<Sel extends Selection<Assignable>>(selectorFn: (s: Assignable) => [...Sel]):$Field<"assignable", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Assignable)
      };
      return this.$_select("assignable", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of RemoveEnterpriseAdmin
 */
export type RemoveEnterpriseAdminInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
login: string
}
    


/**
 * Autogenerated return type of RemoveEnterpriseAdmin
 */
export class RemoveEnterpriseAdminPayload extends $Base<"RemoveEnterpriseAdminPayload"> {
  constructor() {
    super("RemoveEnterpriseAdminPayload")
  }

  
      
/**
 * The user who was removed as an administrator.
 */
      admin<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"admin", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("admin", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated enterprise.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of removing an administrator.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }

      
/**
 * The viewer performing the mutation.
 */
      viewer<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"viewer", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("viewer", options) as any
    }
  
}


/**
 * Autogenerated input type of RemoveEnterpriseIdentityProvider
 */
export type RemoveEnterpriseIdentityProviderInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string
}
    


/**
 * Autogenerated return type of RemoveEnterpriseIdentityProvider
 */
export class RemoveEnterpriseIdentityProviderPayload extends $Base<"RemoveEnterpriseIdentityProviderPayload"> {
  constructor() {
    super("RemoveEnterpriseIdentityProviderPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The identity provider that was removed from the enterprise.
 */
      identityProvider<Sel extends Selection<EnterpriseIdentityProvider>>(selectorFn: (s: EnterpriseIdentityProvider) => [...Sel]):$Field<"identityProvider", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseIdentityProvider)
      };
      return this.$_select("identityProvider", options) as any
    }
  
}


/**
 * Autogenerated input type of RemoveEnterpriseOrganization
 */
export type RemoveEnterpriseOrganizationInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
organizationId: string
}
    


/**
 * Autogenerated return type of RemoveEnterpriseOrganization
 */
export class RemoveEnterpriseOrganizationPayload extends $Base<"RemoveEnterpriseOrganizationPayload"> {
  constructor() {
    super("RemoveEnterpriseOrganizationPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated enterprise.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * The organization that was removed from the enterprise.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The viewer performing the mutation.
 */
      viewer<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"viewer", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("viewer", options) as any
    }
  
}


/**
 * Autogenerated input type of RemoveEnterpriseSupportEntitlement
 */
export type RemoveEnterpriseSupportEntitlementInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
login: string
}
    


/**
 * Autogenerated return type of RemoveEnterpriseSupportEntitlement
 */
export class RemoveEnterpriseSupportEntitlementPayload extends $Base<"RemoveEnterpriseSupportEntitlementPayload"> {
  constructor() {
    super("RemoveEnterpriseSupportEntitlementPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * A message confirming the result of removing the support entitlement.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of RemoveLabelsFromLabelable
 */
export type RemoveLabelsFromLabelableInput = {
  clientMutationId?: string | null | undefined,
labelIds: Readonly<Array<string>>,
labelableId: string
}
    


/**
 * Autogenerated return type of RemoveLabelsFromLabelable
 */
export class RemoveLabelsFromLabelablePayload extends $Base<"RemoveLabelsFromLabelablePayload"> {
  constructor() {
    super("RemoveLabelsFromLabelablePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The Labelable the labels were removed from.
 */
      labelable<Sel extends Selection<Labelable>>(selectorFn: (s: Labelable) => [...Sel]):$Field<"labelable", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Labelable)
      };
      return this.$_select("labelable", options) as any
    }
  
}


/**
 * Autogenerated input type of RemoveOutsideCollaborator
 */
export type RemoveOutsideCollaboratorInput = {
  clientMutationId?: string | null | undefined,
organizationId: string,
userId: string
}
    


/**
 * Autogenerated return type of RemoveOutsideCollaborator
 */
export class RemoveOutsideCollaboratorPayload extends $Base<"RemoveOutsideCollaboratorPayload"> {
  constructor() {
    super("RemoveOutsideCollaboratorPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The user that was removed as an outside collaborator.
 */
      removedUser<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"removedUser", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("removedUser", options) as any
    }
  
}


/**
 * Autogenerated input type of RemoveReaction
 */
export type RemoveReactionInput = {
  clientMutationId?: string | null | undefined,
content: ReactionContent,
subjectId: string
}
    


/**
 * Autogenerated return type of RemoveReaction
 */
export class RemoveReactionPayload extends $Base<"RemoveReactionPayload"> {
  constructor() {
    super("RemoveReactionPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The reaction object.
 */
      reaction<Sel extends Selection<Reaction>>(selectorFn: (s: Reaction) => [...Sel]):$Field<"reaction", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Reaction)
      };
      return this.$_select("reaction", options) as any
    }
  

      
/**
 * The reactable subject.
 */
      subject<Sel extends Selection<Reactable>>(selectorFn: (s: Reactable) => [...Sel]):$Field<"subject", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Reactable)
      };
      return this.$_select("subject", options) as any
    }
  
}


/**
 * Autogenerated input type of RemoveStar
 */
export type RemoveStarInput = {
  clientMutationId?: string | null | undefined,
starrableId: string
}
    


/**
 * Autogenerated return type of RemoveStar
 */
export class RemoveStarPayload extends $Base<"RemoveStarPayload"> {
  constructor() {
    super("RemoveStarPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The starrable.
 */
      starrable<Sel extends Selection<Starrable>>(selectorFn: (s: Starrable) => [...Sel]):$Field<"starrable", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Starrable)
      };
      return this.$_select("starrable", options) as any
    }
  
}


/**
 * Autogenerated input type of RemoveUpvote
 */
export type RemoveUpvoteInput = {
  clientMutationId?: string | null | undefined,
subjectId: string
}
    


/**
 * Autogenerated return type of RemoveUpvote
 */
export class RemoveUpvotePayload extends $Base<"RemoveUpvotePayload"> {
  constructor() {
    super("RemoveUpvotePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The votable subject.
 */
      subject<Sel extends Selection<Votable>>(selectorFn: (s: Votable) => [...Sel]):$Field<"subject", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Votable)
      };
      return this.$_select("subject", options) as any
    }
  
}


/**
 * Represents a 'removed_from_project' event on a given issue or pull request.
 */
export class RemovedFromProjectEvent extends $Base<"RemovedFromProjectEvent"> {
  constructor() {
    super("RemovedFromProjectEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }
}


/**
 * Represents a 'renamed' event on a given issue or pull request
 */
export class RenamedTitleEvent extends $Base<"RenamedTitleEvent"> {
  constructor() {
    super("RenamedTitleEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the current title of the issue or pull request.
 */
      get currentTitle(): $Field<"currentTitle", string>  {
       return this.$_select("currentTitle") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the previous title of the issue or pull request.
 */
      get previousTitle(): $Field<"previousTitle", string>  {
       return this.$_select("previousTitle") as any
      }

      
/**
 * Subject that was renamed.
 */
      subject<Sel extends Selection<RenamedTitleSubject>>(selectorFn: (s: RenamedTitleSubject) => [...Sel]):$Field<"subject", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RenamedTitleSubject)
      };
      return this.$_select("subject", options) as any
    }
  
}


/**
 * An object which has a renamable title
 */
export class RenamedTitleSubject extends $Union<{Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner}, "RenamedTitleSubject"> {
  constructor() {
    super({Issue: Issue,PullRequest: PullRequest,Node: Node,Assignable: Assignable,Closable: Closable,Comment: Comment,Updatable: Updatable,UpdatableComment: UpdatableComment,Labelable: Labelable,Lockable: Lockable,Reactable: Reactable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner})
  }
}


/**
 * Autogenerated input type of ReopenIssue
 */
export type ReopenIssueInput = {
  clientMutationId?: string | null | undefined,
issueId: string
}
    


/**
 * Autogenerated return type of ReopenIssue
 */
export class ReopenIssuePayload extends $Base<"ReopenIssuePayload"> {
  constructor() {
    super("ReopenIssuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The issue that was opened.
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  
}


/**
 * Autogenerated input type of ReopenPullRequest
 */
export type ReopenPullRequestInput = {
  clientMutationId?: string | null | undefined,
pullRequestId: string
}
    


/**
 * Autogenerated return type of ReopenPullRequest
 */
export class ReopenPullRequestPayload extends $Base<"ReopenPullRequestPayload"> {
  constructor() {
    super("ReopenPullRequestPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The pull request that was reopened.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Represents a 'reopened' event on any `Closable`.
 */
export class ReopenedEvent extends $Base<"ReopenedEvent"> {
  constructor() {
    super("ReopenedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Object that was reopened.
 */
      closable<Sel extends Selection<Closable>>(selectorFn: (s: Closable) => [...Sel]):$Field<"closable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Closable)
      };
      return this.$_select("closable", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The reason the issue state was changed to open.
 */
      get stateReason(): $Field<"stateReason", IssueStateReason | null | undefined>  {
       return this.$_select("stateReason") as any
      }
}


/**
 * Audit log entry for a repo.access event.
 */
export class RepoAccessAuditEntry extends $Base<"RepoAccessAuditEntry"> {
  constructor() {
    super("RepoAccessAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }

      
/**
 * The visibility of the repository
 */
      get visibility(): $Field<"visibility", RepoAccessAuditEntryVisibility | null | undefined>  {
       return this.$_select("visibility") as any
      }
}

  
/**
 * The privacy of a repository
 */
export enum RepoAccessAuditEntryVisibility {
  
/**
 * The repository is visible only to users in the same business.
 */
  INTERNAL = "INTERNAL",

/**
 * The repository is visible only to those with explicit access.
 */
  PRIVATE = "PRIVATE",

/**
 * The repository is visible to everyone.
 */
  PUBLIC = "PUBLIC"
}
  


/**
 * Audit log entry for a repo.add_member event.
 */
export class RepoAddMemberAuditEntry extends $Base<"RepoAddMemberAuditEntry"> {
  constructor() {
    super("RepoAddMemberAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }

      
/**
 * The visibility of the repository
 */
      get visibility(): $Field<"visibility", RepoAddMemberAuditEntryVisibility | null | undefined>  {
       return this.$_select("visibility") as any
      }
}

  
/**
 * The privacy of a repository
 */
export enum RepoAddMemberAuditEntryVisibility {
  
/**
 * The repository is visible only to users in the same business.
 */
  INTERNAL = "INTERNAL",

/**
 * The repository is visible only to those with explicit access.
 */
  PRIVATE = "PRIVATE",

/**
 * The repository is visible to everyone.
 */
  PUBLIC = "PUBLIC"
}
  


/**
 * Audit log entry for a repo.add_topic event.
 */
export class RepoAddTopicAuditEntry extends $Base<"RepoAddTopicAuditEntry"> {
  constructor() {
    super("RepoAddTopicAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The name of the topic added to the repository
 */
      topic<Sel extends Selection<Topic>>(selectorFn: (s: Topic) => [...Sel]):$Field<"topic", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Topic)
      };
      return this.$_select("topic", options) as any
    }
  

      
/**
 * The name of the topic added to the repository
 */
      get topicName(): $Field<"topicName", string | null | undefined>  {
       return this.$_select("topicName") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a repo.archived event.
 */
export class RepoArchivedAuditEntry extends $Base<"RepoArchivedAuditEntry"> {
  constructor() {
    super("RepoArchivedAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }

      
/**
 * The visibility of the repository
 */
      get visibility(): $Field<"visibility", RepoArchivedAuditEntryVisibility | null | undefined>  {
       return this.$_select("visibility") as any
      }
}

  
/**
 * The privacy of a repository
 */
export enum RepoArchivedAuditEntryVisibility {
  
/**
 * The repository is visible only to users in the same business.
 */
  INTERNAL = "INTERNAL",

/**
 * The repository is visible only to those with explicit access.
 */
  PRIVATE = "PRIVATE",

/**
 * The repository is visible to everyone.
 */
  PUBLIC = "PUBLIC"
}
  


/**
 * Audit log entry for a repo.change_merge_setting event.
 */
export class RepoChangeMergeSettingAuditEntry extends $Base<"RepoChangeMergeSettingAuditEntry"> {
  constructor() {
    super("RepoChangeMergeSettingAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether the change was to enable (true) or disable (false) the merge type
 */
      get isEnabled(): $Field<"isEnabled", boolean | null | undefined>  {
       return this.$_select("isEnabled") as any
      }

      
/**
 * The merge method affected by the change
 */
      get mergeType(): $Field<"mergeType", RepoChangeMergeSettingAuditEntryMergeType | null | undefined>  {
       return this.$_select("mergeType") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}

  
/**
 * The merge options available for pull requests to this repository.
 */
export enum RepoChangeMergeSettingAuditEntryMergeType {
  
/**
 * The pull request is added to the base branch in a merge commit.
 */
  MERGE = "MERGE",

/**
 * Commits from the pull request are added onto the base branch individually without a merge commit.
 */
  REBASE = "REBASE",

/**
 * The pull request's commits are squashed into a single commit before they are merged to the base branch.
 */
  SQUASH = "SQUASH"
}
  


/**
 * Audit log entry for a repo.config.disable_anonymous_git_access event.
 */
export class RepoConfigDisableAnonymousGitAccessAuditEntry extends $Base<"RepoConfigDisableAnonymousGitAccessAuditEntry"> {
  constructor() {
    super("RepoConfigDisableAnonymousGitAccessAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a repo.config.disable_collaborators_only event.
 */
export class RepoConfigDisableCollaboratorsOnlyAuditEntry extends $Base<"RepoConfigDisableCollaboratorsOnlyAuditEntry"> {
  constructor() {
    super("RepoConfigDisableCollaboratorsOnlyAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a repo.config.disable_contributors_only event.
 */
export class RepoConfigDisableContributorsOnlyAuditEntry extends $Base<"RepoConfigDisableContributorsOnlyAuditEntry"> {
  constructor() {
    super("RepoConfigDisableContributorsOnlyAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
 */
export class RepoConfigDisableSockpuppetDisallowedAuditEntry extends $Base<"RepoConfigDisableSockpuppetDisallowedAuditEntry"> {
  constructor() {
    super("RepoConfigDisableSockpuppetDisallowedAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a repo.config.enable_anonymous_git_access event.
 */
export class RepoConfigEnableAnonymousGitAccessAuditEntry extends $Base<"RepoConfigEnableAnonymousGitAccessAuditEntry"> {
  constructor() {
    super("RepoConfigEnableAnonymousGitAccessAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a repo.config.enable_collaborators_only event.
 */
export class RepoConfigEnableCollaboratorsOnlyAuditEntry extends $Base<"RepoConfigEnableCollaboratorsOnlyAuditEntry"> {
  constructor() {
    super("RepoConfigEnableCollaboratorsOnlyAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a repo.config.enable_contributors_only event.
 */
export class RepoConfigEnableContributorsOnlyAuditEntry extends $Base<"RepoConfigEnableContributorsOnlyAuditEntry"> {
  constructor() {
    super("RepoConfigEnableContributorsOnlyAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
 */
export class RepoConfigEnableSockpuppetDisallowedAuditEntry extends $Base<"RepoConfigEnableSockpuppetDisallowedAuditEntry"> {
  constructor() {
    super("RepoConfigEnableSockpuppetDisallowedAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a repo.config.lock_anonymous_git_access event.
 */
export class RepoConfigLockAnonymousGitAccessAuditEntry extends $Base<"RepoConfigLockAnonymousGitAccessAuditEntry"> {
  constructor() {
    super("RepoConfigLockAnonymousGitAccessAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a repo.config.unlock_anonymous_git_access event.
 */
export class RepoConfigUnlockAnonymousGitAccessAuditEntry extends $Base<"RepoConfigUnlockAnonymousGitAccessAuditEntry"> {
  constructor() {
    super("RepoConfigUnlockAnonymousGitAccessAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a repo.create event.
 */
export class RepoCreateAuditEntry extends $Base<"RepoCreateAuditEntry"> {
  constructor() {
    super("RepoCreateAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The name of the parent repository for this forked repository.
 */
      get forkParentName(): $Field<"forkParentName", string | null | undefined>  {
       return this.$_select("forkParentName") as any
      }

      
/**
 * The name of the root repository for this network.
 */
      get forkSourceName(): $Field<"forkSourceName", string | null | undefined>  {
       return this.$_select("forkSourceName") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }

      
/**
 * The visibility of the repository
 */
      get visibility(): $Field<"visibility", RepoCreateAuditEntryVisibility | null | undefined>  {
       return this.$_select("visibility") as any
      }
}

  
/**
 * The privacy of a repository
 */
export enum RepoCreateAuditEntryVisibility {
  
/**
 * The repository is visible only to users in the same business.
 */
  INTERNAL = "INTERNAL",

/**
 * The repository is visible only to those with explicit access.
 */
  PRIVATE = "PRIVATE",

/**
 * The repository is visible to everyone.
 */
  PUBLIC = "PUBLIC"
}
  


/**
 * Audit log entry for a repo.destroy event.
 */
export class RepoDestroyAuditEntry extends $Base<"RepoDestroyAuditEntry"> {
  constructor() {
    super("RepoDestroyAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }

      
/**
 * The visibility of the repository
 */
      get visibility(): $Field<"visibility", RepoDestroyAuditEntryVisibility | null | undefined>  {
       return this.$_select("visibility") as any
      }
}

  
/**
 * The privacy of a repository
 */
export enum RepoDestroyAuditEntryVisibility {
  
/**
 * The repository is visible only to users in the same business.
 */
  INTERNAL = "INTERNAL",

/**
 * The repository is visible only to those with explicit access.
 */
  PRIVATE = "PRIVATE",

/**
 * The repository is visible to everyone.
 */
  PUBLIC = "PUBLIC"
}
  


/**
 * Audit log entry for a repo.remove_member event.
 */
export class RepoRemoveMemberAuditEntry extends $Base<"RepoRemoveMemberAuditEntry"> {
  constructor() {
    super("RepoRemoveMemberAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }

      
/**
 * The visibility of the repository
 */
      get visibility(): $Field<"visibility", RepoRemoveMemberAuditEntryVisibility | null | undefined>  {
       return this.$_select("visibility") as any
      }
}

  
/**
 * The privacy of a repository
 */
export enum RepoRemoveMemberAuditEntryVisibility {
  
/**
 * The repository is visible only to users in the same business.
 */
  INTERNAL = "INTERNAL",

/**
 * The repository is visible only to those with explicit access.
 */
  PRIVATE = "PRIVATE",

/**
 * The repository is visible to everyone.
 */
  PUBLIC = "PUBLIC"
}
  


/**
 * Audit log entry for a repo.remove_topic event.
 */
export class RepoRemoveTopicAuditEntry extends $Base<"RepoRemoveTopicAuditEntry"> {
  constructor() {
    super("RepoRemoveTopicAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The name of the topic added to the repository
 */
      topic<Sel extends Selection<Topic>>(selectorFn: (s: Topic) => [...Sel]):$Field<"topic", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Topic)
      };
      return this.$_select("topic", options) as any
    }
  

      
/**
 * The name of the topic added to the repository
 */
      get topicName(): $Field<"topicName", string | null | undefined>  {
       return this.$_select("topicName") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}

  
/**
 * The reasons a piece of content can be reported or minimized.
 */
export enum ReportedContentClassifiers {
  
/**
 * A spammy piece of content
 */
  SPAM = "SPAM",

/**
 * An abusive or harassing piece of content
 */
  ABUSE = "ABUSE",

/**
 * An irrelevant piece of content
 */
  OFF_TOPIC = "OFF_TOPIC",

/**
 * An outdated piece of content
 */
  OUTDATED = "OUTDATED",

/**
 * A duplicated piece of content
 */
  DUPLICATE = "DUPLICATE",

/**
 * The content has been resolved
 */
  RESOLVED = "RESOLVED"
}
  


/**
 * A repository contains the content for a project.
 */
export class Repository extends $Base<"Repository"> {
  constructor() {
    super("Repository")
  }

  
      
/**
 * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
 */
      get allowUpdateBranch(): $Field<"allowUpdateBranch", boolean>  {
       return this.$_select("allowUpdateBranch") as any
      }

      
/**
 * A list of users that can be assigned to issues in this repository.
 */
      assignableUsers<Args extends VariabledInput<{
        query?: string | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserConnection>>(args: Args, selectorFn: (s: UserConnection) => [...Sel]):$Field<"assignableUsers", GetOutput<Sel> , GetVariables<Sel, Args>>
assignableUsers<Sel extends Selection<UserConnection>>(selectorFn: (s: UserConnection) => [...Sel]):$Field<"assignableUsers", GetOutput<Sel> , GetVariables<Sel>>
assignableUsers(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserConnection)
      };
      return this.$_select("assignableUsers", options) as any
    }
  

      
/**
 * Whether or not Auto-merge can be enabled on pull requests in this repository.
 */
      get autoMergeAllowed(): $Field<"autoMergeAllowed", boolean>  {
       return this.$_select("autoMergeAllowed") as any
      }

      
/**
 * A list of branch protection rules for this repository.
 */
      branchProtectionRules<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<BranchProtectionRuleConnection>>(args: Args, selectorFn: (s: BranchProtectionRuleConnection) => [...Sel]):$Field<"branchProtectionRules", GetOutput<Sel> , GetVariables<Sel, Args>>
branchProtectionRules<Sel extends Selection<BranchProtectionRuleConnection>>(selectorFn: (s: BranchProtectionRuleConnection) => [...Sel]):$Field<"branchProtectionRules", GetOutput<Sel> , GetVariables<Sel>>
branchProtectionRules(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new BranchProtectionRuleConnection)
      };
      return this.$_select("branchProtectionRules", options) as any
    }
  

      
/**
 * Returns the code of conduct for this repository
 */
      codeOfConduct<Sel extends Selection<CodeOfConduct>>(selectorFn: (s: CodeOfConduct) => [...Sel]):$Field<"codeOfConduct", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CodeOfConduct)
      };
      return this.$_select("codeOfConduct", options) as any
    }
  

      
/**
 * Information extracted from the repository's `CODEOWNERS` file.
 */
      codeowners<Args extends VariabledInput<{
        refName?: string | null | undefined,
      }>,Sel extends Selection<RepositoryCodeowners>>(args: Args, selectorFn: (s: RepositoryCodeowners) => [...Sel]):$Field<"codeowners", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
codeowners<Sel extends Selection<RepositoryCodeowners>>(selectorFn: (s: RepositoryCodeowners) => [...Sel]):$Field<"codeowners", GetOutput<Sel> | undefined , GetVariables<Sel>>
codeowners(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              refName: "String"
            },
        args,

        selection: selectorFn(new RepositoryCodeowners)
      };
      return this.$_select("codeowners", options) as any
    }
  

      
/**
 * A list of collaborators associated with the repository.
 */
      collaborators<Args extends VariabledInput<{
        affiliation?: CollaboratorAffiliation | null | undefined
query?: string | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<RepositoryCollaboratorConnection>>(args: Args, selectorFn: (s: RepositoryCollaboratorConnection) => [...Sel]):$Field<"collaborators", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
collaborators<Sel extends Selection<RepositoryCollaboratorConnection>>(selectorFn: (s: RepositoryCollaboratorConnection) => [...Sel]):$Field<"collaborators", GetOutput<Sel> | undefined , GetVariables<Sel>>
collaborators(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              affiliation: "CollaboratorAffiliation",
query: "String",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new RepositoryCollaboratorConnection)
      };
      return this.$_select("collaborators", options) as any
    }
  

      
/**
 * A list of commit comments associated with the repository.
 */
      commitComments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<CommitCommentConnection>>(args: Args, selectorFn: (s: CommitCommentConnection) => [...Sel]):$Field<"commitComments", GetOutput<Sel> , GetVariables<Sel, Args>>
commitComments<Sel extends Selection<CommitCommentConnection>>(selectorFn: (s: CommitCommentConnection) => [...Sel]):$Field<"commitComments", GetOutput<Sel> , GetVariables<Sel>>
commitComments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new CommitCommentConnection)
      };
      return this.$_select("commitComments", options) as any
    }
  

      
/**
 * Returns a list of contact links associated to the repository
 */
      contactLinks<Sel extends Selection<RepositoryContactLink>>(selectorFn: (s: RepositoryContactLink) => [...Sel]):$Field<"contactLinks", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryContactLink)
      };
      return this.$_select("contactLinks", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The Ref associated with the repository's default branch.
 */
      defaultBranchRef<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"defaultBranchRef", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("defaultBranchRef", options) as any
    }
  

      
/**
 * Whether or not branches are automatically deleted when merged in this repository.
 */
      get deleteBranchOnMerge(): $Field<"deleteBranchOnMerge", boolean>  {
       return this.$_select("deleteBranchOnMerge") as any
      }

      
/**
 * A list of deploy keys that are on this repository.
 */
      deployKeys<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<DeployKeyConnection>>(args: Args, selectorFn: (s: DeployKeyConnection) => [...Sel]):$Field<"deployKeys", GetOutput<Sel> , GetVariables<Sel, Args>>
deployKeys<Sel extends Selection<DeployKeyConnection>>(selectorFn: (s: DeployKeyConnection) => [...Sel]):$Field<"deployKeys", GetOutput<Sel> , GetVariables<Sel>>
deployKeys(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new DeployKeyConnection)
      };
      return this.$_select("deployKeys", options) as any
    }
  

      
/**
 * Deployments associated with the repository
 */
      deployments<Args extends VariabledInput<{
        environments?: Readonly<Array<string>> | null | undefined
orderBy?: DeploymentOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<DeploymentConnection>>(args: Args, selectorFn: (s: DeploymentConnection) => [...Sel]):$Field<"deployments", GetOutput<Sel> , GetVariables<Sel, Args>>
deployments<Sel extends Selection<DeploymentConnection>>(selectorFn: (s: DeploymentConnection) => [...Sel]):$Field<"deployments", GetOutput<Sel> , GetVariables<Sel>>
deployments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              environments: "[String!]",
orderBy: "DeploymentOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new DeploymentConnection)
      };
      return this.$_select("deployments", options) as any
    }
  

      
/**
 * The description of the repository.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * The description of the repository rendered to HTML.
 */
      get descriptionHTML(): $Field<"descriptionHTML", string>  {
       return this.$_select("descriptionHTML") as any
      }

      
/**
 * Returns a single discussion from the current repository by number.
 */
      discussion<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<Discussion>>(args: Args, selectorFn: (s: Discussion) => [...Sel]):$Field<"discussion", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new Discussion)
      };
      return this.$_select("discussion", options) as any
    }
  

      
/**
 * A list of discussion categories that are available in the repository.
 */
      discussionCategories<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
filterByAssignable?: boolean | null | undefined,
      }>,Sel extends Selection<DiscussionCategoryConnection>>(args: Args, selectorFn: (s: DiscussionCategoryConnection) => [...Sel]):$Field<"discussionCategories", GetOutput<Sel> , GetVariables<Sel, Args>>
discussionCategories<Sel extends Selection<DiscussionCategoryConnection>>(selectorFn: (s: DiscussionCategoryConnection) => [...Sel]):$Field<"discussionCategories", GetOutput<Sel> , GetVariables<Sel>>
discussionCategories(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
filterByAssignable: "Boolean"
            },
        args,

        selection: selectorFn(new DiscussionCategoryConnection)
      };
      return this.$_select("discussionCategories", options) as any
    }
  

      
/**
 * A discussion category by slug.
 */
      discussionCategory<Args extends VariabledInput<{
        slug: string,
      }>,Sel extends Selection<DiscussionCategory>>(args: Args, selectorFn: (s: DiscussionCategory) => [...Sel]):$Field<"discussionCategory", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              slug: "String!"
            },
        args,

        selection: selectorFn(new DiscussionCategory)
      };
      return this.$_select("discussionCategory", options) as any
    }
  

      
/**
 * A list of discussions that have been opened in the repository.
 */
      discussions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
categoryId?: string | null | undefined
orderBy?: DiscussionOrder | null | undefined,
      }>,Sel extends Selection<DiscussionConnection>>(args: Args, selectorFn: (s: DiscussionConnection) => [...Sel]):$Field<"discussions", GetOutput<Sel> , GetVariables<Sel, Args>>
discussions<Sel extends Selection<DiscussionConnection>>(selectorFn: (s: DiscussionConnection) => [...Sel]):$Field<"discussions", GetOutput<Sel> , GetVariables<Sel>>
discussions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
categoryId: "ID",
orderBy: "DiscussionOrder"
            },
        args,

        selection: selectorFn(new DiscussionConnection)
      };
      return this.$_select("discussions", options) as any
    }
  

      
/**
 * The number of kilobytes this repository occupies on disk.
 */
      get diskUsage(): $Field<"diskUsage", number | null | undefined>  {
       return this.$_select("diskUsage") as any
      }

      
/**
 * Returns a single active environment from the current repository by name.
 */
      environment<Args extends VariabledInput<{
        name: string,
      }>,Sel extends Selection<Environment>>(args: Args, selectorFn: (s: Environment) => [...Sel]):$Field<"environment", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              name: "String!"
            },
        args,

        selection: selectorFn(new Environment)
      };
      return this.$_select("environment", options) as any
    }
  

      
/**
 * A list of environments that are in this repository.
 */
      environments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<EnvironmentConnection>>(args: Args, selectorFn: (s: EnvironmentConnection) => [...Sel]):$Field<"environments", GetOutput<Sel> , GetVariables<Sel, Args>>
environments<Sel extends Selection<EnvironmentConnection>>(selectorFn: (s: EnvironmentConnection) => [...Sel]):$Field<"environments", GetOutput<Sel> , GetVariables<Sel>>
environments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new EnvironmentConnection)
      };
      return this.$_select("environments", options) as any
    }
  

      
/**
 * Returns how many forks there are of this repository in the whole network.
 */
      get forkCount(): $Field<"forkCount", number>  {
       return this.$_select("forkCount") as any
      }

      
/**
 * Whether this repository allows forks.
 */
      get forkingAllowed(): $Field<"forkingAllowed", boolean>  {
       return this.$_select("forkingAllowed") as any
      }

      
/**
 * A list of direct forked repositories.
 */
      forks<Args extends VariabledInput<{
        privacy?: RepositoryPrivacy | null | undefined
orderBy?: RepositoryOrder | null | undefined
affiliations?: Readonly<Array<RepositoryAffiliation | null | undefined>> | null | undefined
ownerAffiliations?: Readonly<Array<RepositoryAffiliation | null | undefined>> | null | undefined
isLocked?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<RepositoryConnection>>(args: Args, selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"forks", GetOutput<Sel> , GetVariables<Sel, Args>>
forks<Sel extends Selection<RepositoryConnection>>(selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"forks", GetOutput<Sel> , GetVariables<Sel>>
forks(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              privacy: "RepositoryPrivacy",
orderBy: "RepositoryOrder",
affiliations: "[RepositoryAffiliation]",
ownerAffiliations: "[RepositoryAffiliation]",
isLocked: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new RepositoryConnection)
      };
      return this.$_select("forks", options) as any
    }
  

      
/**
 * The funding links for this repository
 */
      fundingLinks<Sel extends Selection<FundingLink>>(selectorFn: (s: FundingLink) => [...Sel]):$Field<"fundingLinks", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new FundingLink)
      };
      return this.$_select("fundingLinks", options) as any
    }
  

      
/**
 * Indicates if the repository has issues feature enabled.
 */
      get hasIssuesEnabled(): $Field<"hasIssuesEnabled", boolean>  {
       return this.$_select("hasIssuesEnabled") as any
      }

      
/**
 * Indicates if the repository has the Projects feature enabled.
 */
      get hasProjectsEnabled(): $Field<"hasProjectsEnabled", boolean>  {
       return this.$_select("hasProjectsEnabled") as any
      }

      
/**
 * Indicates if the repository has wiki feature enabled.
 */
      get hasWikiEnabled(): $Field<"hasWikiEnabled", boolean>  {
       return this.$_select("hasWikiEnabled") as any
      }

      
/**
 * The repository's URL.
 */
      get homepageUrl(): $Field<"homepageUrl", string | null | undefined>  {
       return this.$_select("homepageUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The interaction ability settings for this repository.
 */
      interactionAbility<Sel extends Selection<RepositoryInteractionAbility>>(selectorFn: (s: RepositoryInteractionAbility) => [...Sel]):$Field<"interactionAbility", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryInteractionAbility)
      };
      return this.$_select("interactionAbility", options) as any
    }
  

      
/**
 * Indicates if the repository is unmaintained.
 */
      get isArchived(): $Field<"isArchived", boolean>  {
       return this.$_select("isArchived") as any
      }

      
/**
 * Returns true if blank issue creation is allowed
 */
      get isBlankIssuesEnabled(): $Field<"isBlankIssuesEnabled", boolean>  {
       return this.$_select("isBlankIssuesEnabled") as any
      }

      
/**
 * Returns whether or not this repository disabled.
 */
      get isDisabled(): $Field<"isDisabled", boolean>  {
       return this.$_select("isDisabled") as any
      }

      
/**
 * Returns whether or not this repository is empty.
 */
      get isEmpty(): $Field<"isEmpty", boolean>  {
       return this.$_select("isEmpty") as any
      }

      
/**
 * Identifies if the repository is a fork.
 */
      get isFork(): $Field<"isFork", boolean>  {
       return this.$_select("isFork") as any
      }

      
/**
 * Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
 */
      get isInOrganization(): $Field<"isInOrganization", boolean>  {
       return this.$_select("isInOrganization") as any
      }

      
/**
 * Indicates if the repository has been locked or not.
 */
      get isLocked(): $Field<"isLocked", boolean>  {
       return this.$_select("isLocked") as any
      }

      
/**
 * Identifies if the repository is a mirror.
 */
      get isMirror(): $Field<"isMirror", boolean>  {
       return this.$_select("isMirror") as any
      }

      
/**
 * Identifies if the repository is private or internal.
 */
      get isPrivate(): $Field<"isPrivate", boolean>  {
       return this.$_select("isPrivate") as any
      }

      
/**
 * Returns true if this repository has a security policy
 */
      get isSecurityPolicyEnabled(): $Field<"isSecurityPolicyEnabled", boolean | null | undefined>  {
       return this.$_select("isSecurityPolicyEnabled") as any
      }

      
/**
 * Identifies if the repository is a template that can be used to generate new repositories.
 */
      get isTemplate(): $Field<"isTemplate", boolean>  {
       return this.$_select("isTemplate") as any
      }

      
/**
 * Is this repository a user configuration repository?
 */
      get isUserConfigurationRepository(): $Field<"isUserConfigurationRepository", boolean>  {
       return this.$_select("isUserConfigurationRepository") as any
      }

      
/**
 * Returns a single issue from the current repository by number.
 */
      issue<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<Issue>>(args: Args, selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  

      
/**
 * Returns a single issue-like object from the current repository by number.
 */
      issueOrPullRequest<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<IssueOrPullRequest>>(args: Args, selectorFn: (s: IssueOrPullRequest) => [...Sel]):$Field<"issueOrPullRequest", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new IssueOrPullRequest)
      };
      return this.$_select("issueOrPullRequest", options) as any
    }
  

      
/**
 * Returns a list of issue templates associated to the repository
 */
      issueTemplates<Sel extends Selection<IssueTemplate>>(selectorFn: (s: IssueTemplate) => [...Sel]):$Field<"issueTemplates", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueTemplate)
      };
      return this.$_select("issueTemplates", options) as any
    }
  

      
/**
 * A list of issues that have been opened in the repository.
 */
      issues<Args extends VariabledInput<{
        orderBy?: IssueOrder | null | undefined
labels?: Readonly<Array<string>> | null | undefined
states?: Readonly<Array<IssueState>> | null | undefined
filterBy?: IssueFilters | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<IssueConnection>>(args: Args, selectorFn: (s: IssueConnection) => [...Sel]):$Field<"issues", GetOutput<Sel> , GetVariables<Sel, Args>>
issues<Sel extends Selection<IssueConnection>>(selectorFn: (s: IssueConnection) => [...Sel]):$Field<"issues", GetOutput<Sel> , GetVariables<Sel>>
issues(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "IssueOrder",
labels: "[String!]",
states: "[IssueState!]",
filterBy: "IssueFilters",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new IssueConnection)
      };
      return this.$_select("issues", options) as any
    }
  

      
/**
 * Returns a single label by name
 */
      label<Args extends VariabledInput<{
        name: string,
      }>,Sel extends Selection<Label>>(args: Args, selectorFn: (s: Label) => [...Sel]):$Field<"label", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              name: "String!"
            },
        args,

        selection: selectorFn(new Label)
      };
      return this.$_select("label", options) as any
    }
  

      
/**
 * A list of labels associated with the repository.
 */
      labels<Args extends VariabledInput<{
        orderBy?: LabelOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
query?: string | null | undefined,
      }>,Sel extends Selection<LabelConnection>>(args: Args, selectorFn: (s: LabelConnection) => [...Sel]):$Field<"labels", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
labels<Sel extends Selection<LabelConnection>>(selectorFn: (s: LabelConnection) => [...Sel]):$Field<"labels", GetOutput<Sel> | undefined , GetVariables<Sel>>
labels(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "LabelOrder",
after: "String",
before: "String",
first: "Int",
last: "Int",
query: "String"
            },
        args,

        selection: selectorFn(new LabelConnection)
      };
      return this.$_select("labels", options) as any
    }
  

      
/**
 * A list containing a breakdown of the language composition of the repository.
 */
      languages<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: LanguageOrder | null | undefined,
      }>,Sel extends Selection<LanguageConnection>>(args: Args, selectorFn: (s: LanguageConnection) => [...Sel]):$Field<"languages", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
languages<Sel extends Selection<LanguageConnection>>(selectorFn: (s: LanguageConnection) => [...Sel]):$Field<"languages", GetOutput<Sel> | undefined , GetVariables<Sel>>
languages(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "LanguageOrder"
            },
        args,

        selection: selectorFn(new LanguageConnection)
      };
      return this.$_select("languages", options) as any
    }
  

      
/**
 * Get the latest release for the repository if one exists.
 */
      latestRelease<Sel extends Selection<Release>>(selectorFn: (s: Release) => [...Sel]):$Field<"latestRelease", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Release)
      };
      return this.$_select("latestRelease", options) as any
    }
  

      
/**
 * The license associated with the repository
 */
      licenseInfo<Sel extends Selection<License>>(selectorFn: (s: License) => [...Sel]):$Field<"licenseInfo", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new License)
      };
      return this.$_select("licenseInfo", options) as any
    }
  

      
/**
 * The reason the repository has been locked.
 */
      get lockReason(): $Field<"lockReason", RepositoryLockReason | null | undefined>  {
       return this.$_select("lockReason") as any
      }

      
/**
 * A list of Users that can be mentioned in the context of the repository.
 */
      mentionableUsers<Args extends VariabledInput<{
        query?: string | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserConnection>>(args: Args, selectorFn: (s: UserConnection) => [...Sel]):$Field<"mentionableUsers", GetOutput<Sel> , GetVariables<Sel, Args>>
mentionableUsers<Sel extends Selection<UserConnection>>(selectorFn: (s: UserConnection) => [...Sel]):$Field<"mentionableUsers", GetOutput<Sel> , GetVariables<Sel>>
mentionableUsers(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserConnection)
      };
      return this.$_select("mentionableUsers", options) as any
    }
  

      
/**
 * Whether or not PRs are merged with a merge commit on this repository.
 */
      get mergeCommitAllowed(): $Field<"mergeCommitAllowed", boolean>  {
       return this.$_select("mergeCommitAllowed") as any
      }

      
/**
 * How the default commit message will be generated when merging a pull request.
 */
      get mergeCommitMessage(): $Field<"mergeCommitMessage", MergeCommitMessage>  {
       return this.$_select("mergeCommitMessage") as any
      }

      
/**
 * How the default commit title will be generated when merging a pull request.
 */
      get mergeCommitTitle(): $Field<"mergeCommitTitle", MergeCommitTitle>  {
       return this.$_select("mergeCommitTitle") as any
      }

      
/**
 * Returns a single milestone from the current repository by number.
 */
      milestone<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<Milestone>>(args: Args, selectorFn: (s: Milestone) => [...Sel]):$Field<"milestone", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new Milestone)
      };
      return this.$_select("milestone", options) as any
    }
  

      
/**
 * A list of milestones associated with the repository.
 */
      milestones<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
states?: Readonly<Array<MilestoneState>> | null | undefined
orderBy?: MilestoneOrder | null | undefined
query?: string | null | undefined,
      }>,Sel extends Selection<MilestoneConnection>>(args: Args, selectorFn: (s: MilestoneConnection) => [...Sel]):$Field<"milestones", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
milestones<Sel extends Selection<MilestoneConnection>>(selectorFn: (s: MilestoneConnection) => [...Sel]):$Field<"milestones", GetOutput<Sel> | undefined , GetVariables<Sel>>
milestones(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
states: "[MilestoneState!]",
orderBy: "MilestoneOrder",
query: "String"
            },
        args,

        selection: selectorFn(new MilestoneConnection)
      };
      return this.$_select("milestones", options) as any
    }
  

      
/**
 * The repository's original mirror URL.
 */
      get mirrorUrl(): $Field<"mirrorUrl", string | null | undefined>  {
       return this.$_select("mirrorUrl") as any
      }

      
/**
 * The name of the repository.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The repository's name with owner.
 */
      get nameWithOwner(): $Field<"nameWithOwner", string>  {
       return this.$_select("nameWithOwner") as any
      }

      
/**
 * A Git object in the repository
 */
      object<Args extends VariabledInput<{
        oid?: string | null | undefined
expression?: string | null | undefined,
      }>,Sel extends Selection<GitObject>>(args: Args, selectorFn: (s: GitObject) => [...Sel]):$Field<"object", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
object<Sel extends Selection<GitObject>>(selectorFn: (s: GitObject) => [...Sel]):$Field<"object", GetOutput<Sel> | undefined , GetVariables<Sel>>
object(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              oid: "GitObjectID",
expression: "String"
            },
        args,

        selection: selectorFn(new GitObject)
      };
      return this.$_select("object", options) as any
    }
  

      
/**
 * The image used to represent this repository in Open Graph data.
 */
      get openGraphImageUrl(): $Field<"openGraphImageUrl", string>  {
       return this.$_select("openGraphImageUrl") as any
      }

      
/**
 * The User owner of the repository.
 */
      owner<Sel extends Selection<RepositoryOwner>>(selectorFn: (s: RepositoryOwner) => [...Sel]):$Field<"owner", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryOwner)
      };
      return this.$_select("owner", options) as any
    }
  

      
/**
 * A list of packages under the owner.
 */
      packages<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
names?: Readonly<Array<string | null | undefined>> | null | undefined
repositoryId?: string | null | undefined
packageType?: PackageType | null | undefined
orderBy?: PackageOrder | null | undefined,
      }>,Sel extends Selection<PackageConnection>>(args: Args, selectorFn: (s: PackageConnection) => [...Sel]):$Field<"packages", GetOutput<Sel> , GetVariables<Sel, Args>>
packages<Sel extends Selection<PackageConnection>>(selectorFn: (s: PackageConnection) => [...Sel]):$Field<"packages", GetOutput<Sel> , GetVariables<Sel>>
packages(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
names: "[String]",
repositoryId: "ID",
packageType: "PackageType",
orderBy: "PackageOrder"
            },
        args,

        selection: selectorFn(new PackageConnection)
      };
      return this.$_select("packages", options) as any
    }
  

      
/**
 * The repository parent, if this is a fork.
 */
      parent<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"parent", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("parent", options) as any
    }
  

      
/**
 * A list of discussions that have been pinned in this repository.
 */
      pinnedDiscussions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PinnedDiscussionConnection>>(args: Args, selectorFn: (s: PinnedDiscussionConnection) => [...Sel]):$Field<"pinnedDiscussions", GetOutput<Sel> , GetVariables<Sel, Args>>
pinnedDiscussions<Sel extends Selection<PinnedDiscussionConnection>>(selectorFn: (s: PinnedDiscussionConnection) => [...Sel]):$Field<"pinnedDiscussions", GetOutput<Sel> , GetVariables<Sel>>
pinnedDiscussions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PinnedDiscussionConnection)
      };
      return this.$_select("pinnedDiscussions", options) as any
    }
  

      
/**
 * A list of pinned issues for this repository.
 */
      pinnedIssues<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PinnedIssueConnection>>(args: Args, selectorFn: (s: PinnedIssueConnection) => [...Sel]):$Field<"pinnedIssues", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
pinnedIssues<Sel extends Selection<PinnedIssueConnection>>(selectorFn: (s: PinnedIssueConnection) => [...Sel]):$Field<"pinnedIssues", GetOutput<Sel> | undefined , GetVariables<Sel>>
pinnedIssues(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PinnedIssueConnection)
      };
      return this.$_select("pinnedIssues", options) as any
    }
  

      
/**
 * The primary language of the repository's code.
 */
      primaryLanguage<Sel extends Selection<Language>>(selectorFn: (s: Language) => [...Sel]):$Field<"primaryLanguage", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Language)
      };
      return this.$_select("primaryLanguage", options) as any
    }
  

      
/**
 * Find project by number.
 */
      project<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<Project>>(args: Args, selectorFn: (s: Project) => [...Sel]):$Field<"project", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new Project)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * Finds and returns the Project (beta) according to the provided Project (beta) number.
 */
      projectNext<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<ProjectNext>>(args: Args, selectorFn: (s: ProjectNext) => [...Sel]):$Field<"projectNext", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new ProjectNext)
      };
      return this.$_select("projectNext", options) as any
    }
  

      
/**
 * Finds and returns the Project according to the provided Project number.
 */
      projectV2<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<ProjectV2>>(args: Args, selectorFn: (s: ProjectV2) => [...Sel]):$Field<"projectV2", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("projectV2", options) as any
    }
  

      
/**
 * A list of projects under the owner.
 */
      projects<Args extends VariabledInput<{
        orderBy?: ProjectOrder | null | undefined
search?: string | null | undefined
states?: Readonly<Array<ProjectState>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectConnection>>(args: Args, selectorFn: (s: ProjectConnection) => [...Sel]):$Field<"projects", GetOutput<Sel> , GetVariables<Sel, Args>>
projects<Sel extends Selection<ProjectConnection>>(selectorFn: (s: ProjectConnection) => [...Sel]):$Field<"projects", GetOutput<Sel> , GetVariables<Sel>>
projects(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "ProjectOrder",
search: "String",
states: "[ProjectState!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectConnection)
      };
      return this.$_select("projects", options) as any
    }
  

      
/**
 * List of projects (beta) linked to this repository.
 */
      projectsNext<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
query?: string | null | undefined
sortBy?: ProjectNextOrderField | null | undefined,
      }>,Sel extends Selection<ProjectNextConnection>>(args: Args, selectorFn: (s: ProjectNextConnection) => [...Sel]):$Field<"projectsNext", GetOutput<Sel> , GetVariables<Sel, Args>>
projectsNext<Sel extends Selection<ProjectNextConnection>>(selectorFn: (s: ProjectNextConnection) => [...Sel]):$Field<"projectsNext", GetOutput<Sel> , GetVariables<Sel>>
projectsNext(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
query: "String",
sortBy: "ProjectNextOrderField"
            },
        args,

        selection: selectorFn(new ProjectNextConnection)
      };
      return this.$_select("projectsNext", options) as any
    }
  

      
/**
 * The HTTP path listing the repository's projects
 */
      get projectsResourcePath(): $Field<"projectsResourcePath", string>  {
       return this.$_select("projectsResourcePath") as any
      }

      
/**
 * The HTTP URL listing the repository's projects
 */
      get projectsUrl(): $Field<"projectsUrl", string>  {
       return this.$_select("projectsUrl") as any
      }

      
/**
 * List of projects linked to this repository.
 */
      projectsV2<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
query?: string | null | undefined
orderBy?: ProjectV2Order | null | undefined,
      }>,Sel extends Selection<ProjectV2Connection>>(args: Args, selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel, Args>>
projectsV2<Sel extends Selection<ProjectV2Connection>>(selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel>>
projectsV2(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
query: "String",
orderBy: "ProjectV2Order"
            },
        args,

        selection: selectorFn(new ProjectV2Connection)
      };
      return this.$_select("projectsV2", options) as any
    }
  

      
/**
 * Returns a single pull request from the current repository by number.
 */
      pullRequest<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<PullRequest>>(args: Args, selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * Returns a list of pull request templates associated to the repository
 */
      pullRequestTemplates<Sel extends Selection<PullRequestTemplate>>(selectorFn: (s: PullRequestTemplate) => [...Sel]):$Field<"pullRequestTemplates", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestTemplate)
      };
      return this.$_select("pullRequestTemplates", options) as any
    }
  

      
/**
 * A list of pull requests that have been opened in the repository.
 */
      pullRequests<Args extends VariabledInput<{
        states?: Readonly<Array<PullRequestState>> | null | undefined
labels?: Readonly<Array<string>> | null | undefined
headRefName?: string | null | undefined
baseRefName?: string | null | undefined
orderBy?: IssueOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestConnection>>(args: Args, selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"pullRequests", GetOutput<Sel> , GetVariables<Sel, Args>>
pullRequests<Sel extends Selection<PullRequestConnection>>(selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"pullRequests", GetOutput<Sel> , GetVariables<Sel>>
pullRequests(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              states: "[PullRequestState!]",
labels: "[String!]",
headRefName: "String",
baseRefName: "String",
orderBy: "IssueOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestConnection)
      };
      return this.$_select("pullRequests", options) as any
    }
  

      
/**
 * Identifies when the repository was last pushed to.
 */
      get pushedAt(): $Field<"pushedAt", string | null | undefined>  {
       return this.$_select("pushedAt") as any
      }

      
/**
 * Whether or not rebase-merging is enabled on this repository.
 */
      get rebaseMergeAllowed(): $Field<"rebaseMergeAllowed", boolean>  {
       return this.$_select("rebaseMergeAllowed") as any
      }

      
/**
 * Recent projects that this user has modified in the context of the owner.
 */
      recentProjects<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2Connection>>(args: Args, selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"recentProjects", GetOutput<Sel> , GetVariables<Sel, Args>>
recentProjects<Sel extends Selection<ProjectV2Connection>>(selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"recentProjects", GetOutput<Sel> , GetVariables<Sel>>
recentProjects(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2Connection)
      };
      return this.$_select("recentProjects", options) as any
    }
  

      
/**
 * Fetch a given ref from the repository
 */
      ref<Args extends VariabledInput<{
        qualifiedName: string,
      }>,Sel extends Selection<Ref>>(args: Args, selectorFn: (s: Ref) => [...Sel]):$Field<"ref", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              qualifiedName: "String!"
            },
        args,

        selection: selectorFn(new Ref)
      };
      return this.$_select("ref", options) as any
    }
  

      
/**
 * Fetch a list of refs from the repository
 */
      refs<Args extends VariabledInput<{
        query?: string | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
refPrefix: string
direction?: OrderDirection | null | undefined
orderBy?: RefOrder | null | undefined,
      }>,Sel extends Selection<RefConnection>>(args: Args, selectorFn: (s: RefConnection) => [...Sel]):$Field<"refs", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              query: "String",
after: "String",
before: "String",
first: "Int",
last: "Int",
refPrefix: "String!",
direction: "OrderDirection",
orderBy: "RefOrder"
            },
        args,

        selection: selectorFn(new RefConnection)
      };
      return this.$_select("refs", options) as any
    }
  

      
/**
 * Lookup a single release given various criteria.
 */
      release<Args extends VariabledInput<{
        tagName: string,
      }>,Sel extends Selection<Release>>(args: Args, selectorFn: (s: Release) => [...Sel]):$Field<"release", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              tagName: "String!"
            },
        args,

        selection: selectorFn(new Release)
      };
      return this.$_select("release", options) as any
    }
  

      
/**
 * List of releases which are dependent on this repository.
 */
      releases<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ReleaseOrder | null | undefined,
      }>,Sel extends Selection<ReleaseConnection>>(args: Args, selectorFn: (s: ReleaseConnection) => [...Sel]):$Field<"releases", GetOutput<Sel> , GetVariables<Sel, Args>>
releases<Sel extends Selection<ReleaseConnection>>(selectorFn: (s: ReleaseConnection) => [...Sel]):$Field<"releases", GetOutput<Sel> , GetVariables<Sel>>
releases(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ReleaseOrder"
            },
        args,

        selection: selectorFn(new ReleaseConnection)
      };
      return this.$_select("releases", options) as any
    }
  

      
/**
 * A list of applied repository-topic associations for this repository.
 */
      repositoryTopics<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<RepositoryTopicConnection>>(args: Args, selectorFn: (s: RepositoryTopicConnection) => [...Sel]):$Field<"repositoryTopics", GetOutput<Sel> , GetVariables<Sel, Args>>
repositoryTopics<Sel extends Selection<RepositoryTopicConnection>>(selectorFn: (s: RepositoryTopicConnection) => [...Sel]):$Field<"repositoryTopics", GetOutput<Sel> , GetVariables<Sel>>
repositoryTopics(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new RepositoryTopicConnection)
      };
      return this.$_select("repositoryTopics", options) as any
    }
  

      
/**
 * The HTTP path for this repository
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The security policy URL.
 */
      get securityPolicyUrl(): $Field<"securityPolicyUrl", string | null | undefined>  {
       return this.$_select("securityPolicyUrl") as any
      }

      
/**
 * A description of the repository, rendered to HTML without any links in it.
 */
      shortDescriptionHTML<Args extends VariabledInput<{
        limit?: number | null | undefined,
      }>>(args: Args):$Field<"shortDescriptionHTML", string , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              limit: "Int"
            },
        args,

        
      };
      return this.$_select("shortDescriptionHTML", options) as any
    }
  

      
/**
 * Whether or not squash-merging is enabled on this repository.
 */
      get squashMergeAllowed(): $Field<"squashMergeAllowed", boolean>  {
       return this.$_select("squashMergeAllowed") as any
      }

      
/**
 * How the default commit message will be generated when squash merging a pull request.
 */
      get squashMergeCommitMessage(): $Field<"squashMergeCommitMessage", SquashMergeCommitMessage>  {
       return this.$_select("squashMergeCommitMessage") as any
      }

      
/**
 * How the default commit title will be generated when squash merging a pull request.
 */
      get squashMergeCommitTitle(): $Field<"squashMergeCommitTitle", SquashMergeCommitTitle>  {
       return this.$_select("squashMergeCommitTitle") as any
      }

      
/**
 * Whether a squash merge commit can use the pull request title as default.
 */
      get squashPrTitleUsedAsDefault(): $Field<"squashPrTitleUsedAsDefault", boolean>  {
       return this.$_select("squashPrTitleUsedAsDefault") as any
      }

      
/**
 * The SSH URL to clone this repository
 */
      get sshUrl(): $Field<"sshUrl", string>  {
       return this.$_select("sshUrl") as any
      }

      
/**
 * Returns a count of how many stargazers there are on this object

 */
      get stargazerCount(): $Field<"stargazerCount", number>  {
       return this.$_select("stargazerCount") as any
      }

      
/**
 * A list of users who have starred this starrable.
 */
      stargazers<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: StarOrder | null | undefined,
      }>,Sel extends Selection<StargazerConnection>>(args: Args, selectorFn: (s: StargazerConnection) => [...Sel]):$Field<"stargazers", GetOutput<Sel> , GetVariables<Sel, Args>>
stargazers<Sel extends Selection<StargazerConnection>>(selectorFn: (s: StargazerConnection) => [...Sel]):$Field<"stargazers", GetOutput<Sel> , GetVariables<Sel>>
stargazers(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "StarOrder"
            },
        args,

        selection: selectorFn(new StargazerConnection)
      };
      return this.$_select("stargazers", options) as any
    }
  

      
/**
 * Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit.
 */
      submodules<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<SubmoduleConnection>>(args: Args, selectorFn: (s: SubmoduleConnection) => [...Sel]):$Field<"submodules", GetOutput<Sel> , GetVariables<Sel, Args>>
submodules<Sel extends Selection<SubmoduleConnection>>(selectorFn: (s: SubmoduleConnection) => [...Sel]):$Field<"submodules", GetOutput<Sel> , GetVariables<Sel>>
submodules(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new SubmoduleConnection)
      };
      return this.$_select("submodules", options) as any
    }
  

      
/**
 * Temporary authentication token for cloning this repository.
 */
      get tempCloneToken(): $Field<"tempCloneToken", string | null | undefined>  {
       return this.$_select("tempCloneToken") as any
      }

      
/**
 * The repository from which this repository was generated, if any.
 */
      templateRepository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"templateRepository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("templateRepository", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this repository
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
 */
      get usesCustomOpenGraphImage(): $Field<"usesCustomOpenGraphImage", boolean>  {
       return this.$_select("usesCustomOpenGraphImage") as any
      }

      
/**
 * Indicates whether the viewer has admin permissions on this repository.
 */
      get viewerCanAdminister(): $Field<"viewerCanAdminister", boolean>  {
       return this.$_select("viewerCanAdminister") as any
      }

      
/**
 * Can the current viewer create new projects on this owner.
 */
      get viewerCanCreateProjects(): $Field<"viewerCanCreateProjects", boolean>  {
       return this.$_select("viewerCanCreateProjects") as any
      }

      
/**
 * Check if the viewer is able to change their subscription status for the repository.
 */
      get viewerCanSubscribe(): $Field<"viewerCanSubscribe", boolean>  {
       return this.$_select("viewerCanSubscribe") as any
      }

      
/**
 * Indicates whether the viewer can update the topics of this repository.
 */
      get viewerCanUpdateTopics(): $Field<"viewerCanUpdateTopics", boolean>  {
       return this.$_select("viewerCanUpdateTopics") as any
      }

      
/**
 * The last commit email for the viewer.
 */
      get viewerDefaultCommitEmail(): $Field<"viewerDefaultCommitEmail", string | null | undefined>  {
       return this.$_select("viewerDefaultCommitEmail") as any
      }

      
/**
 * The last used merge method by the viewer or the default for the repository.
 */
      get viewerDefaultMergeMethod(): $Field<"viewerDefaultMergeMethod", PullRequestMergeMethod>  {
       return this.$_select("viewerDefaultMergeMethod") as any
      }

      
/**
 * Returns a boolean indicating whether the viewing user has starred this starrable.
 */
      get viewerHasStarred(): $Field<"viewerHasStarred", boolean>  {
       return this.$_select("viewerHasStarred") as any
      }

      
/**
 * The users permission level on the repository. Will return null if authenticated as an GitHub App.
 */
      get viewerPermission(): $Field<"viewerPermission", RepositoryPermission | null | undefined>  {
       return this.$_select("viewerPermission") as any
      }

      
/**
 * A list of emails this viewer can commit with.
 */
      get viewerPossibleCommitEmails(): $Field<"viewerPossibleCommitEmails", Readonly<Array<string>> | null | undefined>  {
       return this.$_select("viewerPossibleCommitEmails") as any
      }

      
/**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
      get viewerSubscription(): $Field<"viewerSubscription", SubscriptionState | null | undefined>  {
       return this.$_select("viewerSubscription") as any
      }

      
/**
 * Indicates the repository's visibility level.
 */
      get visibility(): $Field<"visibility", RepositoryVisibility>  {
       return this.$_select("visibility") as any
      }

      
/**
 * A list of vulnerability alerts that are on this repository.
 */
      vulnerabilityAlerts<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
states?: Readonly<Array<RepositoryVulnerabilityAlertState>> | null | undefined
dependencyScopes?: Readonly<Array<RepositoryVulnerabilityAlertDependencyScope>> | null | undefined,
      }>,Sel extends Selection<RepositoryVulnerabilityAlertConnection>>(args: Args, selectorFn: (s: RepositoryVulnerabilityAlertConnection) => [...Sel]):$Field<"vulnerabilityAlerts", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
vulnerabilityAlerts<Sel extends Selection<RepositoryVulnerabilityAlertConnection>>(selectorFn: (s: RepositoryVulnerabilityAlertConnection) => [...Sel]):$Field<"vulnerabilityAlerts", GetOutput<Sel> | undefined , GetVariables<Sel>>
vulnerabilityAlerts(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
states: "[RepositoryVulnerabilityAlertState!]",
dependencyScopes: "[RepositoryVulnerabilityAlertDependencyScope!]"
            },
        args,

        selection: selectorFn(new RepositoryVulnerabilityAlertConnection)
      };
      return this.$_select("vulnerabilityAlerts", options) as any
    }
  

      
/**
 * A list of users watching the repository.
 */
      watchers<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserConnection>>(args: Args, selectorFn: (s: UserConnection) => [...Sel]):$Field<"watchers", GetOutput<Sel> , GetVariables<Sel, Args>>
watchers<Sel extends Selection<UserConnection>>(selectorFn: (s: UserConnection) => [...Sel]):$Field<"watchers", GetOutput<Sel> , GetVariables<Sel>>
watchers(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserConnection)
      };
      return this.$_select("watchers", options) as any
    }
  

      
/**
 * Whether contributors are required to sign off on web-based commits in this repository.
 */
      get webCommitSignoffRequired(): $Field<"webCommitSignoffRequired", boolean>  {
       return this.$_select("webCommitSignoffRequired") as any
      }
}

  
/**
 * The affiliation of a user to a repository
 */
export enum RepositoryAffiliation {
  
/**
 * Repositories that are owned by the authenticated user.
 */
  OWNER = "OWNER",

/**
 * Repositories that the user has been added to as a collaborator.
 */
  COLLABORATOR = "COLLABORATOR",

/**
 * Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
 */
  ORGANIZATION_MEMBER = "ORGANIZATION_MEMBER"
}
  


/**
 * Metadata for an audit entry with action repo.*
 */
export class RepositoryAuditEntryData extends $Interface<{OrgRestoreMemberMembershipRepositoryAuditEntryData: OrgRestoreMemberMembershipRepositoryAuditEntryData,PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntry,PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntry,RepoAccessAuditEntry: RepoAccessAuditEntry,RepoAddMemberAuditEntry: RepoAddMemberAuditEntry,RepoAddTopicAuditEntry: RepoAddTopicAuditEntry,RepoArchivedAuditEntry: RepoArchivedAuditEntry,RepoChangeMergeSettingAuditEntry: RepoChangeMergeSettingAuditEntry,RepoConfigDisableAnonymousGitAccessAuditEntry: RepoConfigDisableAnonymousGitAccessAuditEntry,RepoConfigDisableCollaboratorsOnlyAuditEntry: RepoConfigDisableCollaboratorsOnlyAuditEntry,RepoConfigDisableContributorsOnlyAuditEntry: RepoConfigDisableContributorsOnlyAuditEntry,RepoConfigDisableSockpuppetDisallowedAuditEntry: RepoConfigDisableSockpuppetDisallowedAuditEntry,RepoConfigEnableAnonymousGitAccessAuditEntry: RepoConfigEnableAnonymousGitAccessAuditEntry,RepoConfigEnableCollaboratorsOnlyAuditEntry: RepoConfigEnableCollaboratorsOnlyAuditEntry,RepoConfigEnableContributorsOnlyAuditEntry: RepoConfigEnableContributorsOnlyAuditEntry,RepoConfigEnableSockpuppetDisallowedAuditEntry: RepoConfigEnableSockpuppetDisallowedAuditEntry,RepoConfigLockAnonymousGitAccessAuditEntry: RepoConfigLockAnonymousGitAccessAuditEntry,RepoConfigUnlockAnonymousGitAccessAuditEntry: RepoConfigUnlockAnonymousGitAccessAuditEntry,RepoCreateAuditEntry: RepoCreateAuditEntry,RepoDestroyAuditEntry: RepoDestroyAuditEntry,RepoRemoveMemberAuditEntry: RepoRemoveMemberAuditEntry,RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntry,TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntry,TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntry}, "RepositoryAuditEntryData"> {
  constructor() {
    super({OrgRestoreMemberMembershipRepositoryAuditEntryData: OrgRestoreMemberMembershipRepositoryAuditEntryData,PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntry,PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntry,RepoAccessAuditEntry: RepoAccessAuditEntry,RepoAddMemberAuditEntry: RepoAddMemberAuditEntry,RepoAddTopicAuditEntry: RepoAddTopicAuditEntry,RepoArchivedAuditEntry: RepoArchivedAuditEntry,RepoChangeMergeSettingAuditEntry: RepoChangeMergeSettingAuditEntry,RepoConfigDisableAnonymousGitAccessAuditEntry: RepoConfigDisableAnonymousGitAccessAuditEntry,RepoConfigDisableCollaboratorsOnlyAuditEntry: RepoConfigDisableCollaboratorsOnlyAuditEntry,RepoConfigDisableContributorsOnlyAuditEntry: RepoConfigDisableContributorsOnlyAuditEntry,RepoConfigDisableSockpuppetDisallowedAuditEntry: RepoConfigDisableSockpuppetDisallowedAuditEntry,RepoConfigEnableAnonymousGitAccessAuditEntry: RepoConfigEnableAnonymousGitAccessAuditEntry,RepoConfigEnableCollaboratorsOnlyAuditEntry: RepoConfigEnableCollaboratorsOnlyAuditEntry,RepoConfigEnableContributorsOnlyAuditEntry: RepoConfigEnableContributorsOnlyAuditEntry,RepoConfigEnableSockpuppetDisallowedAuditEntry: RepoConfigEnableSockpuppetDisallowedAuditEntry,RepoConfigLockAnonymousGitAccessAuditEntry: RepoConfigLockAnonymousGitAccessAuditEntry,RepoConfigUnlockAnonymousGitAccessAuditEntry: RepoConfigUnlockAnonymousGitAccessAuditEntry,RepoCreateAuditEntry: RepoCreateAuditEntry,RepoDestroyAuditEntry: RepoDestroyAuditEntry,RepoRemoveMemberAuditEntry: RepoRemoveMemberAuditEntry,RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntry,TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntry,TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntry}, "RepositoryAuditEntryData")
  }
}


/**
 * Information extracted from a repository's `CODEOWNERS` file.
 */
export class RepositoryCodeowners extends $Base<"RepositoryCodeowners"> {
  constructor() {
    super("RepositoryCodeowners")
  }

  
      
/**
 * Any problems that were encountered while parsing the `CODEOWNERS` file.
 */
      errors<Sel extends Selection<RepositoryCodeownersError>>(selectorFn: (s: RepositoryCodeownersError) => [...Sel]):$Field<"errors", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryCodeownersError)
      };
      return this.$_select("errors", options) as any
    }
  
}


/**
 * An error in a `CODEOWNERS` file.
 */
export class RepositoryCodeownersError extends $Base<"RepositoryCodeownersError"> {
  constructor() {
    super("RepositoryCodeownersError")
  }

  
      
/**
 * The column number where the error occurs.
 */
      get column(): $Field<"column", number>  {
       return this.$_select("column") as any
      }

      
/**
 * A short string describing the type of error.
 */
      get kind(): $Field<"kind", string>  {
       return this.$_select("kind") as any
      }

      
/**
 * The line number where the error occurs.
 */
      get line(): $Field<"line", number>  {
       return this.$_select("line") as any
      }

      
/**
 * A complete description of the error, combining information from other fields.
 */
      get message(): $Field<"message", string>  {
       return this.$_select("message") as any
      }

      
/**
 * The path to the file when the error occurs.
 */
      get path(): $Field<"path", string>  {
       return this.$_select("path") as any
      }

      
/**
 * The content of the line where the error occurs.
 */
      get source(): $Field<"source", string>  {
       return this.$_select("source") as any
      }

      
/**
 * A suggestion of how to fix the error.
 */
      get suggestion(): $Field<"suggestion", string | null | undefined>  {
       return this.$_select("suggestion") as any
      }
}


/**
 * The connection type for User.
 */
export class RepositoryCollaboratorConnection extends $Base<"RepositoryCollaboratorConnection"> {
  constructor() {
    super("RepositoryCollaboratorConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<RepositoryCollaboratorEdge>>(selectorFn: (s: RepositoryCollaboratorEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryCollaboratorEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Represents a user who is a collaborator of a repository.
 */
export class RepositoryCollaboratorEdge extends $Base<"RepositoryCollaboratorEdge"> {
  constructor() {
    super("RepositoryCollaboratorEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
      node<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"node", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * The permission the user has on the repository.
 */
      get permission(): $Field<"permission", RepositoryPermission>  {
       return this.$_select("permission") as any
      }

      
/**
 * A list of sources for the user's access to the repository.
 */
      permissionSources<Sel extends Selection<PermissionSource>>(selectorFn: (s: PermissionSource) => [...Sel]):$Field<"permissionSources", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PermissionSource)
      };
      return this.$_select("permissionSources", options) as any
    }
  
}


/**
 * A list of repositories owned by the subject.
 */
export class RepositoryConnection extends $Base<"RepositoryConnection"> {
  constructor() {
    super("RepositoryConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<RepositoryEdge>>(selectorFn: (s: RepositoryEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }

      
/**
 * The total size in kilobytes of all repositories in the connection.
 */
      get totalDiskUsage(): $Field<"totalDiskUsage", number>  {
       return this.$_select("totalDiskUsage") as any
      }
}


/**
 * A repository contact link.
 */
export class RepositoryContactLink extends $Base<"RepositoryContactLink"> {
  constructor() {
    super("RepositoryContactLink")
  }

  
      
/**
 * The contact link purpose.
 */
      get about(): $Field<"about", string>  {
       return this.$_select("about") as any
      }

      
/**
 * The contact link name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The contact link URL.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}

  
/**
 * The reason a repository is listed as 'contributed'.
 */
export enum RepositoryContributionType {
  
/**
 * Created a commit
 */
  COMMIT = "COMMIT",

/**
 * Created an issue
 */
  ISSUE = "ISSUE",

/**
 * Created a pull request
 */
  PULL_REQUEST = "PULL_REQUEST",

/**
 * Created the repository
 */
  REPOSITORY = "REPOSITORY",

/**
 * Reviewed a pull request
 */
  PULL_REQUEST_REVIEW = "PULL_REQUEST_REVIEW"
}
  


/**
 * Represents an author of discussions in repositories.
 */
export class RepositoryDiscussionAuthor extends $Interface<{Organization: Organization,User: User}, "RepositoryDiscussionAuthor"> {
  constructor() {
    super({Organization: Organization,User: User}, "RepositoryDiscussionAuthor")
  }
}


/**
 * Represents an author of discussion comments in repositories.
 */
export class RepositoryDiscussionCommentAuthor extends $Interface<{Organization: Organization,User: User}, "RepositoryDiscussionCommentAuthor"> {
  constructor() {
    super({Organization: Organization,User: User}, "RepositoryDiscussionCommentAuthor")
  }
}


/**
 * An edge in a connection.
 */
export class RepositoryEdge extends $Base<"RepositoryEdge"> {
  constructor() {
    super("RepositoryEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A subset of repository info.
 */
export class RepositoryInfo extends $Interface<{Repository: Repository}, "RepositoryInfo"> {
  constructor() {
    super({Repository: Repository}, "RepositoryInfo")
  }
}


/**
 * Repository interaction limit that applies to this object.
 */
export class RepositoryInteractionAbility extends $Base<"RepositoryInteractionAbility"> {
  constructor() {
    super("RepositoryInteractionAbility")
  }

  
      
/**
 * The time the currently active limit expires.
 */
      get expiresAt(): $Field<"expiresAt", string | null | undefined>  {
       return this.$_select("expiresAt") as any
      }

      
/**
 * The current limit that is enabled on this object.
 */
      get limit(): $Field<"limit", RepositoryInteractionLimit>  {
       return this.$_select("limit") as any
      }

      
/**
 * The origin of the currently active interaction limit.
 */
      get origin(): $Field<"origin", RepositoryInteractionLimitOrigin>  {
       return this.$_select("origin") as any
      }
}

  
/**
 * A repository interaction limit.
 */
export enum RepositoryInteractionLimit {
  
/**
 * Users that have recently created their account will be unable to interact with the repository.
 */
  EXISTING_USERS = "EXISTING_USERS",

/**
 * Users that have not previously committed to a repository’s default branch will be unable to interact with the repository.
 */
  CONTRIBUTORS_ONLY = "CONTRIBUTORS_ONLY",

/**
 * Users that are not collaborators will not be able to interact with the repository.
 */
  COLLABORATORS_ONLY = "COLLABORATORS_ONLY",

/**
 * No interaction limits are enabled.
 */
  NO_LIMIT = "NO_LIMIT"
}
  

  
/**
 * The length for a repository interaction limit to be enabled for.
 */
export enum RepositoryInteractionLimitExpiry {
  
/**
 * The interaction limit will expire after 1 day.
 */
  ONE_DAY = "ONE_DAY",

/**
 * The interaction limit will expire after 3 days.
 */
  THREE_DAYS = "THREE_DAYS",

/**
 * The interaction limit will expire after 1 week.
 */
  ONE_WEEK = "ONE_WEEK",

/**
 * The interaction limit will expire after 1 month.
 */
  ONE_MONTH = "ONE_MONTH",

/**
 * The interaction limit will expire after 6 months.
 */
  SIX_MONTHS = "SIX_MONTHS"
}
  

  
/**
 * Indicates where an interaction limit is configured.
 */
export enum RepositoryInteractionLimitOrigin {
  
/**
 * A limit that is configured at the repository level.
 */
  REPOSITORY = "REPOSITORY",

/**
 * A limit that is configured at the organization level.
 */
  ORGANIZATION = "ORGANIZATION",

/**
 * A limit that is configured at the user-wide level.
 */
  USER = "USER"
}
  


/**
 * An invitation for a user to be added to a repository.
 */
export class RepositoryInvitation extends $Base<"RepositoryInvitation"> {
  constructor() {
    super("RepositoryInvitation")
  }

  
      
/**
 * The email address that received the invitation.
 */
      get email(): $Field<"email", string | null | undefined>  {
       return this.$_select("email") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The user who received the invitation.
 */
      invitee<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"invitee", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("invitee", options) as any
    }
  

      
/**
 * The user who created the invitation.
 */
      inviter<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"inviter", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("inviter", options) as any
    }
  

      
/**
 * The permalink for this repository invitation.
 */
      get permalink(): $Field<"permalink", string>  {
       return this.$_select("permalink") as any
      }

      
/**
 * The permission granted on this repository by this invitation.
 */
      get permission(): $Field<"permission", RepositoryPermission>  {
       return this.$_select("permission") as any
      }

      
/**
 * The Repository the user is invited to.
 */
      repository<Sel extends Selection<RepositoryInfo>>(selectorFn: (s: RepositoryInfo) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryInfo)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * A list of repository invitations.
 */
export class RepositoryInvitationConnection extends $Base<"RepositoryInvitationConnection"> {
  constructor() {
    super("RepositoryInvitationConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<RepositoryInvitationEdge>>(selectorFn: (s: RepositoryInvitationEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryInvitationEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<RepositoryInvitation>>(selectorFn: (s: RepositoryInvitation) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryInvitation)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class RepositoryInvitationEdge extends $Base<"RepositoryInvitationEdge"> {
  constructor() {
    super("RepositoryInvitationEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<RepositoryInvitation>>(selectorFn: (s: RepositoryInvitation) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryInvitation)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for repository invitation connections.
 */
export type RepositoryInvitationOrder = {
  direction: OrderDirection,
field: RepositoryInvitationOrderField
}
    

  
/**
 * Properties by which repository invitation connections can be ordered.
 */
export enum RepositoryInvitationOrderField {
  
/**
 * Order repository invitations by creation time
 */
  CREATED_AT = "CREATED_AT"
}
  

  
/**
 * The possible reasons a given repository could be in a locked state.
 */
export enum RepositoryLockReason {
  
/**
 * The repository is locked due to a move.
 */
  MOVING = "MOVING",

/**
 * The repository is locked due to a billing related reason.
 */
  BILLING = "BILLING",

/**
 * The repository is locked due to a rename.
 */
  RENAME = "RENAME",

/**
 * The repository is locked due to a migration.
 */
  MIGRATING = "MIGRATING"
}
  


/**
 * An Octoshift repository migration.
 */
export class RepositoryMigration extends $Base<"RepositoryMigration"> {
  constructor() {
    super("RepositoryMigration")
  }

  
      
/**
 * The Octoshift migration flag to continue on error.
 */
      get continueOnError(): $Field<"continueOnError", boolean>  {
       return this.$_select("continueOnError") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", string | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The reason the migration failed.
 */
      get failureReason(): $Field<"failureReason", string | null | undefined>  {
       return this.$_select("failureReason") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The URL for the migration log (expires 1 day after migration completes).
 */
      get migrationLogUrl(): $Field<"migrationLogUrl", string | null | undefined>  {
       return this.$_select("migrationLogUrl") as any
      }

      
/**
 * The Octoshift migration source.
 */
      migrationSource<Sel extends Selection<MigrationSource>>(selectorFn: (s: MigrationSource) => [...Sel]):$Field<"migrationSource", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new MigrationSource)
      };
      return this.$_select("migrationSource", options) as any
    }
  

      
/**
 * The target repository name.
 */
      get repositoryName(): $Field<"repositoryName", string>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The Octoshift migration source URL.
 */
      get sourceUrl(): $Field<"sourceUrl", string>  {
       return this.$_select("sourceUrl") as any
      }

      
/**
 * The Octoshift migration state.
 */
      get state(): $Field<"state", MigrationState>  {
       return this.$_select("state") as any
      }
}


/**
 * The connection type for RepositoryMigration.
 */
export class RepositoryMigrationConnection extends $Base<"RepositoryMigrationConnection"> {
  constructor() {
    super("RepositoryMigrationConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<RepositoryMigrationEdge>>(selectorFn: (s: RepositoryMigrationEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryMigrationEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<RepositoryMigration>>(selectorFn: (s: RepositoryMigration) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryMigration)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Represents a repository migration.
 */
export class RepositoryMigrationEdge extends $Base<"RepositoryMigrationEdge"> {
  constructor() {
    super("RepositoryMigrationEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<RepositoryMigration>>(selectorFn: (s: RepositoryMigration) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryMigration)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for repository migrations.
 */
export type RepositoryMigrationOrder = {
  direction: RepositoryMigrationOrderDirection,
field: RepositoryMigrationOrderField
}
    

  
/**
 * Possible directions in which to order a list of repository migrations when provided an `orderBy` argument.
 */
export enum RepositoryMigrationOrderDirection {
  
/**
 * Specifies an ascending order for a given `orderBy` argument.
 */
  ASC = "ASC",

/**
 * Specifies a descending order for a given `orderBy` argument.
 */
  DESC = "DESC"
}
  

  
/**
 * Properties by which repository migrations can be ordered.
 */
export enum RepositoryMigrationOrderField {
  
/**
 * Order mannequins why when they were created.
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * Represents a object that belongs to a repository.
 */
export class RepositoryNode extends $Interface<{CommitComment: CommitComment,CommitCommentThread: CommitCommentThread,DependabotUpdate: DependabotUpdate,Discussion: Discussion,DiscussionCategory: DiscussionCategory,Issue: Issue,IssueComment: IssueComment,PinnedDiscussion: PinnedDiscussion,PullRequest: PullRequest,PullRequestCommitCommentThread: PullRequestCommitCommentThread,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,RepositoryVulnerabilityAlert: RepositoryVulnerabilityAlert}, "RepositoryNode"> {
  constructor() {
    super({CommitComment: CommitComment,CommitCommentThread: CommitCommentThread,DependabotUpdate: DependabotUpdate,Discussion: Discussion,DiscussionCategory: DiscussionCategory,Issue: Issue,IssueComment: IssueComment,PinnedDiscussion: PinnedDiscussion,PullRequest: PullRequest,PullRequestCommitCommentThread: PullRequestCommitCommentThread,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,RepositoryVulnerabilityAlert: RepositoryVulnerabilityAlert}, "RepositoryNode")
  }
}


/**
 * Ordering options for repository connections
 */
export type RepositoryOrder = {
  direction: OrderDirection,
field: RepositoryOrderField
}
    

  
/**
 * Properties by which repository connections can be ordered.
 */
export enum RepositoryOrderField {
  
/**
 * Order repositories by creation time
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order repositories by update time
 */
  UPDATED_AT = "UPDATED_AT",

/**
 * Order repositories by push time
 */
  PUSHED_AT = "PUSHED_AT",

/**
 * Order repositories by name
 */
  NAME = "NAME",

/**
 * Order repositories by number of stargazers
 */
  STARGAZERS = "STARGAZERS"
}
  


/**
 * Represents an owner of a Repository.
 */
export class RepositoryOwner extends $Interface<{Organization: Organization,User: User}, "RepositoryOwner"> {
  constructor() {
    super({Organization: Organization,User: User}, "RepositoryOwner")
  }
}

  
/**
 * The access level to a repository
 */
export enum RepositoryPermission {
  
/**
 * Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators
 */
  ADMIN = "ADMIN",

/**
 * Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings
 */
  MAINTAIN = "MAINTAIN",

/**
 * Can read, clone, and push to this repository. Can also manage issues and pull requests
 */
  WRITE = "WRITE",

/**
 * Can read and clone this repository. Can also manage issues and pull requests
 */
  TRIAGE = "TRIAGE",

/**
 * Can read and clone this repository. Can also open and comment on issues and pull requests
 */
  READ = "READ"
}
  

  
/**
 * The privacy of a repository
 */
export enum RepositoryPrivacy {
  
/**
 * Public
 */
  PUBLIC = "PUBLIC",

/**
 * Private
 */
  PRIVATE = "PRIVATE"
}
  


/**
 * A repository-topic connects a repository to a topic.
 */
export class RepositoryTopic extends $Base<"RepositoryTopic"> {
  constructor() {
    super("RepositoryTopic")
  }

  
      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The HTTP path for this repository-topic.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The topic.
 */
      topic<Sel extends Selection<Topic>>(selectorFn: (s: Topic) => [...Sel]):$Field<"topic", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Topic)
      };
      return this.$_select("topic", options) as any
    }
  

      
/**
 * The HTTP URL for this repository-topic.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * The connection type for RepositoryTopic.
 */
export class RepositoryTopicConnection extends $Base<"RepositoryTopicConnection"> {
  constructor() {
    super("RepositoryTopicConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<RepositoryTopicEdge>>(selectorFn: (s: RepositoryTopicEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryTopicEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<RepositoryTopic>>(selectorFn: (s: RepositoryTopic) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryTopic)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class RepositoryTopicEdge extends $Base<"RepositoryTopicEdge"> {
  constructor() {
    super("RepositoryTopicEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<RepositoryTopic>>(selectorFn: (s: RepositoryTopic) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryTopic)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The repository's visibility level.
 */
export enum RepositoryVisibility {
  
/**
 * The repository is visible only to those with explicit access.
 */
  PRIVATE = "PRIVATE",

/**
 * The repository is visible to everyone.
 */
  PUBLIC = "PUBLIC",

/**
 * The repository is visible only to users in the same business.
 */
  INTERNAL = "INTERNAL"
}
  


/**
 * Audit log entry for a repository_visibility_change.disable event.
 */
export class RepositoryVisibilityChangeDisableAuditEntry extends $Base<"RepositoryVisibilityChangeDisableAuditEntry"> {
  constructor() {
    super("RepositoryVisibilityChangeDisableAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The HTTP path for this enterprise.
 */
      get enterpriseResourcePath(): $Field<"enterpriseResourcePath", string | null | undefined>  {
       return this.$_select("enterpriseResourcePath") as any
      }

      
/**
 * The slug of the enterprise.
 */
      get enterpriseSlug(): $Field<"enterpriseSlug", string | null | undefined>  {
       return this.$_select("enterpriseSlug") as any
      }

      
/**
 * The HTTP URL for this enterprise.
 */
      get enterpriseUrl(): $Field<"enterpriseUrl", string | null | undefined>  {
       return this.$_select("enterpriseUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a repository_visibility_change.enable event.
 */
export class RepositoryVisibilityChangeEnableAuditEntry extends $Base<"RepositoryVisibilityChangeEnableAuditEntry"> {
  constructor() {
    super("RepositoryVisibilityChangeEnableAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The HTTP path for this enterprise.
 */
      get enterpriseResourcePath(): $Field<"enterpriseResourcePath", string | null | undefined>  {
       return this.$_select("enterpriseResourcePath") as any
      }

      
/**
 * The slug of the enterprise.
 */
      get enterpriseSlug(): $Field<"enterpriseSlug", string | null | undefined>  {
       return this.$_select("enterpriseSlug") as any
      }

      
/**
 * The HTTP URL for this enterprise.
 */
      get enterpriseUrl(): $Field<"enterpriseUrl", string | null | undefined>  {
       return this.$_select("enterpriseUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * A Dependabot alert for a repository with a dependency affected by a security vulnerability.
 */
export class RepositoryVulnerabilityAlert extends $Base<"RepositoryVulnerabilityAlert"> {
  constructor() {
    super("RepositoryVulnerabilityAlert")
  }

  
      
/**
 * When was the alert created?
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The associated Dependabot update
 */
      dependabotUpdate<Sel extends Selection<DependabotUpdate>>(selectorFn: (s: DependabotUpdate) => [...Sel]):$Field<"dependabotUpdate", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DependabotUpdate)
      };
      return this.$_select("dependabotUpdate", options) as any
    }
  

      
/**
 * The scope of an alert's dependency
 */
      get dependencyScope(): $Field<"dependencyScope", RepositoryVulnerabilityAlertDependencyScope | null | undefined>  {
       return this.$_select("dependencyScope") as any
      }

      
/**
 * Comment explaining the reason the alert was dismissed
 */
      get dismissComment(): $Field<"dismissComment", string | null | undefined>  {
       return this.$_select("dismissComment") as any
      }

      
/**
 * The reason the alert was dismissed
 */
      get dismissReason(): $Field<"dismissReason", string | null | undefined>  {
       return this.$_select("dismissReason") as any
      }

      
/**
 * When was the alert dismissed?
 */
      get dismissedAt(): $Field<"dismissedAt", string | null | undefined>  {
       return this.$_select("dismissedAt") as any
      }

      
/**
 * The user who dismissed the alert
 */
      dismisser<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"dismisser", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("dismisser", options) as any
    }
  

      
/**
 * The reason the alert was marked as fixed.
 */
      get fixReason(): $Field<"fixReason", string | null | undefined>  {
       return this.$_select("fixReason") as any
      }

      
/**
 * When was the alert fixed?
 */
      get fixedAt(): $Field<"fixedAt", string | null | undefined>  {
       return this.$_select("fixedAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the alert number.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * The associated repository
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The associated security advisory
 */
      securityAdvisory<Sel extends Selection<SecurityAdvisory>>(selectorFn: (s: SecurityAdvisory) => [...Sel]):$Field<"securityAdvisory", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityAdvisory)
      };
      return this.$_select("securityAdvisory", options) as any
    }
  

      
/**
 * The associated security vulnerability
 */
      securityVulnerability<Sel extends Selection<SecurityVulnerability>>(selectorFn: (s: SecurityVulnerability) => [...Sel]):$Field<"securityVulnerability", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityVulnerability)
      };
      return this.$_select("securityVulnerability", options) as any
    }
  

      
/**
 * Identifies the state of the alert.
 */
      get state(): $Field<"state", RepositoryVulnerabilityAlertState>  {
       return this.$_select("state") as any
      }

      
/**
 * The vulnerable manifest filename
 */
      get vulnerableManifestFilename(): $Field<"vulnerableManifestFilename", string>  {
       return this.$_select("vulnerableManifestFilename") as any
      }

      
/**
 * The vulnerable manifest path
 */
      get vulnerableManifestPath(): $Field<"vulnerableManifestPath", string>  {
       return this.$_select("vulnerableManifestPath") as any
      }

      
/**
 * The vulnerable requirements
 */
      get vulnerableRequirements(): $Field<"vulnerableRequirements", string | null | undefined>  {
       return this.$_select("vulnerableRequirements") as any
      }
}


/**
 * The connection type for RepositoryVulnerabilityAlert.
 */
export class RepositoryVulnerabilityAlertConnection extends $Base<"RepositoryVulnerabilityAlertConnection"> {
  constructor() {
    super("RepositoryVulnerabilityAlertConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<RepositoryVulnerabilityAlertEdge>>(selectorFn: (s: RepositoryVulnerabilityAlertEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryVulnerabilityAlertEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<RepositoryVulnerabilityAlert>>(selectorFn: (s: RepositoryVulnerabilityAlert) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryVulnerabilityAlert)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}

  
/**
 * The possible scopes of an alert's dependency.
 */
export enum RepositoryVulnerabilityAlertDependencyScope {
  
/**
 * A dependency that is leveraged during application runtime
 */
  RUNTIME = "RUNTIME",

/**
 * A dependency that is only used in development
 */
  DEVELOPMENT = "DEVELOPMENT"
}
  


/**
 * An edge in a connection.
 */
export class RepositoryVulnerabilityAlertEdge extends $Base<"RepositoryVulnerabilityAlertEdge"> {
  constructor() {
    super("RepositoryVulnerabilityAlertEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<RepositoryVulnerabilityAlert>>(selectorFn: (s: RepositoryVulnerabilityAlert) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryVulnerabilityAlert)
      };
      return this.$_select("node", options) as any
    }
  
}

  
/**
 * The possible states of an alert
 */
export enum RepositoryVulnerabilityAlertState {
  
/**
 * An alert that is still open.
 */
  OPEN = "OPEN",

/**
 * An alert that has been resolved by a code change.
 */
  FIXED = "FIXED",

/**
 * An alert that has been manually closed by a user.
 */
  DISMISSED = "DISMISSED"
}
  


/**
 * Autogenerated input type of RequestReviews
 */
export type RequestReviewsInput = {
  clientMutationId?: string | null | undefined,
pullRequestId: string,
teamIds?: Readonly<Array<string>> | null | undefined,
union?: boolean | null | undefined,
userIds?: Readonly<Array<string>> | null | undefined
}
    


/**
 * Autogenerated return type of RequestReviews
 */
export class RequestReviewsPayload extends $Base<"RequestReviewsPayload"> {
  constructor() {
    super("RequestReviewsPayload")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The pull request that is getting requests.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The edge from the pull request to the requested reviewers.
 */
      requestedReviewersEdge<Sel extends Selection<UserEdge>>(selectorFn: (s: UserEdge) => [...Sel]):$Field<"requestedReviewersEdge", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserEdge)
      };
      return this.$_select("requestedReviewersEdge", options) as any
    }
  
}

  
/**
 * The possible states that can be requested when creating a check run.
 */
export enum RequestableCheckStatusState {
  
/**
 * The check suite or run has been queued.
 */
  QUEUED = "QUEUED",

/**
 * The check suite or run is in progress.
 */
  IN_PROGRESS = "IN_PROGRESS",

/**
 * The check suite or run has been completed.
 */
  COMPLETED = "COMPLETED",

/**
 * The check suite or run is in waiting state.
 */
  WAITING = "WAITING",

/**
 * The check suite or run is in pending state.
 */
  PENDING = "PENDING"
}
  


/**
 * Types that can be requested reviewers.
 */
export class RequestedReviewer extends $Union<{Mannequin: Mannequin,Team: Team,User: User,Node: Node,Actor: Actor,UniformResourceLocatable: UniformResourceLocatable,Subscribable: Subscribable,MemberStatusable: MemberStatusable,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "RequestedReviewer"> {
  constructor() {
    super({Mannequin: Mannequin,Team: Team,User: User,Node: Node,Actor: Actor,UniformResourceLocatable: UniformResourceLocatable,Subscribable: Subscribable,MemberStatusable: MemberStatusable,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * The connection type for RequestedReviewer.
 */
export class RequestedReviewerConnection extends $Base<"RequestedReviewerConnection"> {
  constructor() {
    super("RequestedReviewerConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<RequestedReviewerEdge>>(selectorFn: (s: RequestedReviewerEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RequestedReviewerEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<RequestedReviewer>>(selectorFn: (s: RequestedReviewer) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RequestedReviewer)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class RequestedReviewerEdge extends $Base<"RequestedReviewerEdge"> {
  constructor() {
    super("RequestedReviewerEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<RequestedReviewer>>(selectorFn: (s: RequestedReviewer) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RequestedReviewer)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents a type that can be required by a pull request for merging.
 */
export class RequirableByPullRequest extends $Interface<{CheckRun: CheckRun,StatusContext: StatusContext}, "RequirableByPullRequest"> {
  constructor() {
    super({CheckRun: CheckRun,StatusContext: StatusContext}, "RequirableByPullRequest")
  }
}


/**
 * Represents a required status check for a protected branch, but not any specific run of that check.
 */
export class RequiredStatusCheckDescription extends $Base<"RequiredStatusCheckDescription"> {
  constructor() {
    super("RequiredStatusCheckDescription")
  }

  
      
/**
 * The App that must provide this status in order for it to be accepted.
 */
      app<Sel extends Selection<App>>(selectorFn: (s: App) => [...Sel]):$Field<"app", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new App)
      };
      return this.$_select("app", options) as any
    }
  

      
/**
 * The name of this status.
 */
      get context(): $Field<"context", string>  {
       return this.$_select("context") as any
      }
}


/**
 * Specifies the attributes for a new or updated required status check.
 */
export type RequiredStatusCheckInput = {
  appId?: string | null | undefined,
context: string
}
    


/**
 * Autogenerated input type of RerequestCheckSuite
 */
export type RerequestCheckSuiteInput = {
  checkSuiteId: string,
clientMutationId?: string | null | undefined,
repositoryId: string
}
    


/**
 * Autogenerated return type of RerequestCheckSuite
 */
export class RerequestCheckSuitePayload extends $Base<"RerequestCheckSuitePayload"> {
  constructor() {
    super("RerequestCheckSuitePayload")
  }

  
      
/**
 * The requested check suite.
 */
      checkSuite<Sel extends Selection<CheckSuite>>(selectorFn: (s: CheckSuite) => [...Sel]):$Field<"checkSuite", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckSuite)
      };
      return this.$_select("checkSuite", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of ResolveReviewThread
 */
export type ResolveReviewThreadInput = {
  clientMutationId?: string | null | undefined,
threadId: string
}
    


/**
 * Autogenerated return type of ResolveReviewThread
 */
export class ResolveReviewThreadPayload extends $Base<"ResolveReviewThreadPayload"> {
  constructor() {
    super("ResolveReviewThreadPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The thread to resolve.
 */
      thread<Sel extends Selection<PullRequestReviewThread>>(selectorFn: (s: PullRequestReviewThread) => [...Sel]):$Field<"thread", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewThread)
      };
      return this.$_select("thread", options) as any
    }
  
}


/**
 * Represents a private contribution a user made on GitHub.
 */
export class RestrictedContribution extends $Base<"RestrictedContribution"> {
  constructor() {
    super("RestrictedContribution")
  }

  
      
/**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.

 */
      get isRestricted(): $Field<"isRestricted", boolean>  {
       return this.$_select("isRestricted") as any
      }

      
/**
 * When this contribution was made.
 */
      get occurredAt(): $Field<"occurredAt", string>  {
       return this.$_select("occurredAt") as any
      }

      
/**
 * The HTTP path for this contribution.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The HTTP URL for this contribution.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * The user who made this contribution.

 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * A user, team, or app who has the ability to dismiss a review on a protected branch.
 */
export class ReviewDismissalAllowance extends $Base<"ReviewDismissalAllowance"> {
  constructor() {
    super("ReviewDismissalAllowance")
  }

  
      
/**
 * The actor that can dismiss.
 */
      actor<Sel extends Selection<ReviewDismissalAllowanceActor>>(selectorFn: (s: ReviewDismissalAllowanceActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReviewDismissalAllowanceActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the branch protection rule associated with the allowed user, team, or app.
 */
      branchProtectionRule<Sel extends Selection<BranchProtectionRule>>(selectorFn: (s: BranchProtectionRule) => [...Sel]):$Field<"branchProtectionRule", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRule)
      };
      return this.$_select("branchProtectionRule", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }
}


/**
 * Types that can be an actor.
 */
export class ReviewDismissalAllowanceActor extends $Union<{App: App,Team: Team,User: User,Node: Node,Subscribable: Subscribable,MemberStatusable: MemberStatusable,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "ReviewDismissalAllowanceActor"> {
  constructor() {
    super({App: App,Team: Team,User: User,Node: Node,Subscribable: Subscribable,MemberStatusable: MemberStatusable,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * The connection type for ReviewDismissalAllowance.
 */
export class ReviewDismissalAllowanceConnection extends $Base<"ReviewDismissalAllowanceConnection"> {
  constructor() {
    super("ReviewDismissalAllowanceConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ReviewDismissalAllowanceEdge>>(selectorFn: (s: ReviewDismissalAllowanceEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReviewDismissalAllowanceEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ReviewDismissalAllowance>>(selectorFn: (s: ReviewDismissalAllowance) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReviewDismissalAllowance)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ReviewDismissalAllowanceEdge extends $Base<"ReviewDismissalAllowanceEdge"> {
  constructor() {
    super("ReviewDismissalAllowanceEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ReviewDismissalAllowance>>(selectorFn: (s: ReviewDismissalAllowance) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReviewDismissalAllowance)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents a 'review_dismissed' event on a given issue or pull request.
 */
export class ReviewDismissedEvent extends $Base<"ReviewDismissedEvent"> {
  constructor() {
    super("ReviewDismissedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * Identifies the optional message associated with the 'review_dismissed' event.
 */
      get dismissalMessage(): $Field<"dismissalMessage", string | null | undefined>  {
       return this.$_select("dismissalMessage") as any
      }

      
/**
 * Identifies the optional message associated with the event, rendered to HTML.
 */
      get dismissalMessageHTML(): $Field<"dismissalMessageHTML", string | null | undefined>  {
       return this.$_select("dismissalMessageHTML") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the previous state of the review with the 'review_dismissed' event.
 */
      get previousReviewState(): $Field<"previousReviewState", PullRequestReviewState>  {
       return this.$_select("previousReviewState") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * Identifies the commit which caused the review to become stale.
 */
      pullRequestCommit<Sel extends Selection<PullRequestCommit>>(selectorFn: (s: PullRequestCommit) => [...Sel]):$Field<"pullRequestCommit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestCommit)
      };
      return this.$_select("pullRequestCommit", options) as any
    }
  

      
/**
 * The HTTP path for this review dismissed event.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the review associated with the 'review_dismissed' event.
 */
      review<Sel extends Selection<PullRequestReview>>(selectorFn: (s: PullRequestReview) => [...Sel]):$Field<"review", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReview)
      };
      return this.$_select("review", options) as any
    }
  

      
/**
 * The HTTP URL for this review dismissed event.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * A request for a user to review a pull request.
 */
export class ReviewRequest extends $Base<"ReviewRequest"> {
  constructor() {
    super("ReviewRequest")
  }

  
      
/**
 * Whether this request was created for a code owner
 */
      get asCodeOwner(): $Field<"asCodeOwner", boolean>  {
       return this.$_select("asCodeOwner") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the pull request associated with this review request.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * The reviewer that is requested.
 */
      requestedReviewer<Sel extends Selection<RequestedReviewer>>(selectorFn: (s: RequestedReviewer) => [...Sel]):$Field<"requestedReviewer", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RequestedReviewer)
      };
      return this.$_select("requestedReviewer", options) as any
    }
  
}


/**
 * The connection type for ReviewRequest.
 */
export class ReviewRequestConnection extends $Base<"ReviewRequestConnection"> {
  constructor() {
    super("ReviewRequestConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<ReviewRequestEdge>>(selectorFn: (s: ReviewRequestEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReviewRequestEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<ReviewRequest>>(selectorFn: (s: ReviewRequest) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReviewRequest)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class ReviewRequestEdge extends $Base<"ReviewRequestEdge"> {
  constructor() {
    super("ReviewRequestEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<ReviewRequest>>(selectorFn: (s: ReviewRequest) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReviewRequest)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents an 'review_request_removed' event on a given pull request.
 */
export class ReviewRequestRemovedEvent extends $Base<"ReviewRequestRemovedEvent"> {
  constructor() {
    super("ReviewRequestRemovedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * Identifies the reviewer whose review request was removed.
 */
      requestedReviewer<Sel extends Selection<RequestedReviewer>>(selectorFn: (s: RequestedReviewer) => [...Sel]):$Field<"requestedReviewer", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RequestedReviewer)
      };
      return this.$_select("requestedReviewer", options) as any
    }
  
}


/**
 * Represents an 'review_requested' event on a given pull request.
 */
export class ReviewRequestedEvent extends $Base<"ReviewRequestedEvent"> {
  constructor() {
    super("ReviewRequestedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * PullRequest referenced by event.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  

      
/**
 * Identifies the reviewer whose review was requested.
 */
      requestedReviewer<Sel extends Selection<RequestedReviewer>>(selectorFn: (s: RequestedReviewer) => [...Sel]):$Field<"requestedReviewer", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RequestedReviewer)
      };
      return this.$_select("requestedReviewer", options) as any
    }
  
}


/**
 * A hovercard context with a message describing the current code review state of the pull
request.

 */
export class ReviewStatusHovercardContext extends $Base<"ReviewStatusHovercardContext"> {
  constructor() {
    super("ReviewStatusHovercardContext")
  }

  
      
/**
 * A string describing this context
 */
      get message(): $Field<"message", string>  {
       return this.$_select("message") as any
      }

      
/**
 * An octicon to accompany this context
 */
      get octicon(): $Field<"octicon", string>  {
       return this.$_select("octicon") as any
      }

      
/**
 * The current status of the pull request with respect to code review.
 */
      get reviewDecision(): $Field<"reviewDecision", PullRequestReviewDecision | null | undefined>  {
       return this.$_select("reviewDecision") as any
      }
}


/**
 * Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole
 */
export type RevokeEnterpriseOrganizationsMigratorRoleInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
login: string
}
    


/**
 * Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole
 */
export class RevokeEnterpriseOrganizationsMigratorRolePayload extends $Base<"RevokeEnterpriseOrganizationsMigratorRolePayload"> {
  constructor() {
    super("RevokeEnterpriseOrganizationsMigratorRolePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The organizations that had the migrator role revoked for the given user.
 */
      organizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"organizations", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
organizations<Sel extends Selection<OrganizationConnection>>(selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"organizations", GetOutput<Sel> | undefined , GetVariables<Sel>>
organizations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("organizations", options) as any
    }
  
}


/**
 * Autogenerated input type of RevokeMigratorRole
 */
export type RevokeMigratorRoleInput = {
  actor: string,
actorType: ActorType,
clientMutationId?: string | null | undefined,
organizationId: string
}
    


/**
 * Autogenerated return type of RevokeMigratorRole
 */
export class RevokeMigratorRolePayload extends $Base<"RevokeMigratorRolePayload"> {
  constructor() {
    super("RevokeMigratorRolePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * Did the operation succeed?
 */
      get success(): $Field<"success", boolean | null | undefined>  {
       return this.$_select("success") as any
      }
}

  
/**
 * Possible roles a user may have in relation to an organization.
 */
export enum RoleInOrganization {
  
/**
 * A user with full administrative access to the organization.
 */
  OWNER = "OWNER",

/**
 * A user who is a direct member of the organization.
 */
  DIRECT_MEMBER = "DIRECT_MEMBER",

/**
 * A user who is unaffiliated with the organization.
 */
  UNAFFILIATED = "UNAFFILIATED"
}
  

  
/**
 * The possible digest algorithms used to sign SAML requests for an identity provider.
 */
export enum SamlDigestAlgorithm {
  
/**
 * SHA1
 */
  SHA1 = "SHA1",

/**
 * SHA256
 */
  SHA256 = "SHA256",

/**
 * SHA384
 */
  SHA384 = "SHA384",

/**
 * SHA512
 */
  SHA512 = "SHA512"
}
  

  
/**
 * The possible signature algorithms used to sign SAML requests for a Identity Provider.
 */
export enum SamlSignatureAlgorithm {
  
/**
 * RSA-SHA1
 */
  RSA_SHA1 = "RSA_SHA1",

/**
 * RSA-SHA256
 */
  RSA_SHA256 = "RSA_SHA256",

/**
 * RSA-SHA384
 */
  RSA_SHA384 = "RSA_SHA384",

/**
 * RSA-SHA512
 */
  RSA_SHA512 = "RSA_SHA512"
}
  


/**
 * A Saved Reply is text a user can use to reply quickly.
 */
export class SavedReply extends $Base<"SavedReply"> {
  constructor() {
    super("SavedReply")
  }

  
      
/**
 * The body of the saved reply.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The saved reply body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The title of the saved reply.
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }

      
/**
 * The user that saved this reply.
 */
      user<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * The connection type for SavedReply.
 */
export class SavedReplyConnection extends $Base<"SavedReplyConnection"> {
  constructor() {
    super("SavedReplyConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<SavedReplyEdge>>(selectorFn: (s: SavedReplyEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SavedReplyEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<SavedReply>>(selectorFn: (s: SavedReply) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SavedReply)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class SavedReplyEdge extends $Base<"SavedReplyEdge"> {
  constructor() {
    super("SavedReplyEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<SavedReply>>(selectorFn: (s: SavedReply) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SavedReply)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for saved reply connections.
 */
export type SavedReplyOrder = {
  direction: OrderDirection,
field: SavedReplyOrderField
}
    

  
/**
 * Properties by which saved reply connections can be ordered.
 */
export enum SavedReplyOrderField {
  
/**
 * Order saved reply by when they were updated.
 */
  UPDATED_AT = "UPDATED_AT"
}
  


/**
 * The results of a search.
 */
export class SearchResultItem extends $Union<{App: App,Discussion: Discussion,Issue: Issue,MarketplaceListing: MarketplaceListing,Organization: Organization,PullRequest: PullRequest,Repository: Repository,User: User,Node: Node,Comment: Comment,Updatable: Updatable,Deletable: Deletable,Labelable: Labelable,Lockable: Lockable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,Reactable: Reactable,Votable: Votable,Assignable: Assignable,Closable: Closable,UpdatableComment: UpdatableComment,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable,Starrable: Starrable,RepositoryInfo: RepositoryInfo}, "SearchResultItem"> {
  constructor() {
    super({App: App,Discussion: Discussion,Issue: Issue,MarketplaceListing: MarketplaceListing,Organization: Organization,PullRequest: PullRequest,Repository: Repository,User: User,Node: Node,Comment: Comment,Updatable: Updatable,Deletable: Deletable,Labelable: Labelable,Lockable: Lockable,RepositoryNode: RepositoryNode,Subscribable: Subscribable,Reactable: Reactable,Votable: Votable,Assignable: Assignable,Closable: Closable,UpdatableComment: UpdatableComment,UniformResourceLocatable: UniformResourceLocatable,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable,Starrable: Starrable,RepositoryInfo: RepositoryInfo})
  }
}


/**
 * A list of results that matched against a search query. Regardless of the number of matches, a maximum of 1,000 results will be available across all types, potentially split across many pages.
 */
export class SearchResultItemConnection extends $Base<"SearchResultItemConnection"> {
  constructor() {
    super("SearchResultItemConnection")
  }

  
      
/**
 * The total number of pieces of code that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
 */
      get codeCount(): $Field<"codeCount", number>  {
       return this.$_select("codeCount") as any
      }

      
/**
 * The total number of discussions that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
 */
      get discussionCount(): $Field<"discussionCount", number>  {
       return this.$_select("discussionCount") as any
      }

      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<SearchResultItemEdge>>(selectorFn: (s: SearchResultItemEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SearchResultItemEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * The total number of issues that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
 */
      get issueCount(): $Field<"issueCount", number>  {
       return this.$_select("issueCount") as any
      }

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<SearchResultItem>>(selectorFn: (s: SearchResultItem) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SearchResultItem)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * The total number of repositories that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
 */
      get repositoryCount(): $Field<"repositoryCount", number>  {
       return this.$_select("repositoryCount") as any
      }

      
/**
 * The total number of users that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
 */
      get userCount(): $Field<"userCount", number>  {
       return this.$_select("userCount") as any
      }

      
/**
 * The total number of wiki pages that matched the search query. Regardless of the total number of matches, a maximum of 1,000 results will be available across all types.
 */
      get wikiCount(): $Field<"wikiCount", number>  {
       return this.$_select("wikiCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class SearchResultItemEdge extends $Base<"SearchResultItemEdge"> {
  constructor() {
    super("SearchResultItemEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<SearchResultItem>>(selectorFn: (s: SearchResultItem) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SearchResultItem)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * Text matches on the result found.
 */
      textMatches<Sel extends Selection<TextMatch>>(selectorFn: (s: TextMatch) => [...Sel]):$Field<"textMatches", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TextMatch)
      };
      return this.$_select("textMatches", options) as any
    }
  
}

  
/**
 * Represents the individual results of a search.
 */
export enum SearchType {
  
/**
 * Returns results matching issues in repositories.
 */
  ISSUE = "ISSUE",

/**
 * Returns results matching repositories.
 */
  REPOSITORY = "REPOSITORY",

/**
 * Returns results matching users and organizations on GitHub.
 */
  USER = "USER",

/**
 * Returns matching discussions in repositories.
 */
  DISCUSSION = "DISCUSSION"
}
  


/**
 * A GitHub Security Advisory
 */
export class SecurityAdvisory extends $Base<"SecurityAdvisory"> {
  constructor() {
    super("SecurityAdvisory")
  }

  
      
/**
 * The classification of the advisory
 */
      get classification(): $Field<"classification", SecurityAdvisoryClassification>  {
       return this.$_select("classification") as any
      }

      
/**
 * The CVSS associated with this advisory
 */
      cvss<Sel extends Selection<CVSS>>(selectorFn: (s: CVSS) => [...Sel]):$Field<"cvss", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CVSS)
      };
      return this.$_select("cvss", options) as any
    }
  

      
/**
 * CWEs associated with this Advisory
 */
      cwes<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<CWEConnection>>(args: Args, selectorFn: (s: CWEConnection) => [...Sel]):$Field<"cwes", GetOutput<Sel> , GetVariables<Sel, Args>>
cwes<Sel extends Selection<CWEConnection>>(selectorFn: (s: CWEConnection) => [...Sel]):$Field<"cwes", GetOutput<Sel> , GetVariables<Sel>>
cwes(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new CWEConnection)
      };
      return this.$_select("cwes", options) as any
    }
  

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * This is a long plaintext description of the advisory
 */
      get description(): $Field<"description", string>  {
       return this.$_select("description") as any
      }

      
/**
 * The GitHub Security Advisory ID
 */
      get ghsaId(): $Field<"ghsaId", string>  {
       return this.$_select("ghsaId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * A list of identifiers for this advisory
 */
      identifiers<Sel extends Selection<SecurityAdvisoryIdentifier>>(selectorFn: (s: SecurityAdvisoryIdentifier) => [...Sel]):$Field<"identifiers", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityAdvisoryIdentifier)
      };
      return this.$_select("identifiers", options) as any
    }
  

      
/**
 * The permalink for the advisory's dependabot alerts page
 */
      get notificationsPermalink(): $Field<"notificationsPermalink", string | null | undefined>  {
       return this.$_select("notificationsPermalink") as any
      }

      
/**
 * The organization that originated the advisory
 */
      get origin(): $Field<"origin", string>  {
       return this.$_select("origin") as any
      }

      
/**
 * The permalink for the advisory
 */
      get permalink(): $Field<"permalink", string | null | undefined>  {
       return this.$_select("permalink") as any
      }

      
/**
 * When the advisory was published
 */
      get publishedAt(): $Field<"publishedAt", string>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * A list of references for this advisory
 */
      references<Sel extends Selection<SecurityAdvisoryReference>>(selectorFn: (s: SecurityAdvisoryReference) => [...Sel]):$Field<"references", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityAdvisoryReference)
      };
      return this.$_select("references", options) as any
    }
  

      
/**
 * The severity of the advisory
 */
      get severity(): $Field<"severity", SecurityAdvisorySeverity>  {
       return this.$_select("severity") as any
      }

      
/**
 * A short plaintext summary of the advisory
 */
      get summary(): $Field<"summary", string>  {
       return this.$_select("summary") as any
      }

      
/**
 * When the advisory was last updated
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * Vulnerabilities associated with this Advisory
 */
      vulnerabilities<Args extends VariabledInput<{
        orderBy?: SecurityVulnerabilityOrder | null | undefined
ecosystem?: SecurityAdvisoryEcosystem | null | undefined
package?: string | null | undefined
severities?: Readonly<Array<SecurityAdvisorySeverity>> | null | undefined
classifications?: Readonly<Array<SecurityAdvisoryClassification>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<SecurityVulnerabilityConnection>>(args: Args, selectorFn: (s: SecurityVulnerabilityConnection) => [...Sel]):$Field<"vulnerabilities", GetOutput<Sel> , GetVariables<Sel, Args>>
vulnerabilities<Sel extends Selection<SecurityVulnerabilityConnection>>(selectorFn: (s: SecurityVulnerabilityConnection) => [...Sel]):$Field<"vulnerabilities", GetOutput<Sel> , GetVariables<Sel>>
vulnerabilities(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "SecurityVulnerabilityOrder",
ecosystem: "SecurityAdvisoryEcosystem",
package: "String",
severities: "[SecurityAdvisorySeverity!]",
classifications: "[SecurityAdvisoryClassification!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new SecurityVulnerabilityConnection)
      };
      return this.$_select("vulnerabilities", options) as any
    }
  

      
/**
 * When the advisory was withdrawn, if it has been withdrawn
 */
      get withdrawnAt(): $Field<"withdrawnAt", string | null | undefined>  {
       return this.$_select("withdrawnAt") as any
      }
}

  
/**
 * Classification of the advisory.
 */
export enum SecurityAdvisoryClassification {
  
/**
 * Classification of general advisories.
 */
  GENERAL = "GENERAL",

/**
 * Classification of malware advisories.
 */
  MALWARE = "MALWARE"
}
  


/**
 * The connection type for SecurityAdvisory.
 */
export class SecurityAdvisoryConnection extends $Base<"SecurityAdvisoryConnection"> {
  constructor() {
    super("SecurityAdvisoryConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<SecurityAdvisoryEdge>>(selectorFn: (s: SecurityAdvisoryEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityAdvisoryEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<SecurityAdvisory>>(selectorFn: (s: SecurityAdvisory) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityAdvisory)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}

  
/**
 * The possible ecosystems of a security vulnerability's package.
 */
export enum SecurityAdvisoryEcosystem {
  
/**
 * PHP packages hosted at packagist.org
 */
  COMPOSER = "COMPOSER",

/**
 * Erlang/Elixir packages hosted at hex.pm
 */
  ERLANG = "ERLANG",

/**
 * GitHub Actions
 */
  ACTIONS = "ACTIONS",

/**
 * Go modules
 */
  GO = "GO",

/**
 * Java artifacts hosted at the Maven central repository
 */
  MAVEN = "MAVEN",

/**
 * JavaScript packages hosted at npmjs.com
 */
  NPM = "NPM",

/**
 * .NET packages hosted at the NuGet Gallery
 */
  NUGET = "NUGET",

/**
 * Python packages hosted at PyPI.org
 */
  PIP = "PIP",

/**
 * Dart packages hosted at pub.dev
 */
  PUB = "PUB",

/**
 * Ruby gems hosted at RubyGems.org
 */
  RUBYGEMS = "RUBYGEMS",

/**
 * Rust crates
 */
  RUST = "RUST"
}
  


/**
 * An edge in a connection.
 */
export class SecurityAdvisoryEdge extends $Base<"SecurityAdvisoryEdge"> {
  constructor() {
    super("SecurityAdvisoryEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<SecurityAdvisory>>(selectorFn: (s: SecurityAdvisory) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityAdvisory)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * A GitHub Security Advisory Identifier
 */
export class SecurityAdvisoryIdentifier extends $Base<"SecurityAdvisoryIdentifier"> {
  constructor() {
    super("SecurityAdvisoryIdentifier")
  }

  
      
/**
 * The identifier type, e.g. GHSA, CVE
 */
      get type(): $Field<"type", string>  {
       return this.$_select("type") as any
      }

      
/**
 * The identifier
 */
      get value(): $Field<"value", string>  {
       return this.$_select("value") as any
      }
}


/**
 * An advisory identifier to filter results on.
 */
export type SecurityAdvisoryIdentifierFilter = {
  type: SecurityAdvisoryIdentifierType,
value: string
}
    

  
/**
 * Identifier formats available for advisories.
 */
export enum SecurityAdvisoryIdentifierType {
  
/**
 * Common Vulnerabilities and Exposures Identifier.
 */
  CVE = "CVE",

/**
 * GitHub Security Advisory ID.
 */
  GHSA = "GHSA"
}
  


/**
 * Ordering options for security advisory connections
 */
export type SecurityAdvisoryOrder = {
  direction: OrderDirection,
field: SecurityAdvisoryOrderField
}
    

  
/**
 * Properties by which security advisory connections can be ordered.
 */
export enum SecurityAdvisoryOrderField {
  
/**
 * Order advisories by publication time
 */
  PUBLISHED_AT = "PUBLISHED_AT",

/**
 * Order advisories by update time
 */
  UPDATED_AT = "UPDATED_AT"
}
  


/**
 * An individual package
 */
export class SecurityAdvisoryPackage extends $Base<"SecurityAdvisoryPackage"> {
  constructor() {
    super("SecurityAdvisoryPackage")
  }

  
      
/**
 * The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
 */
      get ecosystem(): $Field<"ecosystem", SecurityAdvisoryEcosystem>  {
       return this.$_select("ecosystem") as any
      }

      
/**
 * The package name
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }
}


/**
 * An individual package version
 */
export class SecurityAdvisoryPackageVersion extends $Base<"SecurityAdvisoryPackageVersion"> {
  constructor() {
    super("SecurityAdvisoryPackageVersion")
  }

  
      
/**
 * The package name or version
 */
      get identifier(): $Field<"identifier", string>  {
       return this.$_select("identifier") as any
      }
}


/**
 * A GitHub Security Advisory Reference
 */
export class SecurityAdvisoryReference extends $Base<"SecurityAdvisoryReference"> {
  constructor() {
    super("SecurityAdvisoryReference")
  }

  
      
/**
 * A publicly accessible reference
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}

  
/**
 * Severity of the vulnerability.
 */
export enum SecurityAdvisorySeverity {
  
/**
 * Low.
 */
  LOW = "LOW",

/**
 * Moderate.
 */
  MODERATE = "MODERATE",

/**
 * High.
 */
  HIGH = "HIGH",

/**
 * Critical.
 */
  CRITICAL = "CRITICAL"
}
  


/**
 * An individual vulnerability within an Advisory
 */
export class SecurityVulnerability extends $Base<"SecurityVulnerability"> {
  constructor() {
    super("SecurityVulnerability")
  }

  
      
/**
 * The Advisory associated with this Vulnerability
 */
      advisory<Sel extends Selection<SecurityAdvisory>>(selectorFn: (s: SecurityAdvisory) => [...Sel]):$Field<"advisory", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityAdvisory)
      };
      return this.$_select("advisory", options) as any
    }
  

      
/**
 * The first version containing a fix for the vulnerability
 */
      firstPatchedVersion<Sel extends Selection<SecurityAdvisoryPackageVersion>>(selectorFn: (s: SecurityAdvisoryPackageVersion) => [...Sel]):$Field<"firstPatchedVersion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityAdvisoryPackageVersion)
      };
      return this.$_select("firstPatchedVersion", options) as any
    }
  

      
/**
 * A description of the vulnerable package
 */
      package<Sel extends Selection<SecurityAdvisoryPackage>>(selectorFn: (s: SecurityAdvisoryPackage) => [...Sel]):$Field<"package", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityAdvisoryPackage)
      };
      return this.$_select("package", options) as any
    }
  

      
/**
 * The severity of the vulnerability within this package
 */
      get severity(): $Field<"severity", SecurityAdvisorySeverity>  {
       return this.$_select("severity") as any
      }

      
/**
 * When the vulnerability was last updated
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * A string that describes the vulnerable package versions.
This string follows a basic syntax with a few forms.
+ `= 0.2.0` denotes a single vulnerable version.
+ `<= 1.0.8` denotes a version range up to and including the specified version
+ `< 0.1.11` denotes a version range up to, but excluding, the specified version
+ `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
+ `>= 0.0.1` denotes a version range with a known minimum, but no known maximum

 */
      get vulnerableVersionRange(): $Field<"vulnerableVersionRange", string>  {
       return this.$_select("vulnerableVersionRange") as any
      }
}


/**
 * The connection type for SecurityVulnerability.
 */
export class SecurityVulnerabilityConnection extends $Base<"SecurityVulnerabilityConnection"> {
  constructor() {
    super("SecurityVulnerabilityConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<SecurityVulnerabilityEdge>>(selectorFn: (s: SecurityVulnerabilityEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityVulnerabilityEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<SecurityVulnerability>>(selectorFn: (s: SecurityVulnerability) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityVulnerability)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class SecurityVulnerabilityEdge extends $Base<"SecurityVulnerabilityEdge"> {
  constructor() {
    super("SecurityVulnerabilityEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<SecurityVulnerability>>(selectorFn: (s: SecurityVulnerability) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SecurityVulnerability)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for security vulnerability connections
 */
export type SecurityVulnerabilityOrder = {
  direction: OrderDirection,
field: SecurityVulnerabilityOrderField
}
    

  
/**
 * Properties by which security vulnerability connections can be ordered.
 */
export enum SecurityVulnerabilityOrderField {
  
/**
 * Order vulnerability by update time
 */
  UPDATED_AT = "UPDATED_AT"
}
  


/**
 * Autogenerated input type of SetEnterpriseIdentityProvider
 */
export type SetEnterpriseIdentityProviderInput = {
  clientMutationId?: string | null | undefined,
digestMethod: SamlDigestAlgorithm,
enterpriseId: string,
idpCertificate: string,
issuer?: string | null | undefined,
signatureMethod: SamlSignatureAlgorithm,
ssoUrl: string
}
    


/**
 * Autogenerated return type of SetEnterpriseIdentityProvider
 */
export class SetEnterpriseIdentityProviderPayload extends $Base<"SetEnterpriseIdentityProviderPayload"> {
  constructor() {
    super("SetEnterpriseIdentityProviderPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The identity provider for the enterprise.
 */
      identityProvider<Sel extends Selection<EnterpriseIdentityProvider>>(selectorFn: (s: EnterpriseIdentityProvider) => [...Sel]):$Field<"identityProvider", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new EnterpriseIdentityProvider)
      };
      return this.$_select("identityProvider", options) as any
    }
  
}


/**
 * Autogenerated input type of SetOrganizationInteractionLimit
 */
export type SetOrganizationInteractionLimitInput = {
  clientMutationId?: string | null | undefined,
expiry?: RepositoryInteractionLimitExpiry | null | undefined,
limit: RepositoryInteractionLimit,
organizationId: string
}
    


/**
 * Autogenerated return type of SetOrganizationInteractionLimit
 */
export class SetOrganizationInteractionLimitPayload extends $Base<"SetOrganizationInteractionLimitPayload"> {
  constructor() {
    super("SetOrganizationInteractionLimitPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The organization that the interaction limit was set for.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  
}


/**
 * Autogenerated input type of SetRepositoryInteractionLimit
 */
export type SetRepositoryInteractionLimitInput = {
  clientMutationId?: string | null | undefined,
expiry?: RepositoryInteractionLimitExpiry | null | undefined,
limit: RepositoryInteractionLimit,
repositoryId: string
}
    


/**
 * Autogenerated return type of SetRepositoryInteractionLimit
 */
export class SetRepositoryInteractionLimitPayload extends $Base<"SetRepositoryInteractionLimitPayload"> {
  constructor() {
    super("SetRepositoryInteractionLimitPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The repository that the interaction limit was set for.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * Autogenerated input type of SetUserInteractionLimit
 */
export type SetUserInteractionLimitInput = {
  clientMutationId?: string | null | undefined,
expiry?: RepositoryInteractionLimitExpiry | null | undefined,
limit: RepositoryInteractionLimit,
userId: string
}
    


/**
 * Autogenerated return type of SetUserInteractionLimit
 */
export class SetUserInteractionLimitPayload extends $Base<"SetUserInteractionLimitPayload"> {
  constructor() {
    super("SetUserInteractionLimitPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The user that the interaction limit was set for.
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * Represents an S/MIME signature on a Commit or Tag.
 */
export class SmimeSignature extends $Base<"SmimeSignature"> {
  constructor() {
    super("SmimeSignature")
  }

  
      
/**
 * Email used to sign this object.
 */
      get email(): $Field<"email", string>  {
       return this.$_select("email") as any
      }

      
/**
 * True if the signature is valid and verified by GitHub.
 */
      get isValid(): $Field<"isValid", boolean>  {
       return this.$_select("isValid") as any
      }

      
/**
 * Payload for GPG signing object. Raw ODB object without the signature header.
 */
      get payload(): $Field<"payload", string>  {
       return this.$_select("payload") as any
      }

      
/**
 * ASCII-armored signature header from object.
 */
      get signature(): $Field<"signature", string>  {
       return this.$_select("signature") as any
      }

      
/**
 * GitHub user corresponding to the email signing this commit.
 */
      signer<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"signer", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("signer", options) as any
    }
  

      
/**
 * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
 */
      get state(): $Field<"state", GitSignatureState>  {
       return this.$_select("state") as any
      }

      
/**
 * True if the signature was made with GitHub's signing key.
 */
      get wasSignedByGitHub(): $Field<"wasSignedByGitHub", boolean>  {
       return this.$_select("wasSignedByGitHub") as any
      }
}


/**
 * Represents a sort by field and direction.
 */
export class SortBy extends $Base<"SortBy"> {
  constructor() {
    super("SortBy")
  }

  
      
/**
 * The direction of the sorting. Possible values are ASC and DESC.
 */
      get direction(): $Field<"direction", OrderDirection>  {
       return this.$_select("direction") as any
      }

      
/**
 * The id of the field by which the column is sorted.
 */
      get field(): $Field<"field", number>  {
       return this.$_select("field") as any
      }
}


/**
 * Entities that can sponsor others via GitHub Sponsors
 */
export class Sponsor extends $Union<{Organization: Organization,User: User,Node: Node,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "Sponsor"> {
  constructor() {
    super({Organization: Organization,User: User,Node: Node,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * The connection type for Sponsor.
 */
export class SponsorConnection extends $Base<"SponsorConnection"> {
  constructor() {
    super("SponsorConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<SponsorEdge>>(selectorFn: (s: SponsorEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Sponsor>>(selectorFn: (s: Sponsor) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsor)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Represents a user or organization who is sponsoring someone in GitHub Sponsors.
 */
export class SponsorEdge extends $Base<"SponsorEdge"> {
  constructor() {
    super("SponsorEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Sponsor>>(selectorFn: (s: Sponsor) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsor)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for connections to get sponsor entities for GitHub Sponsors.
 */
export type SponsorOrder = {
  direction: OrderDirection,
field: SponsorOrderField
}
    

  
/**
 * Properties by which sponsor connections can be ordered.
 */
export enum SponsorOrderField {
  
/**
 * Order sponsorable entities by login (username).
 */
  LOGIN = "LOGIN",

/**
 * Order sponsors by their relevance to the viewer.
 */
  RELEVANCE = "RELEVANCE"
}
  


/**
 * Entities that can be sponsored through GitHub Sponsors
 */
export class Sponsorable extends $Interface<{Organization: Organization,User: User}, "Sponsorable"> {
  constructor() {
    super({Organization: Organization,User: User}, "Sponsorable")
  }
}


/**
 * Entities that can be sponsored via GitHub Sponsors
 */
export class SponsorableItem extends $Union<{Organization: Organization,User: User,Node: Node,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "SponsorableItem"> {
  constructor() {
    super({Organization: Organization,User: User,Node: Node,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * The connection type for SponsorableItem.
 */
export class SponsorableItemConnection extends $Base<"SponsorableItemConnection"> {
  constructor() {
    super("SponsorableItemConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<SponsorableItemEdge>>(selectorFn: (s: SponsorableItemEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorableItemEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<SponsorableItem>>(selectorFn: (s: SponsorableItem) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorableItem)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class SponsorableItemEdge extends $Base<"SponsorableItemEdge"> {
  constructor() {
    super("SponsorableItemEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<SponsorableItem>>(selectorFn: (s: SponsorableItem) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorableItem)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for connections to get sponsorable entities for GitHub Sponsors.
 */
export type SponsorableOrder = {
  direction: OrderDirection,
field: SponsorableOrderField
}
    

  
/**
 * Properties by which sponsorable connections can be ordered.
 */
export enum SponsorableOrderField {
  
/**
 * Order sponsorable entities by login (username).
 */
  LOGIN = "LOGIN"
}
  


/**
 * An event related to sponsorship activity.
 */
export class SponsorsActivity extends $Base<"SponsorsActivity"> {
  constructor() {
    super("SponsorsActivity")
  }

  
      
/**
 * What action this activity indicates took place.
 */
      get action(): $Field<"action", SponsorsActivityAction>  {
       return this.$_select("action") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The tier that the sponsorship used to use, for tier change events.
 */
      previousSponsorsTier<Sel extends Selection<SponsorsTier>>(selectorFn: (s: SponsorsTier) => [...Sel]):$Field<"previousSponsorsTier", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsTier)
      };
      return this.$_select("previousSponsorsTier", options) as any
    }
  

      
/**
 * The user or organization who triggered this activity and was/is sponsoring the sponsorable.
 */
      sponsor<Sel extends Selection<Sponsor>>(selectorFn: (s: Sponsor) => [...Sel]):$Field<"sponsor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsor)
      };
      return this.$_select("sponsor", options) as any
    }
  

      
/**
 * The user or organization that is being sponsored, the maintainer.
 */
      sponsorable<Sel extends Selection<Sponsorable>>(selectorFn: (s: Sponsorable) => [...Sel]):$Field<"sponsorable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsorable)
      };
      return this.$_select("sponsorable", options) as any
    }
  

      
/**
 * The associated sponsorship tier.
 */
      sponsorsTier<Sel extends Selection<SponsorsTier>>(selectorFn: (s: SponsorsTier) => [...Sel]):$Field<"sponsorsTier", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsTier)
      };
      return this.$_select("sponsorsTier", options) as any
    }
  

      
/**
 * The timestamp of this event.
 */
      get timestamp(): $Field<"timestamp", string | null | undefined>  {
       return this.$_select("timestamp") as any
      }
}

  
/**
 * The possible actions that GitHub Sponsors activities can represent.
 */
export enum SponsorsActivityAction {
  
/**
 * The activity was starting a sponsorship.
 */
  NEW_SPONSORSHIP = "NEW_SPONSORSHIP",

/**
 * The activity was cancelling a sponsorship.
 */
  CANCELLED_SPONSORSHIP = "CANCELLED_SPONSORSHIP",

/**
 * The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
 */
  TIER_CHANGE = "TIER_CHANGE",

/**
 * The activity was funds being refunded to the sponsor or GitHub.
 */
  REFUND = "REFUND",

/**
 * The activity was scheduling a downgrade or cancellation.
 */
  PENDING_CHANGE = "PENDING_CHANGE",

/**
 * The activity was disabling matching for a previously matched sponsorship.
 */
  SPONSOR_MATCH_DISABLED = "SPONSOR_MATCH_DISABLED"
}
  


/**
 * The connection type for SponsorsActivity.
 */
export class SponsorsActivityConnection extends $Base<"SponsorsActivityConnection"> {
  constructor() {
    super("SponsorsActivityConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<SponsorsActivityEdge>>(selectorFn: (s: SponsorsActivityEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsActivityEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<SponsorsActivity>>(selectorFn: (s: SponsorsActivity) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsActivity)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class SponsorsActivityEdge extends $Base<"SponsorsActivityEdge"> {
  constructor() {
    super("SponsorsActivityEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<SponsorsActivity>>(selectorFn: (s: SponsorsActivity) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsActivity)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for GitHub Sponsors activity connections.
 */
export type SponsorsActivityOrder = {
  direction: OrderDirection,
field: SponsorsActivityOrderField
}
    

  
/**
 * Properties by which GitHub Sponsors activity connections can be ordered.
 */
export enum SponsorsActivityOrderField {
  
/**
 * Order activities by when they happened.
 */
  TIMESTAMP = "TIMESTAMP"
}
  

  
/**
 * The possible time periods for which Sponsors activities can be requested.
 */
export enum SponsorsActivityPeriod {
  
/**
 * The previous calendar day.
 */
  DAY = "DAY",

/**
 * The previous seven days.
 */
  WEEK = "WEEK",

/**
 * The previous thirty days.
 */
  MONTH = "MONTH",

/**
 * Don't restrict the activity to any date range, include all activity.
 */
  ALL = "ALL"
}
  


/**
 * A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain.
 */
export class SponsorsGoal extends $Base<"SponsorsGoal"> {
  constructor() {
    super("SponsorsGoal")
  }

  
      
/**
 * A description of the goal from the maintainer.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * What the objective of this goal is.
 */
      get kind(): $Field<"kind", SponsorsGoalKind>  {
       return this.$_select("kind") as any
      }

      
/**
 * The percentage representing how complete this goal is, between 0-100.
 */
      get percentComplete(): $Field<"percentComplete", number>  {
       return this.$_select("percentComplete") as any
      }

      
/**
 * What the goal amount is. Represents an amount in USD for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals.
 */
      get targetValue(): $Field<"targetValue", number>  {
       return this.$_select("targetValue") as any
      }

      
/**
 * A brief summary of the kind and target value of this goal.
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }
}

  
/**
 * The different kinds of goals a GitHub Sponsors member can have.
 */
export enum SponsorsGoalKind {
  
/**
 * The goal is about reaching a certain number of sponsors.
 */
  TOTAL_SPONSORS_COUNT = "TOTAL_SPONSORS_COUNT",

/**
 * The goal is about getting a certain amount in USD from sponsorships each month.
 */
  MONTHLY_SPONSORSHIP_AMOUNT = "MONTHLY_SPONSORSHIP_AMOUNT"
}
  


/**
 * A GitHub Sponsors listing.
 */
export class SponsorsListing extends $Base<"SponsorsListing"> {
  constructor() {
    super("SponsorsListing")
  }

  
      
/**
 * The current goal the maintainer is trying to reach with GitHub Sponsors, if any.
 */
      activeGoal<Sel extends Selection<SponsorsGoal>>(selectorFn: (s: SponsorsGoal) => [...Sel]):$Field<"activeGoal", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsGoal)
      };
      return this.$_select("activeGoal", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The HTTP path for the Sponsors dashboard for this Sponsors listing.
 */
      get dashboardResourcePath(): $Field<"dashboardResourcePath", string>  {
       return this.$_select("dashboardResourcePath") as any
      }

      
/**
 * The HTTP URL for the Sponsors dashboard for this Sponsors listing.
 */
      get dashboardUrl(): $Field<"dashboardUrl", string>  {
       return this.$_select("dashboardUrl") as any
      }

      
/**
 * The full description of the listing.
 */
      get fullDescription(): $Field<"fullDescription", string>  {
       return this.$_select("fullDescription") as any
      }

      
/**
 * The full description of the listing rendered to HTML.
 */
      get fullDescriptionHTML(): $Field<"fullDescriptionHTML", string>  {
       return this.$_select("fullDescriptionHTML") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether this listing is publicly visible.
 */
      get isPublic(): $Field<"isPublic", boolean>  {
       return this.$_select("isPublic") as any
      }

      
/**
 * The listing's full name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * A future date on which this listing is eligible to receive a payout.
 */
      get nextPayoutDate(): $Field<"nextPayoutDate", string | null | undefined>  {
       return this.$_select("nextPayoutDate") as any
      }

      
/**
 * The HTTP path for this Sponsors listing.
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The short description of the listing.
 */
      get shortDescription(): $Field<"shortDescription", string>  {
       return this.$_select("shortDescription") as any
      }

      
/**
 * The short name of the listing.
 */
      get slug(): $Field<"slug", string>  {
       return this.$_select("slug") as any
      }

      
/**
 * The entity this listing represents who can be sponsored on GitHub Sponsors.
 */
      sponsorable<Sel extends Selection<Sponsorable>>(selectorFn: (s: Sponsorable) => [...Sel]):$Field<"sponsorable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsorable)
      };
      return this.$_select("sponsorable", options) as any
    }
  

      
/**
 * The published tiers for this GitHub Sponsors listing.
 */
      tiers<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: SponsorsTierOrder | null | undefined,
      }>,Sel extends Selection<SponsorsTierConnection>>(args: Args, selectorFn: (s: SponsorsTierConnection) => [...Sel]):$Field<"tiers", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
tiers<Sel extends Selection<SponsorsTierConnection>>(selectorFn: (s: SponsorsTierConnection) => [...Sel]):$Field<"tiers", GetOutput<Sel> | undefined , GetVariables<Sel>>
tiers(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "SponsorsTierOrder"
            },
        args,

        selection: selectorFn(new SponsorsTierConnection)
      };
      return this.$_select("tiers", options) as any
    }
  

      
/**
 * The HTTP URL for this Sponsors listing.
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }
}


/**
 * A GitHub Sponsors tier associated with a GitHub Sponsors listing.
 */
export class SponsorsTier extends $Base<"SponsorsTier"> {
  constructor() {
    super("SponsorsTier")
  }

  
      
/**
 * SponsorsTier information only visible to users that can administer the associated Sponsors listing.
 */
      adminInfo<Sel extends Selection<SponsorsTierAdminInfo>>(selectorFn: (s: SponsorsTierAdminInfo) => [...Sel]):$Field<"adminInfo", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsTierAdminInfo)
      };
      return this.$_select("adminInfo", options) as any
    }
  

      
/**
 * Get a different tier for this tier's maintainer that is at the same frequency as this tier but with an equal or lesser cost. Returns the published tier with the monthly price closest to this tier's without going over.
 */
      closestLesserValueTier<Sel extends Selection<SponsorsTier>>(selectorFn: (s: SponsorsTier) => [...Sel]):$Field<"closestLesserValueTier", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsTier)
      };
      return this.$_select("closestLesserValueTier", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The description of the tier.
 */
      get description(): $Field<"description", string>  {
       return this.$_select("description") as any
      }

      
/**
 * The tier description rendered to HTML
 */
      get descriptionHTML(): $Field<"descriptionHTML", string>  {
       return this.$_select("descriptionHTML") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing.
 */
      get isCustomAmount(): $Field<"isCustomAmount", boolean>  {
       return this.$_select("isCustomAmount") as any
      }

      
/**
 * Whether this tier is only for use with one-time sponsorships.
 */
      get isOneTime(): $Field<"isOneTime", boolean>  {
       return this.$_select("isOneTime") as any
      }

      
/**
 * How much this tier costs per month in cents.
 */
      get monthlyPriceInCents(): $Field<"monthlyPriceInCents", number>  {
       return this.$_select("monthlyPriceInCents") as any
      }

      
/**
 * How much this tier costs per month in USD.
 */
      get monthlyPriceInDollars(): $Field<"monthlyPriceInDollars", number>  {
       return this.$_select("monthlyPriceInDollars") as any
      }

      
/**
 * The name of the tier.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The sponsors listing that this tier belongs to.
 */
      sponsorsListing<Sel extends Selection<SponsorsListing>>(selectorFn: (s: SponsorsListing) => [...Sel]):$Field<"sponsorsListing", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsListing)
      };
      return this.$_select("sponsorsListing", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * SponsorsTier information only visible to users that can administer the associated Sponsors listing.
 */
export class SponsorsTierAdminInfo extends $Base<"SponsorsTierAdminInfo"> {
  constructor() {
    super("SponsorsTierAdminInfo")
  }

  
      
/**
 * The sponsorships associated with this tier.
 */
      sponsorships<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
includePrivate?: boolean | null | undefined
orderBy?: SponsorshipOrder | null | undefined,
      }>,Sel extends Selection<SponsorshipConnection>>(args: Args, selectorFn: (s: SponsorshipConnection) => [...Sel]):$Field<"sponsorships", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsorships<Sel extends Selection<SponsorshipConnection>>(selectorFn: (s: SponsorshipConnection) => [...Sel]):$Field<"sponsorships", GetOutput<Sel> , GetVariables<Sel>>
sponsorships(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
includePrivate: "Boolean",
orderBy: "SponsorshipOrder"
            },
        args,

        selection: selectorFn(new SponsorshipConnection)
      };
      return this.$_select("sponsorships", options) as any
    }
  
}


/**
 * The connection type for SponsorsTier.
 */
export class SponsorsTierConnection extends $Base<"SponsorsTierConnection"> {
  constructor() {
    super("SponsorsTierConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<SponsorsTierEdge>>(selectorFn: (s: SponsorsTierEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsTierEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<SponsorsTier>>(selectorFn: (s: SponsorsTier) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsTier)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class SponsorsTierEdge extends $Base<"SponsorsTierEdge"> {
  constructor() {
    super("SponsorsTierEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<SponsorsTier>>(selectorFn: (s: SponsorsTier) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsTier)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for Sponsors tiers connections.
 */
export type SponsorsTierOrder = {
  direction: OrderDirection,
field: SponsorsTierOrderField
}
    

  
/**
 * Properties by which Sponsors tiers connections can be ordered.
 */
export enum SponsorsTierOrderField {
  
/**
 * Order tiers by creation time.
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order tiers by their monthly price in cents
 */
  MONTHLY_PRICE_IN_CENTS = "MONTHLY_PRICE_IN_CENTS"
}
  


/**
 * A sponsorship relationship between a sponsor and a maintainer
 */
export class Sponsorship extends $Base<"Sponsorship"> {
  constructor() {
    super("Sponsorship")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
 */
      get isOneTimePayment(): $Field<"isOneTimePayment", boolean>  {
       return this.$_select("isOneTimePayment") as any
      }

      
/**
 * Check if the sponsor has chosen to receive sponsorship update emails sent from the sponsorable. Only returns a non-null value when the viewer has permission to know this.
 */
      get isSponsorOptedIntoEmail(): $Field<"isSponsorOptedIntoEmail", boolean | null | undefined>  {
       return this.$_select("isSponsorOptedIntoEmail") as any
      }

      
/**
 * The entity that is being sponsored
 */
      maintainer<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"maintainer", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("maintainer", options) as any
    }
  

      
/**
 * The privacy level for this sponsorship.
 */
      get privacyLevel(): $Field<"privacyLevel", SponsorshipPrivacy>  {
       return this.$_select("privacyLevel") as any
      }

      
/**
 * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
 */
      sponsor<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"sponsor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("sponsor", options) as any
    }
  

      
/**
 * The user or organization that is sponsoring, if you have permission to view them.
 */
      sponsorEntity<Sel extends Selection<Sponsor>>(selectorFn: (s: Sponsor) => [...Sel]):$Field<"sponsorEntity", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsor)
      };
      return this.$_select("sponsorEntity", options) as any
    }
  

      
/**
 * The entity that is being sponsored
 */
      sponsorable<Sel extends Selection<Sponsorable>>(selectorFn: (s: Sponsorable) => [...Sel]):$Field<"sponsorable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsorable)
      };
      return this.$_select("sponsorable", options) as any
    }
  

      
/**
 * The associated sponsorship tier
 */
      tier<Sel extends Selection<SponsorsTier>>(selectorFn: (s: SponsorsTier) => [...Sel]):$Field<"tier", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsTier)
      };
      return this.$_select("tier", options) as any
    }
  

      
/**
 * Identifies the date and time when the current tier was chosen for this sponsorship.
 */
      get tierSelectedAt(): $Field<"tierSelectedAt", string | null | undefined>  {
       return this.$_select("tierSelectedAt") as any
      }
}


/**
 * The connection type for Sponsorship.
 */
export class SponsorshipConnection extends $Base<"SponsorshipConnection"> {
  constructor() {
    super("SponsorshipConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<SponsorshipEdge>>(selectorFn: (s: SponsorshipEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorshipEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Sponsorship>>(selectorFn: (s: Sponsorship) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsorship)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }

      
/**
 * The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
 */
      get totalRecurringMonthlyPriceInCents(): $Field<"totalRecurringMonthlyPriceInCents", number>  {
       return this.$_select("totalRecurringMonthlyPriceInCents") as any
      }

      
/**
 * The total amount in USD of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships.
 */
      get totalRecurringMonthlyPriceInDollars(): $Field<"totalRecurringMonthlyPriceInDollars", number>  {
       return this.$_select("totalRecurringMonthlyPriceInDollars") as any
      }
}


/**
 * An edge in a connection.
 */
export class SponsorshipEdge extends $Base<"SponsorshipEdge"> {
  constructor() {
    super("SponsorshipEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Sponsorship>>(selectorFn: (s: Sponsorship) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsorship)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * An update sent to sponsors of a user or organization on GitHub Sponsors.
 */
export class SponsorshipNewsletter extends $Base<"SponsorshipNewsletter"> {
  constructor() {
    super("SponsorshipNewsletter")
  }

  
      
/**
 * The contents of the newsletter, the message the sponsorable wanted to give.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Indicates if the newsletter has been made available to sponsors.
 */
      get isPublished(): $Field<"isPublished", boolean>  {
       return this.$_select("isPublished") as any
      }

      
/**
 * The user or organization this newsletter is from.
 */
      sponsorable<Sel extends Selection<Sponsorable>>(selectorFn: (s: Sponsorable) => [...Sel]):$Field<"sponsorable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsorable)
      };
      return this.$_select("sponsorable", options) as any
    }
  

      
/**
 * The subject of the newsletter, what it's about.
 */
      get subject(): $Field<"subject", string>  {
       return this.$_select("subject") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * The connection type for SponsorshipNewsletter.
 */
export class SponsorshipNewsletterConnection extends $Base<"SponsorshipNewsletterConnection"> {
  constructor() {
    super("SponsorshipNewsletterConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<SponsorshipNewsletterEdge>>(selectorFn: (s: SponsorshipNewsletterEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorshipNewsletterEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<SponsorshipNewsletter>>(selectorFn: (s: SponsorshipNewsletter) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorshipNewsletter)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class SponsorshipNewsletterEdge extends $Base<"SponsorshipNewsletterEdge"> {
  constructor() {
    super("SponsorshipNewsletterEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<SponsorshipNewsletter>>(selectorFn: (s: SponsorshipNewsletter) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorshipNewsletter)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for sponsorship newsletter connections.
 */
export type SponsorshipNewsletterOrder = {
  direction: OrderDirection,
field: SponsorshipNewsletterOrderField
}
    

  
/**
 * Properties by which sponsorship update connections can be ordered.
 */
export enum SponsorshipNewsletterOrderField {
  
/**
 * Order sponsorship newsletters by when they were created.
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * Ordering options for sponsorship connections.
 */
export type SponsorshipOrder = {
  direction: OrderDirection,
field: SponsorshipOrderField
}
    

  
/**
 * Properties by which sponsorship connections can be ordered.
 */
export enum SponsorshipOrderField {
  
/**
 * Order sponsorship by creation time.
 */
  CREATED_AT = "CREATED_AT"
}
  

  
/**
 * The privacy of a sponsorship
 */
export enum SponsorshipPrivacy {
  
/**
 * Public
 */
  PUBLIC = "PUBLIC",

/**
 * Private
 */
  PRIVATE = "PRIVATE"
}
  

  
/**
 * The possible default commit messages for squash merges.
 */
export enum SquashMergeCommitMessage {
  
/**
 * Default to the pull request's body.
 */
  PR_BODY = "PR_BODY",

/**
 * Default to the branch's commit messages.
 */
  COMMIT_MESSAGES = "COMMIT_MESSAGES",

/**
 * Default to a blank commit message.
 */
  BLANK = "BLANK"
}
  

  
/**
 * The possible default commit titles for squash merges.
 */
export enum SquashMergeCommitTitle {
  
/**
 * Default to the pull request's title.
 */
  PR_TITLE = "PR_TITLE",

/**
 * Default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
 */
  COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"
}
  


/**
 * Represents an SSH signature on a Commit or Tag.
 */
export class SshSignature extends $Base<"SshSignature"> {
  constructor() {
    super("SshSignature")
  }

  
      
/**
 * Email used to sign this object.
 */
      get email(): $Field<"email", string>  {
       return this.$_select("email") as any
      }

      
/**
 * True if the signature is valid and verified by GitHub.
 */
      get isValid(): $Field<"isValid", boolean>  {
       return this.$_select("isValid") as any
      }

      
/**
 * Hex-encoded fingerprint of the key that signed this object.
 */
      get keyFingerprint(): $Field<"keyFingerprint", string | null | undefined>  {
       return this.$_select("keyFingerprint") as any
      }

      
/**
 * Payload for GPG signing object. Raw ODB object without the signature header.
 */
      get payload(): $Field<"payload", string>  {
       return this.$_select("payload") as any
      }

      
/**
 * ASCII-armored signature header from object.
 */
      get signature(): $Field<"signature", string>  {
       return this.$_select("signature") as any
      }

      
/**
 * GitHub user corresponding to the email signing this commit.
 */
      signer<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"signer", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("signer", options) as any
    }
  

      
/**
 * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
 */
      get state(): $Field<"state", GitSignatureState>  {
       return this.$_select("state") as any
      }

      
/**
 * True if the signature was made with GitHub's signing key.
 */
      get wasSignedByGitHub(): $Field<"wasSignedByGitHub", boolean>  {
       return this.$_select("wasSignedByGitHub") as any
      }
}


/**
 * Ways in which star connections can be ordered.
 */
export type StarOrder = {
  direction: OrderDirection,
field: StarOrderField
}
    

  
/**
 * Properties by which star connections can be ordered.
 */
export enum StarOrderField {
  
/**
 * Allows ordering a list of stars by when they were created.
 */
  STARRED_AT = "STARRED_AT"
}
  


/**
 * The connection type for User.
 */
export class StargazerConnection extends $Base<"StargazerConnection"> {
  constructor() {
    super("StargazerConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<StargazerEdge>>(selectorFn: (s: StargazerEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new StargazerEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Represents a user that's starred a repository.
 */
export class StargazerEdge extends $Base<"StargazerEdge"> {
  constructor() {
    super("StargazerEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
      node<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"node", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * Identifies when the item was starred.
 */
      get starredAt(): $Field<"starredAt", string>  {
       return this.$_select("starredAt") as any
      }
}


/**
 * Things that can be starred.
 */
export class Starrable extends $Interface<{Gist: Gist,Repository: Repository,Topic: Topic}, "Starrable"> {
  constructor() {
    super({Gist: Gist,Repository: Repository,Topic: Topic}, "Starrable")
  }
}


/**
 * The connection type for Repository.
 */
export class StarredRepositoryConnection extends $Base<"StarredRepositoryConnection"> {
  constructor() {
    super("StarredRepositoryConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<StarredRepositoryEdge>>(selectorFn: (s: StarredRepositoryEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new StarredRepositoryEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * Is the list of stars for this user truncated? This is true for users that have many stars.
 */
      get isOverLimit(): $Field<"isOverLimit", boolean>  {
       return this.$_select("isOverLimit") as any
      }

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Represents a starred repository.
 */
export class StarredRepositoryEdge extends $Base<"StarredRepositoryEdge"> {
  constructor() {
    super("StarredRepositoryEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
      node<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"node", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * Identifies when the item was starred.
 */
      get starredAt(): $Field<"starredAt", string>  {
       return this.$_select("starredAt") as any
      }
}


/**
 * Autogenerated input type of StartRepositoryMigration
 */
export type StartRepositoryMigrationInput = {
  accessToken: string,
clientMutationId?: string | null | undefined,
continueOnError?: boolean | null | undefined,
gitArchiveUrl?: string | null | undefined,
githubPat?: string | null | undefined,
lockSource?: boolean | null | undefined,
metadataArchiveUrl?: string | null | undefined,
ownerId: string,
repositoryName: string,
skipReleases?: boolean | null | undefined,
sourceId: string,
sourceRepositoryUrl: string,
targetRepoVisibility?: string | null | undefined
}
    


/**
 * Autogenerated return type of StartRepositoryMigration
 */
export class StartRepositoryMigrationPayload extends $Base<"StartRepositoryMigrationPayload"> {
  constructor() {
    super("StartRepositoryMigrationPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The new Octoshift repository migration.
 */
      repositoryMigration<Sel extends Selection<RepositoryMigration>>(selectorFn: (s: RepositoryMigration) => [...Sel]):$Field<"repositoryMigration", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryMigration)
      };
      return this.$_select("repositoryMigration", options) as any
    }
  
}


/**
 * Represents a commit status.
 */
export class Status extends $Base<"Status"> {
  constructor() {
    super("Status")
  }

  
      
/**
 * A list of status contexts and check runs for this commit.
 */
      combinedContexts<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<StatusCheckRollupContextConnection>>(args: Args, selectorFn: (s: StatusCheckRollupContextConnection) => [...Sel]):$Field<"combinedContexts", GetOutput<Sel> , GetVariables<Sel, Args>>
combinedContexts<Sel extends Selection<StatusCheckRollupContextConnection>>(selectorFn: (s: StatusCheckRollupContextConnection) => [...Sel]):$Field<"combinedContexts", GetOutput<Sel> , GetVariables<Sel>>
combinedContexts(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new StatusCheckRollupContextConnection)
      };
      return this.$_select("combinedContexts", options) as any
    }
  

      
/**
 * The commit this status is attached to.
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
/**
 * Looks up an individual status context by context name.
 */
      context<Args extends VariabledInput<{
        name: string,
      }>,Sel extends Selection<StatusContext>>(args: Args, selectorFn: (s: StatusContext) => [...Sel]):$Field<"context", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              name: "String!"
            },
        args,

        selection: selectorFn(new StatusContext)
      };
      return this.$_select("context", options) as any
    }
  

      
/**
 * The individual status contexts for this commit.
 */
      contexts<Sel extends Selection<StatusContext>>(selectorFn: (s: StatusContext) => [...Sel]):$Field<"contexts", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new StatusContext)
      };
      return this.$_select("contexts", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The combined commit status.
 */
      get state(): $Field<"state", StatusState>  {
       return this.$_select("state") as any
      }
}


/**
 * Represents the rollup for both the check runs and status for a commit.
 */
export class StatusCheckRollup extends $Base<"StatusCheckRollup"> {
  constructor() {
    super("StatusCheckRollup")
  }

  
      
/**
 * The commit the status and check runs are attached to.
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
/**
 * A list of status contexts and check runs for this commit.
 */
      contexts<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<StatusCheckRollupContextConnection>>(args: Args, selectorFn: (s: StatusCheckRollupContextConnection) => [...Sel]):$Field<"contexts", GetOutput<Sel> , GetVariables<Sel, Args>>
contexts<Sel extends Selection<StatusCheckRollupContextConnection>>(selectorFn: (s: StatusCheckRollupContextConnection) => [...Sel]):$Field<"contexts", GetOutput<Sel> , GetVariables<Sel>>
contexts(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new StatusCheckRollupContextConnection)
      };
      return this.$_select("contexts", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The combined status for the commit.
 */
      get state(): $Field<"state", StatusState>  {
       return this.$_select("state") as any
      }
}


/**
 * Types that can be inside a StatusCheckRollup context.
 */
export class StatusCheckRollupContext extends $Union<{CheckRun: CheckRun,StatusContext: StatusContext,Node: Node,UniformResourceLocatable: UniformResourceLocatable,RequirableByPullRequest: RequirableByPullRequest}, "StatusCheckRollupContext"> {
  constructor() {
    super({CheckRun: CheckRun,StatusContext: StatusContext,Node: Node,UniformResourceLocatable: UniformResourceLocatable,RequirableByPullRequest: RequirableByPullRequest})
  }
}


/**
 * The connection type for StatusCheckRollupContext.
 */
export class StatusCheckRollupContextConnection extends $Base<"StatusCheckRollupContextConnection"> {
  constructor() {
    super("StatusCheckRollupContextConnection")
  }

  
      
/**
 * The number of check runs in this rollup.
 */
      get checkRunCount(): $Field<"checkRunCount", number>  {
       return this.$_select("checkRunCount") as any
      }

      
/**
 * Counts of check runs by state.
 */
      checkRunCountsByState<Sel extends Selection<CheckRunStateCount>>(selectorFn: (s: CheckRunStateCount) => [...Sel]):$Field<"checkRunCountsByState", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckRunStateCount)
      };
      return this.$_select("checkRunCountsByState", options) as any
    }
  

      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<StatusCheckRollupContextEdge>>(selectorFn: (s: StatusCheckRollupContextEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new StatusCheckRollupContextEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<StatusCheckRollupContext>>(selectorFn: (s: StatusCheckRollupContext) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new StatusCheckRollupContext)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * The number of status contexts in this rollup.
 */
      get statusContextCount(): $Field<"statusContextCount", number>  {
       return this.$_select("statusContextCount") as any
      }

      
/**
 * Counts of status contexts by state.
 */
      statusContextCountsByState<Sel extends Selection<StatusContextStateCount>>(selectorFn: (s: StatusContextStateCount) => [...Sel]):$Field<"statusContextCountsByState", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new StatusContextStateCount)
      };
      return this.$_select("statusContextCountsByState", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class StatusCheckRollupContextEdge extends $Base<"StatusCheckRollupContextEdge"> {
  constructor() {
    super("StatusCheckRollupContextEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<StatusCheckRollupContext>>(selectorFn: (s: StatusCheckRollupContext) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new StatusCheckRollupContext)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents an individual commit status context
 */
export class StatusContext extends $Base<"StatusContext"> {
  constructor() {
    super("StatusContext")
  }

  
      
/**
 * The avatar of the OAuth application or the user that created the status
 */
      avatarUrl<Args extends VariabledInput<{
        size?: number | null | undefined,
      }>>(args: Args):$Field<"avatarUrl", string | null | undefined , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              size: "Int"
            },
        args,

        
      };
      return this.$_select("avatarUrl", options) as any
    }
  

      
/**
 * This commit this status context is attached to.
 */
      commit<Sel extends Selection<Commit>>(selectorFn: (s: Commit) => [...Sel]):$Field<"commit", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Commit)
      };
      return this.$_select("commit", options) as any
    }
  

      
/**
 * The name of this status context.
 */
      get context(): $Field<"context", string>  {
       return this.$_select("context") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The actor who created this status context.
 */
      creator<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"creator", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("creator", options) as any
    }
  

      
/**
 * The description for this status context.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether this is required to pass before merging for a specific pull request.
 */
      isRequired<Args extends VariabledInput<{
        pullRequestId?: string | null | undefined
pullRequestNumber?: number | null | undefined,
      }>>(args: Args):$Field<"isRequired", boolean , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              pullRequestId: "ID",
pullRequestNumber: "Int"
            },
        args,

        
      };
      return this.$_select("isRequired", options) as any
    }
  

      
/**
 * The state of this status context.
 */
      get state(): $Field<"state", StatusState>  {
       return this.$_select("state") as any
      }

      
/**
 * The URL for this status context.
 */
      get targetUrl(): $Field<"targetUrl", string | null | undefined>  {
       return this.$_select("targetUrl") as any
      }
}


/**
 * Represents a count of the state of a status context.
 */
export class StatusContextStateCount extends $Base<"StatusContextStateCount"> {
  constructor() {
    super("StatusContextStateCount")
  }

  
      
/**
 * The number of statuses with this state.
 */
      get count(): $Field<"count", number>  {
       return this.$_select("count") as any
      }

      
/**
 * The state of a status context.
 */
      get state(): $Field<"state", StatusState>  {
       return this.$_select("state") as any
      }
}

  
/**
 * The possible commit status states.
 */
export enum StatusState {
  
/**
 * Status is expected.
 */
  EXPECTED = "EXPECTED",

/**
 * Status is errored.
 */
  ERROR = "ERROR",

/**
 * Status is failing.
 */
  FAILURE = "FAILURE",

/**
 * Status is pending.
 */
  PENDING = "PENDING",

/**
 * Status is successful.
 */
  SUCCESS = "SUCCESS"
}
  


/**
 * Autogenerated input type of SubmitPullRequestReview
 */
export type SubmitPullRequestReviewInput = {
  body?: string | null | undefined,
clientMutationId?: string | null | undefined,
event: PullRequestReviewEvent,
pullRequestId?: string | null | undefined,
pullRequestReviewId?: string | null | undefined
}
    


/**
 * Autogenerated return type of SubmitPullRequestReview
 */
export class SubmitPullRequestReviewPayload extends $Base<"SubmitPullRequestReviewPayload"> {
  constructor() {
    super("SubmitPullRequestReviewPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The submitted pull request review.
 */
      pullRequestReview<Sel extends Selection<PullRequestReview>>(selectorFn: (s: PullRequestReview) => [...Sel]):$Field<"pullRequestReview", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReview)
      };
      return this.$_select("pullRequestReview", options) as any
    }
  
}


/**
 * A pointer to a repository at a specific revision embedded inside another repository.
 */
export class Submodule extends $Base<"Submodule"> {
  constructor() {
    super("Submodule")
  }

  
      
/**
 * The branch of the upstream submodule for tracking updates
 */
      get branch(): $Field<"branch", string | null | undefined>  {
       return this.$_select("branch") as any
      }

      
/**
 * The git URL of the submodule repository
 */
      get gitUrl(): $Field<"gitUrl", string>  {
       return this.$_select("gitUrl") as any
      }

      
/**
 * The name of the submodule in .gitmodules
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The path in the superproject that this submodule is located in
 */
      get path(): $Field<"path", string>  {
       return this.$_select("path") as any
      }

      
/**
 * The commit revision of the subproject repository being tracked by the submodule
 */
      get subprojectCommitOid(): $Field<"subprojectCommitOid", string | null | undefined>  {
       return this.$_select("subprojectCommitOid") as any
      }
}


/**
 * The connection type for Submodule.
 */
export class SubmoduleConnection extends $Base<"SubmoduleConnection"> {
  constructor() {
    super("SubmoduleConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<SubmoduleEdge>>(selectorFn: (s: SubmoduleEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SubmoduleEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Submodule>>(selectorFn: (s: Submodule) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Submodule)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class SubmoduleEdge extends $Base<"SubmoduleEdge"> {
  constructor() {
    super("SubmoduleEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Submodule>>(selectorFn: (s: Submodule) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Submodule)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Entities that can be subscribed to for web and email notifications.
 */
export class Subscribable extends $Interface<{Commit: Commit,Discussion: Discussion,Issue: Issue,PullRequest: PullRequest,Repository: Repository,Team: Team,TeamDiscussion: TeamDiscussion}, "Subscribable"> {
  constructor() {
    super({Commit: Commit,Discussion: Discussion,Issue: Issue,PullRequest: PullRequest,Repository: Repository,Team: Team,TeamDiscussion: TeamDiscussion}, "Subscribable")
  }
}


/**
 * Represents a 'subscribed' event on a given `Subscribable`.
 */
export class SubscribedEvent extends $Base<"SubscribedEvent"> {
  constructor() {
    super("SubscribedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Object referenced by event.
 */
      subscribable<Sel extends Selection<Subscribable>>(selectorFn: (s: Subscribable) => [...Sel]):$Field<"subscribable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Subscribable)
      };
      return this.$_select("subscribable", options) as any
    }
  
}

  
/**
 * The possible states of a subscription.
 */
export enum SubscriptionState {
  
/**
 * The User is only notified when participating or @mentioned.
 */
  UNSUBSCRIBED = "UNSUBSCRIBED",

/**
 * The User is notified of all conversations.
 */
  SUBSCRIBED = "SUBSCRIBED",

/**
 * The User is never notified.
 */
  IGNORED = "IGNORED"
}
  


/**
 * A suggestion to review a pull request based on a user's commit history and review comments.
 */
export class SuggestedReviewer extends $Base<"SuggestedReviewer"> {
  constructor() {
    super("SuggestedReviewer")
  }

  
      
/**
 * Is this suggestion based on past commits?
 */
      get isAuthor(): $Field<"isAuthor", boolean>  {
       return this.$_select("isAuthor") as any
      }

      
/**
 * Is this suggestion based on past review comments?
 */
      get isCommenter(): $Field<"isCommenter", boolean>  {
       return this.$_select("isCommenter") as any
      }

      
/**
 * Identifies the user suggested to review the pull request.
 */
      reviewer<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"reviewer", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("reviewer", options) as any
    }
  
}


/**
 * Represents a Git tag.
 */
export class Tag extends $Base<"Tag"> {
  constructor() {
    super("Tag")
  }

  
      
/**
 * An abbreviated version of the Git object ID
 */
      get abbreviatedOid(): $Field<"abbreviatedOid", string>  {
       return this.$_select("abbreviatedOid") as any
      }

      
/**
 * The HTTP path for this Git object
 */
      get commitResourcePath(): $Field<"commitResourcePath", string>  {
       return this.$_select("commitResourcePath") as any
      }

      
/**
 * The HTTP URL for this Git object
 */
      get commitUrl(): $Field<"commitUrl", string>  {
       return this.$_select("commitUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The Git tag message.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }

      
/**
 * The Git tag name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The Git object ID
 */
      get oid(): $Field<"oid", string>  {
       return this.$_select("oid") as any
      }

      
/**
 * The Repository the Git object belongs to
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * Details about the tag author.
 */
      tagger<Sel extends Selection<GitActor>>(selectorFn: (s: GitActor) => [...Sel]):$Field<"tagger", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitActor)
      };
      return this.$_select("tagger", options) as any
    }
  

      
/**
 * The Git object the tag points to.
 */
      target<Sel extends Selection<GitObject>>(selectorFn: (s: GitObject) => [...Sel]):$Field<"target", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitObject)
      };
      return this.$_select("target", options) as any
    }
  
}


/**
 * A team of users in an organization.
 */
export class Team extends $Base<"Team"> {
  constructor() {
    super("Team")
  }

  
      
/**
 * A list of teams that are ancestors of this team.
 */
      ancestors<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<TeamConnection>>(args: Args, selectorFn: (s: TeamConnection) => [...Sel]):$Field<"ancestors", GetOutput<Sel> , GetVariables<Sel, Args>>
ancestors<Sel extends Selection<TeamConnection>>(selectorFn: (s: TeamConnection) => [...Sel]):$Field<"ancestors", GetOutput<Sel> , GetVariables<Sel>>
ancestors(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new TeamConnection)
      };
      return this.$_select("ancestors", options) as any
    }
  

      
/**
 * A URL pointing to the team's avatar.
 */
      avatarUrl<Args extends VariabledInput<{
        size?: number | null | undefined,
      }>>(args: Args):$Field<"avatarUrl", string | null | undefined , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              size: "Int"
            },
        args,

        
      };
      return this.$_select("avatarUrl", options) as any
    }
  

      
/**
 * List of child teams belonging to this team
 */
      childTeams<Args extends VariabledInput<{
        orderBy?: TeamOrder | null | undefined
userLogins?: Readonly<Array<string>> | null | undefined
immediateOnly?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<TeamConnection>>(args: Args, selectorFn: (s: TeamConnection) => [...Sel]):$Field<"childTeams", GetOutput<Sel> , GetVariables<Sel, Args>>
childTeams<Sel extends Selection<TeamConnection>>(selectorFn: (s: TeamConnection) => [...Sel]):$Field<"childTeams", GetOutput<Sel> , GetVariables<Sel>>
childTeams(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "TeamOrder",
userLogins: "[String!]",
immediateOnly: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new TeamConnection)
      };
      return this.$_select("childTeams", options) as any
    }
  

      
/**
 * The slug corresponding to the organization and team.
 */
      get combinedSlug(): $Field<"combinedSlug", string>  {
       return this.$_select("combinedSlug") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The description of the team.
 */
      get description(): $Field<"description", string | null | undefined>  {
       return this.$_select("description") as any
      }

      
/**
 * Find a team discussion by its number.
 */
      discussion<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<TeamDiscussion>>(args: Args, selectorFn: (s: TeamDiscussion) => [...Sel]):$Field<"discussion", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new TeamDiscussion)
      };
      return this.$_select("discussion", options) as any
    }
  

      
/**
 * A list of team discussions.
 */
      discussions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
isPinned?: boolean | null | undefined
orderBy?: TeamDiscussionOrder | null | undefined,
      }>,Sel extends Selection<TeamDiscussionConnection>>(args: Args, selectorFn: (s: TeamDiscussionConnection) => [...Sel]):$Field<"discussions", GetOutput<Sel> , GetVariables<Sel, Args>>
discussions<Sel extends Selection<TeamDiscussionConnection>>(selectorFn: (s: TeamDiscussionConnection) => [...Sel]):$Field<"discussions", GetOutput<Sel> , GetVariables<Sel>>
discussions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
isPinned: "Boolean",
orderBy: "TeamDiscussionOrder"
            },
        args,

        selection: selectorFn(new TeamDiscussionConnection)
      };
      return this.$_select("discussions", options) as any
    }
  

      
/**
 * The HTTP path for team discussions
 */
      get discussionsResourcePath(): $Field<"discussionsResourcePath", string>  {
       return this.$_select("discussionsResourcePath") as any
      }

      
/**
 * The HTTP URL for team discussions
 */
      get discussionsUrl(): $Field<"discussionsUrl", string>  {
       return this.$_select("discussionsUrl") as any
      }

      
/**
 * The HTTP path for editing this team
 */
      get editTeamResourcePath(): $Field<"editTeamResourcePath", string>  {
       return this.$_select("editTeamResourcePath") as any
      }

      
/**
 * The HTTP URL for editing this team
 */
      get editTeamUrl(): $Field<"editTeamUrl", string>  {
       return this.$_select("editTeamUrl") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * A list of pending invitations for users to this team
 */
      invitations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<OrganizationInvitationConnection>>(args: Args, selectorFn: (s: OrganizationInvitationConnection) => [...Sel]):$Field<"invitations", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
invitations<Sel extends Selection<OrganizationInvitationConnection>>(selectorFn: (s: OrganizationInvitationConnection) => [...Sel]):$Field<"invitations", GetOutput<Sel> | undefined , GetVariables<Sel>>
invitations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new OrganizationInvitationConnection)
      };
      return this.$_select("invitations", options) as any
    }
  

      
/**
 * Get the status messages members of this entity have set that are either public or visible only to the organization.
 */
      memberStatuses<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: UserStatusOrder | null | undefined,
      }>,Sel extends Selection<UserStatusConnection>>(args: Args, selectorFn: (s: UserStatusConnection) => [...Sel]):$Field<"memberStatuses", GetOutput<Sel> , GetVariables<Sel, Args>>
memberStatuses<Sel extends Selection<UserStatusConnection>>(selectorFn: (s: UserStatusConnection) => [...Sel]):$Field<"memberStatuses", GetOutput<Sel> , GetVariables<Sel>>
memberStatuses(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "UserStatusOrder"
            },
        args,

        selection: selectorFn(new UserStatusConnection)
      };
      return this.$_select("memberStatuses", options) as any
    }
  

      
/**
 * A list of users who are members of this team.
 */
      members<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
query?: string | null | undefined
membership?: TeamMembershipType | null | undefined
role?: TeamMemberRole | null | undefined
orderBy?: TeamMemberOrder | null | undefined,
      }>,Sel extends Selection<TeamMemberConnection>>(args: Args, selectorFn: (s: TeamMemberConnection) => [...Sel]):$Field<"members", GetOutput<Sel> , GetVariables<Sel, Args>>
members<Sel extends Selection<TeamMemberConnection>>(selectorFn: (s: TeamMemberConnection) => [...Sel]):$Field<"members", GetOutput<Sel> , GetVariables<Sel>>
members(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
query: "String",
membership: "TeamMembershipType",
role: "TeamMemberRole",
orderBy: "TeamMemberOrder"
            },
        args,

        selection: selectorFn(new TeamMemberConnection)
      };
      return this.$_select("members", options) as any
    }
  

      
/**
 * The HTTP path for the team' members
 */
      get membersResourcePath(): $Field<"membersResourcePath", string>  {
       return this.$_select("membersResourcePath") as any
      }

      
/**
 * The HTTP URL for the team' members
 */
      get membersUrl(): $Field<"membersUrl", string>  {
       return this.$_select("membersUrl") as any
      }

      
/**
 * The name of the team.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The HTTP path creating a new team
 */
      get newTeamResourcePath(): $Field<"newTeamResourcePath", string>  {
       return this.$_select("newTeamResourcePath") as any
      }

      
/**
 * The HTTP URL creating a new team
 */
      get newTeamUrl(): $Field<"newTeamUrl", string>  {
       return this.$_select("newTeamUrl") as any
      }

      
/**
 * The organization that owns this team.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The parent team of the team.
 */
      parentTeam<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"parentTeam", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("parentTeam", options) as any
    }
  

      
/**
 * The level of privacy the team has.
 */
      get privacy(): $Field<"privacy", TeamPrivacy>  {
       return this.$_select("privacy") as any
      }

      
/**
 * Finds and returns the project according to the provided project number.
 */
      projectV2<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<ProjectV2>>(args: Args, selectorFn: (s: ProjectV2) => [...Sel]):$Field<"projectV2", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("projectV2", options) as any
    }
  

      
/**
 * List of projects this team has collaborator access to.
 */
      projectsV2<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: ProjectV2Order | null | undefined,
      }>,Sel extends Selection<ProjectV2Connection>>(args: Args, selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel, Args>>
projectsV2<Sel extends Selection<ProjectV2Connection>>(selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel>>
projectsV2(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "ProjectV2Order"
            },
        args,

        selection: selectorFn(new ProjectV2Connection)
      };
      return this.$_select("projectsV2", options) as any
    }
  

      
/**
 * A list of repositories this team has access to.
 */
      repositories<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
query?: string | null | undefined
orderBy?: TeamRepositoryOrder | null | undefined,
      }>,Sel extends Selection<TeamRepositoryConnection>>(args: Args, selectorFn: (s: TeamRepositoryConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel, Args>>
repositories<Sel extends Selection<TeamRepositoryConnection>>(selectorFn: (s: TeamRepositoryConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel>>
repositories(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
query: "String",
orderBy: "TeamRepositoryOrder"
            },
        args,

        selection: selectorFn(new TeamRepositoryConnection)
      };
      return this.$_select("repositories", options) as any
    }
  

      
/**
 * The HTTP path for this team's repositories
 */
      get repositoriesResourcePath(): $Field<"repositoriesResourcePath", string>  {
       return this.$_select("repositoriesResourcePath") as any
      }

      
/**
 * The HTTP URL for this team's repositories
 */
      get repositoriesUrl(): $Field<"repositoriesUrl", string>  {
       return this.$_select("repositoriesUrl") as any
      }

      
/**
 * The HTTP path for this team
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The slug corresponding to the team.
 */
      get slug(): $Field<"slug", string>  {
       return this.$_select("slug") as any
      }

      
/**
 * The HTTP path for this team's teams
 */
      get teamsResourcePath(): $Field<"teamsResourcePath", string>  {
       return this.$_select("teamsResourcePath") as any
      }

      
/**
 * The HTTP URL for this team's teams
 */
      get teamsUrl(): $Field<"teamsUrl", string>  {
       return this.$_select("teamsUrl") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this team
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * Team is adminable by the viewer.
 */
      get viewerCanAdminister(): $Field<"viewerCanAdminister", boolean>  {
       return this.$_select("viewerCanAdminister") as any
      }

      
/**
 * Check if the viewer is able to change their subscription status for the repository.
 */
      get viewerCanSubscribe(): $Field<"viewerCanSubscribe", boolean>  {
       return this.$_select("viewerCanSubscribe") as any
      }

      
/**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
      get viewerSubscription(): $Field<"viewerSubscription", SubscriptionState | null | undefined>  {
       return this.$_select("viewerSubscription") as any
      }
}


/**
 * Audit log entry for a team.add_member event.
 */
export class TeamAddMemberAuditEntry extends $Base<"TeamAddMemberAuditEntry"> {
  constructor() {
    super("TeamAddMemberAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether the team was mapped to an LDAP Group.
 */
      get isLdapMapped(): $Field<"isLdapMapped", boolean | null | undefined>  {
       return this.$_select("isLdapMapped") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The team associated with the action
 */
      team<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"team", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("team", options) as any
    }
  

      
/**
 * The name of the team
 */
      get teamName(): $Field<"teamName", string | null | undefined>  {
       return this.$_select("teamName") as any
      }

      
/**
 * The HTTP path for this team
 */
      get teamResourcePath(): $Field<"teamResourcePath", string | null | undefined>  {
       return this.$_select("teamResourcePath") as any
      }

      
/**
 * The HTTP URL for this team
 */
      get teamUrl(): $Field<"teamUrl", string | null | undefined>  {
       return this.$_select("teamUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a team.add_repository event.
 */
export class TeamAddRepositoryAuditEntry extends $Base<"TeamAddRepositoryAuditEntry"> {
  constructor() {
    super("TeamAddRepositoryAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether the team was mapped to an LDAP Group.
 */
      get isLdapMapped(): $Field<"isLdapMapped", boolean | null | undefined>  {
       return this.$_select("isLdapMapped") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The team associated with the action
 */
      team<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"team", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("team", options) as any
    }
  

      
/**
 * The name of the team
 */
      get teamName(): $Field<"teamName", string | null | undefined>  {
       return this.$_select("teamName") as any
      }

      
/**
 * The HTTP path for this team
 */
      get teamResourcePath(): $Field<"teamResourcePath", string | null | undefined>  {
       return this.$_select("teamResourcePath") as any
      }

      
/**
 * The HTTP URL for this team
 */
      get teamUrl(): $Field<"teamUrl", string | null | undefined>  {
       return this.$_select("teamUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Metadata for an audit entry with action team.*
 */
export class TeamAuditEntryData extends $Interface<{OrgRestoreMemberMembershipTeamAuditEntryData: OrgRestoreMemberMembershipTeamAuditEntryData,TeamAddMemberAuditEntry: TeamAddMemberAuditEntry,TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntry,TeamChangeParentTeamAuditEntry: TeamChangeParentTeamAuditEntry,TeamRemoveMemberAuditEntry: TeamRemoveMemberAuditEntry,TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntry}, "TeamAuditEntryData"> {
  constructor() {
    super({OrgRestoreMemberMembershipTeamAuditEntryData: OrgRestoreMemberMembershipTeamAuditEntryData,TeamAddMemberAuditEntry: TeamAddMemberAuditEntry,TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntry,TeamChangeParentTeamAuditEntry: TeamChangeParentTeamAuditEntry,TeamRemoveMemberAuditEntry: TeamRemoveMemberAuditEntry,TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntry}, "TeamAuditEntryData")
  }
}


/**
 * Audit log entry for a team.change_parent_team event.
 */
export class TeamChangeParentTeamAuditEntry extends $Base<"TeamChangeParentTeamAuditEntry"> {
  constructor() {
    super("TeamChangeParentTeamAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether the team was mapped to an LDAP Group.
 */
      get isLdapMapped(): $Field<"isLdapMapped", boolean | null | undefined>  {
       return this.$_select("isLdapMapped") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The new parent team.
 */
      parentTeam<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"parentTeam", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("parentTeam", options) as any
    }
  

      
/**
 * The name of the new parent team
 */
      get parentTeamName(): $Field<"parentTeamName", string | null | undefined>  {
       return this.$_select("parentTeamName") as any
      }

      
/**
 * The name of the former parent team
 */
      get parentTeamNameWas(): $Field<"parentTeamNameWas", string | null | undefined>  {
       return this.$_select("parentTeamNameWas") as any
      }

      
/**
 * The HTTP path for the parent team
 */
      get parentTeamResourcePath(): $Field<"parentTeamResourcePath", string | null | undefined>  {
       return this.$_select("parentTeamResourcePath") as any
      }

      
/**
 * The HTTP URL for the parent team
 */
      get parentTeamUrl(): $Field<"parentTeamUrl", string | null | undefined>  {
       return this.$_select("parentTeamUrl") as any
      }

      
/**
 * The former parent team.
 */
      parentTeamWas<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"parentTeamWas", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("parentTeamWas", options) as any
    }
  

      
/**
 * The HTTP path for the previous parent team
 */
      get parentTeamWasResourcePath(): $Field<"parentTeamWasResourcePath", string | null | undefined>  {
       return this.$_select("parentTeamWasResourcePath") as any
      }

      
/**
 * The HTTP URL for the previous parent team
 */
      get parentTeamWasUrl(): $Field<"parentTeamWasUrl", string | null | undefined>  {
       return this.$_select("parentTeamWasUrl") as any
      }

      
/**
 * The team associated with the action
 */
      team<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"team", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("team", options) as any
    }
  

      
/**
 * The name of the team
 */
      get teamName(): $Field<"teamName", string | null | undefined>  {
       return this.$_select("teamName") as any
      }

      
/**
 * The HTTP path for this team
 */
      get teamResourcePath(): $Field<"teamResourcePath", string | null | undefined>  {
       return this.$_select("teamResourcePath") as any
      }

      
/**
 * The HTTP URL for this team
 */
      get teamUrl(): $Field<"teamUrl", string | null | undefined>  {
       return this.$_select("teamUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * The connection type for Team.
 */
export class TeamConnection extends $Base<"TeamConnection"> {
  constructor() {
    super("TeamConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<TeamEdge>>(selectorFn: (s: TeamEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * A team discussion.
 */
export class TeamDiscussion extends $Base<"TeamDiscussion"> {
  constructor() {
    super("TeamDiscussion")
  }

  
      
/**
 * The actor who authored the comment.
 */
      author<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Author's association with the discussion's team.
 */
      get authorAssociation(): $Field<"authorAssociation", CommentAuthorAssociation>  {
       return this.$_select("authorAssociation") as any
      }

      
/**
 * The body as Markdown.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * The body rendered to text.
 */
      get bodyText(): $Field<"bodyText", string>  {
       return this.$_select("bodyText") as any
      }

      
/**
 * Identifies the discussion body hash.
 */
      get bodyVersion(): $Field<"bodyVersion", string>  {
       return this.$_select("bodyVersion") as any
      }

      
/**
 * A list of comments on this discussion.
 */
      comments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: TeamDiscussionCommentOrder | null | undefined
fromComment?: number | null | undefined,
      }>,Sel extends Selection<TeamDiscussionCommentConnection>>(args: Args, selectorFn: (s: TeamDiscussionCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel, Args>>
comments<Sel extends Selection<TeamDiscussionCommentConnection>>(selectorFn: (s: TeamDiscussionCommentConnection) => [...Sel]):$Field<"comments", GetOutput<Sel> , GetVariables<Sel>>
comments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "TeamDiscussionCommentOrder",
fromComment: "Int"
            },
        args,

        selection: selectorFn(new TeamDiscussionCommentConnection)
      };
      return this.$_select("comments", options) as any
    }
  

      
/**
 * The HTTP path for discussion comments
 */
      get commentsResourcePath(): $Field<"commentsResourcePath", string>  {
       return this.$_select("commentsResourcePath") as any
      }

      
/**
 * The HTTP URL for discussion comments
 */
      get commentsUrl(): $Field<"commentsUrl", string>  {
       return this.$_select("commentsUrl") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Check if this comment was created via an email reply.
 */
      get createdViaEmail(): $Field<"createdViaEmail", boolean>  {
       return this.$_select("createdViaEmail") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The actor who edited the comment.
 */
      editor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"editor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("editor", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Check if this comment was edited and includes an edit with the creation data
 */
      get includesCreatedEdit(): $Field<"includesCreatedEdit", boolean>  {
       return this.$_select("includesCreatedEdit") as any
      }

      
/**
 * Whether or not the discussion is pinned.
 */
      get isPinned(): $Field<"isPinned", boolean>  {
       return this.$_select("isPinned") as any
      }

      
/**
 * Whether or not the discussion is only visible to team members and org admins.
 */
      get isPrivate(): $Field<"isPrivate", boolean>  {
       return this.$_select("isPrivate") as any
      }

      
/**
 * The moment the editor made the last edit
 */
      get lastEditedAt(): $Field<"lastEditedAt", string | null | undefined>  {
       return this.$_select("lastEditedAt") as any
      }

      
/**
 * Identifies the discussion within its team.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * Identifies when the comment was published at.
 */
      get publishedAt(): $Field<"publishedAt", string | null | undefined>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * A list of reactions grouped by content left on the subject.
 */
      reactionGroups<Sel extends Selection<ReactionGroup>>(selectorFn: (s: ReactionGroup) => [...Sel]):$Field<"reactionGroups", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactionGroup)
      };
      return this.$_select("reactionGroups", options) as any
    }
  

      
/**
 * A list of Reactions left on the Issue.
 */
      reactions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
content?: ReactionContent | null | undefined
orderBy?: ReactionOrder | null | undefined,
      }>,Sel extends Selection<ReactionConnection>>(args: Args, selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel, Args>>
reactions<Sel extends Selection<ReactionConnection>>(selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel>>
reactions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
content: "ReactionContent",
orderBy: "ReactionOrder"
            },
        args,

        selection: selectorFn(new ReactionConnection)
      };
      return this.$_select("reactions", options) as any
    }
  

      
/**
 * The HTTP path for this discussion
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * The team that defines the context of this discussion.
 */
      team<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"team", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("team", options) as any
    }
  

      
/**
 * The title of the discussion
 */
      get title(): $Field<"title", string>  {
       return this.$_select("title") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this discussion
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * A list of edits to this content.
 */
      userContentEdits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserContentEditConnection>>(args: Args, selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
userContentEdits<Sel extends Selection<UserContentEditConnection>>(selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel>>
userContentEdits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserContentEditConnection)
      };
      return this.$_select("userContentEdits", options) as any
    }
  

      
/**
 * Check if the current viewer can delete this object.
 */
      get viewerCanDelete(): $Field<"viewerCanDelete", boolean>  {
       return this.$_select("viewerCanDelete") as any
      }

      
/**
 * Whether or not the current viewer can pin this discussion.
 */
      get viewerCanPin(): $Field<"viewerCanPin", boolean>  {
       return this.$_select("viewerCanPin") as any
      }

      
/**
 * Can user react to this subject
 */
      get viewerCanReact(): $Field<"viewerCanReact", boolean>  {
       return this.$_select("viewerCanReact") as any
      }

      
/**
 * Check if the viewer is able to change their subscription status for the repository.
 */
      get viewerCanSubscribe(): $Field<"viewerCanSubscribe", boolean>  {
       return this.$_select("viewerCanSubscribe") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * Reasons why the current viewer can not update this comment.
 */
      get viewerCannotUpdateReasons(): $Field<"viewerCannotUpdateReasons", Readonly<Array<CommentCannotUpdateReason>>>  {
       return this.$_select("viewerCannotUpdateReasons") as any
      }

      
/**
 * Did the viewer author this comment.
 */
      get viewerDidAuthor(): $Field<"viewerDidAuthor", boolean>  {
       return this.$_select("viewerDidAuthor") as any
      }

      
/**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
      get viewerSubscription(): $Field<"viewerSubscription", SubscriptionState | null | undefined>  {
       return this.$_select("viewerSubscription") as any
      }
}


/**
 * A comment on a team discussion.
 */
export class TeamDiscussionComment extends $Base<"TeamDiscussionComment"> {
  constructor() {
    super("TeamDiscussionComment")
  }

  
      
/**
 * The actor who authored the comment.
 */
      author<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"author", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("author", options) as any
    }
  

      
/**
 * Author's association with the comment's team.
 */
      get authorAssociation(): $Field<"authorAssociation", CommentAuthorAssociation>  {
       return this.$_select("authorAssociation") as any
      }

      
/**
 * The body as Markdown.
 */
      get body(): $Field<"body", string>  {
       return this.$_select("body") as any
      }

      
/**
 * The body rendered to HTML.
 */
      get bodyHTML(): $Field<"bodyHTML", string>  {
       return this.$_select("bodyHTML") as any
      }

      
/**
 * The body rendered to text.
 */
      get bodyText(): $Field<"bodyText", string>  {
       return this.$_select("bodyText") as any
      }

      
/**
 * The current version of the body content.
 */
      get bodyVersion(): $Field<"bodyVersion", string>  {
       return this.$_select("bodyVersion") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Check if this comment was created via an email reply.
 */
      get createdViaEmail(): $Field<"createdViaEmail", boolean>  {
       return this.$_select("createdViaEmail") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The discussion this comment is about.
 */
      discussion<Sel extends Selection<TeamDiscussion>>(selectorFn: (s: TeamDiscussion) => [...Sel]):$Field<"discussion", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamDiscussion)
      };
      return this.$_select("discussion", options) as any
    }
  

      
/**
 * The actor who edited the comment.
 */
      editor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"editor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("editor", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Check if this comment was edited and includes an edit with the creation data
 */
      get includesCreatedEdit(): $Field<"includesCreatedEdit", boolean>  {
       return this.$_select("includesCreatedEdit") as any
      }

      
/**
 * The moment the editor made the last edit
 */
      get lastEditedAt(): $Field<"lastEditedAt", string | null | undefined>  {
       return this.$_select("lastEditedAt") as any
      }

      
/**
 * Identifies the comment number.
 */
      get number(): $Field<"number", number>  {
       return this.$_select("number") as any
      }

      
/**
 * Identifies when the comment was published at.
 */
      get publishedAt(): $Field<"publishedAt", string | null | undefined>  {
       return this.$_select("publishedAt") as any
      }

      
/**
 * A list of reactions grouped by content left on the subject.
 */
      reactionGroups<Sel extends Selection<ReactionGroup>>(selectorFn: (s: ReactionGroup) => [...Sel]):$Field<"reactionGroups", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ReactionGroup)
      };
      return this.$_select("reactionGroups", options) as any
    }
  

      
/**
 * A list of Reactions left on the Issue.
 */
      reactions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
content?: ReactionContent | null | undefined
orderBy?: ReactionOrder | null | undefined,
      }>,Sel extends Selection<ReactionConnection>>(args: Args, selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel, Args>>
reactions<Sel extends Selection<ReactionConnection>>(selectorFn: (s: ReactionConnection) => [...Sel]):$Field<"reactions", GetOutput<Sel> , GetVariables<Sel>>
reactions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
content: "ReactionContent",
orderBy: "ReactionOrder"
            },
        args,

        selection: selectorFn(new ReactionConnection)
      };
      return this.$_select("reactions", options) as any
    }
  

      
/**
 * The HTTP path for this comment
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this comment
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * A list of edits to this content.
 */
      userContentEdits<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<UserContentEditConnection>>(args: Args, selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
userContentEdits<Sel extends Selection<UserContentEditConnection>>(selectorFn: (s: UserContentEditConnection) => [...Sel]):$Field<"userContentEdits", GetOutput<Sel> | undefined , GetVariables<Sel>>
userContentEdits(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new UserContentEditConnection)
      };
      return this.$_select("userContentEdits", options) as any
    }
  

      
/**
 * Check if the current viewer can delete this object.
 */
      get viewerCanDelete(): $Field<"viewerCanDelete", boolean>  {
       return this.$_select("viewerCanDelete") as any
      }

      
/**
 * Can user react to this subject
 */
      get viewerCanReact(): $Field<"viewerCanReact", boolean>  {
       return this.$_select("viewerCanReact") as any
      }

      
/**
 * Check if the current viewer can update this object.
 */
      get viewerCanUpdate(): $Field<"viewerCanUpdate", boolean>  {
       return this.$_select("viewerCanUpdate") as any
      }

      
/**
 * Reasons why the current viewer can not update this comment.
 */
      get viewerCannotUpdateReasons(): $Field<"viewerCannotUpdateReasons", Readonly<Array<CommentCannotUpdateReason>>>  {
       return this.$_select("viewerCannotUpdateReasons") as any
      }

      
/**
 * Did the viewer author this comment.
 */
      get viewerDidAuthor(): $Field<"viewerDidAuthor", boolean>  {
       return this.$_select("viewerDidAuthor") as any
      }
}


/**
 * The connection type for TeamDiscussionComment.
 */
export class TeamDiscussionCommentConnection extends $Base<"TeamDiscussionCommentConnection"> {
  constructor() {
    super("TeamDiscussionCommentConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<TeamDiscussionCommentEdge>>(selectorFn: (s: TeamDiscussionCommentEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamDiscussionCommentEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<TeamDiscussionComment>>(selectorFn: (s: TeamDiscussionComment) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamDiscussionComment)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class TeamDiscussionCommentEdge extends $Base<"TeamDiscussionCommentEdge"> {
  constructor() {
    super("TeamDiscussionCommentEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<TeamDiscussionComment>>(selectorFn: (s: TeamDiscussionComment) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamDiscussionComment)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ways in which team discussion comment connections can be ordered.
 */
export type TeamDiscussionCommentOrder = {
  direction: OrderDirection,
field: TeamDiscussionCommentOrderField
}
    

  
/**
 * Properties by which team discussion comment connections can be ordered.
 */
export enum TeamDiscussionCommentOrderField {
  
/**
 * Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering).
 */
  NUMBER = "NUMBER"
}
  


/**
 * The connection type for TeamDiscussion.
 */
export class TeamDiscussionConnection extends $Base<"TeamDiscussionConnection"> {
  constructor() {
    super("TeamDiscussionConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<TeamDiscussionEdge>>(selectorFn: (s: TeamDiscussionEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamDiscussionEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<TeamDiscussion>>(selectorFn: (s: TeamDiscussion) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamDiscussion)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class TeamDiscussionEdge extends $Base<"TeamDiscussionEdge"> {
  constructor() {
    super("TeamDiscussionEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<TeamDiscussion>>(selectorFn: (s: TeamDiscussion) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamDiscussion)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ways in which team discussion connections can be ordered.
 */
export type TeamDiscussionOrder = {
  direction: OrderDirection,
field: TeamDiscussionOrderField
}
    

  
/**
 * Properties by which team discussion connections can be ordered.
 */
export enum TeamDiscussionOrderField {
  
/**
 * Allows chronological ordering of team discussions.
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * An edge in a connection.
 */
export class TeamEdge extends $Base<"TeamEdge"> {
  constructor() {
    super("TeamEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * The connection type for User.
 */
export class TeamMemberConnection extends $Base<"TeamMemberConnection"> {
  constructor() {
    super("TeamMemberConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<TeamMemberEdge>>(selectorFn: (s: TeamMemberEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamMemberEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Represents a user who is a member of a team.
 */
export class TeamMemberEdge extends $Base<"TeamMemberEdge"> {
  constructor() {
    super("TeamMemberEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The HTTP path to the organization's member access page.
 */
      get memberAccessResourcePath(): $Field<"memberAccessResourcePath", string>  {
       return this.$_select("memberAccessResourcePath") as any
      }

      
/**
 * The HTTP URL to the organization's member access page.
 */
      get memberAccessUrl(): $Field<"memberAccessUrl", string>  {
       return this.$_select("memberAccessUrl") as any
      }

      
      node<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"node", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * The role the member has on the team.
 */
      get role(): $Field<"role", TeamMemberRole>  {
       return this.$_select("role") as any
      }
}


/**
 * Ordering options for team member connections
 */
export type TeamMemberOrder = {
  direction: OrderDirection,
field: TeamMemberOrderField
}
    

  
/**
 * Properties by which team member connections can be ordered.
 */
export enum TeamMemberOrderField {
  
/**
 * Order team members by login
 */
  LOGIN = "LOGIN",

/**
 * Order team members by creation time
 */
  CREATED_AT = "CREATED_AT"
}
  

  
/**
 * The possible team member roles; either 'maintainer' or 'member'.
 */
export enum TeamMemberRole {
  
/**
 * A team maintainer has permission to add and remove team members.
 */
  MAINTAINER = "MAINTAINER",

/**
 * A team member has no administrative permissions on the team.
 */
  MEMBER = "MEMBER"
}
  

  
/**
 * Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
 */
export enum TeamMembershipType {
  
/**
 * Includes only immediate members of the team.
 */
  IMMEDIATE = "IMMEDIATE",

/**
 * Includes only child team members for the team.
 */
  CHILD_TEAM = "CHILD_TEAM",

/**
 * Includes immediate and child team members for the team.
 */
  ALL = "ALL"
}
  


/**
 * Ways in which team connections can be ordered.
 */
export type TeamOrder = {
  direction: OrderDirection,
field: TeamOrderField
}
    

  
/**
 * Properties by which team connections can be ordered.
 */
export enum TeamOrderField {
  
/**
 * Allows ordering a list of teams by name.
 */
  NAME = "NAME"
}
  

  
/**
 * The possible team privacy values.
 */
export enum TeamPrivacy {
  
/**
 * A secret team can only be seen by its members.
 */
  SECRET = "SECRET",

/**
 * A visible team can be seen and @mentioned by every member of the organization.
 */
  VISIBLE = "VISIBLE"
}
  


/**
 * Audit log entry for a team.remove_member event.
 */
export class TeamRemoveMemberAuditEntry extends $Base<"TeamRemoveMemberAuditEntry"> {
  constructor() {
    super("TeamRemoveMemberAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether the team was mapped to an LDAP Group.
 */
      get isLdapMapped(): $Field<"isLdapMapped", boolean | null | undefined>  {
       return this.$_select("isLdapMapped") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The team associated with the action
 */
      team<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"team", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("team", options) as any
    }
  

      
/**
 * The name of the team
 */
      get teamName(): $Field<"teamName", string | null | undefined>  {
       return this.$_select("teamName") as any
      }

      
/**
 * The HTTP path for this team
 */
      get teamResourcePath(): $Field<"teamResourcePath", string | null | undefined>  {
       return this.$_select("teamResourcePath") as any
      }

      
/**
 * The HTTP URL for this team
 */
      get teamUrl(): $Field<"teamUrl", string | null | undefined>  {
       return this.$_select("teamUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * Audit log entry for a team.remove_repository event.
 */
export class TeamRemoveRepositoryAuditEntry extends $Base<"TeamRemoveRepositoryAuditEntry"> {
  constructor() {
    super("TeamRemoveRepositoryAuditEntry")
  }

  
      
/**
 * The action name
 */
      get action(): $Field<"action", string>  {
       return this.$_select("action") as any
      }

      
/**
 * The user who initiated the action
 */
      actor<Sel extends Selection<AuditEntryActor>>(selectorFn: (s: AuditEntryActor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new AuditEntryActor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The IP address of the actor
 */
      get actorIp(): $Field<"actorIp", string | null | undefined>  {
       return this.$_select("actorIp") as any
      }

      
/**
 * A readable representation of the actor's location
 */
      actorLocation<Sel extends Selection<ActorLocation>>(selectorFn: (s: ActorLocation) => [...Sel]):$Field<"actorLocation", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ActorLocation)
      };
      return this.$_select("actorLocation", options) as any
    }
  

      
/**
 * The username of the user who initiated the action
 */
      get actorLogin(): $Field<"actorLogin", string | null | undefined>  {
       return this.$_select("actorLogin") as any
      }

      
/**
 * The HTTP path for the actor.
 */
      get actorResourcePath(): $Field<"actorResourcePath", string | null | undefined>  {
       return this.$_select("actorResourcePath") as any
      }

      
/**
 * The HTTP URL for the actor.
 */
      get actorUrl(): $Field<"actorUrl", string | null | undefined>  {
       return this.$_select("actorUrl") as any
      }

      
/**
 * The time the action was initiated
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether the team was mapped to an LDAP Group.
 */
      get isLdapMapped(): $Field<"isLdapMapped", boolean | null | undefined>  {
       return this.$_select("isLdapMapped") as any
      }

      
/**
 * The corresponding operation type for the action
 */
      get operationType(): $Field<"operationType", OperationType | null | undefined>  {
       return this.$_select("operationType") as any
      }

      
/**
 * The Organization associated with the Audit Entry.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * The name of the Organization.
 */
      get organizationName(): $Field<"organizationName", string | null | undefined>  {
       return this.$_select("organizationName") as any
      }

      
/**
 * The HTTP path for the organization
 */
      get organizationResourcePath(): $Field<"organizationResourcePath", string | null | undefined>  {
       return this.$_select("organizationResourcePath") as any
      }

      
/**
 * The HTTP URL for the organization
 */
      get organizationUrl(): $Field<"organizationUrl", string | null | undefined>  {
       return this.$_select("organizationUrl") as any
      }

      
/**
 * The repository associated with the action
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The name of the repository
 */
      get repositoryName(): $Field<"repositoryName", string | null | undefined>  {
       return this.$_select("repositoryName") as any
      }

      
/**
 * The HTTP path for the repository
 */
      get repositoryResourcePath(): $Field<"repositoryResourcePath", string | null | undefined>  {
       return this.$_select("repositoryResourcePath") as any
      }

      
/**
 * The HTTP URL for the repository
 */
      get repositoryUrl(): $Field<"repositoryUrl", string | null | undefined>  {
       return this.$_select("repositoryUrl") as any
      }

      
/**
 * The team associated with the action
 */
      team<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"team", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("team", options) as any
    }
  

      
/**
 * The name of the team
 */
      get teamName(): $Field<"teamName", string | null | undefined>  {
       return this.$_select("teamName") as any
      }

      
/**
 * The HTTP path for this team
 */
      get teamResourcePath(): $Field<"teamResourcePath", string | null | undefined>  {
       return this.$_select("teamResourcePath") as any
      }

      
/**
 * The HTTP URL for this team
 */
      get teamUrl(): $Field<"teamUrl", string | null | undefined>  {
       return this.$_select("teamUrl") as any
      }

      
/**
 * The user affected by the action
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  

      
/**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
      get userLogin(): $Field<"userLogin", string | null | undefined>  {
       return this.$_select("userLogin") as any
      }

      
/**
 * The HTTP path for the user.
 */
      get userResourcePath(): $Field<"userResourcePath", string | null | undefined>  {
       return this.$_select("userResourcePath") as any
      }

      
/**
 * The HTTP URL for the user.
 */
      get userUrl(): $Field<"userUrl", string | null | undefined>  {
       return this.$_select("userUrl") as any
      }
}


/**
 * The connection type for Repository.
 */
export class TeamRepositoryConnection extends $Base<"TeamRepositoryConnection"> {
  constructor() {
    super("TeamRepositoryConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<TeamRepositoryEdge>>(selectorFn: (s: TeamRepositoryEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamRepositoryEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * Represents a team repository.
 */
export class TeamRepositoryEdge extends $Base<"TeamRepositoryEdge"> {
  constructor() {
    super("TeamRepositoryEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
      node<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"node", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("node", options) as any
    }
  

      
/**
 * The permission level the team has on the repository
 */
      get permission(): $Field<"permission", RepositoryPermission>  {
       return this.$_select("permission") as any
      }
}


/**
 * Ordering options for team repository connections
 */
export type TeamRepositoryOrder = {
  direction: OrderDirection,
field: TeamRepositoryOrderField
}
    

  
/**
 * Properties by which team repository connections can be ordered.
 */
export enum TeamRepositoryOrderField {
  
/**
 * Order repositories by creation time
 */
  CREATED_AT = "CREATED_AT",

/**
 * Order repositories by update time
 */
  UPDATED_AT = "UPDATED_AT",

/**
 * Order repositories by push time
 */
  PUSHED_AT = "PUSHED_AT",

/**
 * Order repositories by name
 */
  NAME = "NAME",

/**
 * Order repositories by permission
 */
  PERMISSION = "PERMISSION",

/**
 * Order repositories by number of stargazers
 */
  STARGAZERS = "STARGAZERS"
}
  

  
/**
 * The role of a user on a team.
 */
export enum TeamRole {
  
/**
 * User has admin rights on the team.
 */
  ADMIN = "ADMIN",

/**
 * User is a member of the team.
 */
  MEMBER = "MEMBER"
}
  


/**
 * A text match within a search result.
 */
export class TextMatch extends $Base<"TextMatch"> {
  constructor() {
    super("TextMatch")
  }

  
      
/**
 * The specific text fragment within the property matched on.
 */
      get fragment(): $Field<"fragment", string>  {
       return this.$_select("fragment") as any
      }

      
/**
 * Highlights within the matched fragment.
 */
      highlights<Sel extends Selection<TextMatchHighlight>>(selectorFn: (s: TextMatchHighlight) => [...Sel]):$Field<"highlights", Array<GetOutput<Sel>> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TextMatchHighlight)
      };
      return this.$_select("highlights", options) as any
    }
  

      
/**
 * The property matched on.
 */
      get property(): $Field<"property", string>  {
       return this.$_select("property") as any
      }
}


/**
 * Represents a single highlight in a search result match.
 */
export class TextMatchHighlight extends $Base<"TextMatchHighlight"> {
  constructor() {
    super("TextMatchHighlight")
  }

  
      
/**
 * The indice in the fragment where the matched text begins.
 */
      get beginIndice(): $Field<"beginIndice", number>  {
       return this.$_select("beginIndice") as any
      }

      
/**
 * The indice in the fragment where the matched text ends.
 */
      get endIndice(): $Field<"endIndice", number>  {
       return this.$_select("endIndice") as any
      }

      
/**
 * The text matched.
 */
      get text(): $Field<"text", string>  {
       return this.$_select("text") as any
      }
}


/**
 * A topic aggregates entities that are related to a subject.
 */
export class Topic extends $Base<"Topic"> {
  constructor() {
    super("Topic")
  }

  
      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The topic's name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * A list of related topics, including aliases of this topic, sorted with the most relevant
first. Returns up to 10 Topics.

 */
      relatedTopics<Args extends VariabledInput<{
        first?: number | null | undefined,
      }>,Sel extends Selection<Topic>>(args: Args, selectorFn: (s: Topic) => [...Sel]):$Field<"relatedTopics", Array<GetOutput<Sel>> , GetVariables<Sel, Args>>
relatedTopics<Sel extends Selection<Topic>>(selectorFn: (s: Topic) => [...Sel]):$Field<"relatedTopics", Array<GetOutput<Sel>> , GetVariables<Sel>>
relatedTopics(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              first: "Int"
            },
        args,

        selection: selectorFn(new Topic)
      };
      return this.$_select("relatedTopics", options) as any
    }
  

      
/**
 * A list of repositories.
 */
      repositories<Args extends VariabledInput<{
        privacy?: RepositoryPrivacy | null | undefined
orderBy?: RepositoryOrder | null | undefined
affiliations?: Readonly<Array<RepositoryAffiliation | null | undefined>> | null | undefined
ownerAffiliations?: Readonly<Array<RepositoryAffiliation | null | undefined>> | null | undefined
isLocked?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
sponsorableOnly?: boolean | null | undefined,
      }>,Sel extends Selection<RepositoryConnection>>(args: Args, selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel, Args>>
repositories<Sel extends Selection<RepositoryConnection>>(selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel>>
repositories(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              privacy: "RepositoryPrivacy",
orderBy: "RepositoryOrder",
affiliations: "[RepositoryAffiliation]",
ownerAffiliations: "[RepositoryAffiliation]",
isLocked: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int",
sponsorableOnly: "Boolean"
            },
        args,

        selection: selectorFn(new RepositoryConnection)
      };
      return this.$_select("repositories", options) as any
    }
  

      
/**
 * Returns a count of how many stargazers there are on this object

 */
      get stargazerCount(): $Field<"stargazerCount", number>  {
       return this.$_select("stargazerCount") as any
      }

      
/**
 * A list of users who have starred this starrable.
 */
      stargazers<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: StarOrder | null | undefined,
      }>,Sel extends Selection<StargazerConnection>>(args: Args, selectorFn: (s: StargazerConnection) => [...Sel]):$Field<"stargazers", GetOutput<Sel> , GetVariables<Sel, Args>>
stargazers<Sel extends Selection<StargazerConnection>>(selectorFn: (s: StargazerConnection) => [...Sel]):$Field<"stargazers", GetOutput<Sel> , GetVariables<Sel>>
stargazers(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "StarOrder"
            },
        args,

        selection: selectorFn(new StargazerConnection)
      };
      return this.$_select("stargazers", options) as any
    }
  

      
/**
 * Returns a boolean indicating whether the viewing user has starred this starrable.
 */
      get viewerHasStarred(): $Field<"viewerHasStarred", boolean>  {
       return this.$_select("viewerHasStarred") as any
      }
}


/**
 * Metadata for an audit entry with a topic.
 */
export class TopicAuditEntryData extends $Interface<{RepoAddTopicAuditEntry: RepoAddTopicAuditEntry,RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntry}, "TopicAuditEntryData"> {
  constructor() {
    super({RepoAddTopicAuditEntry: RepoAddTopicAuditEntry,RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntry}, "TopicAuditEntryData")
  }
}

  
/**
 * Reason that the suggested topic is declined.
 */
export enum TopicSuggestionDeclineReason {
  
/**
 * The suggested topic is not relevant to the repository.
 */
  NOT_RELEVANT = "NOT_RELEVANT",

/**
 * The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
 */
  TOO_SPECIFIC = "TOO_SPECIFIC",

/**
 * The viewer does not like the suggested topic.
 */
  PERSONAL_PREFERENCE = "PERSONAL_PREFERENCE",

/**
 * The suggested topic is too general for the repository.
 */
  TOO_GENERAL = "TOO_GENERAL"
}
  

  
/**
 * The possible states of a tracked issue.
 */
export enum TrackedIssueStates {
  
/**
 * The tracked issue is open
 */
  OPEN = "OPEN",

/**
 * The tracked issue is closed
 */
  CLOSED = "CLOSED"
}
  


/**
 * Autogenerated input type of TransferIssue
 */
export type TransferIssueInput = {
  clientMutationId?: string | null | undefined,
createLabelsIfMissing?: boolean | null | undefined,
issueId: string,
repositoryId: string
}
    


/**
 * Autogenerated return type of TransferIssue
 */
export class TransferIssuePayload extends $Base<"TransferIssuePayload"> {
  constructor() {
    super("TransferIssuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The issue that was transferred
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  
}


/**
 * Represents a 'transferred' event on a given issue or pull request.
 */
export class TransferredEvent extends $Base<"TransferredEvent"> {
  constructor() {
    super("TransferredEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The repository this came from
 */
      fromRepository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"fromRepository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("fromRepository", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the issue associated with the event.
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  
}


/**
 * Represents a Git tree.
 */
export class Tree extends $Base<"Tree"> {
  constructor() {
    super("Tree")
  }

  
      
/**
 * An abbreviated version of the Git object ID
 */
      get abbreviatedOid(): $Field<"abbreviatedOid", string>  {
       return this.$_select("abbreviatedOid") as any
      }

      
/**
 * The HTTP path for this Git object
 */
      get commitResourcePath(): $Field<"commitResourcePath", string>  {
       return this.$_select("commitResourcePath") as any
      }

      
/**
 * The HTTP URL for this Git object
 */
      get commitUrl(): $Field<"commitUrl", string>  {
       return this.$_select("commitUrl") as any
      }

      
/**
 * A list of tree entries.
 */
      entries<Sel extends Selection<TreeEntry>>(selectorFn: (s: TreeEntry) => [...Sel]):$Field<"entries", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TreeEntry)
      };
      return this.$_select("entries", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The Git object ID
 */
      get oid(): $Field<"oid", string>  {
       return this.$_select("oid") as any
      }

      
/**
 * The Repository the Git object belongs to
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * Represents a Git tree entry.
 */
export class TreeEntry extends $Base<"TreeEntry"> {
  constructor() {
    super("TreeEntry")
  }

  
      
/**
 * The extension of the file
 */
      get extension(): $Field<"extension", string | null | undefined>  {
       return this.$_select("extension") as any
      }

      
/**
 * Whether or not this tree entry is generated
 */
      get isGenerated(): $Field<"isGenerated", boolean>  {
       return this.$_select("isGenerated") as any
      }

      
/**
 * The programming language this file is written in.
 */
      language<Sel extends Selection<Language>>(selectorFn: (s: Language) => [...Sel]):$Field<"language", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Language)
      };
      return this.$_select("language", options) as any
    }
  

      
/**
 * Number of lines in the file.
 */
      get lineCount(): $Field<"lineCount", number | null | undefined>  {
       return this.$_select("lineCount") as any
      }

      
/**
 * Entry file mode.
 */
      get mode(): $Field<"mode", number>  {
       return this.$_select("mode") as any
      }

      
/**
 * Entry file name.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * Entry file object.
 */
      object<Sel extends Selection<GitObject>>(selectorFn: (s: GitObject) => [...Sel]):$Field<"object", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new GitObject)
      };
      return this.$_select("object", options) as any
    }
  

      
/**
 * Entry file Git object ID.
 */
      get oid(): $Field<"oid", string>  {
       return this.$_select("oid") as any
      }

      
/**
 * The full path of the file.
 */
      get path(): $Field<"path", string | null | undefined>  {
       return this.$_select("path") as any
      }

      
/**
 * The Repository the tree entry belongs to
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * Entry byte size
 */
      get size(): $Field<"size", number>  {
       return this.$_select("size") as any
      }

      
/**
 * If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
 */
      submodule<Sel extends Selection<Submodule>>(selectorFn: (s: Submodule) => [...Sel]):$Field<"submodule", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Submodule)
      };
      return this.$_select("submodule", options) as any
    }
  

      
/**
 * Entry file type.
 */
      get type(): $Field<"type", string>  {
       return this.$_select("type") as any
      }
}


/**
 * An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
 */
export type URI = string



/**
 * Autogenerated input type of UnarchiveRepository
 */
export type UnarchiveRepositoryInput = {
  clientMutationId?: string | null | undefined,
repositoryId: string
}
    


/**
 * Autogenerated return type of UnarchiveRepository
 */
export class UnarchiveRepositoryPayload extends $Base<"UnarchiveRepositoryPayload"> {
  constructor() {
    super("UnarchiveRepositoryPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The repository that was unarchived.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * Represents an 'unassigned' event on any assignable object.
 */
export class UnassignedEvent extends $Base<"UnassignedEvent"> {
  constructor() {
    super("UnassignedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the assignable associated with the event.
 */
      assignable<Sel extends Selection<Assignable>>(selectorFn: (s: Assignable) => [...Sel]):$Field<"assignable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Assignable)
      };
      return this.$_select("assignable", options) as any
    }
  

      
/**
 * Identifies the user or mannequin that was unassigned.
 */
      assignee<Sel extends Selection<Assignee>>(selectorFn: (s: Assignee) => [...Sel]):$Field<"assignee", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Assignee)
      };
      return this.$_select("assignee", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the subject (user) who was unassigned.
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * Autogenerated input type of UnfollowOrganization
 */
export type UnfollowOrganizationInput = {
  clientMutationId?: string | null | undefined,
organizationId: string
}
    


/**
 * Autogenerated return type of UnfollowOrganization
 */
export class UnfollowOrganizationPayload extends $Base<"UnfollowOrganizationPayload"> {
  constructor() {
    super("UnfollowOrganizationPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The organization that was unfollowed.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  
}


/**
 * Autogenerated input type of UnfollowUser
 */
export type UnfollowUserInput = {
  clientMutationId?: string | null | undefined,
userId: string
}
    


/**
 * Autogenerated return type of UnfollowUser
 */
export class UnfollowUserPayload extends $Base<"UnfollowUserPayload"> {
  constructor() {
    super("UnfollowUserPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The user that was unfollowed.
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * Represents a type that can be retrieved by a URL.
 */
export class UniformResourceLocatable extends $Interface<{Bot: Bot,CheckRun: CheckRun,ClosedEvent: ClosedEvent,Commit: Commit,ConvertToDraftEvent: ConvertToDraftEvent,CrossReferencedEvent: CrossReferencedEvent,Gist: Gist,Issue: Issue,Mannequin: Mannequin,MergedEvent: MergedEvent,Milestone: Milestone,Organization: Organization,PullRequest: PullRequest,PullRequestCommit: PullRequestCommit,ReadyForReviewEvent: ReadyForReviewEvent,Release: Release,Repository: Repository,RepositoryTopic: RepositoryTopic,ReviewDismissedEvent: ReviewDismissedEvent,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment,User: User}, "UniformResourceLocatable"> {
  constructor() {
    super({Bot: Bot,CheckRun: CheckRun,ClosedEvent: ClosedEvent,Commit: Commit,ConvertToDraftEvent: ConvertToDraftEvent,CrossReferencedEvent: CrossReferencedEvent,Gist: Gist,Issue: Issue,Mannequin: Mannequin,MergedEvent: MergedEvent,Milestone: Milestone,Organization: Organization,PullRequest: PullRequest,PullRequestCommit: PullRequestCommit,ReadyForReviewEvent: ReadyForReviewEvent,Release: Release,Repository: Repository,RepositoryTopic: RepositoryTopic,ReviewDismissedEvent: ReviewDismissedEvent,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment,User: User}, "UniformResourceLocatable")
  }
}


/**
 * Represents an unknown signature on a Commit or Tag.
 */
export class UnknownSignature extends $Base<"UnknownSignature"> {
  constructor() {
    super("UnknownSignature")
  }

  
      
/**
 * Email used to sign this object.
 */
      get email(): $Field<"email", string>  {
       return this.$_select("email") as any
      }

      
/**
 * True if the signature is valid and verified by GitHub.
 */
      get isValid(): $Field<"isValid", boolean>  {
       return this.$_select("isValid") as any
      }

      
/**
 * Payload for GPG signing object. Raw ODB object without the signature header.
 */
      get payload(): $Field<"payload", string>  {
       return this.$_select("payload") as any
      }

      
/**
 * ASCII-armored signature header from object.
 */
      get signature(): $Field<"signature", string>  {
       return this.$_select("signature") as any
      }

      
/**
 * GitHub user corresponding to the email signing this commit.
 */
      signer<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"signer", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("signer", options) as any
    }
  

      
/**
 * The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid.
 */
      get state(): $Field<"state", GitSignatureState>  {
       return this.$_select("state") as any
      }

      
/**
 * True if the signature was made with GitHub's signing key.
 */
      get wasSignedByGitHub(): $Field<"wasSignedByGitHub", boolean>  {
       return this.$_select("wasSignedByGitHub") as any
      }
}


/**
 * Represents an 'unlabeled' event on a given issue or pull request.
 */
export class UnlabeledEvent extends $Base<"UnlabeledEvent"> {
  constructor() {
    super("UnlabeledEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the label associated with the 'unlabeled' event.
 */
      label<Sel extends Selection<Label>>(selectorFn: (s: Label) => [...Sel]):$Field<"label", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Label)
      };
      return this.$_select("label", options) as any
    }
  

      
/**
 * Identifies the `Labelable` associated with the event.
 */
      labelable<Sel extends Selection<Labelable>>(selectorFn: (s: Labelable) => [...Sel]):$Field<"labelable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Labelable)
      };
      return this.$_select("labelable", options) as any
    }
  
}


/**
 * Autogenerated input type of UnlinkRepositoryFromProject
 */
export type UnlinkRepositoryFromProjectInput = {
  clientMutationId?: string | null | undefined,
projectId: string,
repositoryId: string
}
    


/**
 * Autogenerated return type of UnlinkRepositoryFromProject
 */
export class UnlinkRepositoryFromProjectPayload extends $Base<"UnlinkRepositoryFromProjectPayload"> {
  constructor() {
    super("UnlinkRepositoryFromProjectPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The linked Project.
 */
      project<Sel extends Selection<Project>>(selectorFn: (s: Project) => [...Sel]):$Field<"project", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Project)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * The linked Repository.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * Autogenerated input type of UnlockLockable
 */
export type UnlockLockableInput = {
  clientMutationId?: string | null | undefined,
lockableId: string
}
    


/**
 * Autogenerated return type of UnlockLockable
 */
export class UnlockLockablePayload extends $Base<"UnlockLockablePayload"> {
  constructor() {
    super("UnlockLockablePayload")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The item that was unlocked.
 */
      unlockedRecord<Sel extends Selection<Lockable>>(selectorFn: (s: Lockable) => [...Sel]):$Field<"unlockedRecord", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Lockable)
      };
      return this.$_select("unlockedRecord", options) as any
    }
  
}


/**
 * Represents an 'unlocked' event on a given issue or pull request.
 */
export class UnlockedEvent extends $Base<"UnlockedEvent"> {
  constructor() {
    super("UnlockedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Object that was unlocked.
 */
      lockable<Sel extends Selection<Lockable>>(selectorFn: (s: Lockable) => [...Sel]):$Field<"lockable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Lockable)
      };
      return this.$_select("lockable", options) as any
    }
  
}


/**
 * Autogenerated input type of UnmarkDiscussionCommentAsAnswer
 */
export type UnmarkDiscussionCommentAsAnswerInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of UnmarkDiscussionCommentAsAnswer
 */
export class UnmarkDiscussionCommentAsAnswerPayload extends $Base<"UnmarkDiscussionCommentAsAnswerPayload"> {
  constructor() {
    super("UnmarkDiscussionCommentAsAnswerPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The discussion that includes the comment.
 */
      discussion<Sel extends Selection<Discussion>>(selectorFn: (s: Discussion) => [...Sel]):$Field<"discussion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Discussion)
      };
      return this.$_select("discussion", options) as any
    }
  
}


/**
 * Autogenerated input type of UnmarkFileAsViewed
 */
export type UnmarkFileAsViewedInput = {
  clientMutationId?: string | null | undefined,
path: string,
pullRequestId: string
}
    


/**
 * Autogenerated return type of UnmarkFileAsViewed
 */
export class UnmarkFileAsViewedPayload extends $Base<"UnmarkFileAsViewedPayload"> {
  constructor() {
    super("UnmarkFileAsViewedPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated pull request.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Autogenerated input type of UnmarkIssueAsDuplicate
 */
export type UnmarkIssueAsDuplicateInput = {
  canonicalId: string,
clientMutationId?: string | null | undefined,
duplicateId: string
}
    


/**
 * Autogenerated return type of UnmarkIssueAsDuplicate
 */
export class UnmarkIssueAsDuplicatePayload extends $Base<"UnmarkIssueAsDuplicatePayload"> {
  constructor() {
    super("UnmarkIssueAsDuplicatePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The issue or pull request that was marked as a duplicate.
 */
      duplicate<Sel extends Selection<IssueOrPullRequest>>(selectorFn: (s: IssueOrPullRequest) => [...Sel]):$Field<"duplicate", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueOrPullRequest)
      };
      return this.$_select("duplicate", options) as any
    }
  
}


/**
 * Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
 */
export class UnmarkedAsDuplicateEvent extends $Base<"UnmarkedAsDuplicateEvent"> {
  constructor() {
    super("UnmarkedAsDuplicateEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * The authoritative issue or pull request which has been duplicated by another.
 */
      canonical<Sel extends Selection<IssueOrPullRequest>>(selectorFn: (s: IssueOrPullRequest) => [...Sel]):$Field<"canonical", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueOrPullRequest)
      };
      return this.$_select("canonical", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * The issue or pull request which has been marked as a duplicate of another.
 */
      duplicate<Sel extends Selection<IssueOrPullRequest>>(selectorFn: (s: IssueOrPullRequest) => [...Sel]):$Field<"duplicate", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueOrPullRequest)
      };
      return this.$_select("duplicate", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Canonical and duplicate belong to different repositories.
 */
      get isCrossRepository(): $Field<"isCrossRepository", boolean>  {
       return this.$_select("isCrossRepository") as any
      }
}


/**
 * Autogenerated input type of UnminimizeComment
 */
export type UnminimizeCommentInput = {
  clientMutationId?: string | null | undefined,
subjectId: string
}
    


/**
 * Autogenerated return type of UnminimizeComment
 */
export class UnminimizeCommentPayload extends $Base<"UnminimizeCommentPayload"> {
  constructor() {
    super("UnminimizeCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The comment that was unminimized.
 */
      unminimizedComment<Sel extends Selection<Minimizable>>(selectorFn: (s: Minimizable) => [...Sel]):$Field<"unminimizedComment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Minimizable)
      };
      return this.$_select("unminimizedComment", options) as any
    }
  
}


/**
 * Autogenerated input type of UnpinIssue
 */
export type UnpinIssueInput = {
  clientMutationId?: string | null | undefined,
issueId: string
}
    


/**
 * Autogenerated return type of UnpinIssue
 */
export class UnpinIssuePayload extends $Base<"UnpinIssuePayload"> {
  constructor() {
    super("UnpinIssuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The issue that was unpinned
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  
}


/**
 * Represents an 'unpinned' event on a given issue or pull request.
 */
export class UnpinnedEvent extends $Base<"UnpinnedEvent"> {
  constructor() {
    super("UnpinnedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the issue associated with the event.
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  
}


/**
 * Autogenerated input type of UnresolveReviewThread
 */
export type UnresolveReviewThreadInput = {
  clientMutationId?: string | null | undefined,
threadId: string
}
    


/**
 * Autogenerated return type of UnresolveReviewThread
 */
export class UnresolveReviewThreadPayload extends $Base<"UnresolveReviewThreadPayload"> {
  constructor() {
    super("UnresolveReviewThreadPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The thread to resolve.
 */
      thread<Sel extends Selection<PullRequestReviewThread>>(selectorFn: (s: PullRequestReviewThread) => [...Sel]):$Field<"thread", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewThread)
      };
      return this.$_select("thread", options) as any
    }
  
}


/**
 * Represents an 'unsubscribed' event on a given `Subscribable`.
 */
export class UnsubscribedEvent extends $Base<"UnsubscribedEvent"> {
  constructor() {
    super("UnsubscribedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Object referenced by event.
 */
      subscribable<Sel extends Selection<Subscribable>>(selectorFn: (s: Subscribable) => [...Sel]):$Field<"subscribable", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Subscribable)
      };
      return this.$_select("subscribable", options) as any
    }
  
}


/**
 * Entities that can be updated.
 */
export class Updatable extends $Interface<{CommitComment: CommitComment,Discussion: Discussion,DiscussionComment: DiscussionComment,GistComment: GistComment,Issue: Issue,IssueComment: IssueComment,Project: Project,ProjectNext: ProjectNext,ProjectV2: ProjectV2,PullRequest: PullRequest,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment}, "Updatable"> {
  constructor() {
    super({CommitComment: CommitComment,Discussion: Discussion,DiscussionComment: DiscussionComment,GistComment: GistComment,Issue: Issue,IssueComment: IssueComment,Project: Project,ProjectNext: ProjectNext,ProjectV2: ProjectV2,PullRequest: PullRequest,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment}, "Updatable")
  }
}


/**
 * Comments that can be updated.
 */
export class UpdatableComment extends $Interface<{CommitComment: CommitComment,DiscussionComment: DiscussionComment,GistComment: GistComment,Issue: Issue,IssueComment: IssueComment,PullRequest: PullRequest,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment}, "UpdatableComment"> {
  constructor() {
    super({CommitComment: CommitComment,DiscussionComment: DiscussionComment,GistComment: GistComment,Issue: Issue,IssueComment: IssueComment,PullRequest: PullRequest,PullRequestReview: PullRequestReview,PullRequestReviewComment: PullRequestReviewComment,TeamDiscussion: TeamDiscussion,TeamDiscussionComment: TeamDiscussionComment}, "UpdatableComment")
  }
}


/**
 * Autogenerated input type of UpdateBranchProtectionRule
 */
export type UpdateBranchProtectionRuleInput = {
  allowsDeletions?: boolean | null | undefined,
allowsForcePushes?: boolean | null | undefined,
blocksCreations?: boolean | null | undefined,
branchProtectionRuleId: string,
bypassForcePushActorIds?: Readonly<Array<string>> | null | undefined,
bypassPullRequestActorIds?: Readonly<Array<string>> | null | undefined,
clientMutationId?: string | null | undefined,
dismissesStaleReviews?: boolean | null | undefined,
isAdminEnforced?: boolean | null | undefined,
lockAllowsFetchAndMerge?: boolean | null | undefined,
lockBranch?: boolean | null | undefined,
pattern?: string | null | undefined,
pushActorIds?: Readonly<Array<string>> | null | undefined,
requireLastPushApproval?: boolean | null | undefined,
requiredApprovingReviewCount?: number | null | undefined,
requiredStatusCheckContexts?: Readonly<Array<string>> | null | undefined,
requiredStatusChecks?: Readonly<Array<RequiredStatusCheckInput>> | null | undefined,
requiresApprovingReviews?: boolean | null | undefined,
requiresCodeOwnerReviews?: boolean | null | undefined,
requiresCommitSignatures?: boolean | null | undefined,
requiresConversationResolution?: boolean | null | undefined,
requiresLinearHistory?: boolean | null | undefined,
requiresStatusChecks?: boolean | null | undefined,
requiresStrictStatusChecks?: boolean | null | undefined,
restrictsPushes?: boolean | null | undefined,
restrictsReviewDismissals?: boolean | null | undefined,
reviewDismissalActorIds?: Readonly<Array<string>> | null | undefined
}
    


/**
 * Autogenerated return type of UpdateBranchProtectionRule
 */
export class UpdateBranchProtectionRulePayload extends $Base<"UpdateBranchProtectionRulePayload"> {
  constructor() {
    super("UpdateBranchProtectionRulePayload")
  }

  
      
/**
 * The newly created BranchProtectionRule.
 */
      branchProtectionRule<Sel extends Selection<BranchProtectionRule>>(selectorFn: (s: BranchProtectionRule) => [...Sel]):$Field<"branchProtectionRule", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new BranchProtectionRule)
      };
      return this.$_select("branchProtectionRule", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of UpdateCheckRun
 */
export type UpdateCheckRunInput = {
  actions?: Readonly<Array<CheckRunAction>> | null | undefined,
checkRunId: string,
clientMutationId?: string | null | undefined,
completedAt?: string | null | undefined,
conclusion?: CheckConclusionState | null | undefined,
detailsUrl?: string | null | undefined,
externalId?: string | null | undefined,
name?: string | null | undefined,
output?: CheckRunOutput | null | undefined,
repositoryId: string,
startedAt?: string | null | undefined,
status?: RequestableCheckStatusState | null | undefined
}
    


/**
 * Autogenerated return type of UpdateCheckRun
 */
export class UpdateCheckRunPayload extends $Base<"UpdateCheckRunPayload"> {
  constructor() {
    super("UpdateCheckRunPayload")
  }

  
      
/**
 * The updated check run.
 */
      checkRun<Sel extends Selection<CheckRun>>(selectorFn: (s: CheckRun) => [...Sel]):$Field<"checkRun", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckRun)
      };
      return this.$_select("checkRun", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }
}


/**
 * Autogenerated input type of UpdateCheckSuitePreferences
 */
export type UpdateCheckSuitePreferencesInput = {
  autoTriggerPreferences: Readonly<Array<CheckSuiteAutoTriggerPreference>>,
clientMutationId?: string | null | undefined,
repositoryId: string
}
    


/**
 * Autogenerated return type of UpdateCheckSuitePreferences
 */
export class UpdateCheckSuitePreferencesPayload extends $Base<"UpdateCheckSuitePreferencesPayload"> {
  constructor() {
    super("UpdateCheckSuitePreferencesPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated repository.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateDiscussionComment
 */
export type UpdateDiscussionCommentInput = {
  body: string,
clientMutationId?: string | null | undefined,
commentId: string
}
    


/**
 * Autogenerated return type of UpdateDiscussionComment
 */
export class UpdateDiscussionCommentPayload extends $Base<"UpdateDiscussionCommentPayload"> {
  constructor() {
    super("UpdateDiscussionCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The modified discussion comment.
 */
      comment<Sel extends Selection<DiscussionComment>>(selectorFn: (s: DiscussionComment) => [...Sel]):$Field<"comment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DiscussionComment)
      };
      return this.$_select("comment", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateDiscussion
 */
export type UpdateDiscussionInput = {
  body?: string | null | undefined,
categoryId?: string | null | undefined,
clientMutationId?: string | null | undefined,
discussionId: string,
title?: string | null | undefined
}
    


/**
 * Autogenerated return type of UpdateDiscussion
 */
export class UpdateDiscussionPayload extends $Base<"UpdateDiscussionPayload"> {
  constructor() {
    super("UpdateDiscussionPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The modified discussion.
 */
      discussion<Sel extends Selection<Discussion>>(selectorFn: (s: Discussion) => [...Sel]):$Field<"discussion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Discussion)
      };
      return this.$_select("discussion", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateEnterpriseAdministratorRole
 */
export type UpdateEnterpriseAdministratorRoleInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
login: string,
role: EnterpriseAdministratorRole
}
    


/**
 * Autogenerated return type of UpdateEnterpriseAdministratorRole
 */
export class UpdateEnterpriseAdministratorRolePayload extends $Base<"UpdateEnterpriseAdministratorRolePayload"> {
  constructor() {
    super("UpdateEnterpriseAdministratorRolePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * A message confirming the result of changing the administrator's role.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
 */
export type UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
policyValue?: EnterpriseAllowPrivateRepositoryForkingPolicyValue | null | undefined,
settingValue: EnterpriseEnabledDisabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
 */
export class UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload extends $Base<"UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated allow private repository forking setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the allow private repository forking setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
 */
export type UpdateEnterpriseDefaultRepositoryPermissionSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
settingValue: EnterpriseDefaultRepositoryPermissionSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
 */
export class UpdateEnterpriseDefaultRepositoryPermissionSettingPayload extends $Base<"UpdateEnterpriseDefaultRepositoryPermissionSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseDefaultRepositoryPermissionSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated base repository permission setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the base repository permission setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
 */
export type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
settingValue: EnterpriseEnabledDisabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
 */
export class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload extends $Base<"UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload"> {
  constructor() {
    super("UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated members can change repository visibility setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the members can change repository visibility setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
 */
export type UpdateEnterpriseMembersCanCreateRepositoriesSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
membersCanCreateInternalRepositories?: boolean | null | undefined,
membersCanCreatePrivateRepositories?: boolean | null | undefined,
membersCanCreatePublicRepositories?: boolean | null | undefined,
membersCanCreateRepositoriesPolicyEnabled?: boolean | null | undefined,
settingValue?: EnterpriseMembersCanCreateRepositoriesSettingValue | null | undefined
}
    


/**
 * Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
 */
export class UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload extends $Base<"UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated members can create repositories setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the members can create repositories setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
 */
export type UpdateEnterpriseMembersCanDeleteIssuesSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
settingValue: EnterpriseEnabledDisabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
 */
export class UpdateEnterpriseMembersCanDeleteIssuesSettingPayload extends $Base<"UpdateEnterpriseMembersCanDeleteIssuesSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseMembersCanDeleteIssuesSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated members can delete issues setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the members can delete issues setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
 */
export type UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
settingValue: EnterpriseEnabledDisabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
 */
export class UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload extends $Base<"UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated members can delete repositories setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the members can delete repositories setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
 */
export type UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
settingValue: EnterpriseEnabledDisabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
 */
export class UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload extends $Base<"UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated members can invite collaborators setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the members can invite collaborators setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
 */
export type UpdateEnterpriseMembersCanMakePurchasesSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
settingValue: EnterpriseMembersCanMakePurchasesSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
 */
export class UpdateEnterpriseMembersCanMakePurchasesSettingPayload extends $Base<"UpdateEnterpriseMembersCanMakePurchasesSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseMembersCanMakePurchasesSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated members can make purchases setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the members can make purchases setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
 */
export type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
settingValue: EnterpriseEnabledDisabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
 */
export class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload extends $Base<"UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated members can update protected branches setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the members can update protected branches setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
 */
export type UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
settingValue: EnterpriseEnabledDisabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
 */
export class UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload extends $Base<"UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated members can view dependency insights setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the members can view dependency insights setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
 */
export type UpdateEnterpriseOrganizationProjectsSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
settingValue: EnterpriseEnabledDisabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
 */
export class UpdateEnterpriseOrganizationProjectsSettingPayload extends $Base<"UpdateEnterpriseOrganizationProjectsSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseOrganizationProjectsSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated organization projects setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the organization projects setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole
 */
export type UpdateEnterpriseOwnerOrganizationRoleInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
organizationId: string,
organizationRole: RoleInOrganization
}
    


/**
 * Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole
 */
export class UpdateEnterpriseOwnerOrganizationRolePayload extends $Base<"UpdateEnterpriseOwnerOrganizationRolePayload"> {
  constructor() {
    super("UpdateEnterpriseOwnerOrganizationRolePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * A message confirming the result of changing the owner's organization role.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseProfile
 */
export type UpdateEnterpriseProfileInput = {
  clientMutationId?: string | null | undefined,
description?: string | null | undefined,
enterpriseId: string,
location?: string | null | undefined,
name?: string | null | undefined,
websiteUrl?: string | null | undefined
}
    


/**
 * Autogenerated return type of UpdateEnterpriseProfile
 */
export class UpdateEnterpriseProfilePayload extends $Base<"UpdateEnterpriseProfilePayload"> {
  constructor() {
    super("UpdateEnterpriseProfilePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated enterprise.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting
 */
export type UpdateEnterpriseRepositoryProjectsSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
settingValue: EnterpriseEnabledDisabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting
 */
export class UpdateEnterpriseRepositoryProjectsSettingPayload extends $Base<"UpdateEnterpriseRepositoryProjectsSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseRepositoryProjectsSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated repository projects setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the repository projects setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting
 */
export type UpdateEnterpriseTeamDiscussionsSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
settingValue: EnterpriseEnabledDisabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting
 */
export class UpdateEnterpriseTeamDiscussionsSettingPayload extends $Base<"UpdateEnterpriseTeamDiscussionsSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseTeamDiscussionsSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated team discussions setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the team discussions setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
 */
export type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput = {
  clientMutationId?: string | null | undefined,
enterpriseId: string,
settingValue: EnterpriseEnabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
 */
export class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload extends $Base<"UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload"> {
  constructor() {
    super("UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The enterprise with the updated two factor authentication required setting.
 */
      enterprise<Sel extends Selection<Enterprise>>(selectorFn: (s: Enterprise) => [...Sel]):$Field<"enterprise", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Enterprise)
      };
      return this.$_select("enterprise", options) as any
    }
  

      
/**
 * A message confirming the result of updating the two factor authentication required setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }
}


/**
 * Autogenerated input type of UpdateEnvironment
 */
export type UpdateEnvironmentInput = {
  clientMutationId?: string | null | undefined,
environmentId: string,
reviewers?: Readonly<Array<string>> | null | undefined,
waitTimer?: number | null | undefined
}
    


/**
 * Autogenerated return type of UpdateEnvironment
 */
export class UpdateEnvironmentPayload extends $Base<"UpdateEnvironmentPayload"> {
  constructor() {
    super("UpdateEnvironmentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated environment.
 */
      environment<Sel extends Selection<Environment>>(selectorFn: (s: Environment) => [...Sel]):$Field<"environment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Environment)
      };
      return this.$_select("environment", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateIpAllowListEnabledSetting
 */
export type UpdateIpAllowListEnabledSettingInput = {
  clientMutationId?: string | null | undefined,
ownerId: string,
settingValue: IpAllowListEnabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateIpAllowListEnabledSetting
 */
export class UpdateIpAllowListEnabledSettingPayload extends $Base<"UpdateIpAllowListEnabledSettingPayload"> {
  constructor() {
    super("UpdateIpAllowListEnabledSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The IP allow list owner on which the setting was updated.
 */
      owner<Sel extends Selection<IpAllowListOwner>>(selectorFn: (s: IpAllowListOwner) => [...Sel]):$Field<"owner", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IpAllowListOwner)
      };
      return this.$_select("owner", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateIpAllowListEntry
 */
export type UpdateIpAllowListEntryInput = {
  allowListValue: string,
clientMutationId?: string | null | undefined,
ipAllowListEntryId: string,
isActive: boolean,
name?: string | null | undefined
}
    


/**
 * Autogenerated return type of UpdateIpAllowListEntry
 */
export class UpdateIpAllowListEntryPayload extends $Base<"UpdateIpAllowListEntryPayload"> {
  constructor() {
    super("UpdateIpAllowListEntryPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The IP allow list entry that was updated.
 */
      ipAllowListEntry<Sel extends Selection<IpAllowListEntry>>(selectorFn: (s: IpAllowListEntry) => [...Sel]):$Field<"ipAllowListEntry", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IpAllowListEntry)
      };
      return this.$_select("ipAllowListEntry", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting
 */
export type UpdateIpAllowListForInstalledAppsEnabledSettingInput = {
  clientMutationId?: string | null | undefined,
ownerId: string,
settingValue: IpAllowListForInstalledAppsEnabledSettingValue
}
    


/**
 * Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting
 */
export class UpdateIpAllowListForInstalledAppsEnabledSettingPayload extends $Base<"UpdateIpAllowListForInstalledAppsEnabledSettingPayload"> {
  constructor() {
    super("UpdateIpAllowListForInstalledAppsEnabledSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The IP allow list owner on which the setting was updated.
 */
      owner<Sel extends Selection<IpAllowListOwner>>(selectorFn: (s: IpAllowListOwner) => [...Sel]):$Field<"owner", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IpAllowListOwner)
      };
      return this.$_select("owner", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateIssueComment
 */
export type UpdateIssueCommentInput = {
  body: string,
clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of UpdateIssueComment
 */
export class UpdateIssueCommentPayload extends $Base<"UpdateIssueCommentPayload"> {
  constructor() {
    super("UpdateIssueCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated comment.
 */
      issueComment<Sel extends Selection<IssueComment>>(selectorFn: (s: IssueComment) => [...Sel]):$Field<"issueComment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new IssueComment)
      };
      return this.$_select("issueComment", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateIssue
 */
export type UpdateIssueInput = {
  assigneeIds?: Readonly<Array<string>> | null | undefined,
body?: string | null | undefined,
clientMutationId?: string | null | undefined,
id: string,
labelIds?: Readonly<Array<string>> | null | undefined,
milestoneId?: string | null | undefined,
projectIds?: Readonly<Array<string>> | null | undefined,
state?: IssueState | null | undefined,
title?: string | null | undefined
}
    


/**
 * Autogenerated return type of UpdateIssue
 */
export class UpdateIssuePayload extends $Base<"UpdateIssuePayload"> {
  constructor() {
    super("UpdateIssuePayload")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The issue.
 */
      issue<Sel extends Selection<Issue>>(selectorFn: (s: Issue) => [...Sel]):$Field<"issue", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Issue)
      };
      return this.$_select("issue", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateNotificationRestrictionSetting
 */
export type UpdateNotificationRestrictionSettingInput = {
  clientMutationId?: string | null | undefined,
ownerId: string,
settingValue: NotificationRestrictionSettingValue
}
    


/**
 * Autogenerated return type of UpdateNotificationRestrictionSetting
 */
export class UpdateNotificationRestrictionSettingPayload extends $Base<"UpdateNotificationRestrictionSettingPayload"> {
  constructor() {
    super("UpdateNotificationRestrictionSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The owner on which the setting was updated.
 */
      owner<Sel extends Selection<VerifiableDomainOwner>>(selectorFn: (s: VerifiableDomainOwner) => [...Sel]):$Field<"owner", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new VerifiableDomainOwner)
      };
      return this.$_select("owner", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
 */
export type UpdateOrganizationAllowPrivateRepositoryForkingSettingInput = {
  clientMutationId?: string | null | undefined,
forkingEnabled: boolean,
organizationId: string
}
    


/**
 * Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting
 */
export class UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload extends $Base<"UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload"> {
  constructor() {
    super("UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * A message confirming the result of updating the allow private repository forking setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }

      
/**
 * The organization with the updated allow private repository forking setting.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting
 */
export type UpdateOrganizationWebCommitSignoffSettingInput = {
  clientMutationId?: string | null | undefined,
organizationId: string,
webCommitSignoffRequired: boolean
}
    


/**
 * Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting
 */
export class UpdateOrganizationWebCommitSignoffSettingPayload extends $Base<"UpdateOrganizationWebCommitSignoffSettingPayload"> {
  constructor() {
    super("UpdateOrganizationWebCommitSignoffSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * A message confirming the result of updating the web commit signoff setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }

      
/**
 * The organization with the updated web commit signoff setting.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateProjectCard
 */
export type UpdateProjectCardInput = {
  clientMutationId?: string | null | undefined,
isArchived?: boolean | null | undefined,
note?: string | null | undefined,
projectCardId: string
}
    


/**
 * Autogenerated return type of UpdateProjectCard
 */
export class UpdateProjectCardPayload extends $Base<"UpdateProjectCardPayload"> {
  constructor() {
    super("UpdateProjectCardPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated ProjectCard.
 */
      projectCard<Sel extends Selection<ProjectCard>>(selectorFn: (s: ProjectCard) => [...Sel]):$Field<"projectCard", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectCard)
      };
      return this.$_select("projectCard", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateProjectColumn
 */
export type UpdateProjectColumnInput = {
  clientMutationId?: string | null | undefined,
name: string,
projectColumnId: string
}
    


/**
 * Autogenerated return type of UpdateProjectColumn
 */
export class UpdateProjectColumnPayload extends $Base<"UpdateProjectColumnPayload"> {
  constructor() {
    super("UpdateProjectColumnPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated project column.
 */
      projectColumn<Sel extends Selection<ProjectColumn>>(selectorFn: (s: ProjectColumn) => [...Sel]):$Field<"projectColumn", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectColumn)
      };
      return this.$_select("projectColumn", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateProjectDraftIssue
 */
export type UpdateProjectDraftIssueInput = {
  assigneeIds?: Readonly<Array<string>> | null | undefined,
body?: string | null | undefined,
clientMutationId?: string | null | undefined,
draftIssueId: string,
title?: string | null | undefined
}
    


/**
 * Autogenerated return type of UpdateProjectDraftIssue
 */
export class UpdateProjectDraftIssuePayload extends $Base<"UpdateProjectDraftIssuePayload"> {
  constructor() {
    super("UpdateProjectDraftIssuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The draft issue updated in the project.
 */
      draftIssue<Sel extends Selection<DraftIssue>>(selectorFn: (s: DraftIssue) => [...Sel]):$Field<"draftIssue", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DraftIssue)
      };
      return this.$_select("draftIssue", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateProject
 */
export type UpdateProjectInput = {
  body?: string | null | undefined,
clientMutationId?: string | null | undefined,
name?: string | null | undefined,
projectId: string,
public?: boolean | null | undefined,
state?: ProjectState | null | undefined
}
    


/**
 * Autogenerated input type of UpdateProjectNext
 */
export type UpdateProjectNextInput = {
  clientMutationId?: string | null | undefined,
closed?: boolean | null | undefined,
description?: string | null | undefined,
projectId?: string | null | undefined,
public?: boolean | null | undefined,
shortDescription?: string | null | undefined,
title?: string | null | undefined
}
    


/**
 * Autogenerated input type of UpdateProjectNextItemField
 */
export type UpdateProjectNextItemFieldInput = {
  clientMutationId?: string | null | undefined,
fieldId?: string | null | undefined,
itemId?: string | null | undefined,
projectId?: string | null | undefined,
value?: string | null | undefined
}
    


/**
 * Autogenerated return type of UpdateProjectNextItemField
 */
export class UpdateProjectNextItemFieldPayload extends $Base<"UpdateProjectNextItemFieldPayload"> {
  constructor() {
    super("UpdateProjectNextItemFieldPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated item.
 */
      projectNextItem<Sel extends Selection<ProjectNextItem>>(selectorFn: (s: ProjectNextItem) => [...Sel]):$Field<"projectNextItem", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNextItem)
      };
      return this.$_select("projectNextItem", options) as any
    }
  
}


/**
 * Autogenerated return type of UpdateProjectNext
 */
export class UpdateProjectNextPayload extends $Base<"UpdateProjectNextPayload"> {
  constructor() {
    super("UpdateProjectNextPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated Project.
 */
      projectNext<Sel extends Selection<ProjectNext>>(selectorFn: (s: ProjectNext) => [...Sel]):$Field<"projectNext", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectNext)
      };
      return this.$_select("projectNext", options) as any
    }
  
}


/**
 * Autogenerated return type of UpdateProject
 */
export class UpdateProjectPayload extends $Base<"UpdateProjectPayload"> {
  constructor() {
    super("UpdateProjectPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated project.
 */
      project<Sel extends Selection<Project>>(selectorFn: (s: Project) => [...Sel]):$Field<"project", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Project)
      };
      return this.$_select("project", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateProjectV2DraftIssue
 */
export type UpdateProjectV2DraftIssueInput = {
  assigneeIds?: Readonly<Array<string>> | null | undefined,
body?: string | null | undefined,
clientMutationId?: string | null | undefined,
draftIssueId: string,
title?: string | null | undefined
}
    


/**
 * Autogenerated return type of UpdateProjectV2DraftIssue
 */
export class UpdateProjectV2DraftIssuePayload extends $Base<"UpdateProjectV2DraftIssuePayload"> {
  constructor() {
    super("UpdateProjectV2DraftIssuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The draft issue updated in the project.
 */
      draftIssue<Sel extends Selection<DraftIssue>>(selectorFn: (s: DraftIssue) => [...Sel]):$Field<"draftIssue", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new DraftIssue)
      };
      return this.$_select("draftIssue", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateProjectV2
 */
export type UpdateProjectV2Input = {
  clientMutationId?: string | null | undefined,
closed?: boolean | null | undefined,
projectId: string,
public?: boolean | null | undefined,
readme?: string | null | undefined,
shortDescription?: string | null | undefined,
title?: string | null | undefined
}
    


/**
 * Autogenerated input type of UpdateProjectV2ItemFieldValue
 */
export type UpdateProjectV2ItemFieldValueInput = {
  clientMutationId?: string | null | undefined,
fieldId: string,
itemId: string,
projectId: string,
value: ProjectV2FieldValue
}
    


/**
 * Autogenerated return type of UpdateProjectV2ItemFieldValue
 */
export class UpdateProjectV2ItemFieldValuePayload extends $Base<"UpdateProjectV2ItemFieldValuePayload"> {
  constructor() {
    super("UpdateProjectV2ItemFieldValuePayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated item.
 */
      projectV2Item<Sel extends Selection<ProjectV2Item>>(selectorFn: (s: ProjectV2Item) => [...Sel]):$Field<"projectV2Item", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2Item)
      };
      return this.$_select("projectV2Item", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateProjectV2ItemPosition
 */
export type UpdateProjectV2ItemPositionInput = {
  afterId?: string | null | undefined,
clientMutationId?: string | null | undefined,
itemId: string,
projectId: string
}
    


/**
 * Autogenerated return type of UpdateProjectV2ItemPosition
 */
export class UpdateProjectV2ItemPositionPayload extends $Base<"UpdateProjectV2ItemPositionPayload"> {
  constructor() {
    super("UpdateProjectV2ItemPositionPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The items in the new order
 */
      items<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2ItemConnection>>(args: Args, selectorFn: (s: ProjectV2ItemConnection) => [...Sel]):$Field<"items", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
items<Sel extends Selection<ProjectV2ItemConnection>>(selectorFn: (s: ProjectV2ItemConnection) => [...Sel]):$Field<"items", GetOutput<Sel> | undefined , GetVariables<Sel>>
items(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2ItemConnection)
      };
      return this.$_select("items", options) as any
    }
  
}


/**
 * Autogenerated return type of UpdateProjectV2
 */
export class UpdateProjectV2Payload extends $Base<"UpdateProjectV2Payload"> {
  constructor() {
    super("UpdateProjectV2Payload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated Project.
 */
      projectV2<Sel extends Selection<ProjectV2>>(selectorFn: (s: ProjectV2) => [...Sel]):$Field<"projectV2", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("projectV2", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdatePullRequestBranch
 */
export type UpdatePullRequestBranchInput = {
  clientMutationId?: string | null | undefined,
expectedHeadOid?: string | null | undefined,
pullRequestId: string
}
    


/**
 * Autogenerated return type of UpdatePullRequestBranch
 */
export class UpdatePullRequestBranchPayload extends $Base<"UpdatePullRequestBranchPayload"> {
  constructor() {
    super("UpdatePullRequestBranchPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated pull request.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdatePullRequest
 */
export type UpdatePullRequestInput = {
  assigneeIds?: Readonly<Array<string>> | null | undefined,
baseRefName?: string | null | undefined,
body?: string | null | undefined,
clientMutationId?: string | null | undefined,
labelIds?: Readonly<Array<string>> | null | undefined,
maintainerCanModify?: boolean | null | undefined,
milestoneId?: string | null | undefined,
projectIds?: Readonly<Array<string>> | null | undefined,
pullRequestId: string,
state?: PullRequestUpdateState | null | undefined,
title?: string | null | undefined
}
    


/**
 * Autogenerated return type of UpdatePullRequest
 */
export class UpdatePullRequestPayload extends $Base<"UpdatePullRequestPayload"> {
  constructor() {
    super("UpdatePullRequestPayload")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated pull request.
 */
      pullRequest<Sel extends Selection<PullRequest>>(selectorFn: (s: PullRequest) => [...Sel]):$Field<"pullRequest", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequest)
      };
      return this.$_select("pullRequest", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdatePullRequestReviewComment
 */
export type UpdatePullRequestReviewCommentInput = {
  body: string,
clientMutationId?: string | null | undefined,
pullRequestReviewCommentId: string
}
    


/**
 * Autogenerated return type of UpdatePullRequestReviewComment
 */
export class UpdatePullRequestReviewCommentPayload extends $Base<"UpdatePullRequestReviewCommentPayload"> {
  constructor() {
    super("UpdatePullRequestReviewCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated comment.
 */
      pullRequestReviewComment<Sel extends Selection<PullRequestReviewComment>>(selectorFn: (s: PullRequestReviewComment) => [...Sel]):$Field<"pullRequestReviewComment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReviewComment)
      };
      return this.$_select("pullRequestReviewComment", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdatePullRequestReview
 */
export type UpdatePullRequestReviewInput = {
  body: string,
clientMutationId?: string | null | undefined,
pullRequestReviewId: string
}
    


/**
 * Autogenerated return type of UpdatePullRequestReview
 */
export class UpdatePullRequestReviewPayload extends $Base<"UpdatePullRequestReviewPayload"> {
  constructor() {
    super("UpdatePullRequestReviewPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated pull request review.
 */
      pullRequestReview<Sel extends Selection<PullRequestReview>>(selectorFn: (s: PullRequestReview) => [...Sel]):$Field<"pullRequestReview", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PullRequestReview)
      };
      return this.$_select("pullRequestReview", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateRef
 */
export type UpdateRefInput = {
  clientMutationId?: string | null | undefined,
force?: boolean | null | undefined,
oid: string,
refId: string
}
    


/**
 * Autogenerated return type of UpdateRef
 */
export class UpdateRefPayload extends $Base<"UpdateRefPayload"> {
  constructor() {
    super("UpdateRefPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated Ref.
 */
      ref<Sel extends Selection<Ref>>(selectorFn: (s: Ref) => [...Sel]):$Field<"ref", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Ref)
      };
      return this.$_select("ref", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateRepository
 */
export type UpdateRepositoryInput = {
  clientMutationId?: string | null | undefined,
description?: string | null | undefined,
hasIssuesEnabled?: boolean | null | undefined,
hasProjectsEnabled?: boolean | null | undefined,
hasWikiEnabled?: boolean | null | undefined,
homepageUrl?: string | null | undefined,
name?: string | null | undefined,
repositoryId: string,
template?: boolean | null | undefined
}
    


/**
 * Autogenerated return type of UpdateRepository
 */
export class UpdateRepositoryPayload extends $Base<"UpdateRepositoryPayload"> {
  constructor() {
    super("UpdateRepositoryPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated repository.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting
 */
export type UpdateRepositoryWebCommitSignoffSettingInput = {
  clientMutationId?: string | null | undefined,
repositoryId: string,
webCommitSignoffRequired: boolean
}
    


/**
 * Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting
 */
export class UpdateRepositoryWebCommitSignoffSettingPayload extends $Base<"UpdateRepositoryWebCommitSignoffSettingPayload"> {
  constructor() {
    super("UpdateRepositoryWebCommitSignoffSettingPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * A message confirming the result of updating the web commit signoff setting.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }

      
/**
 * The updated repository.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateSponsorshipPreferences
 */
export type UpdateSponsorshipPreferencesInput = {
  clientMutationId?: string | null | undefined,
privacyLevel?: SponsorshipPrivacy | null | undefined,
receiveEmails?: boolean | null | undefined,
sponsorId?: string | null | undefined,
sponsorLogin?: string | null | undefined,
sponsorableId?: string | null | undefined,
sponsorableLogin?: string | null | undefined
}
    


/**
 * Autogenerated return type of UpdateSponsorshipPreferences
 */
export class UpdateSponsorshipPreferencesPayload extends $Base<"UpdateSponsorshipPreferencesPayload"> {
  constructor() {
    super("UpdateSponsorshipPreferencesPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The sponsorship that was updated.
 */
      sponsorship<Sel extends Selection<Sponsorship>>(selectorFn: (s: Sponsorship) => [...Sel]):$Field<"sponsorship", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsorship)
      };
      return this.$_select("sponsorship", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateSubscription
 */
export type UpdateSubscriptionInput = {
  clientMutationId?: string | null | undefined,
state: SubscriptionState,
subscribableId: string
}
    


/**
 * Autogenerated return type of UpdateSubscription
 */
export class UpdateSubscriptionPayload extends $Base<"UpdateSubscriptionPayload"> {
  constructor() {
    super("UpdateSubscriptionPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The input subscribable entity.
 */
      subscribable<Sel extends Selection<Subscribable>>(selectorFn: (s: Subscribable) => [...Sel]):$Field<"subscribable", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Subscribable)
      };
      return this.$_select("subscribable", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateTeamDiscussionComment
 */
export type UpdateTeamDiscussionCommentInput = {
  body: string,
bodyVersion?: string | null | undefined,
clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of UpdateTeamDiscussionComment
 */
export class UpdateTeamDiscussionCommentPayload extends $Base<"UpdateTeamDiscussionCommentPayload"> {
  constructor() {
    super("UpdateTeamDiscussionCommentPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated comment.
 */
      teamDiscussionComment<Sel extends Selection<TeamDiscussionComment>>(selectorFn: (s: TeamDiscussionComment) => [...Sel]):$Field<"teamDiscussionComment", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamDiscussionComment)
      };
      return this.$_select("teamDiscussionComment", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateTeamDiscussion
 */
export type UpdateTeamDiscussionInput = {
  body?: string | null | undefined,
bodyVersion?: string | null | undefined,
clientMutationId?: string | null | undefined,
id: string,
pinned?: boolean | null | undefined,
title?: string | null | undefined
}
    


/**
 * Autogenerated return type of UpdateTeamDiscussion
 */
export class UpdateTeamDiscussionPayload extends $Base<"UpdateTeamDiscussionPayload"> {
  constructor() {
    super("UpdateTeamDiscussionPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The updated discussion.
 */
      teamDiscussion<Sel extends Selection<TeamDiscussion>>(selectorFn: (s: TeamDiscussion) => [...Sel]):$Field<"teamDiscussion", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new TeamDiscussion)
      };
      return this.$_select("teamDiscussion", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateTeamsRepository
 */
export type UpdateTeamsRepositoryInput = {
  clientMutationId?: string | null | undefined,
permission: RepositoryPermission,
repositoryId: string,
teamIds: Readonly<Array<string>>
}
    


/**
 * Autogenerated return type of UpdateTeamsRepository
 */
export class UpdateTeamsRepositoryPayload extends $Base<"UpdateTeamsRepositoryPayload"> {
  constructor() {
    super("UpdateTeamsRepositoryPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The repository that was updated.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * The teams granted permission on the repository.
 */
      teams<Sel extends Selection<Team>>(selectorFn: (s: Team) => [...Sel]):$Field<"teams", Array<GetOutput<Sel>> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Team)
      };
      return this.$_select("teams", options) as any
    }
  
}


/**
 * Autogenerated input type of UpdateTopics
 */
export type UpdateTopicsInput = {
  clientMutationId?: string | null | undefined,
repositoryId: string,
topicNames: Readonly<Array<string>>
}
    


/**
 * Autogenerated return type of UpdateTopics
 */
export class UpdateTopicsPayload extends $Base<"UpdateTopicsPayload"> {
  constructor() {
    super("UpdateTopicsPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * Names of the provided topics that are not valid.
 */
      get invalidTopicNames(): $Field<"invalidTopicNames", Readonly<Array<string>> | null | undefined>  {
       return this.$_select("invalidTopicNames") as any
      }

      
/**
 * The updated repository.
 */
      repository<Sel extends Selection<Repository>>(selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  
}


/**
 * A user is an individual's account on GitHub that owns repositories and can make new content.
 */
export class User extends $Base<"User"> {
  constructor() {
    super("User")
  }

  
      
/**
 * Determine if this repository owner has any items that can be pinned to their profile.
 */
      anyPinnableItems<Args extends VariabledInput<{
        type?: PinnableItemType | null | undefined,
      }>>(args: Args):$Field<"anyPinnableItems", boolean , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              type: "PinnableItemType"
            },
        args,

        
      };
      return this.$_select("anyPinnableItems", options) as any
    }
  

      
/**
 * A URL pointing to the user's public avatar.
 */
      avatarUrl<Args extends VariabledInput<{
        size?: number | null | undefined,
      }>>(args: Args):$Field<"avatarUrl", string , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              size: "Int"
            },
        args,

        
      };
      return this.$_select("avatarUrl", options) as any
    }
  

      
/**
 * The user's public profile bio.
 */
      get bio(): $Field<"bio", string | null | undefined>  {
       return this.$_select("bio") as any
      }

      
/**
 * The user's public profile bio as HTML.
 */
      get bioHTML(): $Field<"bioHTML", string>  {
       return this.$_select("bioHTML") as any
      }

      
/**
 * Could this user receive email notifications, if the organization had notification restrictions enabled?
 */
      canReceiveOrganizationEmailsWhenNotificationsRestricted<Args extends VariabledInput<{
        login: string,
      }>>(args: Args):$Field<"canReceiveOrganizationEmailsWhenNotificationsRestricted", boolean , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              login: "String!"
            },
        args,

        
      };
      return this.$_select("canReceiveOrganizationEmailsWhenNotificationsRestricted", options) as any
    }
  

      
/**
 * A list of commit comments made by this user.
 */
      commitComments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<CommitCommentConnection>>(args: Args, selectorFn: (s: CommitCommentConnection) => [...Sel]):$Field<"commitComments", GetOutput<Sel> , GetVariables<Sel, Args>>
commitComments<Sel extends Selection<CommitCommentConnection>>(selectorFn: (s: CommitCommentConnection) => [...Sel]):$Field<"commitComments", GetOutput<Sel> , GetVariables<Sel>>
commitComments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new CommitCommentConnection)
      };
      return this.$_select("commitComments", options) as any
    }
  

      
/**
 * The user's public profile company.
 */
      get company(): $Field<"company", string | null | undefined>  {
       return this.$_select("company") as any
      }

      
/**
 * The user's public profile company as HTML.
 */
      get companyHTML(): $Field<"companyHTML", string>  {
       return this.$_select("companyHTML") as any
      }

      
/**
 * The collection of contributions this user has made to different repositories.
 */
      contributionsCollection<Args extends VariabledInput<{
        organizationID?: string | null | undefined
from?: string | null | undefined
to?: string | null | undefined,
      }>,Sel extends Selection<ContributionsCollection>>(args: Args, selectorFn: (s: ContributionsCollection) => [...Sel]):$Field<"contributionsCollection", GetOutput<Sel> , GetVariables<Sel, Args>>
contributionsCollection<Sel extends Selection<ContributionsCollection>>(selectorFn: (s: ContributionsCollection) => [...Sel]):$Field<"contributionsCollection", GetOutput<Sel> , GetVariables<Sel>>
contributionsCollection(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              organizationID: "ID",
from: "DateTime",
to: "DateTime"
            },
        args,

        selection: selectorFn(new ContributionsCollection)
      };
      return this.$_select("contributionsCollection", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The user's publicly visible profile email.
 */
      get email(): $Field<"email", string>  {
       return this.$_select("email") as any
      }

      
/**
 * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
 */
      get estimatedNextSponsorsPayoutInCents(): $Field<"estimatedNextSponsorsPayoutInCents", number>  {
       return this.$_select("estimatedNextSponsorsPayoutInCents") as any
      }

      
/**
 * A list of users the given user is followed by.
 */
      followers<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<FollowerConnection>>(args: Args, selectorFn: (s: FollowerConnection) => [...Sel]):$Field<"followers", GetOutput<Sel> , GetVariables<Sel, Args>>
followers<Sel extends Selection<FollowerConnection>>(selectorFn: (s: FollowerConnection) => [...Sel]):$Field<"followers", GetOutput<Sel> , GetVariables<Sel>>
followers(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new FollowerConnection)
      };
      return this.$_select("followers", options) as any
    }
  

      
/**
 * A list of users the given user is following.
 */
      following<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<FollowingConnection>>(args: Args, selectorFn: (s: FollowingConnection) => [...Sel]):$Field<"following", GetOutput<Sel> , GetVariables<Sel, Args>>
following<Sel extends Selection<FollowingConnection>>(selectorFn: (s: FollowingConnection) => [...Sel]):$Field<"following", GetOutput<Sel> , GetVariables<Sel>>
following(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new FollowingConnection)
      };
      return this.$_select("following", options) as any
    }
  

      
/**
 * Find gist by repo name.
 */
      gist<Args extends VariabledInput<{
        name: string,
      }>,Sel extends Selection<Gist>>(args: Args, selectorFn: (s: Gist) => [...Sel]):$Field<"gist", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              name: "String!"
            },
        args,

        selection: selectorFn(new Gist)
      };
      return this.$_select("gist", options) as any
    }
  

      
/**
 * A list of gist comments made by this user.
 */
      gistComments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<GistCommentConnection>>(args: Args, selectorFn: (s: GistCommentConnection) => [...Sel]):$Field<"gistComments", GetOutput<Sel> , GetVariables<Sel, Args>>
gistComments<Sel extends Selection<GistCommentConnection>>(selectorFn: (s: GistCommentConnection) => [...Sel]):$Field<"gistComments", GetOutput<Sel> , GetVariables<Sel>>
gistComments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new GistCommentConnection)
      };
      return this.$_select("gistComments", options) as any
    }
  

      
/**
 * A list of the Gists the user has created.
 */
      gists<Args extends VariabledInput<{
        privacy?: GistPrivacy | null | undefined
orderBy?: GistOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<GistConnection>>(args: Args, selectorFn: (s: GistConnection) => [...Sel]):$Field<"gists", GetOutput<Sel> , GetVariables<Sel, Args>>
gists<Sel extends Selection<GistConnection>>(selectorFn: (s: GistConnection) => [...Sel]):$Field<"gists", GetOutput<Sel> , GetVariables<Sel>>
gists(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              privacy: "GistPrivacy",
orderBy: "GistOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new GistConnection)
      };
      return this.$_select("gists", options) as any
    }
  

      
/**
 * True if this user/organization has a GitHub Sponsors listing.
 */
      get hasSponsorsListing(): $Field<"hasSponsorsListing", boolean>  {
       return this.$_select("hasSponsorsListing") as any
      }

      
/**
 * The hovercard information for this user in a given context
 */
      hovercard<Args extends VariabledInput<{
        primarySubjectId?: string | null | undefined,
      }>,Sel extends Selection<Hovercard>>(args: Args, selectorFn: (s: Hovercard) => [...Sel]):$Field<"hovercard", GetOutput<Sel> , GetVariables<Sel, Args>>
hovercard<Sel extends Selection<Hovercard>>(selectorFn: (s: Hovercard) => [...Sel]):$Field<"hovercard", GetOutput<Sel> , GetVariables<Sel>>
hovercard(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              primarySubjectId: "ID"
            },
        args,

        selection: selectorFn(new Hovercard)
      };
      return this.$_select("hovercard", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The interaction ability settings for this user.
 */
      interactionAbility<Sel extends Selection<RepositoryInteractionAbility>>(selectorFn: (s: RepositoryInteractionAbility) => [...Sel]):$Field<"interactionAbility", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new RepositoryInteractionAbility)
      };
      return this.$_select("interactionAbility", options) as any
    }
  

      
/**
 * Whether or not this user is a participant in the GitHub Security Bug Bounty.
 */
      get isBountyHunter(): $Field<"isBountyHunter", boolean>  {
       return this.$_select("isBountyHunter") as any
      }

      
/**
 * Whether or not this user is a participant in the GitHub Campus Experts Program.
 */
      get isCampusExpert(): $Field<"isCampusExpert", boolean>  {
       return this.$_select("isCampusExpert") as any
      }

      
/**
 * Whether or not this user is a GitHub Developer Program member.
 */
      get isDeveloperProgramMember(): $Field<"isDeveloperProgramMember", boolean>  {
       return this.$_select("isDeveloperProgramMember") as any
      }

      
/**
 * Whether or not this user is a GitHub employee.
 */
      get isEmployee(): $Field<"isEmployee", boolean>  {
       return this.$_select("isEmployee") as any
      }

      
/**
 * Whether or not this user is following the viewer. Inverse of viewer_is_following
 */
      get isFollowingViewer(): $Field<"isFollowingViewer", boolean>  {
       return this.$_select("isFollowingViewer") as any
      }

      
/**
 * Whether or not this user is a member of the GitHub Stars Program.
 */
      get isGitHubStar(): $Field<"isGitHubStar", boolean>  {
       return this.$_select("isGitHubStar") as any
      }

      
/**
 * Whether or not the user has marked themselves as for hire.
 */
      get isHireable(): $Field<"isHireable", boolean>  {
       return this.$_select("isHireable") as any
      }

      
/**
 * Whether or not this user is a site administrator.
 */
      get isSiteAdmin(): $Field<"isSiteAdmin", boolean>  {
       return this.$_select("isSiteAdmin") as any
      }

      
/**
 * Check if the given account is sponsoring this user/organization.
 */
      isSponsoredBy<Args extends VariabledInput<{
        accountLogin: string,
      }>>(args: Args):$Field<"isSponsoredBy", boolean , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              accountLogin: "String!"
            },
        args,

        
      };
      return this.$_select("isSponsoredBy", options) as any
    }
  

      
/**
 * True if the viewer is sponsored by this user/organization.
 */
      get isSponsoringViewer(): $Field<"isSponsoringViewer", boolean>  {
       return this.$_select("isSponsoringViewer") as any
      }

      
/**
 * Whether or not this user is the viewing user.
 */
      get isViewer(): $Field<"isViewer", boolean>  {
       return this.$_select("isViewer") as any
      }

      
/**
 * A list of issue comments made by this user.
 */
      issueComments<Args extends VariabledInput<{
        orderBy?: IssueCommentOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<IssueCommentConnection>>(args: Args, selectorFn: (s: IssueCommentConnection) => [...Sel]):$Field<"issueComments", GetOutput<Sel> , GetVariables<Sel, Args>>
issueComments<Sel extends Selection<IssueCommentConnection>>(selectorFn: (s: IssueCommentConnection) => [...Sel]):$Field<"issueComments", GetOutput<Sel> , GetVariables<Sel>>
issueComments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "IssueCommentOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new IssueCommentConnection)
      };
      return this.$_select("issueComments", options) as any
    }
  

      
/**
 * A list of issues associated with this user.
 */
      issues<Args extends VariabledInput<{
        orderBy?: IssueOrder | null | undefined
labels?: Readonly<Array<string>> | null | undefined
states?: Readonly<Array<IssueState>> | null | undefined
filterBy?: IssueFilters | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<IssueConnection>>(args: Args, selectorFn: (s: IssueConnection) => [...Sel]):$Field<"issues", GetOutput<Sel> , GetVariables<Sel, Args>>
issues<Sel extends Selection<IssueConnection>>(selectorFn: (s: IssueConnection) => [...Sel]):$Field<"issues", GetOutput<Sel> , GetVariables<Sel>>
issues(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "IssueOrder",
labels: "[String!]",
states: "[IssueState!]",
filterBy: "IssueFilters",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new IssueConnection)
      };
      return this.$_select("issues", options) as any
    }
  

      
/**
 * Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.
 */
      itemShowcase<Sel extends Selection<ProfileItemShowcase>>(selectorFn: (s: ProfileItemShowcase) => [...Sel]):$Field<"itemShowcase", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new ProfileItemShowcase)
      };
      return this.$_select("itemShowcase", options) as any
    }
  

      
/**
 * The user's public profile location.
 */
      get location(): $Field<"location", string | null | undefined>  {
       return this.$_select("location") as any
      }

      
/**
 * The username used to login.
 */
      get login(): $Field<"login", string>  {
       return this.$_select("login") as any
      }

      
/**
 * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
 */
      get monthlyEstimatedSponsorsIncomeInCents(): $Field<"monthlyEstimatedSponsorsIncomeInCents", number>  {
       return this.$_select("monthlyEstimatedSponsorsIncomeInCents") as any
      }

      
/**
 * The user's public profile name.
 */
      get name(): $Field<"name", string | null | undefined>  {
       return this.$_select("name") as any
      }

      
/**
 * Find an organization by its login that the user belongs to.
 */
      organization<Args extends VariabledInput<{
        login: string,
      }>,Sel extends Selection<Organization>>(args: Args, selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              login: "String!"
            },
        args,

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * Verified email addresses that match verified domains for a specified organization the user is a member of.
 */
      organizationVerifiedDomainEmails<Args extends VariabledInput<{
        login: string,
      }>>(args: Args):$Field<"organizationVerifiedDomainEmails", Readonly<Array<string>> , GetVariables<[], Args>> {
      
      const options = {
        argTypes: {
              login: "String!"
            },
        args,

        
      };
      return this.$_select("organizationVerifiedDomainEmails", options) as any
    }
  

      
/**
 * A list of organizations the user belongs to.
 */
      organizations<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<OrganizationConnection>>(args: Args, selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"organizations", GetOutput<Sel> , GetVariables<Sel, Args>>
organizations<Sel extends Selection<OrganizationConnection>>(selectorFn: (s: OrganizationConnection) => [...Sel]):$Field<"organizations", GetOutput<Sel> , GetVariables<Sel>>
organizations(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new OrganizationConnection)
      };
      return this.$_select("organizations", options) as any
    }
  

      
/**
 * A list of packages under the owner.
 */
      packages<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
names?: Readonly<Array<string | null | undefined>> | null | undefined
repositoryId?: string | null | undefined
packageType?: PackageType | null | undefined
orderBy?: PackageOrder | null | undefined,
      }>,Sel extends Selection<PackageConnection>>(args: Args, selectorFn: (s: PackageConnection) => [...Sel]):$Field<"packages", GetOutput<Sel> , GetVariables<Sel, Args>>
packages<Sel extends Selection<PackageConnection>>(selectorFn: (s: PackageConnection) => [...Sel]):$Field<"packages", GetOutput<Sel> , GetVariables<Sel>>
packages(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
names: "[String]",
repositoryId: "ID",
packageType: "PackageType",
orderBy: "PackageOrder"
            },
        args,

        selection: selectorFn(new PackageConnection)
      };
      return this.$_select("packages", options) as any
    }
  

      
/**
 * A list of repositories and gists this profile owner can pin to their profile.
 */
      pinnableItems<Args extends VariabledInput<{
        types?: Readonly<Array<PinnableItemType>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PinnableItemConnection>>(args: Args, selectorFn: (s: PinnableItemConnection) => [...Sel]):$Field<"pinnableItems", GetOutput<Sel> , GetVariables<Sel, Args>>
pinnableItems<Sel extends Selection<PinnableItemConnection>>(selectorFn: (s: PinnableItemConnection) => [...Sel]):$Field<"pinnableItems", GetOutput<Sel> , GetVariables<Sel>>
pinnableItems(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              types: "[PinnableItemType!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PinnableItemConnection)
      };
      return this.$_select("pinnableItems", options) as any
    }
  

      
/**
 * A list of repositories and gists this profile owner has pinned to their profile
 */
      pinnedItems<Args extends VariabledInput<{
        types?: Readonly<Array<PinnableItemType>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PinnableItemConnection>>(args: Args, selectorFn: (s: PinnableItemConnection) => [...Sel]):$Field<"pinnedItems", GetOutput<Sel> , GetVariables<Sel, Args>>
pinnedItems<Sel extends Selection<PinnableItemConnection>>(selectorFn: (s: PinnableItemConnection) => [...Sel]):$Field<"pinnedItems", GetOutput<Sel> , GetVariables<Sel>>
pinnedItems(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              types: "[PinnableItemType!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PinnableItemConnection)
      };
      return this.$_select("pinnedItems", options) as any
    }
  

      
/**
 * Returns how many more items this profile owner can pin to their profile.
 */
      get pinnedItemsRemaining(): $Field<"pinnedItemsRemaining", number>  {
       return this.$_select("pinnedItemsRemaining") as any
      }

      
/**
 * Find project by number.
 */
      project<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<Project>>(args: Args, selectorFn: (s: Project) => [...Sel]):$Field<"project", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new Project)
      };
      return this.$_select("project", options) as any
    }
  

      
/**
 * Find a project by project (beta) number.
 */
      projectNext<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<ProjectNext>>(args: Args, selectorFn: (s: ProjectNext) => [...Sel]):$Field<"projectNext", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new ProjectNext)
      };
      return this.$_select("projectNext", options) as any
    }
  

      
/**
 * Find a project by number.
 */
      projectV2<Args extends VariabledInput<{
        number: number,
      }>,Sel extends Selection<ProjectV2>>(args: Args, selectorFn: (s: ProjectV2) => [...Sel]):$Field<"projectV2", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              number: "Int!"
            },
        args,

        selection: selectorFn(new ProjectV2)
      };
      return this.$_select("projectV2", options) as any
    }
  

      
/**
 * A list of projects under the owner.
 */
      projects<Args extends VariabledInput<{
        orderBy?: ProjectOrder | null | undefined
search?: string | null | undefined
states?: Readonly<Array<ProjectState>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectConnection>>(args: Args, selectorFn: (s: ProjectConnection) => [...Sel]):$Field<"projects", GetOutput<Sel> , GetVariables<Sel, Args>>
projects<Sel extends Selection<ProjectConnection>>(selectorFn: (s: ProjectConnection) => [...Sel]):$Field<"projects", GetOutput<Sel> , GetVariables<Sel>>
projects(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              orderBy: "ProjectOrder",
search: "String",
states: "[ProjectState!]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectConnection)
      };
      return this.$_select("projects", options) as any
    }
  

      
/**
 * A list of projects (beta) under the owner.
 */
      projectsNext<Args extends VariabledInput<{
        query?: string | null | undefined
sortBy?: ProjectNextOrderField | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectNextConnection>>(args: Args, selectorFn: (s: ProjectNextConnection) => [...Sel]):$Field<"projectsNext", GetOutput<Sel> , GetVariables<Sel, Args>>
projectsNext<Sel extends Selection<ProjectNextConnection>>(selectorFn: (s: ProjectNextConnection) => [...Sel]):$Field<"projectsNext", GetOutput<Sel> , GetVariables<Sel>>
projectsNext(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
sortBy: "ProjectNextOrderField",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectNextConnection)
      };
      return this.$_select("projectsNext", options) as any
    }
  

      
/**
 * The HTTP path listing user's projects
 */
      get projectsResourcePath(): $Field<"projectsResourcePath", string>  {
       return this.$_select("projectsResourcePath") as any
      }

      
/**
 * The HTTP URL listing user's projects
 */
      get projectsUrl(): $Field<"projectsUrl", string>  {
       return this.$_select("projectsUrl") as any
      }

      
/**
 * A list of projects under the owner.
 */
      projectsV2<Args extends VariabledInput<{
        query?: string | null | undefined
orderBy?: ProjectV2Order | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2Connection>>(args: Args, selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel, Args>>
projectsV2<Sel extends Selection<ProjectV2Connection>>(selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"projectsV2", GetOutput<Sel> , GetVariables<Sel>>
projectsV2(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              query: "String",
orderBy: "ProjectV2Order",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2Connection)
      };
      return this.$_select("projectsV2", options) as any
    }
  

      
/**
 * A list of public keys associated with this user.
 */
      publicKeys<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PublicKeyConnection>>(args: Args, selectorFn: (s: PublicKeyConnection) => [...Sel]):$Field<"publicKeys", GetOutput<Sel> , GetVariables<Sel, Args>>
publicKeys<Sel extends Selection<PublicKeyConnection>>(selectorFn: (s: PublicKeyConnection) => [...Sel]):$Field<"publicKeys", GetOutput<Sel> , GetVariables<Sel>>
publicKeys(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PublicKeyConnection)
      };
      return this.$_select("publicKeys", options) as any
    }
  

      
/**
 * A list of pull requests associated with this user.
 */
      pullRequests<Args extends VariabledInput<{
        states?: Readonly<Array<PullRequestState>> | null | undefined
labels?: Readonly<Array<string>> | null | undefined
headRefName?: string | null | undefined
baseRefName?: string | null | undefined
orderBy?: IssueOrder | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<PullRequestConnection>>(args: Args, selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"pullRequests", GetOutput<Sel> , GetVariables<Sel, Args>>
pullRequests<Sel extends Selection<PullRequestConnection>>(selectorFn: (s: PullRequestConnection) => [...Sel]):$Field<"pullRequests", GetOutput<Sel> , GetVariables<Sel>>
pullRequests(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              states: "[PullRequestState!]",
labels: "[String!]",
headRefName: "String",
baseRefName: "String",
orderBy: "IssueOrder",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new PullRequestConnection)
      };
      return this.$_select("pullRequests", options) as any
    }
  

      
/**
 * Recent projects that this user has modified in the context of the owner.
 */
      recentProjects<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<ProjectV2Connection>>(args: Args, selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"recentProjects", GetOutput<Sel> , GetVariables<Sel, Args>>
recentProjects<Sel extends Selection<ProjectV2Connection>>(selectorFn: (s: ProjectV2Connection) => [...Sel]):$Field<"recentProjects", GetOutput<Sel> , GetVariables<Sel>>
recentProjects(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new ProjectV2Connection)
      };
      return this.$_select("recentProjects", options) as any
    }
  

      
/**
 * A list of repositories that the user owns.
 */
      repositories<Args extends VariabledInput<{
        privacy?: RepositoryPrivacy | null | undefined
orderBy?: RepositoryOrder | null | undefined
affiliations?: Readonly<Array<RepositoryAffiliation | null | undefined>> | null | undefined
ownerAffiliations?: Readonly<Array<RepositoryAffiliation | null | undefined>> | null | undefined
isLocked?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
isFork?: boolean | null | undefined,
      }>,Sel extends Selection<RepositoryConnection>>(args: Args, selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel, Args>>
repositories<Sel extends Selection<RepositoryConnection>>(selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"repositories", GetOutput<Sel> , GetVariables<Sel>>
repositories(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              privacy: "RepositoryPrivacy",
orderBy: "RepositoryOrder",
affiliations: "[RepositoryAffiliation]",
ownerAffiliations: "[RepositoryAffiliation]",
isLocked: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int",
isFork: "Boolean"
            },
        args,

        selection: selectorFn(new RepositoryConnection)
      };
      return this.$_select("repositories", options) as any
    }
  

      
/**
 * A list of repositories that the user recently contributed to.
 */
      repositoriesContributedTo<Args extends VariabledInput<{
        privacy?: RepositoryPrivacy | null | undefined
orderBy?: RepositoryOrder | null | undefined
isLocked?: boolean | null | undefined
includeUserRepositories?: boolean | null | undefined
contributionTypes?: Readonly<Array<RepositoryContributionType | null | undefined>> | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<RepositoryConnection>>(args: Args, selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"repositoriesContributedTo", GetOutput<Sel> , GetVariables<Sel, Args>>
repositoriesContributedTo<Sel extends Selection<RepositoryConnection>>(selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"repositoriesContributedTo", GetOutput<Sel> , GetVariables<Sel>>
repositoriesContributedTo(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              privacy: "RepositoryPrivacy",
orderBy: "RepositoryOrder",
isLocked: "Boolean",
includeUserRepositories: "Boolean",
contributionTypes: "[RepositoryContributionType]",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new RepositoryConnection)
      };
      return this.$_select("repositoriesContributedTo", options) as any
    }
  

      
/**
 * Find Repository.
 */
      repository<Args extends VariabledInput<{
        name: string
followRenames?: boolean | null | undefined,
      }>,Sel extends Selection<Repository>>(args: Args, selectorFn: (s: Repository) => [...Sel]):$Field<"repository", GetOutput<Sel> | undefined , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              name: "String!",
followRenames: "Boolean"
            },
        args,

        selection: selectorFn(new Repository)
      };
      return this.$_select("repository", options) as any
    }
  

      
/**
 * Discussion comments this user has authored.
 */
      repositoryDiscussionComments<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
repositoryId?: string | null | undefined
onlyAnswers?: boolean | null | undefined,
      }>,Sel extends Selection<DiscussionCommentConnection>>(args: Args, selectorFn: (s: DiscussionCommentConnection) => [...Sel]):$Field<"repositoryDiscussionComments", GetOutput<Sel> , GetVariables<Sel, Args>>
repositoryDiscussionComments<Sel extends Selection<DiscussionCommentConnection>>(selectorFn: (s: DiscussionCommentConnection) => [...Sel]):$Field<"repositoryDiscussionComments", GetOutput<Sel> , GetVariables<Sel>>
repositoryDiscussionComments(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
repositoryId: "ID",
onlyAnswers: "Boolean"
            },
        args,

        selection: selectorFn(new DiscussionCommentConnection)
      };
      return this.$_select("repositoryDiscussionComments", options) as any
    }
  

      
/**
 * Discussions this user has started.
 */
      repositoryDiscussions<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: DiscussionOrder | null | undefined
repositoryId?: string | null | undefined
answered?: boolean | null | undefined,
      }>,Sel extends Selection<DiscussionConnection>>(args: Args, selectorFn: (s: DiscussionConnection) => [...Sel]):$Field<"repositoryDiscussions", GetOutput<Sel> , GetVariables<Sel, Args>>
repositoryDiscussions<Sel extends Selection<DiscussionConnection>>(selectorFn: (s: DiscussionConnection) => [...Sel]):$Field<"repositoryDiscussions", GetOutput<Sel> , GetVariables<Sel>>
repositoryDiscussions(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "DiscussionOrder",
repositoryId: "ID",
answered: "Boolean"
            },
        args,

        selection: selectorFn(new DiscussionConnection)
      };
      return this.$_select("repositoryDiscussions", options) as any
    }
  

      
/**
 * The HTTP path for this user
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * Replies this user has saved
 */
      savedReplies<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: SavedReplyOrder | null | undefined,
      }>,Sel extends Selection<SavedReplyConnection>>(args: Args, selectorFn: (s: SavedReplyConnection) => [...Sel]):$Field<"savedReplies", GetOutput<Sel> | undefined , GetVariables<Sel, Args>>
savedReplies<Sel extends Selection<SavedReplyConnection>>(selectorFn: (s: SavedReplyConnection) => [...Sel]):$Field<"savedReplies", GetOutput<Sel> | undefined , GetVariables<Sel>>
savedReplies(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "SavedReplyOrder"
            },
        args,

        selection: selectorFn(new SavedReplyConnection)
      };
      return this.$_select("savedReplies", options) as any
    }
  

      
/**
 * List of users and organizations this entity is sponsoring.
 */
      sponsoring<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: SponsorOrder | null | undefined,
      }>,Sel extends Selection<SponsorConnection>>(args: Args, selectorFn: (s: SponsorConnection) => [...Sel]):$Field<"sponsoring", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsoring<Sel extends Selection<SponsorConnection>>(selectorFn: (s: SponsorConnection) => [...Sel]):$Field<"sponsoring", GetOutput<Sel> , GetVariables<Sel>>
sponsoring(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "SponsorOrder"
            },
        args,

        selection: selectorFn(new SponsorConnection)
      };
      return this.$_select("sponsoring", options) as any
    }
  

      
/**
 * List of sponsors for this user or organization.
 */
      sponsors<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
tierId?: string | null | undefined
orderBy?: SponsorOrder | null | undefined,
      }>,Sel extends Selection<SponsorConnection>>(args: Args, selectorFn: (s: SponsorConnection) => [...Sel]):$Field<"sponsors", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsors<Sel extends Selection<SponsorConnection>>(selectorFn: (s: SponsorConnection) => [...Sel]):$Field<"sponsors", GetOutput<Sel> , GetVariables<Sel>>
sponsors(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
tierId: "ID",
orderBy: "SponsorOrder"
            },
        args,

        selection: selectorFn(new SponsorConnection)
      };
      return this.$_select("sponsors", options) as any
    }
  

      
/**
 * Events involving this sponsorable, such as new sponsorships.
 */
      sponsorsActivities<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
period?: SponsorsActivityPeriod | null | undefined
orderBy?: SponsorsActivityOrder | null | undefined
actions?: Readonly<Array<SponsorsActivityAction>> | null | undefined,
      }>,Sel extends Selection<SponsorsActivityConnection>>(args: Args, selectorFn: (s: SponsorsActivityConnection) => [...Sel]):$Field<"sponsorsActivities", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsorsActivities<Sel extends Selection<SponsorsActivityConnection>>(selectorFn: (s: SponsorsActivityConnection) => [...Sel]):$Field<"sponsorsActivities", GetOutput<Sel> , GetVariables<Sel>>
sponsorsActivities(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
period: "SponsorsActivityPeriod",
orderBy: "SponsorsActivityOrder",
actions: "[SponsorsActivityAction!]"
            },
        args,

        selection: selectorFn(new SponsorsActivityConnection)
      };
      return this.$_select("sponsorsActivities", options) as any
    }
  

      
/**
 * The GitHub Sponsors listing for this user or organization.
 */
      sponsorsListing<Sel extends Selection<SponsorsListing>>(selectorFn: (s: SponsorsListing) => [...Sel]):$Field<"sponsorsListing", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new SponsorsListing)
      };
      return this.$_select("sponsorsListing", options) as any
    }
  

      
/**
 * The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active.
 */
      sponsorshipForViewerAsSponsor<Sel extends Selection<Sponsorship>>(selectorFn: (s: Sponsorship) => [...Sel]):$Field<"sponsorshipForViewerAsSponsor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsorship)
      };
      return this.$_select("sponsorshipForViewerAsSponsor", options) as any
    }
  

      
/**
 * The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active.
 */
      sponsorshipForViewerAsSponsorable<Sel extends Selection<Sponsorship>>(selectorFn: (s: Sponsorship) => [...Sel]):$Field<"sponsorshipForViewerAsSponsorable", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Sponsorship)
      };
      return this.$_select("sponsorshipForViewerAsSponsorable", options) as any
    }
  

      
/**
 * List of sponsorship updates sent from this sponsorable to sponsors.
 */
      sponsorshipNewsletters<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: SponsorshipNewsletterOrder | null | undefined,
      }>,Sel extends Selection<SponsorshipNewsletterConnection>>(args: Args, selectorFn: (s: SponsorshipNewsletterConnection) => [...Sel]):$Field<"sponsorshipNewsletters", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsorshipNewsletters<Sel extends Selection<SponsorshipNewsletterConnection>>(selectorFn: (s: SponsorshipNewsletterConnection) => [...Sel]):$Field<"sponsorshipNewsletters", GetOutput<Sel> , GetVariables<Sel>>
sponsorshipNewsletters(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "SponsorshipNewsletterOrder"
            },
        args,

        selection: selectorFn(new SponsorshipNewsletterConnection)
      };
      return this.$_select("sponsorshipNewsletters", options) as any
    }
  

      
/**
 * This object's sponsorships as the maintainer.
 */
      sponsorshipsAsMaintainer<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
includePrivate?: boolean | null | undefined
orderBy?: SponsorshipOrder | null | undefined,
      }>,Sel extends Selection<SponsorshipConnection>>(args: Args, selectorFn: (s: SponsorshipConnection) => [...Sel]):$Field<"sponsorshipsAsMaintainer", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsorshipsAsMaintainer<Sel extends Selection<SponsorshipConnection>>(selectorFn: (s: SponsorshipConnection) => [...Sel]):$Field<"sponsorshipsAsMaintainer", GetOutput<Sel> , GetVariables<Sel>>
sponsorshipsAsMaintainer(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
includePrivate: "Boolean",
orderBy: "SponsorshipOrder"
            },
        args,

        selection: selectorFn(new SponsorshipConnection)
      };
      return this.$_select("sponsorshipsAsMaintainer", options) as any
    }
  

      
/**
 * This object's sponsorships as the sponsor.
 */
      sponsorshipsAsSponsor<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: SponsorshipOrder | null | undefined,
      }>,Sel extends Selection<SponsorshipConnection>>(args: Args, selectorFn: (s: SponsorshipConnection) => [...Sel]):$Field<"sponsorshipsAsSponsor", GetOutput<Sel> , GetVariables<Sel, Args>>
sponsorshipsAsSponsor<Sel extends Selection<SponsorshipConnection>>(selectorFn: (s: SponsorshipConnection) => [...Sel]):$Field<"sponsorshipsAsSponsor", GetOutput<Sel> , GetVariables<Sel>>
sponsorshipsAsSponsor(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "SponsorshipOrder"
            },
        args,

        selection: selectorFn(new SponsorshipConnection)
      };
      return this.$_select("sponsorshipsAsSponsor", options) as any
    }
  

      
/**
 * Repositories the user has starred.
 */
      starredRepositories<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
ownedByViewer?: boolean | null | undefined
orderBy?: StarOrder | null | undefined,
      }>,Sel extends Selection<StarredRepositoryConnection>>(args: Args, selectorFn: (s: StarredRepositoryConnection) => [...Sel]):$Field<"starredRepositories", GetOutput<Sel> , GetVariables<Sel, Args>>
starredRepositories<Sel extends Selection<StarredRepositoryConnection>>(selectorFn: (s: StarredRepositoryConnection) => [...Sel]):$Field<"starredRepositories", GetOutput<Sel> , GetVariables<Sel>>
starredRepositories(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
ownedByViewer: "Boolean",
orderBy: "StarOrder"
            },
        args,

        selection: selectorFn(new StarredRepositoryConnection)
      };
      return this.$_select("starredRepositories", options) as any
    }
  

      
/**
 * The user's description of what they're currently doing.
 */
      status<Sel extends Selection<UserStatus>>(selectorFn: (s: UserStatus) => [...Sel]):$Field<"status", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserStatus)
      };
      return this.$_select("status", options) as any
    }
  

      
/**
 * Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created

 */
      topRepositories<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy: RepositoryOrder
since?: string | null | undefined,
      }>,Sel extends Selection<RepositoryConnection>>(args: Args, selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"topRepositories", GetOutput<Sel> , GetVariables<Sel, Args>> {
      
      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "RepositoryOrder!",
since: "DateTime"
            },
        args,

        selection: selectorFn(new RepositoryConnection)
      };
      return this.$_select("topRepositories", options) as any
    }
  

      
/**
 * The user's Twitter username.
 */
      get twitterUsername(): $Field<"twitterUsername", string | null | undefined>  {
       return this.$_select("twitterUsername") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this user
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * Can the viewer pin repositories and gists to the profile?
 */
      get viewerCanChangePinnedItems(): $Field<"viewerCanChangePinnedItems", boolean>  {
       return this.$_select("viewerCanChangePinnedItems") as any
      }

      
/**
 * Can the current viewer create new projects on this owner.
 */
      get viewerCanCreateProjects(): $Field<"viewerCanCreateProjects", boolean>  {
       return this.$_select("viewerCanCreateProjects") as any
      }

      
/**
 * Whether or not the viewer is able to follow the user.
 */
      get viewerCanFollow(): $Field<"viewerCanFollow", boolean>  {
       return this.$_select("viewerCanFollow") as any
      }

      
/**
 * Whether or not the viewer is able to sponsor this user/organization.
 */
      get viewerCanSponsor(): $Field<"viewerCanSponsor", boolean>  {
       return this.$_select("viewerCanSponsor") as any
      }

      
/**
 * Whether or not this user is followed by the viewer. Inverse of is_following_viewer.
 */
      get viewerIsFollowing(): $Field<"viewerIsFollowing", boolean>  {
       return this.$_select("viewerIsFollowing") as any
      }

      
/**
 * True if the viewer is sponsoring this user/organization.
 */
      get viewerIsSponsoring(): $Field<"viewerIsSponsoring", boolean>  {
       return this.$_select("viewerIsSponsoring") as any
      }

      
/**
 * A list of repositories the given user is watching.
 */
      watching<Args extends VariabledInput<{
        privacy?: RepositoryPrivacy | null | undefined
orderBy?: RepositoryOrder | null | undefined
affiliations?: Readonly<Array<RepositoryAffiliation | null | undefined>> | null | undefined
ownerAffiliations?: Readonly<Array<RepositoryAffiliation | null | undefined>> | null | undefined
isLocked?: boolean | null | undefined
after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<RepositoryConnection>>(args: Args, selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"watching", GetOutput<Sel> , GetVariables<Sel, Args>>
watching<Sel extends Selection<RepositoryConnection>>(selectorFn: (s: RepositoryConnection) => [...Sel]):$Field<"watching", GetOutput<Sel> , GetVariables<Sel>>
watching(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              privacy: "RepositoryPrivacy",
orderBy: "RepositoryOrder",
affiliations: "[RepositoryAffiliation]",
ownerAffiliations: "[RepositoryAffiliation]",
isLocked: "Boolean",
after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new RepositoryConnection)
      };
      return this.$_select("watching", options) as any
    }
  

      
/**
 * A URL pointing to the user's public website/blog.
 */
      get websiteUrl(): $Field<"websiteUrl", string | null | undefined>  {
       return this.$_select("websiteUrl") as any
      }
}

  
/**
 * The possible durations that a user can be blocked for.
 */
export enum UserBlockDuration {
  
/**
 * The user was blocked for 1 day
 */
  ONE_DAY = "ONE_DAY",

/**
 * The user was blocked for 3 days
 */
  THREE_DAYS = "THREE_DAYS",

/**
 * The user was blocked for 7 days
 */
  ONE_WEEK = "ONE_WEEK",

/**
 * The user was blocked for 30 days
 */
  ONE_MONTH = "ONE_MONTH",

/**
 * The user was blocked permanently
 */
  PERMANENT = "PERMANENT"
}
  


/**
 * Represents a 'user_blocked' event on a given user.
 */
export class UserBlockedEvent extends $Base<"UserBlockedEvent"> {
  constructor() {
    super("UserBlockedEvent")
  }

  
      
/**
 * Identifies the actor who performed the event.
 */
      actor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"actor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("actor", options) as any
    }
  

      
/**
 * Number of days that the user was blocked for.
 */
      get blockDuration(): $Field<"blockDuration", UserBlockDuration>  {
       return this.$_select("blockDuration") as any
      }

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The user who was blocked.
 */
      subject<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"subject", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("subject", options) as any
    }
  
}


/**
 * The connection type for User.
 */
export class UserConnection extends $Base<"UserConnection"> {
  constructor() {
    super("UserConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<UserEdge>>(selectorFn: (s: UserEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edit on user content
 */
export class UserContentEdit extends $Base<"UserContentEdit"> {
  constructor() {
    super("UserContentEdit")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the date and time when the object was deleted.
 */
      get deletedAt(): $Field<"deletedAt", string | null | undefined>  {
       return this.$_select("deletedAt") as any
      }

      
/**
 * The actor who deleted this content
 */
      deletedBy<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"deletedBy", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("deletedBy", options) as any
    }
  

      
/**
 * A summary of the changes for this edit
 */
      get diff(): $Field<"diff", string | null | undefined>  {
       return this.$_select("diff") as any
      }

      
/**
 * When this content was edited
 */
      get editedAt(): $Field<"editedAt", string>  {
       return this.$_select("editedAt") as any
      }

      
/**
 * The actor who edited this content
 */
      editor<Sel extends Selection<Actor>>(selectorFn: (s: Actor) => [...Sel]):$Field<"editor", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Actor)
      };
      return this.$_select("editor", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * A list of edits to content.
 */
export class UserContentEditConnection extends $Base<"UserContentEditConnection"> {
  constructor() {
    super("UserContentEditConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<UserContentEditEdge>>(selectorFn: (s: UserContentEditEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserContentEditEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<UserContentEdit>>(selectorFn: (s: UserContentEdit) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserContentEdit)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class UserContentEditEdge extends $Base<"UserContentEditEdge"> {
  constructor() {
    super("UserContentEditEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<UserContentEdit>>(selectorFn: (s: UserContentEdit) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserContentEdit)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Represents a user.
 */
export class UserEdge extends $Base<"UserEdge"> {
  constructor() {
    super("UserEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Email attributes from External Identity
 */
export class UserEmailMetadata extends $Base<"UserEmailMetadata"> {
  constructor() {
    super("UserEmailMetadata")
  }

  
      
/**
 * Boolean to identify primary emails
 */
      get primary(): $Field<"primary", boolean | null | undefined>  {
       return this.$_select("primary") as any
      }

      
/**
 * Type of email
 */
      get type(): $Field<"type", string | null | undefined>  {
       return this.$_select("type") as any
      }

      
/**
 * Email id
 */
      get value(): $Field<"value", string>  {
       return this.$_select("value") as any
      }
}


/**
 * The user's description of what they're currently doing.
 */
export class UserStatus extends $Base<"UserStatus"> {
  constructor() {
    super("UserStatus")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * An emoji summarizing the user's status.
 */
      get emoji(): $Field<"emoji", string | null | undefined>  {
       return this.$_select("emoji") as any
      }

      
/**
 * The status emoji as HTML.
 */
      get emojiHTML(): $Field<"emojiHTML", string | null | undefined>  {
       return this.$_select("emojiHTML") as any
      }

      
/**
 * If set, the status will not be shown after this date.
 */
      get expiresAt(): $Field<"expiresAt", string | null | undefined>  {
       return this.$_select("expiresAt") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether this status indicates the user is not fully available on GitHub.
 */
      get indicatesLimitedAvailability(): $Field<"indicatesLimitedAvailability", boolean>  {
       return this.$_select("indicatesLimitedAvailability") as any
      }

      
/**
 * A brief message describing what the user is doing.
 */
      get message(): $Field<"message", string | null | undefined>  {
       return this.$_select("message") as any
      }

      
/**
 * The organization whose members can see this status. If null, this status is publicly visible.
 */
      organization<Sel extends Selection<Organization>>(selectorFn: (s: Organization) => [...Sel]):$Field<"organization", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Organization)
      };
      return this.$_select("organization", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The user who has this status.
 */
      user<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"user", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("user", options) as any
    }
  
}


/**
 * The connection type for UserStatus.
 */
export class UserStatusConnection extends $Base<"UserStatusConnection"> {
  constructor() {
    super("UserStatusConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<UserStatusEdge>>(selectorFn: (s: UserStatusEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserStatusEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<UserStatus>>(selectorFn: (s: UserStatus) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserStatus)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class UserStatusEdge extends $Base<"UserStatusEdge"> {
  constructor() {
    super("UserStatusEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<UserStatus>>(selectorFn: (s: UserStatus) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new UserStatus)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for user status connections.
 */
export type UserStatusOrder = {
  direction: OrderDirection,
field: UserStatusOrderField
}
    

  
/**
 * Properties by which user status connections can be ordered.
 */
export enum UserStatusOrderField {
  
/**
 * Order user statuses by when they were updated.
 */
  UPDATED_AT = "UPDATED_AT"
}
  


/**
 * A domain that can be verified or approved for an organization or an enterprise.
 */
export class VerifiableDomain extends $Base<"VerifiableDomain"> {
  constructor() {
    super("VerifiableDomain")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The DNS host name that should be used for verification.
 */
      get dnsHostName(): $Field<"dnsHostName", string | null | undefined>  {
       return this.$_select("dnsHostName") as any
      }

      
/**
 * The unicode encoded domain.
 */
      get domain(): $Field<"domain", string>  {
       return this.$_select("domain") as any
      }

      
/**
 * Whether a TXT record for verification with the expected host name was found.
 */
      get hasFoundHostName(): $Field<"hasFoundHostName", boolean>  {
       return this.$_select("hasFoundHostName") as any
      }

      
/**
 * Whether a TXT record for verification with the expected verification token was found.
 */
      get hasFoundVerificationToken(): $Field<"hasFoundVerificationToken", boolean>  {
       return this.$_select("hasFoundVerificationToken") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * Whether or not the domain is approved.
 */
      get isApproved(): $Field<"isApproved", boolean>  {
       return this.$_select("isApproved") as any
      }

      
/**
 * Whether this domain is required to exist for an organization or enterprise policy to be enforced.
 */
      get isRequiredForPolicyEnforcement(): $Field<"isRequiredForPolicyEnforcement", boolean>  {
       return this.$_select("isRequiredForPolicyEnforcement") as any
      }

      
/**
 * Whether or not the domain is verified.
 */
      get isVerified(): $Field<"isVerified", boolean>  {
       return this.$_select("isVerified") as any
      }

      
/**
 * The owner of the domain.
 */
      owner<Sel extends Selection<VerifiableDomainOwner>>(selectorFn: (s: VerifiableDomainOwner) => [...Sel]):$Field<"owner", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new VerifiableDomainOwner)
      };
      return this.$_select("owner", options) as any
    }
  

      
/**
 * The punycode encoded domain.
 */
      get punycodeEncodedDomain(): $Field<"punycodeEncodedDomain", string>  {
       return this.$_select("punycodeEncodedDomain") as any
      }

      
/**
 * The time that the current verification token will expire.
 */
      get tokenExpirationTime(): $Field<"tokenExpirationTime", string | null | undefined>  {
       return this.$_select("tokenExpirationTime") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The current verification token for the domain.
 */
      get verificationToken(): $Field<"verificationToken", string | null | undefined>  {
       return this.$_select("verificationToken") as any
      }
}


/**
 * The connection type for VerifiableDomain.
 */
export class VerifiableDomainConnection extends $Base<"VerifiableDomainConnection"> {
  constructor() {
    super("VerifiableDomainConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<VerifiableDomainEdge>>(selectorFn: (s: VerifiableDomainEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new VerifiableDomainEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<VerifiableDomain>>(selectorFn: (s: VerifiableDomain) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new VerifiableDomain)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class VerifiableDomainEdge extends $Base<"VerifiableDomainEdge"> {
  constructor() {
    super("VerifiableDomainEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<VerifiableDomain>>(selectorFn: (s: VerifiableDomain) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new VerifiableDomain)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ordering options for verifiable domain connections.
 */
export type VerifiableDomainOrder = {
  direction: OrderDirection,
field: VerifiableDomainOrderField
}
    

  
/**
 * Properties by which verifiable domain connections can be ordered.
 */
export enum VerifiableDomainOrderField {
  
/**
 * Order verifiable domains by the domain name.
 */
  DOMAIN = "DOMAIN",

/**
 * Order verifiable domains by their creation date.
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * Types that can own a verifiable domain.
 */
export class VerifiableDomainOwner extends $Union<{Enterprise: Enterprise,Organization: Organization,Node: Node,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable}, "VerifiableDomainOwner"> {
  constructor() {
    super({Enterprise: Enterprise,Organization: Organization,Node: Node,Actor: Actor,PackageOwner: PackageOwner,ProjectOwner: ProjectOwner,ProjectNextOwner: ProjectNextOwner,ProjectV2Owner: ProjectV2Owner,ProjectV2Recent: ProjectV2Recent,RepositoryDiscussionAuthor: RepositoryDiscussionAuthor,RepositoryDiscussionCommentAuthor: RepositoryDiscussionCommentAuthor,RepositoryOwner: RepositoryOwner,UniformResourceLocatable: UniformResourceLocatable,MemberStatusable: MemberStatusable,ProfileOwner: ProfileOwner,Sponsorable: Sponsorable})
  }
}


/**
 * Autogenerated input type of VerifyVerifiableDomain
 */
export type VerifyVerifiableDomainInput = {
  clientMutationId?: string | null | undefined,
id: string
}
    


/**
 * Autogenerated return type of VerifyVerifiableDomain
 */
export class VerifyVerifiableDomainPayload extends $Base<"VerifyVerifiableDomainPayload"> {
  constructor() {
    super("VerifyVerifiableDomainPayload")
  }

  
      
/**
 * A unique identifier for the client performing the mutation.
 */
      get clientMutationId(): $Field<"clientMutationId", string | null | undefined>  {
       return this.$_select("clientMutationId") as any
      }

      
/**
 * The verifiable domain that was verified.
 */
      domain<Sel extends Selection<VerifiableDomain>>(selectorFn: (s: VerifiableDomain) => [...Sel]):$Field<"domain", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new VerifiableDomain)
      };
      return this.$_select("domain", options) as any
    }
  
}


/**
 * A hovercard context with a message describing how the viewer is related.
 */
export class ViewerHovercardContext extends $Base<"ViewerHovercardContext"> {
  constructor() {
    super("ViewerHovercardContext")
  }

  
      
/**
 * A string describing this context
 */
      get message(): $Field<"message", string>  {
       return this.$_select("message") as any
      }

      
/**
 * An octicon to accompany this context
 */
      get octicon(): $Field<"octicon", string>  {
       return this.$_select("octicon") as any
      }

      
/**
 * Identifies the user who is related to this context.
 */
      viewer<Sel extends Selection<User>>(selectorFn: (s: User) => [...Sel]):$Field<"viewer", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new User)
      };
      return this.$_select("viewer", options) as any
    }
  
}


/**
 * A subject that may be upvoted.
 */
export class Votable extends $Interface<{Discussion: Discussion,DiscussionComment: DiscussionComment}, "Votable"> {
  constructor() {
    super({Discussion: Discussion,DiscussionComment: DiscussionComment}, "Votable")
  }
}


/**
 * A workflow contains meta information about an Actions workflow file.
 */
export class Workflow extends $Base<"Workflow"> {
  constructor() {
    super("Workflow")
  }

  
      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The name of the workflow.
 */
      get name(): $Field<"name", string>  {
       return this.$_select("name") as any
      }

      
/**
 * The runs of the workflow.
 */
      runs<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined
orderBy?: WorkflowRunOrder | null | undefined,
      }>,Sel extends Selection<WorkflowRunConnection>>(args: Args, selectorFn: (s: WorkflowRunConnection) => [...Sel]):$Field<"runs", GetOutput<Sel> , GetVariables<Sel, Args>>
runs<Sel extends Selection<WorkflowRunConnection>>(selectorFn: (s: WorkflowRunConnection) => [...Sel]):$Field<"runs", GetOutput<Sel> , GetVariables<Sel>>
runs(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int",
orderBy: "WorkflowRunOrder"
            },
        args,

        selection: selectorFn(new WorkflowRunConnection)
      };
      return this.$_select("runs", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }
}


/**
 * A workflow run.
 */
export class WorkflowRun extends $Base<"WorkflowRun"> {
  constructor() {
    super("WorkflowRun")
  }

  
      
/**
 * The check suite this workflow run belongs to.
 */
      checkSuite<Sel extends Selection<CheckSuite>>(selectorFn: (s: CheckSuite) => [...Sel]):$Field<"checkSuite", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new CheckSuite)
      };
      return this.$_select("checkSuite", options) as any
    }
  

      
/**
 * Identifies the date and time when the object was created.
 */
      get createdAt(): $Field<"createdAt", string>  {
       return this.$_select("createdAt") as any
      }

      
/**
 * Identifies the primary key from the database.
 */
      get databaseId(): $Field<"databaseId", number | null | undefined>  {
       return this.$_select("databaseId") as any
      }

      
/**
 * The log of deployment reviews
 */
      deploymentReviews<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<DeploymentReviewConnection>>(args: Args, selectorFn: (s: DeploymentReviewConnection) => [...Sel]):$Field<"deploymentReviews", GetOutput<Sel> , GetVariables<Sel, Args>>
deploymentReviews<Sel extends Selection<DeploymentReviewConnection>>(selectorFn: (s: DeploymentReviewConnection) => [...Sel]):$Field<"deploymentReviews", GetOutput<Sel> , GetVariables<Sel>>
deploymentReviews(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new DeploymentReviewConnection)
      };
      return this.$_select("deploymentReviews", options) as any
    }
  

      
      get id(): $Field<"id", string>  {
       return this.$_select("id") as any
      }

      
/**
 * The pending deployment requests of all check runs in this workflow run
 */
      pendingDeploymentRequests<Args extends VariabledInput<{
        after?: string | null | undefined
before?: string | null | undefined
first?: number | null | undefined
last?: number | null | undefined,
      }>,Sel extends Selection<DeploymentRequestConnection>>(args: Args, selectorFn: (s: DeploymentRequestConnection) => [...Sel]):$Field<"pendingDeploymentRequests", GetOutput<Sel> , GetVariables<Sel, Args>>
pendingDeploymentRequests<Sel extends Selection<DeploymentRequestConnection>>(selectorFn: (s: DeploymentRequestConnection) => [...Sel]):$Field<"pendingDeploymentRequests", GetOutput<Sel> , GetVariables<Sel>>
pendingDeploymentRequests(arg1: any, arg2?: any) {
      const { args, selectorFn } = !arg2 ? { args: {}, selectorFn: arg1 } : { args: arg1, selectorFn: arg2 };

      const options = {
        argTypes: {
              after: "String",
before: "String",
first: "Int",
last: "Int"
            },
        args,

        selection: selectorFn(new DeploymentRequestConnection)
      };
      return this.$_select("pendingDeploymentRequests", options) as any
    }
  

      
/**
 * The HTTP path for this workflow run
 */
      get resourcePath(): $Field<"resourcePath", string>  {
       return this.$_select("resourcePath") as any
      }

      
/**
 * A number that uniquely identifies this workflow run in its parent workflow.
 */
      get runNumber(): $Field<"runNumber", number>  {
       return this.$_select("runNumber") as any
      }

      
/**
 * Identifies the date and time when the object was last updated.
 */
      get updatedAt(): $Field<"updatedAt", string>  {
       return this.$_select("updatedAt") as any
      }

      
/**
 * The HTTP URL for this workflow run
 */
      get url(): $Field<"url", string>  {
       return this.$_select("url") as any
      }

      
/**
 * The workflow executed in this workflow run.
 */
      workflow<Sel extends Selection<Workflow>>(selectorFn: (s: Workflow) => [...Sel]):$Field<"workflow", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new Workflow)
      };
      return this.$_select("workflow", options) as any
    }
  
}


/**
 * The connection type for WorkflowRun.
 */
export class WorkflowRunConnection extends $Base<"WorkflowRunConnection"> {
  constructor() {
    super("WorkflowRunConnection")
  }

  
      
/**
 * A list of edges.
 */
      edges<Sel extends Selection<WorkflowRunEdge>>(selectorFn: (s: WorkflowRunEdge) => [...Sel]):$Field<"edges", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new WorkflowRunEdge)
      };
      return this.$_select("edges", options) as any
    }
  

      
/**
 * A list of nodes.
 */
      nodes<Sel extends Selection<WorkflowRun>>(selectorFn: (s: WorkflowRun) => [...Sel]):$Field<"nodes", Array<GetOutput<Sel> | undefined> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new WorkflowRun)
      };
      return this.$_select("nodes", options) as any
    }
  

      
/**
 * Information to aid in pagination.
 */
      pageInfo<Sel extends Selection<PageInfo>>(selectorFn: (s: PageInfo) => [...Sel]):$Field<"pageInfo", GetOutput<Sel> , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new PageInfo)
      };
      return this.$_select("pageInfo", options) as any
    }
  

      
/**
 * Identifies the total count of items in the connection.
 */
      get totalCount(): $Field<"totalCount", number>  {
       return this.$_select("totalCount") as any
      }
}


/**
 * An edge in a connection.
 */
export class WorkflowRunEdge extends $Base<"WorkflowRunEdge"> {
  constructor() {
    super("WorkflowRunEdge")
  }

  
      
/**
 * A cursor for use in pagination.
 */
      get cursor(): $Field<"cursor", string>  {
       return this.$_select("cursor") as any
      }

      
/**
 * The item at the end of the edge.
 */
      node<Sel extends Selection<WorkflowRun>>(selectorFn: (s: WorkflowRun) => [...Sel]):$Field<"node", GetOutput<Sel> | undefined , GetVariables<Sel>> {
      
      const options = {
        
        

        selection: selectorFn(new WorkflowRun)
      };
      return this.$_select("node", options) as any
    }
  
}


/**
 * Ways in which lists of workflow runs can be ordered upon return.
 */
export type WorkflowRunOrder = {
  direction: OrderDirection,
field: WorkflowRunOrderField
}
    

  
/**
 * Properties by which workflow run connections can be ordered.
 */
export enum WorkflowRunOrderField {
  
/**
 * Order workflow runs by most recently created
 */
  CREATED_AT = "CREATED_AT"
}
  


/**
 * A valid x509 certificate string
 */
export type X509Certificate = string


  const $Root = {
    query: Query,
mutation: Mutation
  }

  namespace $RootTypes {
    export type query = Query
export type mutation = Mutation
  }
  

export function query<Sel extends Selection<$RootTypes.query>>(
  selectFn: (q: $RootTypes.query) => [...Sel]
) {
  let field = new $Field<'query', GetOutput<Sel>, GetVariables<Sel>>('query', {
    selection: selectFn(new $Root.query()),
  })
  const str = fieldToQuery('query', field)

  return gql(str) as any as TypedDocumentNode<GetOutput<Sel>, GetVariables<Sel>>
}


export function mutation<Sel extends Selection<$RootTypes.mutation>>(
  selectFn: (q: $RootTypes.mutation) => [...Sel]
) {
  let field = new $Field<'mutation', GetOutput<Sel>, GetVariables<Sel>>('mutation', {
    selection: selectFn(new $Root.mutation()),
  })
  const str = fieldToQuery('mutation', field)

  return gql(str) as any as TypedDocumentNode<GetOutput<Sel>, GetVariables<Sel>>
}


const $InputTypes: {[key: string]: {[key: string]: string}} = {
    AbortQueuedMigrationsInput: {
    clientMutationId: "String",
ownerId: "ID!"
  },
  AcceptEnterpriseAdministratorInvitationInput: {
    clientMutationId: "String",
invitationId: "ID!"
  },
  AcceptTopicSuggestionInput: {
    clientMutationId: "String",
name: "String!",
repositoryId: "ID!"
  },
  AddAssigneesToAssignableInput: {
    assignableId: "ID!",
assigneeIds: "[ID!]!",
clientMutationId: "String"
  },
  AddCommentInput: {
    body: "String!",
clientMutationId: "String",
subjectId: "ID!"
  },
  AddDiscussionCommentInput: {
    body: "String!",
clientMutationId: "String",
discussionId: "ID!",
replyToId: "ID"
  },
  AddDiscussionPollVoteInput: {
    clientMutationId: "String",
pollOptionId: "ID!"
  },
  AddEnterpriseSupportEntitlementInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
login: "String!"
  },
  AddLabelsToLabelableInput: {
    clientMutationId: "String",
labelIds: "[ID!]!",
labelableId: "ID!"
  },
  AddProjectCardInput: {
    clientMutationId: "String",
contentId: "ID",
note: "String",
projectColumnId: "ID!"
  },
  AddProjectColumnInput: {
    clientMutationId: "String",
name: "String!",
projectId: "ID!"
  },
  AddProjectDraftIssueInput: {
    assigneeIds: "[ID!]",
body: "String",
clientMutationId: "String",
projectId: "ID",
title: "String"
  },
  AddProjectNextItemInput: {
    clientMutationId: "String",
contentId: "ID",
projectId: "ID"
  },
  AddProjectV2DraftIssueInput: {
    assigneeIds: "[ID!]",
body: "String",
clientMutationId: "String",
projectId: "ID!",
title: "String!"
  },
  AddProjectV2ItemByIdInput: {
    clientMutationId: "String",
contentId: "ID!",
projectId: "ID!"
  },
  AddPullRequestReviewCommentInput: {
    body: "String!",
clientMutationId: "String",
commitOID: "GitObjectID",
inReplyTo: "ID",
path: "String",
position: "Int",
pullRequestId: "ID",
pullRequestReviewId: "ID"
  },
  AddPullRequestReviewInput: {
    body: "String",
clientMutationId: "String",
comments: "[DraftPullRequestReviewComment]",
commitOID: "GitObjectID",
event: "PullRequestReviewEvent",
pullRequestId: "ID!",
threads: "[DraftPullRequestReviewThread]"
  },
  AddPullRequestReviewThreadInput: {
    body: "String!",
clientMutationId: "String",
line: "Int!",
path: "String!",
pullRequestId: "ID",
pullRequestReviewId: "ID",
side: "DiffSide",
startLine: "Int",
startSide: "DiffSide"
  },
  AddReactionInput: {
    clientMutationId: "String",
content: "ReactionContent!",
subjectId: "ID!"
  },
  AddStarInput: {
    clientMutationId: "String",
starrableId: "ID!"
  },
  AddUpvoteInput: {
    clientMutationId: "String",
subjectId: "ID!"
  },
  AddVerifiableDomainInput: {
    clientMutationId: "String",
domain: "URI!",
ownerId: "ID!"
  },
  ApproveDeploymentsInput: {
    clientMutationId: "String",
comment: "String",
environmentIds: "[ID!]!",
workflowRunId: "ID!"
  },
  ApproveVerifiableDomainInput: {
    clientMutationId: "String",
id: "ID!"
  },
  ArchiveRepositoryInput: {
    clientMutationId: "String",
repositoryId: "ID!"
  },
  AuditLogOrder: {
    direction: "OrderDirection",
field: "AuditLogOrderField"
  },
  CancelEnterpriseAdminInvitationInput: {
    clientMutationId: "String",
invitationId: "ID!"
  },
  CancelSponsorshipInput: {
    clientMutationId: "String",
sponsorId: "ID",
sponsorLogin: "String",
sponsorableId: "ID",
sponsorableLogin: "String"
  },
  ChangeUserStatusInput: {
    clientMutationId: "String",
emoji: "String",
expiresAt: "DateTime",
limitedAvailability: "Boolean",
message: "String",
organizationId: "ID"
  },
  CheckAnnotationData: {
    annotationLevel: "CheckAnnotationLevel!",
location: "CheckAnnotationRange!",
message: "String!",
path: "String!",
rawDetails: "String",
title: "String"
  },
  CheckAnnotationRange: {
    endColumn: "Int",
endLine: "Int!",
startColumn: "Int",
startLine: "Int!"
  },
  CheckRunAction: {
    description: "String!",
identifier: "String!",
label: "String!"
  },
  CheckRunFilter: {
    appId: "Int",
checkName: "String",
checkType: "CheckRunType",
conclusions: "[CheckConclusionState!]",
status: "CheckStatusState",
statuses: "[CheckStatusState!]"
  },
  CheckRunOutput: {
    annotations: "[CheckAnnotationData!]",
images: "[CheckRunOutputImage!]",
summary: "String!",
text: "String",
title: "String!"
  },
  CheckRunOutputImage: {
    alt: "String!",
caption: "String",
imageUrl: "URI!"
  },
  CheckSuiteAutoTriggerPreference: {
    appId: "ID!",
setting: "Boolean!"
  },
  CheckSuiteFilter: {
    appId: "Int",
checkName: "String"
  },
  ClearLabelsFromLabelableInput: {
    clientMutationId: "String",
labelableId: "ID!"
  },
  ClearProjectV2ItemFieldValueInput: {
    clientMutationId: "String",
fieldId: "ID!",
itemId: "ID!",
projectId: "ID!"
  },
  CloneProjectInput: {
    body: "String",
clientMutationId: "String",
includeWorkflows: "Boolean!",
name: "String!",
public: "Boolean",
sourceId: "ID!",
targetOwnerId: "ID!"
  },
  CloneTemplateRepositoryInput: {
    clientMutationId: "String",
description: "String",
includeAllBranches: "Boolean",
name: "String!",
ownerId: "ID!",
repositoryId: "ID!",
visibility: "RepositoryVisibility!"
  },
  CloseIssueInput: {
    clientMutationId: "String",
issueId: "ID!",
stateReason: "IssueClosedStateReason"
  },
  ClosePullRequestInput: {
    clientMutationId: "String",
pullRequestId: "ID!"
  },
  CommitAuthor: {
    emails: "[String!]",
id: "ID"
  },
  CommitContributionOrder: {
    direction: "OrderDirection!",
field: "CommitContributionOrderField!"
  },
  CommitMessage: {
    body: "String",
headline: "String!"
  },
  CommittableBranch: {
    branchName: "String",
id: "ID",
repositoryNameWithOwner: "String"
  },
  ContributionOrder: {
    direction: "OrderDirection!"
  },
  ConvertProjectCardNoteToIssueInput: {
    body: "String",
clientMutationId: "String",
projectCardId: "ID!",
repositoryId: "ID!",
title: "String"
  },
  ConvertPullRequestToDraftInput: {
    clientMutationId: "String",
pullRequestId: "ID!"
  },
  CreateBranchProtectionRuleInput: {
    allowsDeletions: "Boolean",
allowsForcePushes: "Boolean",
blocksCreations: "Boolean",
bypassForcePushActorIds: "[ID!]",
bypassPullRequestActorIds: "[ID!]",
clientMutationId: "String",
dismissesStaleReviews: "Boolean",
isAdminEnforced: "Boolean",
lockAllowsFetchAndMerge: "Boolean",
lockBranch: "Boolean",
pattern: "String!",
pushActorIds: "[ID!]",
repositoryId: "ID!",
requireLastPushApproval: "Boolean",
requiredApprovingReviewCount: "Int",
requiredStatusCheckContexts: "[String!]",
requiredStatusChecks: "[RequiredStatusCheckInput!]",
requiresApprovingReviews: "Boolean",
requiresCodeOwnerReviews: "Boolean",
requiresCommitSignatures: "Boolean",
requiresConversationResolution: "Boolean",
requiresLinearHistory: "Boolean",
requiresStatusChecks: "Boolean",
requiresStrictStatusChecks: "Boolean",
restrictsPushes: "Boolean",
restrictsReviewDismissals: "Boolean",
reviewDismissalActorIds: "[ID!]"
  },
  CreateCheckRunInput: {
    actions: "[CheckRunAction!]",
clientMutationId: "String",
completedAt: "DateTime",
conclusion: "CheckConclusionState",
detailsUrl: "URI",
externalId: "String",
headSha: "GitObjectID!",
name: "String!",
output: "CheckRunOutput",
repositoryId: "ID!",
startedAt: "DateTime",
status: "RequestableCheckStatusState"
  },
  CreateCheckSuiteInput: {
    clientMutationId: "String",
headSha: "GitObjectID!",
repositoryId: "ID!"
  },
  CreateCommitOnBranchInput: {
    branch: "CommittableBranch!",
clientMutationId: "String",
expectedHeadOid: "GitObjectID!",
fileChanges: "FileChanges",
message: "CommitMessage!"
  },
  CreateDiscussionInput: {
    body: "String!",
categoryId: "ID!",
clientMutationId: "String",
repositoryId: "ID!",
title: "String!"
  },
  CreateEnterpriseOrganizationInput: {
    adminLogins: "[String!]!",
billingEmail: "String!",
clientMutationId: "String",
enterpriseId: "ID!",
login: "String!",
profileName: "String!"
  },
  CreateEnvironmentInput: {
    clientMutationId: "String",
name: "String!",
repositoryId: "ID!"
  },
  CreateIpAllowListEntryInput: {
    allowListValue: "String!",
clientMutationId: "String",
isActive: "Boolean!",
name: "String",
ownerId: "ID!"
  },
  CreateIssueInput: {
    assigneeIds: "[ID!]",
body: "String",
clientMutationId: "String",
issueTemplate: "String",
labelIds: "[ID!]",
milestoneId: "ID",
projectIds: "[ID!]",
repositoryId: "ID!",
title: "String!"
  },
  CreateLinkedBranchInput: {
    clientMutationId: "String",
issueId: "ID!",
name: "String",
oid: "GitObjectID!",
repositoryId: "ID"
  },
  CreateMigrationSourceInput: {
    accessToken: "String",
clientMutationId: "String",
githubPat: "String",
name: "String!",
ownerId: "ID!",
type: "MigrationSourceType!",
url: "String!"
  },
  CreateProjectInput: {
    body: "String",
clientMutationId: "String",
name: "String!",
ownerId: "ID!",
repositoryIds: "[ID!]",
template: "ProjectTemplate"
  },
  CreateProjectV2Input: {
    clientMutationId: "String",
ownerId: "ID!",
title: "String!"
  },
  CreatePullRequestInput: {
    baseRefName: "String!",
body: "String",
clientMutationId: "String",
draft: "Boolean",
headRefName: "String!",
maintainerCanModify: "Boolean",
repositoryId: "ID!",
title: "String!"
  },
  CreateRefInput: {
    clientMutationId: "String",
name: "String!",
oid: "GitObjectID!",
repositoryId: "ID!"
  },
  CreateRepositoryInput: {
    clientMutationId: "String",
description: "String",
hasIssuesEnabled: "Boolean",
hasWikiEnabled: "Boolean",
homepageUrl: "URI",
name: "String!",
ownerId: "ID",
teamId: "ID",
template: "Boolean",
visibility: "RepositoryVisibility!"
  },
  CreateSponsorsTierInput: {
    amount: "Int!",
clientMutationId: "String",
description: "String!",
isRecurring: "Boolean",
publish: "Boolean",
repositoryId: "ID",
repositoryName: "String",
repositoryOwnerLogin: "String",
sponsorableId: "ID",
sponsorableLogin: "String",
welcomeMessage: "String"
  },
  CreateSponsorshipInput: {
    amount: "Int",
clientMutationId: "String",
isRecurring: "Boolean",
privacyLevel: "SponsorshipPrivacy",
receiveEmails: "Boolean",
sponsorId: "ID",
sponsorLogin: "String",
sponsorableId: "ID",
sponsorableLogin: "String",
tierId: "ID"
  },
  CreateTeamDiscussionCommentInput: {
    body: "String!",
clientMutationId: "String",
discussionId: "ID!"
  },
  CreateTeamDiscussionInput: {
    body: "String!",
clientMutationId: "String",
private: "Boolean",
teamId: "ID!",
title: "String!"
  },
  DeclineTopicSuggestionInput: {
    clientMutationId: "String",
name: "String!",
reason: "TopicSuggestionDeclineReason!",
repositoryId: "ID!"
  },
  DeleteBranchProtectionRuleInput: {
    branchProtectionRuleId: "ID!",
clientMutationId: "String"
  },
  DeleteDeploymentInput: {
    clientMutationId: "String",
id: "ID!"
  },
  DeleteDiscussionCommentInput: {
    clientMutationId: "String",
id: "ID!"
  },
  DeleteDiscussionInput: {
    clientMutationId: "String",
id: "ID!"
  },
  DeleteEnvironmentInput: {
    clientMutationId: "String",
id: "ID!"
  },
  DeleteIpAllowListEntryInput: {
    clientMutationId: "String",
ipAllowListEntryId: "ID!"
  },
  DeleteIssueCommentInput: {
    clientMutationId: "String",
id: "ID!"
  },
  DeleteIssueInput: {
    clientMutationId: "String",
issueId: "ID!"
  },
  DeleteLinkedBranchInput: {
    clientMutationId: "String",
linkedBranchId: "ID!"
  },
  DeleteProjectCardInput: {
    cardId: "ID!",
clientMutationId: "String"
  },
  DeleteProjectColumnInput: {
    clientMutationId: "String",
columnId: "ID!"
  },
  DeleteProjectInput: {
    clientMutationId: "String",
projectId: "ID!"
  },
  DeleteProjectNextItemInput: {
    clientMutationId: "String",
itemId: "ID",
projectId: "ID"
  },
  DeleteProjectV2ItemInput: {
    clientMutationId: "String",
itemId: "ID!",
projectId: "ID!"
  },
  DeletePullRequestReviewCommentInput: {
    clientMutationId: "String",
id: "ID!"
  },
  DeletePullRequestReviewInput: {
    clientMutationId: "String",
pullRequestReviewId: "ID!"
  },
  DeleteRefInput: {
    clientMutationId: "String",
refId: "ID!"
  },
  DeleteTeamDiscussionCommentInput: {
    clientMutationId: "String",
id: "ID!"
  },
  DeleteTeamDiscussionInput: {
    clientMutationId: "String",
id: "ID!"
  },
  DeleteVerifiableDomainInput: {
    clientMutationId: "String",
id: "ID!"
  },
  DeploymentOrder: {
    direction: "OrderDirection!",
field: "DeploymentOrderField!"
  },
  DisablePullRequestAutoMergeInput: {
    clientMutationId: "String",
pullRequestId: "ID!"
  },
  DiscussionOrder: {
    direction: "OrderDirection!",
field: "DiscussionOrderField!"
  },
  DiscussionPollOptionOrder: {
    direction: "OrderDirection!",
field: "DiscussionPollOptionOrderField!"
  },
  DismissPullRequestReviewInput: {
    clientMutationId: "String",
message: "String!",
pullRequestReviewId: "ID!"
  },
  DismissRepositoryVulnerabilityAlertInput: {
    clientMutationId: "String",
dismissReason: "DismissReason!",
repositoryVulnerabilityAlertId: "ID!"
  },
  DraftPullRequestReviewComment: {
    body: "String!",
path: "String!",
position: "Int!"
  },
  DraftPullRequestReviewThread: {
    body: "String!",
line: "Int!",
path: "String!",
side: "DiffSide",
startLine: "Int",
startSide: "DiffSide"
  },
  EnablePullRequestAutoMergeInput: {
    authorEmail: "String",
clientMutationId: "String",
commitBody: "String",
commitHeadline: "String",
mergeMethod: "PullRequestMergeMethod",
pullRequestId: "ID!"
  },
  EnterpriseAdministratorInvitationOrder: {
    direction: "OrderDirection!",
field: "EnterpriseAdministratorInvitationOrderField!"
  },
  EnterpriseMemberOrder: {
    direction: "OrderDirection!",
field: "EnterpriseMemberOrderField!"
  },
  EnterpriseServerInstallationOrder: {
    direction: "OrderDirection!",
field: "EnterpriseServerInstallationOrderField!"
  },
  EnterpriseServerUserAccountEmailOrder: {
    direction: "OrderDirection!",
field: "EnterpriseServerUserAccountEmailOrderField!"
  },
  EnterpriseServerUserAccountOrder: {
    direction: "OrderDirection!",
field: "EnterpriseServerUserAccountOrderField!"
  },
  EnterpriseServerUserAccountsUploadOrder: {
    direction: "OrderDirection!",
field: "EnterpriseServerUserAccountsUploadOrderField!"
  },
  FileAddition: {
    contents: "Base64String!",
path: "String!"
  },
  FileChanges: {
    additions: "[FileAddition!]",
deletions: "[FileDeletion!]"
  },
  FileDeletion: {
    path: "String!"
  },
  FollowOrganizationInput: {
    clientMutationId: "String",
organizationId: "ID!"
  },
  FollowUserInput: {
    clientMutationId: "String",
userId: "ID!"
  },
  GistOrder: {
    direction: "OrderDirection!",
field: "GistOrderField!"
  },
  GrantEnterpriseOrganizationsMigratorRoleInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
login: "String!"
  },
  GrantMigratorRoleInput: {
    actor: "String!",
actorType: "ActorType!",
clientMutationId: "String",
organizationId: "ID!"
  },
  InviteEnterpriseAdminInput: {
    clientMutationId: "String",
email: "String",
enterpriseId: "ID!",
invitee: "String",
role: "EnterpriseAdministratorRole"
  },
  IpAllowListEntryOrder: {
    direction: "OrderDirection!",
field: "IpAllowListEntryOrderField!"
  },
  IssueCommentOrder: {
    direction: "OrderDirection!",
field: "IssueCommentOrderField!"
  },
  IssueFilters: {
    assignee: "String",
createdBy: "String",
labels: "[String!]",
mentioned: "String",
milestone: "String",
milestoneNumber: "String",
since: "DateTime",
states: "[IssueState!]",
viewerSubscribed: "Boolean"
  },
  IssueOrder: {
    direction: "OrderDirection!",
field: "IssueOrderField!"
  },
  LabelOrder: {
    direction: "OrderDirection!",
field: "LabelOrderField!"
  },
  LanguageOrder: {
    direction: "OrderDirection!",
field: "LanguageOrderField!"
  },
  LinkRepositoryToProjectInput: {
    clientMutationId: "String",
projectId: "ID!",
repositoryId: "ID!"
  },
  LockLockableInput: {
    clientMutationId: "String",
lockReason: "LockReason",
lockableId: "ID!"
  },
  MarkDiscussionCommentAsAnswerInput: {
    clientMutationId: "String",
id: "ID!"
  },
  MarkFileAsViewedInput: {
    clientMutationId: "String",
path: "String!",
pullRequestId: "ID!"
  },
  MarkPullRequestReadyForReviewInput: {
    clientMutationId: "String",
pullRequestId: "ID!"
  },
  MergeBranchInput: {
    authorEmail: "String",
base: "String!",
clientMutationId: "String",
commitMessage: "String",
head: "String!",
repositoryId: "ID!"
  },
  MergePullRequestInput: {
    authorEmail: "String",
clientMutationId: "String",
commitBody: "String",
commitHeadline: "String",
expectedHeadOid: "GitObjectID",
mergeMethod: "PullRequestMergeMethod",
pullRequestId: "ID!"
  },
  MilestoneOrder: {
    direction: "OrderDirection!",
field: "MilestoneOrderField!"
  },
  MinimizeCommentInput: {
    classifier: "ReportedContentClassifiers!",
clientMutationId: "String",
subjectId: "ID!"
  },
  MoveProjectCardInput: {
    afterCardId: "ID",
cardId: "ID!",
clientMutationId: "String",
columnId: "ID!"
  },
  MoveProjectColumnInput: {
    afterColumnId: "ID",
clientMutationId: "String",
columnId: "ID!"
  },
  OrgEnterpriseOwnerOrder: {
    direction: "OrderDirection!",
field: "OrgEnterpriseOwnerOrderField!"
  },
  OrganizationOrder: {
    direction: "OrderDirection!",
field: "OrganizationOrderField!"
  },
  PackageFileOrder: {
    direction: "OrderDirection",
field: "PackageFileOrderField"
  },
  PackageOrder: {
    direction: "OrderDirection",
field: "PackageOrderField"
  },
  PackageVersionOrder: {
    direction: "OrderDirection",
field: "PackageVersionOrderField"
  },
  PinIssueInput: {
    clientMutationId: "String",
issueId: "ID!"
  },
  ProjectOrder: {
    direction: "OrderDirection!",
field: "ProjectOrderField!"
  },
  ProjectV2FieldOrder: {
    direction: "OrderDirection!",
field: "ProjectV2FieldOrderField!"
  },
  ProjectV2FieldValue: {
    date: "Date",
iterationId: "String",
number: "Float",
singleSelectOptionId: "String",
text: "String"
  },
  ProjectV2ItemFieldValueOrder: {
    direction: "OrderDirection!",
field: "ProjectV2ItemFieldValueOrderField!"
  },
  ProjectV2ItemOrder: {
    direction: "OrderDirection!",
field: "ProjectV2ItemOrderField!"
  },
  ProjectV2Order: {
    direction: "OrderDirection!",
field: "ProjectV2OrderField!"
  },
  ProjectV2ViewOrder: {
    direction: "OrderDirection!",
field: "ProjectV2ViewOrderField!"
  },
  PullRequestOrder: {
    direction: "OrderDirection!",
field: "PullRequestOrderField!"
  },
  ReactionOrder: {
    direction: "OrderDirection!",
field: "ReactionOrderField!"
  },
  RefOrder: {
    direction: "OrderDirection!",
field: "RefOrderField!"
  },
  RegenerateEnterpriseIdentityProviderRecoveryCodesInput: {
    clientMutationId: "String",
enterpriseId: "ID!"
  },
  RegenerateVerifiableDomainTokenInput: {
    clientMutationId: "String",
id: "ID!"
  },
  RejectDeploymentsInput: {
    clientMutationId: "String",
comment: "String",
environmentIds: "[ID!]!",
workflowRunId: "ID!"
  },
  ReleaseOrder: {
    direction: "OrderDirection!",
field: "ReleaseOrderField!"
  },
  RemoveAssigneesFromAssignableInput: {
    assignableId: "ID!",
assigneeIds: "[ID!]!",
clientMutationId: "String"
  },
  RemoveEnterpriseAdminInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
login: "String!"
  },
  RemoveEnterpriseIdentityProviderInput: {
    clientMutationId: "String",
enterpriseId: "ID!"
  },
  RemoveEnterpriseOrganizationInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
organizationId: "ID!"
  },
  RemoveEnterpriseSupportEntitlementInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
login: "String!"
  },
  RemoveLabelsFromLabelableInput: {
    clientMutationId: "String",
labelIds: "[ID!]!",
labelableId: "ID!"
  },
  RemoveOutsideCollaboratorInput: {
    clientMutationId: "String",
organizationId: "ID!",
userId: "ID!"
  },
  RemoveReactionInput: {
    clientMutationId: "String",
content: "ReactionContent!",
subjectId: "ID!"
  },
  RemoveStarInput: {
    clientMutationId: "String",
starrableId: "ID!"
  },
  RemoveUpvoteInput: {
    clientMutationId: "String",
subjectId: "ID!"
  },
  ReopenIssueInput: {
    clientMutationId: "String",
issueId: "ID!"
  },
  ReopenPullRequestInput: {
    clientMutationId: "String",
pullRequestId: "ID!"
  },
  RepositoryInvitationOrder: {
    direction: "OrderDirection!",
field: "RepositoryInvitationOrderField!"
  },
  RepositoryMigrationOrder: {
    direction: "RepositoryMigrationOrderDirection!",
field: "RepositoryMigrationOrderField!"
  },
  RepositoryOrder: {
    direction: "OrderDirection!",
field: "RepositoryOrderField!"
  },
  RequestReviewsInput: {
    clientMutationId: "String",
pullRequestId: "ID!",
teamIds: "[ID!]",
union: "Boolean",
userIds: "[ID!]"
  },
  RequiredStatusCheckInput: {
    appId: "ID",
context: "String!"
  },
  RerequestCheckSuiteInput: {
    checkSuiteId: "ID!",
clientMutationId: "String",
repositoryId: "ID!"
  },
  ResolveReviewThreadInput: {
    clientMutationId: "String",
threadId: "ID!"
  },
  RevokeEnterpriseOrganizationsMigratorRoleInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
login: "String!"
  },
  RevokeMigratorRoleInput: {
    actor: "String!",
actorType: "ActorType!",
clientMutationId: "String",
organizationId: "ID!"
  },
  SavedReplyOrder: {
    direction: "OrderDirection!",
field: "SavedReplyOrderField!"
  },
  SecurityAdvisoryIdentifierFilter: {
    type: "SecurityAdvisoryIdentifierType!",
value: "String!"
  },
  SecurityAdvisoryOrder: {
    direction: "OrderDirection!",
field: "SecurityAdvisoryOrderField!"
  },
  SecurityVulnerabilityOrder: {
    direction: "OrderDirection!",
field: "SecurityVulnerabilityOrderField!"
  },
  SetEnterpriseIdentityProviderInput: {
    clientMutationId: "String",
digestMethod: "SamlDigestAlgorithm!",
enterpriseId: "ID!",
idpCertificate: "String!",
issuer: "String",
signatureMethod: "SamlSignatureAlgorithm!",
ssoUrl: "URI!"
  },
  SetOrganizationInteractionLimitInput: {
    clientMutationId: "String",
expiry: "RepositoryInteractionLimitExpiry",
limit: "RepositoryInteractionLimit!",
organizationId: "ID!"
  },
  SetRepositoryInteractionLimitInput: {
    clientMutationId: "String",
expiry: "RepositoryInteractionLimitExpiry",
limit: "RepositoryInteractionLimit!",
repositoryId: "ID!"
  },
  SetUserInteractionLimitInput: {
    clientMutationId: "String",
expiry: "RepositoryInteractionLimitExpiry",
limit: "RepositoryInteractionLimit!",
userId: "ID!"
  },
  SponsorOrder: {
    direction: "OrderDirection!",
field: "SponsorOrderField!"
  },
  SponsorableOrder: {
    direction: "OrderDirection!",
field: "SponsorableOrderField!"
  },
  SponsorsActivityOrder: {
    direction: "OrderDirection!",
field: "SponsorsActivityOrderField!"
  },
  SponsorsTierOrder: {
    direction: "OrderDirection!",
field: "SponsorsTierOrderField!"
  },
  SponsorshipNewsletterOrder: {
    direction: "OrderDirection!",
field: "SponsorshipNewsletterOrderField!"
  },
  SponsorshipOrder: {
    direction: "OrderDirection!",
field: "SponsorshipOrderField!"
  },
  StarOrder: {
    direction: "OrderDirection!",
field: "StarOrderField!"
  },
  StartRepositoryMigrationInput: {
    accessToken: "String!",
clientMutationId: "String",
continueOnError: "Boolean",
gitArchiveUrl: "String",
githubPat: "String",
lockSource: "Boolean",
metadataArchiveUrl: "String",
ownerId: "ID!",
repositoryName: "String!",
skipReleases: "Boolean",
sourceId: "ID!",
sourceRepositoryUrl: "URI!",
targetRepoVisibility: "String"
  },
  SubmitPullRequestReviewInput: {
    body: "String",
clientMutationId: "String",
event: "PullRequestReviewEvent!",
pullRequestId: "ID",
pullRequestReviewId: "ID"
  },
  TeamDiscussionCommentOrder: {
    direction: "OrderDirection!",
field: "TeamDiscussionCommentOrderField!"
  },
  TeamDiscussionOrder: {
    direction: "OrderDirection!",
field: "TeamDiscussionOrderField!"
  },
  TeamMemberOrder: {
    direction: "OrderDirection!",
field: "TeamMemberOrderField!"
  },
  TeamOrder: {
    direction: "OrderDirection!",
field: "TeamOrderField!"
  },
  TeamRepositoryOrder: {
    direction: "OrderDirection!",
field: "TeamRepositoryOrderField!"
  },
  TransferIssueInput: {
    clientMutationId: "String",
createLabelsIfMissing: "Boolean",
issueId: "ID!",
repositoryId: "ID!"
  },
  UnarchiveRepositoryInput: {
    clientMutationId: "String",
repositoryId: "ID!"
  },
  UnfollowOrganizationInput: {
    clientMutationId: "String",
organizationId: "ID!"
  },
  UnfollowUserInput: {
    clientMutationId: "String",
userId: "ID!"
  },
  UnlinkRepositoryFromProjectInput: {
    clientMutationId: "String",
projectId: "ID!",
repositoryId: "ID!"
  },
  UnlockLockableInput: {
    clientMutationId: "String",
lockableId: "ID!"
  },
  UnmarkDiscussionCommentAsAnswerInput: {
    clientMutationId: "String",
id: "ID!"
  },
  UnmarkFileAsViewedInput: {
    clientMutationId: "String",
path: "String!",
pullRequestId: "ID!"
  },
  UnmarkIssueAsDuplicateInput: {
    canonicalId: "ID!",
clientMutationId: "String",
duplicateId: "ID!"
  },
  UnminimizeCommentInput: {
    clientMutationId: "String",
subjectId: "ID!"
  },
  UnpinIssueInput: {
    clientMutationId: "String",
issueId: "ID!"
  },
  UnresolveReviewThreadInput: {
    clientMutationId: "String",
threadId: "ID!"
  },
  UpdateBranchProtectionRuleInput: {
    allowsDeletions: "Boolean",
allowsForcePushes: "Boolean",
blocksCreations: "Boolean",
branchProtectionRuleId: "ID!",
bypassForcePushActorIds: "[ID!]",
bypassPullRequestActorIds: "[ID!]",
clientMutationId: "String",
dismissesStaleReviews: "Boolean",
isAdminEnforced: "Boolean",
lockAllowsFetchAndMerge: "Boolean",
lockBranch: "Boolean",
pattern: "String",
pushActorIds: "[ID!]",
requireLastPushApproval: "Boolean",
requiredApprovingReviewCount: "Int",
requiredStatusCheckContexts: "[String!]",
requiredStatusChecks: "[RequiredStatusCheckInput!]",
requiresApprovingReviews: "Boolean",
requiresCodeOwnerReviews: "Boolean",
requiresCommitSignatures: "Boolean",
requiresConversationResolution: "Boolean",
requiresLinearHistory: "Boolean",
requiresStatusChecks: "Boolean",
requiresStrictStatusChecks: "Boolean",
restrictsPushes: "Boolean",
restrictsReviewDismissals: "Boolean",
reviewDismissalActorIds: "[ID!]"
  },
  UpdateCheckRunInput: {
    actions: "[CheckRunAction!]",
checkRunId: "ID!",
clientMutationId: "String",
completedAt: "DateTime",
conclusion: "CheckConclusionState",
detailsUrl: "URI",
externalId: "String",
name: "String",
output: "CheckRunOutput",
repositoryId: "ID!",
startedAt: "DateTime",
status: "RequestableCheckStatusState"
  },
  UpdateCheckSuitePreferencesInput: {
    autoTriggerPreferences: "[CheckSuiteAutoTriggerPreference!]!",
clientMutationId: "String",
repositoryId: "ID!"
  },
  UpdateDiscussionCommentInput: {
    body: "String!",
clientMutationId: "String",
commentId: "ID!"
  },
  UpdateDiscussionInput: {
    body: "String",
categoryId: "ID",
clientMutationId: "String",
discussionId: "ID!",
title: "String"
  },
  UpdateEnterpriseAdministratorRoleInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
login: "String!",
role: "EnterpriseAdministratorRole!"
  },
  UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
policyValue: "EnterpriseAllowPrivateRepositoryForkingPolicyValue",
settingValue: "EnterpriseEnabledDisabledSettingValue!"
  },
  UpdateEnterpriseDefaultRepositoryPermissionSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
settingValue: "EnterpriseDefaultRepositoryPermissionSettingValue!"
  },
  UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
settingValue: "EnterpriseEnabledDisabledSettingValue!"
  },
  UpdateEnterpriseMembersCanCreateRepositoriesSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
membersCanCreateInternalRepositories: "Boolean",
membersCanCreatePrivateRepositories: "Boolean",
membersCanCreatePublicRepositories: "Boolean",
membersCanCreateRepositoriesPolicyEnabled: "Boolean",
settingValue: "EnterpriseMembersCanCreateRepositoriesSettingValue"
  },
  UpdateEnterpriseMembersCanDeleteIssuesSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
settingValue: "EnterpriseEnabledDisabledSettingValue!"
  },
  UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
settingValue: "EnterpriseEnabledDisabledSettingValue!"
  },
  UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
settingValue: "EnterpriseEnabledDisabledSettingValue!"
  },
  UpdateEnterpriseMembersCanMakePurchasesSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
settingValue: "EnterpriseMembersCanMakePurchasesSettingValue!"
  },
  UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
settingValue: "EnterpriseEnabledDisabledSettingValue!"
  },
  UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
settingValue: "EnterpriseEnabledDisabledSettingValue!"
  },
  UpdateEnterpriseOrganizationProjectsSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
settingValue: "EnterpriseEnabledDisabledSettingValue!"
  },
  UpdateEnterpriseOwnerOrganizationRoleInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
organizationId: "ID!",
organizationRole: "RoleInOrganization!"
  },
  UpdateEnterpriseProfileInput: {
    clientMutationId: "String",
description: "String",
enterpriseId: "ID!",
location: "String",
name: "String",
websiteUrl: "String"
  },
  UpdateEnterpriseRepositoryProjectsSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
settingValue: "EnterpriseEnabledDisabledSettingValue!"
  },
  UpdateEnterpriseTeamDiscussionsSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
settingValue: "EnterpriseEnabledDisabledSettingValue!"
  },
  UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput: {
    clientMutationId: "String",
enterpriseId: "ID!",
settingValue: "EnterpriseEnabledSettingValue!"
  },
  UpdateEnvironmentInput: {
    clientMutationId: "String",
environmentId: "ID!",
reviewers: "[ID!]",
waitTimer: "Int"
  },
  UpdateIpAllowListEnabledSettingInput: {
    clientMutationId: "String",
ownerId: "ID!",
settingValue: "IpAllowListEnabledSettingValue!"
  },
  UpdateIpAllowListEntryInput: {
    allowListValue: "String!",
clientMutationId: "String",
ipAllowListEntryId: "ID!",
isActive: "Boolean!",
name: "String"
  },
  UpdateIpAllowListForInstalledAppsEnabledSettingInput: {
    clientMutationId: "String",
ownerId: "ID!",
settingValue: "IpAllowListForInstalledAppsEnabledSettingValue!"
  },
  UpdateIssueCommentInput: {
    body: "String!",
clientMutationId: "String",
id: "ID!"
  },
  UpdateIssueInput: {
    assigneeIds: "[ID!]",
body: "String",
clientMutationId: "String",
id: "ID!",
labelIds: "[ID!]",
milestoneId: "ID",
projectIds: "[ID!]",
state: "IssueState",
title: "String"
  },
  UpdateNotificationRestrictionSettingInput: {
    clientMutationId: "String",
ownerId: "ID!",
settingValue: "NotificationRestrictionSettingValue!"
  },
  UpdateOrganizationAllowPrivateRepositoryForkingSettingInput: {
    clientMutationId: "String",
forkingEnabled: "Boolean!",
organizationId: "ID!"
  },
  UpdateOrganizationWebCommitSignoffSettingInput: {
    clientMutationId: "String",
organizationId: "ID!",
webCommitSignoffRequired: "Boolean!"
  },
  UpdateProjectCardInput: {
    clientMutationId: "String",
isArchived: "Boolean",
note: "String",
projectCardId: "ID!"
  },
  UpdateProjectColumnInput: {
    clientMutationId: "String",
name: "String!",
projectColumnId: "ID!"
  },
  UpdateProjectDraftIssueInput: {
    assigneeIds: "[ID!]",
body: "String",
clientMutationId: "String",
draftIssueId: "ID!",
title: "String"
  },
  UpdateProjectInput: {
    body: "String",
clientMutationId: "String",
name: "String",
projectId: "ID!",
public: "Boolean",
state: "ProjectState"
  },
  UpdateProjectNextInput: {
    clientMutationId: "String",
closed: "Boolean",
description: "String",
projectId: "ID",
public: "Boolean",
shortDescription: "String",
title: "String"
  },
  UpdateProjectNextItemFieldInput: {
    clientMutationId: "String",
fieldId: "ID",
itemId: "ID",
projectId: "ID",
value: "String"
  },
  UpdateProjectV2DraftIssueInput: {
    assigneeIds: "[ID!]",
body: "String",
clientMutationId: "String",
draftIssueId: "ID!",
title: "String"
  },
  UpdateProjectV2Input: {
    clientMutationId: "String",
closed: "Boolean",
projectId: "ID!",
public: "Boolean",
readme: "String",
shortDescription: "String",
title: "String"
  },
  UpdateProjectV2ItemFieldValueInput: {
    clientMutationId: "String",
fieldId: "ID!",
itemId: "ID!",
projectId: "ID!",
value: "ProjectV2FieldValue!"
  },
  UpdateProjectV2ItemPositionInput: {
    afterId: "ID",
clientMutationId: "String",
itemId: "ID!",
projectId: "ID!"
  },
  UpdatePullRequestBranchInput: {
    clientMutationId: "String",
expectedHeadOid: "GitObjectID",
pullRequestId: "ID!"
  },
  UpdatePullRequestInput: {
    assigneeIds: "[ID!]",
baseRefName: "String",
body: "String",
clientMutationId: "String",
labelIds: "[ID!]",
maintainerCanModify: "Boolean",
milestoneId: "ID",
projectIds: "[ID!]",
pullRequestId: "ID!",
state: "PullRequestUpdateState",
title: "String"
  },
  UpdatePullRequestReviewCommentInput: {
    body: "String!",
clientMutationId: "String",
pullRequestReviewCommentId: "ID!"
  },
  UpdatePullRequestReviewInput: {
    body: "String!",
clientMutationId: "String",
pullRequestReviewId: "ID!"
  },
  UpdateRefInput: {
    clientMutationId: "String",
force: "Boolean",
oid: "GitObjectID!",
refId: "ID!"
  },
  UpdateRepositoryInput: {
    clientMutationId: "String",
description: "String",
hasIssuesEnabled: "Boolean",
hasProjectsEnabled: "Boolean",
hasWikiEnabled: "Boolean",
homepageUrl: "URI",
name: "String",
repositoryId: "ID!",
template: "Boolean"
  },
  UpdateRepositoryWebCommitSignoffSettingInput: {
    clientMutationId: "String",
repositoryId: "ID!",
webCommitSignoffRequired: "Boolean!"
  },
  UpdateSponsorshipPreferencesInput: {
    clientMutationId: "String",
privacyLevel: "SponsorshipPrivacy",
receiveEmails: "Boolean",
sponsorId: "ID",
sponsorLogin: "String",
sponsorableId: "ID",
sponsorableLogin: "String"
  },
  UpdateSubscriptionInput: {
    clientMutationId: "String",
state: "SubscriptionState!",
subscribableId: "ID!"
  },
  UpdateTeamDiscussionCommentInput: {
    body: "String!",
bodyVersion: "String",
clientMutationId: "String",
id: "ID!"
  },
  UpdateTeamDiscussionInput: {
    body: "String",
bodyVersion: "String",
clientMutationId: "String",
id: "ID!",
pinned: "Boolean",
title: "String"
  },
  UpdateTeamsRepositoryInput: {
    clientMutationId: "String",
permission: "RepositoryPermission!",
repositoryId: "ID!",
teamIds: "[ID!]!"
  },
  UpdateTopicsInput: {
    clientMutationId: "String",
repositoryId: "ID!",
topicNames: "[String!]!"
  },
  UserStatusOrder: {
    direction: "OrderDirection!",
field: "UserStatusOrderField!"
  },
  VerifiableDomainOrder: {
    direction: "OrderDirection!",
field: "VerifiableDomainOrderField!"
  },
  VerifyVerifiableDomainInput: {
    clientMutationId: "String",
id: "ID!"
  },
  WorkflowRunOrder: {
    direction: "OrderDirection!",
field: "WorkflowRunOrderField!"
  }
}

